# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _fea
else:
    import _fea

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _fea.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fea.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _fea.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _fea.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _fea.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _fea.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _fea.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _fea.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _fea.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _fea.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _fea.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _fea.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _fea.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _fea.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _fea.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _fea.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _fea.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _fea.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _fea:
_fea.SwigPyIterator_swigregister(SwigPyIterator)

class vector_ChNodeFEAxyzrot(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_ChNodeFEAxyzrot self) -> SwigPyIterator"""
        return _fea.vector_ChNodeFEAxyzrot_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_ChNodeFEAxyzrot self) -> bool"""
        return _fea.vector_ChNodeFEAxyzrot___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_ChNodeFEAxyzrot self) -> bool"""
        return _fea.vector_ChNodeFEAxyzrot___bool__(self)

    def __len__(self):
        r"""__len__(vector_ChNodeFEAxyzrot self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::size_type"""
        return _fea.vector_ChNodeFEAxyzrot___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_ChNodeFEAxyzrot self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::difference_type j) -> vector_ChNodeFEAxyzrot"""
        return _fea.vector_ChNodeFEAxyzrot___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_ChNodeFEAxyzrot self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::difference_type j)
        __setslice__(vector_ChNodeFEAxyzrot self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::difference_type j, vector_ChNodeFEAxyzrot v)
        """
        return _fea.vector_ChNodeFEAxyzrot___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_ChNodeFEAxyzrot self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::difference_type j)"""
        return _fea.vector_ChNodeFEAxyzrot___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_ChNodeFEAxyzrot self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::difference_type i)
        __delitem__(vector_ChNodeFEAxyzrot self, PySliceObject * slice)
        """
        return _fea.vector_ChNodeFEAxyzrot___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_ChNodeFEAxyzrot self, PySliceObject * slice) -> vector_ChNodeFEAxyzrot
        __getitem__(vector_ChNodeFEAxyzrot self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::difference_type i) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::value_type const &
        """
        return _fea.vector_ChNodeFEAxyzrot___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_ChNodeFEAxyzrot self, PySliceObject * slice, vector_ChNodeFEAxyzrot v)
        __setitem__(vector_ChNodeFEAxyzrot self, PySliceObject * slice)
        __setitem__(vector_ChNodeFEAxyzrot self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::value_type const & x)
        """
        return _fea.vector_ChNodeFEAxyzrot___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_ChNodeFEAxyzrot self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::value_type"""
        return _fea.vector_ChNodeFEAxyzrot_pop(self)

    def append(self, x):
        r"""append(vector_ChNodeFEAxyzrot self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::value_type const & x)"""
        return _fea.vector_ChNodeFEAxyzrot_append(self, x)

    def empty(self):
        r"""empty(vector_ChNodeFEAxyzrot self) -> bool"""
        return _fea.vector_ChNodeFEAxyzrot_empty(self)

    def size(self):
        r"""size(vector_ChNodeFEAxyzrot self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::size_type"""
        return _fea.vector_ChNodeFEAxyzrot_size(self)

    def swap(self, v):
        r"""swap(vector_ChNodeFEAxyzrot self, vector_ChNodeFEAxyzrot v)"""
        return _fea.vector_ChNodeFEAxyzrot_swap(self, v)

    def begin(self):
        r"""begin(vector_ChNodeFEAxyzrot self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::iterator"""
        return _fea.vector_ChNodeFEAxyzrot_begin(self)

    def end(self):
        r"""end(vector_ChNodeFEAxyzrot self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::iterator"""
        return _fea.vector_ChNodeFEAxyzrot_end(self)

    def rbegin(self):
        r"""rbegin(vector_ChNodeFEAxyzrot self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::reverse_iterator"""
        return _fea.vector_ChNodeFEAxyzrot_rbegin(self)

    def rend(self):
        r"""rend(vector_ChNodeFEAxyzrot self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::reverse_iterator"""
        return _fea.vector_ChNodeFEAxyzrot_rend(self)

    def clear(self):
        r"""clear(vector_ChNodeFEAxyzrot self)"""
        return _fea.vector_ChNodeFEAxyzrot_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_ChNodeFEAxyzrot self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::allocator_type"""
        return _fea.vector_ChNodeFEAxyzrot_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_ChNodeFEAxyzrot self)"""
        return _fea.vector_ChNodeFEAxyzrot_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_ChNodeFEAxyzrot self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::iterator pos) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::iterator
        erase(vector_ChNodeFEAxyzrot self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::iterator first, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::iterator last) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::iterator
        """
        return _fea.vector_ChNodeFEAxyzrot_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_ChNodeFEAxyzrot self) -> vector_ChNodeFEAxyzrot
        __init__(vector_ChNodeFEAxyzrot self, vector_ChNodeFEAxyzrot other) -> vector_ChNodeFEAxyzrot
        __init__(vector_ChNodeFEAxyzrot self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::size_type size) -> vector_ChNodeFEAxyzrot
        __init__(vector_ChNodeFEAxyzrot self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::size_type size, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::value_type const & value) -> vector_ChNodeFEAxyzrot
        """
        _fea.vector_ChNodeFEAxyzrot_swiginit(self, _fea.new_vector_ChNodeFEAxyzrot(*args))

    def push_back(self, x):
        r"""push_back(vector_ChNodeFEAxyzrot self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::value_type const & x)"""
        return _fea.vector_ChNodeFEAxyzrot_push_back(self, x)

    def front(self):
        r"""front(vector_ChNodeFEAxyzrot self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::value_type const &"""
        return _fea.vector_ChNodeFEAxyzrot_front(self)

    def back(self):
        r"""back(vector_ChNodeFEAxyzrot self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::value_type const &"""
        return _fea.vector_ChNodeFEAxyzrot_back(self)

    def assign(self, n, x):
        r"""assign(vector_ChNodeFEAxyzrot self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::size_type n, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::value_type const & x)"""
        return _fea.vector_ChNodeFEAxyzrot_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_ChNodeFEAxyzrot self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::size_type new_size)
        resize(vector_ChNodeFEAxyzrot self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::size_type new_size, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::value_type const & x)
        """
        return _fea.vector_ChNodeFEAxyzrot_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_ChNodeFEAxyzrot self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::iterator pos, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::value_type const & x) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::iterator
        insert(vector_ChNodeFEAxyzrot self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::iterator pos, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::size_type n, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::value_type const & x)
        """
        return _fea.vector_ChNodeFEAxyzrot_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_ChNodeFEAxyzrot self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::size_type n)"""
        return _fea.vector_ChNodeFEAxyzrot_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_ChNodeFEAxyzrot self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > >::size_type"""
        return _fea.vector_ChNodeFEAxyzrot_capacity(self)
    __swig_destroy__ = _fea.delete_vector_ChNodeFEAxyzrot

# Register vector_ChNodeFEAxyzrot in _fea:
_fea.vector_ChNodeFEAxyzrot_swigregister(vector_ChNodeFEAxyzrot)

class vector_ChNodeFEAxyz(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_ChNodeFEAxyz self) -> SwigPyIterator"""
        return _fea.vector_ChNodeFEAxyz_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_ChNodeFEAxyz self) -> bool"""
        return _fea.vector_ChNodeFEAxyz___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_ChNodeFEAxyz self) -> bool"""
        return _fea.vector_ChNodeFEAxyz___bool__(self)

    def __len__(self):
        r"""__len__(vector_ChNodeFEAxyz self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::size_type"""
        return _fea.vector_ChNodeFEAxyz___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_ChNodeFEAxyz self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::difference_type j) -> vector_ChNodeFEAxyz"""
        return _fea.vector_ChNodeFEAxyz___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_ChNodeFEAxyz self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::difference_type j)
        __setslice__(vector_ChNodeFEAxyz self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::difference_type j, vector_ChNodeFEAxyz v)
        """
        return _fea.vector_ChNodeFEAxyz___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_ChNodeFEAxyz self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::difference_type j)"""
        return _fea.vector_ChNodeFEAxyz___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_ChNodeFEAxyz self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::difference_type i)
        __delitem__(vector_ChNodeFEAxyz self, PySliceObject * slice)
        """
        return _fea.vector_ChNodeFEAxyz___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_ChNodeFEAxyz self, PySliceObject * slice) -> vector_ChNodeFEAxyz
        __getitem__(vector_ChNodeFEAxyz self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::difference_type i) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::value_type const &
        """
        return _fea.vector_ChNodeFEAxyz___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_ChNodeFEAxyz self, PySliceObject * slice, vector_ChNodeFEAxyz v)
        __setitem__(vector_ChNodeFEAxyz self, PySliceObject * slice)
        __setitem__(vector_ChNodeFEAxyz self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::value_type const & x)
        """
        return _fea.vector_ChNodeFEAxyz___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_ChNodeFEAxyz self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::value_type"""
        return _fea.vector_ChNodeFEAxyz_pop(self)

    def append(self, x):
        r"""append(vector_ChNodeFEAxyz self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::value_type const & x)"""
        return _fea.vector_ChNodeFEAxyz_append(self, x)

    def empty(self):
        r"""empty(vector_ChNodeFEAxyz self) -> bool"""
        return _fea.vector_ChNodeFEAxyz_empty(self)

    def size(self):
        r"""size(vector_ChNodeFEAxyz self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::size_type"""
        return _fea.vector_ChNodeFEAxyz_size(self)

    def swap(self, v):
        r"""swap(vector_ChNodeFEAxyz self, vector_ChNodeFEAxyz v)"""
        return _fea.vector_ChNodeFEAxyz_swap(self, v)

    def begin(self):
        r"""begin(vector_ChNodeFEAxyz self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::iterator"""
        return _fea.vector_ChNodeFEAxyz_begin(self)

    def end(self):
        r"""end(vector_ChNodeFEAxyz self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::iterator"""
        return _fea.vector_ChNodeFEAxyz_end(self)

    def rbegin(self):
        r"""rbegin(vector_ChNodeFEAxyz self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::reverse_iterator"""
        return _fea.vector_ChNodeFEAxyz_rbegin(self)

    def rend(self):
        r"""rend(vector_ChNodeFEAxyz self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::reverse_iterator"""
        return _fea.vector_ChNodeFEAxyz_rend(self)

    def clear(self):
        r"""clear(vector_ChNodeFEAxyz self)"""
        return _fea.vector_ChNodeFEAxyz_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_ChNodeFEAxyz self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::allocator_type"""
        return _fea.vector_ChNodeFEAxyz_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_ChNodeFEAxyz self)"""
        return _fea.vector_ChNodeFEAxyz_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_ChNodeFEAxyz self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::iterator pos) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::iterator
        erase(vector_ChNodeFEAxyz self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::iterator first, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::iterator last) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::iterator
        """
        return _fea.vector_ChNodeFEAxyz_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_ChNodeFEAxyz self) -> vector_ChNodeFEAxyz
        __init__(vector_ChNodeFEAxyz self, vector_ChNodeFEAxyz other) -> vector_ChNodeFEAxyz
        __init__(vector_ChNodeFEAxyz self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::size_type size) -> vector_ChNodeFEAxyz
        __init__(vector_ChNodeFEAxyz self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::size_type size, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::value_type const & value) -> vector_ChNodeFEAxyz
        """
        _fea.vector_ChNodeFEAxyz_swiginit(self, _fea.new_vector_ChNodeFEAxyz(*args))

    def push_back(self, x):
        r"""push_back(vector_ChNodeFEAxyz self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::value_type const & x)"""
        return _fea.vector_ChNodeFEAxyz_push_back(self, x)

    def front(self):
        r"""front(vector_ChNodeFEAxyz self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::value_type const &"""
        return _fea.vector_ChNodeFEAxyz_front(self)

    def back(self):
        r"""back(vector_ChNodeFEAxyz self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::value_type const &"""
        return _fea.vector_ChNodeFEAxyz_back(self)

    def assign(self, n, x):
        r"""assign(vector_ChNodeFEAxyz self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::size_type n, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::value_type const & x)"""
        return _fea.vector_ChNodeFEAxyz_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_ChNodeFEAxyz self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::size_type new_size)
        resize(vector_ChNodeFEAxyz self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::size_type new_size, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::value_type const & x)
        """
        return _fea.vector_ChNodeFEAxyz_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_ChNodeFEAxyz self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::iterator pos, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::value_type const & x) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::iterator
        insert(vector_ChNodeFEAxyz self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::iterator pos, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::size_type n, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::value_type const & x)
        """
        return _fea.vector_ChNodeFEAxyz_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_ChNodeFEAxyz self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::size_type n)"""
        return _fea.vector_ChNodeFEAxyz_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_ChNodeFEAxyz self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyz > >::size_type"""
        return _fea.vector_ChNodeFEAxyz_capacity(self)
    __swig_destroy__ = _fea.delete_vector_ChNodeFEAxyz

# Register vector_ChNodeFEAxyz in _fea:
_fea.vector_ChNodeFEAxyz_swigregister(vector_ChNodeFEAxyz)

import pychrono.core
class LoadLoaderBeamWrench(pychrono.core.ChLoadBase):
    r"""Proxy of C++ chrono::ChLoad< chrono::fea::ChLoaderBeamWrench > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    loader = property(_fea.LoadLoaderBeamWrench_loader_get, _fea.LoadLoaderBeamWrench_loader_set, doc=r"""loader : chrono::fea::ChLoaderBeamWrench""")

    def __init__(self, mloadable):
        r"""__init__(LoadLoaderBeamWrench self, std::shared_ptr< chrono::ChLoaderU::type_loadable > mloadable) -> LoadLoaderBeamWrench"""
        _fea.LoadLoaderBeamWrench_swiginit(self, _fea.new_LoadLoaderBeamWrench(mloadable))
    __swig_destroy__ = _fea.delete_LoadLoaderBeamWrench

    def Clone(self):
        r"""Clone(LoadLoaderBeamWrench self) -> LoadLoaderBeamWrench"""
        return _fea.LoadLoaderBeamWrench_Clone(self)

    def LoadGet_ndof_x(self):
        r"""LoadGet_ndof_x(LoadLoaderBeamWrench self) -> int"""
        return _fea.LoadLoaderBeamWrench_LoadGet_ndof_x(self)

    def LoadGet_ndof_w(self):
        r"""LoadGet_ndof_w(LoadLoaderBeamWrench self) -> int"""
        return _fea.LoadLoaderBeamWrench_LoadGet_ndof_w(self)

    def LoadGetStateBlock_x(self, mD):
        r"""LoadGetStateBlock_x(LoadLoaderBeamWrench self, chrono::ChState & mD)"""
        return _fea.LoadLoaderBeamWrench_LoadGetStateBlock_x(self, mD)

    def LoadGetStateBlock_w(self, mD):
        r"""LoadGetStateBlock_w(LoadLoaderBeamWrench self, chrono::ChStateDelta & mD)"""
        return _fea.LoadLoaderBeamWrench_LoadGetStateBlock_w(self, mD)

    def LoadStateIncrement(self, x, dw, x_new):
        r"""LoadStateIncrement(LoadLoaderBeamWrench self, chrono::ChState const & x, chrono::ChStateDelta const & dw, chrono::ChState & x_new)"""
        return _fea.LoadLoaderBeamWrench_LoadStateIncrement(self, x, dw, x_new)

    def LoadGet_field_ncoords(self):
        r"""LoadGet_field_ncoords(LoadLoaderBeamWrench self) -> int"""
        return _fea.LoadLoaderBeamWrench_LoadGet_field_ncoords(self)

    def ComputeQ(self, state_x, state_w):
        r"""ComputeQ(LoadLoaderBeamWrench self, chrono::ChState * state_x, chrono::ChStateDelta * state_w)"""
        return _fea.LoadLoaderBeamWrench_ComputeQ(self, state_x, state_w)

    def LoadIntLoadResidual_F(self, R, c):
        r"""LoadIntLoadResidual_F(LoadLoaderBeamWrench self, ChVectorDynamicD R, double const c)"""
        return _fea.LoadLoaderBeamWrench_LoadIntLoadResidual_F(self, R, c)

    def IsStiff(self):
        r"""IsStiff(LoadLoaderBeamWrench self) -> bool"""
        return _fea.LoadLoaderBeamWrench_IsStiff(self)

    def CreateJacobianMatrices(self):
        r"""CreateJacobianMatrices(LoadLoaderBeamWrench self)"""
        return _fea.LoadLoaderBeamWrench_CreateJacobianMatrices(self)

# Register LoadLoaderBeamWrench in _fea:
_fea.LoadLoaderBeamWrench_swigregister(LoadLoaderBeamWrench)

class LoadLoaderBeamWrenchDistributed(pychrono.core.ChLoadBase):
    r"""Proxy of C++ chrono::ChLoad< chrono::fea::ChLoaderBeamWrenchDistributed > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    loader = property(_fea.LoadLoaderBeamWrenchDistributed_loader_get, _fea.LoadLoaderBeamWrenchDistributed_loader_set, doc=r"""loader : chrono::fea::ChLoaderBeamWrenchDistributed""")

    def __init__(self, mloadable):
        r"""__init__(LoadLoaderBeamWrenchDistributed self, std::shared_ptr< chrono::ChLoaderU::type_loadable > mloadable) -> LoadLoaderBeamWrenchDistributed"""
        _fea.LoadLoaderBeamWrenchDistributed_swiginit(self, _fea.new_LoadLoaderBeamWrenchDistributed(mloadable))
    __swig_destroy__ = _fea.delete_LoadLoaderBeamWrenchDistributed

    def Clone(self):
        r"""Clone(LoadLoaderBeamWrenchDistributed self) -> LoadLoaderBeamWrenchDistributed"""
        return _fea.LoadLoaderBeamWrenchDistributed_Clone(self)

    def LoadGet_ndof_x(self):
        r"""LoadGet_ndof_x(LoadLoaderBeamWrenchDistributed self) -> int"""
        return _fea.LoadLoaderBeamWrenchDistributed_LoadGet_ndof_x(self)

    def LoadGet_ndof_w(self):
        r"""LoadGet_ndof_w(LoadLoaderBeamWrenchDistributed self) -> int"""
        return _fea.LoadLoaderBeamWrenchDistributed_LoadGet_ndof_w(self)

    def LoadGetStateBlock_x(self, mD):
        r"""LoadGetStateBlock_x(LoadLoaderBeamWrenchDistributed self, chrono::ChState & mD)"""
        return _fea.LoadLoaderBeamWrenchDistributed_LoadGetStateBlock_x(self, mD)

    def LoadGetStateBlock_w(self, mD):
        r"""LoadGetStateBlock_w(LoadLoaderBeamWrenchDistributed self, chrono::ChStateDelta & mD)"""
        return _fea.LoadLoaderBeamWrenchDistributed_LoadGetStateBlock_w(self, mD)

    def LoadStateIncrement(self, x, dw, x_new):
        r"""LoadStateIncrement(LoadLoaderBeamWrenchDistributed self, chrono::ChState const & x, chrono::ChStateDelta const & dw, chrono::ChState & x_new)"""
        return _fea.LoadLoaderBeamWrenchDistributed_LoadStateIncrement(self, x, dw, x_new)

    def LoadGet_field_ncoords(self):
        r"""LoadGet_field_ncoords(LoadLoaderBeamWrenchDistributed self) -> int"""
        return _fea.LoadLoaderBeamWrenchDistributed_LoadGet_field_ncoords(self)

    def ComputeQ(self, state_x, state_w):
        r"""ComputeQ(LoadLoaderBeamWrenchDistributed self, chrono::ChState * state_x, chrono::ChStateDelta * state_w)"""
        return _fea.LoadLoaderBeamWrenchDistributed_ComputeQ(self, state_x, state_w)

    def LoadIntLoadResidual_F(self, R, c):
        r"""LoadIntLoadResidual_F(LoadLoaderBeamWrenchDistributed self, ChVectorDynamicD R, double const c)"""
        return _fea.LoadLoaderBeamWrenchDistributed_LoadIntLoadResidual_F(self, R, c)

    def IsStiff(self):
        r"""IsStiff(LoadLoaderBeamWrenchDistributed self) -> bool"""
        return _fea.LoadLoaderBeamWrenchDistributed_IsStiff(self)

    def CreateJacobianMatrices(self):
        r"""CreateJacobianMatrices(LoadLoaderBeamWrenchDistributed self)"""
        return _fea.LoadLoaderBeamWrenchDistributed_CreateJacobianMatrices(self)

# Register LoadLoaderBeamWrenchDistributed in _fea:
_fea.LoadLoaderBeamWrenchDistributed_swigregister(LoadLoaderBeamWrenchDistributed)

class ChContinuumMaterial(object):
    r"""Proxy of C++ chrono::fea::ChContinuumMaterial class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChContinuumMaterial self, double mdensity=1000) -> ChContinuumMaterial
        __init__(ChContinuumMaterial self, ChContinuumMaterial other) -> ChContinuumMaterial
        """
        _fea.ChContinuumMaterial_swiginit(self, _fea.new_ChContinuumMaterial(*args))
    __swig_destroy__ = _fea.delete_ChContinuumMaterial

    def Set_density(self, m_density):
        r"""Set_density(ChContinuumMaterial self, double m_density)"""
        return _fea.ChContinuumMaterial_Set_density(self, m_density)

    def Get_density(self):
        r"""Get_density(ChContinuumMaterial self) -> double"""
        return _fea.ChContinuumMaterial_Get_density(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChContinuumMaterial self, ChArchiveOut & marchive)"""
        return _fea.ChContinuumMaterial_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChContinuumMaterial self, chrono::ChArchiveIn & marchive)"""
        return _fea.ChContinuumMaterial_ArchiveIN(self, marchive)

# Register ChContinuumMaterial in _fea:
_fea.ChContinuumMaterial_swigregister(ChContinuumMaterial)

class ChContinuumElastic(ChContinuumMaterial):
    r"""Proxy of C++ chrono::fea::ChContinuumElastic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChContinuumElastic self, double myoung=10000000, double mpoisson=0.4, double mdensity=1000) -> ChContinuumElastic
        __init__(ChContinuumElastic self, ChContinuumElastic other) -> ChContinuumElastic
        """
        _fea.ChContinuumElastic_swiginit(self, _fea.new_ChContinuumElastic(*args))
    __swig_destroy__ = _fea.delete_ChContinuumElastic

    def Set_E(self, m_E):
        r"""Set_E(ChContinuumElastic self, double m_E)"""
        return _fea.ChContinuumElastic_Set_E(self, m_E)

    def Get_E(self):
        r"""Get_E(ChContinuumElastic self) -> double"""
        return _fea.ChContinuumElastic_Get_E(self)

    def Set_v(self, m_v):
        r"""Set_v(ChContinuumElastic self, double m_v)"""
        return _fea.ChContinuumElastic_Set_v(self, m_v)

    def Get_v(self):
        r"""Get_v(ChContinuumElastic self) -> double"""
        return _fea.ChContinuumElastic_Get_v(self)

    def Set_G(self, m_G):
        r"""Set_G(ChContinuumElastic self, double m_G)"""
        return _fea.ChContinuumElastic_Set_G(self, m_G)

    def Get_G(self):
        r"""Get_G(ChContinuumElastic self) -> double"""
        return _fea.ChContinuumElastic_Get_G(self)

    def Get_l(self):
        r"""Get_l(ChContinuumElastic self) -> double"""
        return _fea.ChContinuumElastic_Get_l(self)

    def Get_BulkModulus(self):
        r"""Get_BulkModulus(ChContinuumElastic self) -> double"""
        return _fea.ChContinuumElastic_Get_BulkModulus(self)

    def Get_WaveModulus(self):
        r"""Get_WaveModulus(ChContinuumElastic self) -> double"""
        return _fea.ChContinuumElastic_Get_WaveModulus(self)

    def ComputeStressStrainMatrix(self):
        r"""ComputeStressStrainMatrix(ChContinuumElastic self)"""
        return _fea.ChContinuumElastic_ComputeStressStrainMatrix(self)

    def Get_StressStrainMatrix(self):
        r"""Get_StressStrainMatrix(ChContinuumElastic self) -> ChMatrixDynamicD"""
        return _fea.ChContinuumElastic_Get_StressStrainMatrix(self)

    def ComputeElasticStress(self, mstress, mstrain):
        r"""ComputeElasticStress(ChContinuumElastic self, ChStressTensor< > & mstress, ChStrainTensor< > const & mstrain)"""
        return _fea.ChContinuumElastic_ComputeElasticStress(self, mstress, mstrain)

    def ComputeElasticStrain(self, mstrain, mstress):
        r"""ComputeElasticStrain(ChContinuumElastic self, ChStrainTensor< > & mstrain, ChStressTensor< > const & mstress)"""
        return _fea.ChContinuumElastic_ComputeElasticStrain(self, mstrain, mstress)

    def Set_RayleighDampingM(self, m_d):
        r"""Set_RayleighDampingM(ChContinuumElastic self, double m_d)"""
        return _fea.ChContinuumElastic_Set_RayleighDampingM(self, m_d)

    def Get_RayleighDampingM(self):
        r"""Get_RayleighDampingM(ChContinuumElastic self) -> double"""
        return _fea.ChContinuumElastic_Get_RayleighDampingM(self)

    def Set_RayleighDampingK(self, m_d):
        r"""Set_RayleighDampingK(ChContinuumElastic self, double m_d)"""
        return _fea.ChContinuumElastic_Set_RayleighDampingK(self, m_d)

    def Get_RayleighDampingK(self):
        r"""Get_RayleighDampingK(ChContinuumElastic self) -> double"""
        return _fea.ChContinuumElastic_Get_RayleighDampingK(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChContinuumElastic self, ChArchiveOut & marchive)"""
        return _fea.ChContinuumElastic_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChContinuumElastic self, chrono::ChArchiveIn & marchive)"""
        return _fea.ChContinuumElastic_ArchiveIN(self, marchive)

# Register ChContinuumElastic in _fea:
_fea.ChContinuumElastic_swigregister(ChContinuumElastic)

class ChContinuumElastoplastic(ChContinuumElastic):
    r"""Proxy of C++ chrono::fea::ChContinuumElastoplastic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def ComputeYeldFunction(self, mstress):
        r"""ComputeYeldFunction(ChContinuumElastoplastic self, ChStressTensor< > const & mstress) -> double"""
        return _fea.ChContinuumElastoplastic_ComputeYeldFunction(self, mstress)

    def ComputePlasticStrainFlow(self, mplasticstrainflow, mtotstrain):
        r"""ComputePlasticStrainFlow(ChContinuumElastoplastic self, ChStrainTensor< > & mplasticstrainflow, ChStrainTensor< > const & mtotstrain)"""
        return _fea.ChContinuumElastoplastic_ComputePlasticStrainFlow(self, mplasticstrainflow, mtotstrain)

    def ComputeReturnMapping(self, mplasticstrainflow, mincrementstrain, mlastelasticstrain, mlastplasticstrain):
        r"""ComputeReturnMapping(ChContinuumElastoplastic self, ChStrainTensor< > & mplasticstrainflow, ChStrainTensor< > const & mincrementstrain, ChStrainTensor< > const & mlastelasticstrain, ChStrainTensor< > const & mlastplasticstrain)"""
        return _fea.ChContinuumElastoplastic_ComputeReturnMapping(self, mplasticstrainflow, mincrementstrain, mlastelasticstrain, mlastplasticstrain)

    def Set_flow_rate(self, mflow_rate):
        r"""Set_flow_rate(ChContinuumElastoplastic self, double mflow_rate)"""
        return _fea.ChContinuumElastoplastic_Set_flow_rate(self, mflow_rate)

    def Get_flow_rate(self):
        r"""Get_flow_rate(ChContinuumElastoplastic self) -> double"""
        return _fea.ChContinuumElastoplastic_Get_flow_rate(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChContinuumElastoplastic self, ChArchiveOut & marchive)"""
        return _fea.ChContinuumElastoplastic_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChContinuumElastoplastic self, chrono::ChArchiveIn & marchive)"""
        return _fea.ChContinuumElastoplastic_ArchiveIN(self, marchive)
    __swig_destroy__ = _fea.delete_ChContinuumElastoplastic

# Register ChContinuumElastoplastic in _fea:
_fea.ChContinuumElastoplastic_swigregister(ChContinuumElastoplastic)

class ChContinuumPlasticVonMises(ChContinuumElastoplastic):
    r"""Proxy of C++ chrono::fea::ChContinuumPlasticVonMises class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChContinuumPlasticVonMises self, double myoung=10000000, double mpoisson=0.4, double mdensity=1000, double melastic_yeld=0.1, double mplastic_yeld=0.2) -> ChContinuumPlasticVonMises
        __init__(ChContinuumPlasticVonMises self, ChContinuumPlasticVonMises other) -> ChContinuumPlasticVonMises
        """
        _fea.ChContinuumPlasticVonMises_swiginit(self, _fea.new_ChContinuumPlasticVonMises(*args))
    __swig_destroy__ = _fea.delete_ChContinuumPlasticVonMises

    def Set_elastic_yeld(self, melastic_yeld):
        r"""Set_elastic_yeld(ChContinuumPlasticVonMises self, double melastic_yeld)"""
        return _fea.ChContinuumPlasticVonMises_Set_elastic_yeld(self, melastic_yeld)

    def Get_elastic_yeld(self):
        r"""Get_elastic_yeld(ChContinuumPlasticVonMises self) -> double"""
        return _fea.ChContinuumPlasticVonMises_Get_elastic_yeld(self)

    def Set_plastic_yeld(self, mplastic_yeld):
        r"""Set_plastic_yeld(ChContinuumPlasticVonMises self, double mplastic_yeld)"""
        return _fea.ChContinuumPlasticVonMises_Set_plastic_yeld(self, mplastic_yeld)

    def Get_plastic_yeld(self):
        r"""Get_plastic_yeld(ChContinuumPlasticVonMises self) -> double"""
        return _fea.ChContinuumPlasticVonMises_Get_plastic_yeld(self)

    def Set_flow_rate(self, mflow_rate):
        r"""Set_flow_rate(ChContinuumPlasticVonMises self, double mflow_rate)"""
        return _fea.ChContinuumPlasticVonMises_Set_flow_rate(self, mflow_rate)

    def Get_flow_rate(self):
        r"""Get_flow_rate(ChContinuumPlasticVonMises self) -> double"""
        return _fea.ChContinuumPlasticVonMises_Get_flow_rate(self)

    def ComputeYeldFunction(self, mstress):
        r"""ComputeYeldFunction(ChContinuumPlasticVonMises self, ChStressTensor< > const & mstress) -> double"""
        return _fea.ChContinuumPlasticVonMises_ComputeYeldFunction(self, mstress)

    def ComputeReturnMapping(self, mplasticstrainflow, mincrementstrain, mlastelasticstrain, mlastplasticstrain):
        r"""ComputeReturnMapping(ChContinuumPlasticVonMises self, ChStrainTensor< > & mplasticstrainflow, ChStrainTensor< > const & mincrementstrain, ChStrainTensor< > const & mlastelasticstrain, ChStrainTensor< > const & mlastplasticstrain)"""
        return _fea.ChContinuumPlasticVonMises_ComputeReturnMapping(self, mplasticstrainflow, mincrementstrain, mlastelasticstrain, mlastplasticstrain)

    def ComputePlasticStrainFlow(self, mplasticstrainflow, mestrain):
        r"""ComputePlasticStrainFlow(ChContinuumPlasticVonMises self, ChStrainTensor< > & mplasticstrainflow, ChStrainTensor< > const & mestrain)"""
        return _fea.ChContinuumPlasticVonMises_ComputePlasticStrainFlow(self, mplasticstrainflow, mestrain)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChContinuumPlasticVonMises self, ChArchiveOut & marchive)"""
        return _fea.ChContinuumPlasticVonMises_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChContinuumPlasticVonMises self, chrono::ChArchiveIn & marchive)"""
        return _fea.ChContinuumPlasticVonMises_ArchiveIN(self, marchive)

# Register ChContinuumPlasticVonMises in _fea:
_fea.ChContinuumPlasticVonMises_swigregister(ChContinuumPlasticVonMises)

class ChContinuumDruckerPrager(ChContinuumElastoplastic):
    r"""Proxy of C++ chrono::fea::ChContinuumDruckerPrager class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChContinuumDruckerPrager self, double myoung=10000000, double mpoisson=0.4, double mdensity=1000, double melastic_yeld=0.1, double malpha=0.5, double mdilatancy=0) -> ChContinuumDruckerPrager
        __init__(ChContinuumDruckerPrager self, ChContinuumDruckerPrager other) -> ChContinuumDruckerPrager
        """
        _fea.ChContinuumDruckerPrager_swiginit(self, _fea.new_ChContinuumDruckerPrager(*args))
    __swig_destroy__ = _fea.delete_ChContinuumDruckerPrager

    def Set_elastic_yeld(self, melastic_yeld):
        r"""Set_elastic_yeld(ChContinuumDruckerPrager self, double melastic_yeld)"""
        return _fea.ChContinuumDruckerPrager_Set_elastic_yeld(self, melastic_yeld)

    def Get_elastic_yeld(self):
        r"""Get_elastic_yeld(ChContinuumDruckerPrager self) -> double"""
        return _fea.ChContinuumDruckerPrager_Get_elastic_yeld(self)

    def Set_alpha(self, malpha):
        r"""Set_alpha(ChContinuumDruckerPrager self, double malpha)"""
        return _fea.ChContinuumDruckerPrager_Set_alpha(self, malpha)

    def Get_alpha(self):
        r"""Get_alpha(ChContinuumDruckerPrager self) -> double"""
        return _fea.ChContinuumDruckerPrager_Get_alpha(self)

    def Set_from_MohrCoulomb(self, phi, cohesion, inner_approx=True):
        r"""Set_from_MohrCoulomb(ChContinuumDruckerPrager self, double phi, double cohesion, bool inner_approx=True)"""
        return _fea.ChContinuumDruckerPrager_Set_from_MohrCoulomb(self, phi, cohesion, inner_approx)

    def Set_flow_rate(self, mflow_rate):
        r"""Set_flow_rate(ChContinuumDruckerPrager self, double mflow_rate)"""
        return _fea.ChContinuumDruckerPrager_Set_flow_rate(self, mflow_rate)

    def Get_flow_rate(self):
        r"""Get_flow_rate(ChContinuumDruckerPrager self) -> double"""
        return _fea.ChContinuumDruckerPrager_Get_flow_rate(self)

    def Set_dilatancy(self, mdilatancy):
        r"""Set_dilatancy(ChContinuumDruckerPrager self, double mdilatancy)"""
        return _fea.ChContinuumDruckerPrager_Set_dilatancy(self, mdilatancy)

    def Get_dilatancy(self):
        r"""Get_dilatancy(ChContinuumDruckerPrager self) -> double"""
        return _fea.ChContinuumDruckerPrager_Get_dilatancy(self)

    def Set_hardening_limit(self, mhl):
        r"""Set_hardening_limit(ChContinuumDruckerPrager self, double mhl)"""
        return _fea.ChContinuumDruckerPrager_Set_hardening_limit(self, mhl)

    def Get_hardening_limit(self):
        r"""Get_hardening_limit(ChContinuumDruckerPrager self) -> double"""
        return _fea.ChContinuumDruckerPrager_Get_hardening_limit(self)

    def Set_hardening_speed(self, mhl):
        r"""Set_hardening_speed(ChContinuumDruckerPrager self, double mhl)"""
        return _fea.ChContinuumDruckerPrager_Set_hardening_speed(self, mhl)

    def Get_hardening_speed(self):
        r"""Get_hardening_speed(ChContinuumDruckerPrager self) -> double"""
        return _fea.ChContinuumDruckerPrager_Get_hardening_speed(self)

    def ComputeYeldFunction(self, mstress):
        r"""ComputeYeldFunction(ChContinuumDruckerPrager self, ChStressTensor< > const & mstress) -> double"""
        return _fea.ChContinuumDruckerPrager_ComputeYeldFunction(self, mstress)

    def ComputeReturnMapping(self, mplasticstrainflow, mincrementstrain, mlastelasticstrain, mlastplasticstrain):
        r"""ComputeReturnMapping(ChContinuumDruckerPrager self, ChStrainTensor< > & mplasticstrainflow, ChStrainTensor< > const & mincrementstrain, ChStrainTensor< > const & mlastelasticstrain, ChStrainTensor< > const & mlastplasticstrain)"""
        return _fea.ChContinuumDruckerPrager_ComputeReturnMapping(self, mplasticstrainflow, mincrementstrain, mlastelasticstrain, mlastplasticstrain)

    def ComputePlasticStrainFlow(self, mplasticstrainflow, mestrain):
        r"""ComputePlasticStrainFlow(ChContinuumDruckerPrager self, ChStrainTensor< > & mplasticstrainflow, ChStrainTensor< > const & mestrain)"""
        return _fea.ChContinuumDruckerPrager_ComputePlasticStrainFlow(self, mplasticstrainflow, mestrain)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChContinuumDruckerPrager self, ChArchiveOut & marchive)"""
        return _fea.ChContinuumDruckerPrager_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChContinuumDruckerPrager self, chrono::ChArchiveIn & marchive)"""
        return _fea.ChContinuumDruckerPrager_ArchiveIN(self, marchive)

# Register ChContinuumDruckerPrager in _fea:
_fea.ChContinuumDruckerPrager_swigregister(ChContinuumDruckerPrager)

class ChNodeFEAbase(pychrono.core.ChNodeBase):
    r"""Proxy of C++ chrono::fea::ChNodeFEAbase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Relax(self):
        r"""Relax(ChNodeFEAbase self)"""
        return _fea.ChNodeFEAbase_Relax(self)

    def SetNoSpeedNoAcceleration(self):
        r"""SetNoSpeedNoAcceleration(ChNodeFEAbase self)"""
        return _fea.ChNodeFEAbase_SetNoSpeedNoAcceleration(self)

    def SetFixed(self, mev):
        r"""SetFixed(ChNodeFEAbase self, bool mev)"""
        return _fea.ChNodeFEAbase_SetFixed(self, mev)

    def GetFixed(self):
        r"""GetFixed(ChNodeFEAbase self) -> bool"""
        return _fea.ChNodeFEAbase_GetFixed(self)

    def SetIndex(self, mindex):
        r"""SetIndex(ChNodeFEAbase self, unsigned int mindex)"""
        return _fea.ChNodeFEAbase_SetIndex(self, mindex)

    def GetIndex(self):
        r"""GetIndex(ChNodeFEAbase self) -> unsigned int"""
        return _fea.ChNodeFEAbase_GetIndex(self)
    m_TotalMass = property(_fea.ChNodeFEAbase_m_TotalMass_get, _fea.ChNodeFEAbase_m_TotalMass_set, doc=r"""m_TotalMass : double""")
    __swig_destroy__ = _fea.delete_ChNodeFEAbase

# Register ChNodeFEAbase in _fea:
_fea.ChNodeFEAbase_swigregister(ChNodeFEAbase)

class ChNodeFEAxyz(ChNodeFEAbase, pychrono.core.ChNodeXYZ):
    r"""Proxy of C++ chrono::fea::ChNodeFEAxyz class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChNodeFEAxyz self, ChVectorD initial_pos=VNULL) -> ChNodeFEAxyz
        __init__(ChNodeFEAxyz self, ChNodeFEAxyz other) -> ChNodeFEAxyz
        """
        _fea.ChNodeFEAxyz_swiginit(self, _fea.new_ChNodeFEAxyz(*args))
    __swig_destroy__ = _fea.delete_ChNodeFEAxyz

    def Variables(self):
        r"""Variables(ChNodeFEAxyz self) -> ChVariablesNode &"""
        return _fea.ChNodeFEAxyz_Variables(self)

    def Relax(self):
        r"""Relax(ChNodeFEAxyz self)"""
        return _fea.ChNodeFEAxyz_Relax(self)

    def SetNoSpeedNoAcceleration(self):
        r"""SetNoSpeedNoAcceleration(ChNodeFEAxyz self)"""
        return _fea.ChNodeFEAxyz_SetNoSpeedNoAcceleration(self)

    def SetFixed(self, mev):
        r"""SetFixed(ChNodeFEAxyz self, bool mev)"""
        return _fea.ChNodeFEAxyz_SetFixed(self, mev)

    def GetFixed(self):
        r"""GetFixed(ChNodeFEAxyz self) -> bool"""
        return _fea.ChNodeFEAxyz_GetFixed(self)

    def GetMass(self):
        r"""GetMass(ChNodeFEAxyz self) -> double"""
        return _fea.ChNodeFEAxyz_GetMass(self)

    def SetMass(self, mm):
        r"""SetMass(ChNodeFEAxyz self, double mm)"""
        return _fea.ChNodeFEAxyz_SetMass(self, mm)

    def SetX0(self, mx):
        r"""SetX0(ChNodeFEAxyz self, ChVectorD mx)"""
        return _fea.ChNodeFEAxyz_SetX0(self, mx)

    def GetX0(self):
        r"""GetX0(ChNodeFEAxyz self) -> ChVectorD"""
        return _fea.ChNodeFEAxyz_GetX0(self)

    def SetForce(self, mf):
        r"""SetForce(ChNodeFEAxyz self, ChVectorD mf)"""
        return _fea.ChNodeFEAxyz_SetForce(self, mf)

    def GetForce(self):
        r"""GetForce(ChNodeFEAxyz self) -> ChVectorD"""
        return _fea.ChNodeFEAxyz_GetForce(self)

    def Get_ndof_x(self):
        r"""Get_ndof_x(ChNodeFEAxyz self) -> int"""
        return _fea.ChNodeFEAxyz_Get_ndof_x(self)

    def GetVariables1(self):
        r"""GetVariables1(ChNodeFEAxyz self) -> ChVariables *"""
        return _fea.ChNodeFEAxyz_GetVariables1(self)

    def NodeIntStateGather(self, off_x, x, off_v, v, T):
        r"""NodeIntStateGather(ChNodeFEAxyz self, unsigned int const off_x, chrono::ChState & x, unsigned int const off_v, chrono::ChStateDelta & v, double & T)"""
        return _fea.ChNodeFEAxyz_NodeIntStateGather(self, off_x, x, off_v, v, T)

    def NodeIntStateScatter(self, off_x, x, off_v, v, T):
        r"""NodeIntStateScatter(ChNodeFEAxyz self, unsigned int const off_x, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & v, double const T)"""
        return _fea.ChNodeFEAxyz_NodeIntStateScatter(self, off_x, x, off_v, v, T)

    def NodeIntStateGatherAcceleration(self, off_a, a):
        r"""NodeIntStateGatherAcceleration(ChNodeFEAxyz self, unsigned int const off_a, chrono::ChStateDelta & a)"""
        return _fea.ChNodeFEAxyz_NodeIntStateGatherAcceleration(self, off_a, a)

    def NodeIntStateScatterAcceleration(self, off_a, a):
        r"""NodeIntStateScatterAcceleration(ChNodeFEAxyz self, unsigned int const off_a, chrono::ChStateDelta const & a)"""
        return _fea.ChNodeFEAxyz_NodeIntStateScatterAcceleration(self, off_a, a)

    def NodeIntStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""NodeIntStateIncrement(ChNodeFEAxyz self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChNodeFEAxyz_NodeIntStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def NodeIntLoadResidual_F(self, off, R, c):
        r"""NodeIntLoadResidual_F(ChNodeFEAxyz self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _fea.ChNodeFEAxyz_NodeIntLoadResidual_F(self, off, R, c)

    def NodeIntLoadResidual_Mv(self, off, R, w, c):
        r"""NodeIntLoadResidual_Mv(ChNodeFEAxyz self, unsigned int const off, ChVectorDynamicD R, ChVectorDynamicD w, double const c)"""
        return _fea.ChNodeFEAxyz_NodeIntLoadResidual_Mv(self, off, R, w, c)

    def NodeIntToDescriptor(self, off_v, v, R):
        r"""NodeIntToDescriptor(ChNodeFEAxyz self, unsigned int const off_v, chrono::ChStateDelta const & v, ChVectorDynamicD R)"""
        return _fea.ChNodeFEAxyz_NodeIntToDescriptor(self, off_v, v, R)

    def NodeIntFromDescriptor(self, off_v, v):
        r"""NodeIntFromDescriptor(ChNodeFEAxyz self, unsigned int const off_v, chrono::ChStateDelta & v)"""
        return _fea.ChNodeFEAxyz_NodeIntFromDescriptor(self, off_v, v)

    def InjectVariables(self, mdescriptor):
        r"""InjectVariables(ChNodeFEAxyz self, ChSystemDescriptor & mdescriptor)"""
        return _fea.ChNodeFEAxyz_InjectVariables(self, mdescriptor)

    def VariablesFbReset(self):
        r"""VariablesFbReset(ChNodeFEAxyz self)"""
        return _fea.ChNodeFEAxyz_VariablesFbReset(self)

    def VariablesFbLoadForces(self, factor=1):
        r"""VariablesFbLoadForces(ChNodeFEAxyz self, double factor=1)"""
        return _fea.ChNodeFEAxyz_VariablesFbLoadForces(self, factor)

    def VariablesQbLoadSpeed(self):
        r"""VariablesQbLoadSpeed(ChNodeFEAxyz self)"""
        return _fea.ChNodeFEAxyz_VariablesQbLoadSpeed(self)

    def VariablesQbSetSpeed(self, step=0):
        r"""VariablesQbSetSpeed(ChNodeFEAxyz self, double step=0)"""
        return _fea.ChNodeFEAxyz_VariablesQbSetSpeed(self, step)

    def VariablesFbIncrementMq(self):
        r"""VariablesFbIncrementMq(ChNodeFEAxyz self)"""
        return _fea.ChNodeFEAxyz_VariablesFbIncrementMq(self)

    def VariablesQbIncrementPosition(self, step):
        r"""VariablesQbIncrementPosition(ChNodeFEAxyz self, double step)"""
        return _fea.ChNodeFEAxyz_VariablesQbIncrementPosition(self, step)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChNodeFEAxyz self, ChArchiveOut & marchive)"""
        return _fea.ChNodeFEAxyz_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChNodeFEAxyz self, chrono::ChArchiveIn & marchive)"""
        return _fea.ChNodeFEAxyz_ArchiveIN(self, marchive)

# Register ChNodeFEAxyz in _fea:
_fea.ChNodeFEAxyz_swigregister(ChNodeFEAxyz)

class ChNodeFEAxyzP(ChNodeFEAbase):
    r"""Proxy of C++ chrono::fea::ChNodeFEAxyzP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChNodeFEAxyzP self, ChVectorD initial_pos=VNULL) -> ChNodeFEAxyzP
        __init__(ChNodeFEAxyzP self, ChNodeFEAxyzP other) -> ChNodeFEAxyzP
        """
        _fea.ChNodeFEAxyzP_swiginit(self, _fea.new_ChNodeFEAxyzP(*args))
    __swig_destroy__ = _fea.delete_ChNodeFEAxyzP

    def Variables(self):
        r"""Variables(ChNodeFEAxyzP self) -> ChVariables &"""
        return _fea.ChNodeFEAxyzP_Variables(self)

    def Relax(self):
        r"""Relax(ChNodeFEAxyzP self)"""
        return _fea.ChNodeFEAxyzP_Relax(self)

    def SetNoSpeedNoAcceleration(self):
        r"""SetNoSpeedNoAcceleration(ChNodeFEAxyzP self)"""
        return _fea.ChNodeFEAxyzP_SetNoSpeedNoAcceleration(self)

    def SetFixed(self, mev):
        r"""SetFixed(ChNodeFEAxyzP self, bool mev)"""
        return _fea.ChNodeFEAxyzP_SetFixed(self, mev)

    def GetFixed(self):
        r"""GetFixed(ChNodeFEAxyzP self) -> bool"""
        return _fea.ChNodeFEAxyzP_GetFixed(self)

    def GetPos(self):
        r"""GetPos(ChNodeFEAxyzP self) -> ChVectorD"""
        return _fea.ChNodeFEAxyzP_GetPos(self)

    def SetPos(self, mpos):
        r"""SetPos(ChNodeFEAxyzP self, ChVectorD mpos)"""
        return _fea.ChNodeFEAxyzP_SetPos(self, mpos)

    def SetP(self, mp):
        r"""SetP(ChNodeFEAxyzP self, double mp)"""
        return _fea.ChNodeFEAxyzP_SetP(self, mp)

    def GetP(self):
        r"""GetP(ChNodeFEAxyzP self) -> double"""
        return _fea.ChNodeFEAxyzP_GetP(self)

    def SetP_dt(self, mp):
        r"""SetP_dt(ChNodeFEAxyzP self, double mp)"""
        return _fea.ChNodeFEAxyzP_SetP_dt(self, mp)

    def GetP_dt(self):
        r"""GetP_dt(ChNodeFEAxyzP self) -> double"""
        return _fea.ChNodeFEAxyzP_GetP_dt(self)

    def SetF(self, mf):
        r"""SetF(ChNodeFEAxyzP self, double mf)"""
        return _fea.ChNodeFEAxyzP_SetF(self, mf)

    def GetF(self):
        r"""GetF(ChNodeFEAxyzP self) -> double"""
        return _fea.ChNodeFEAxyzP_GetF(self)

    def GetMass(self):
        r"""GetMass(ChNodeFEAxyzP self) -> double"""
        return _fea.ChNodeFEAxyzP_GetMass(self)

    def SetMass(self, mm):
        r"""SetMass(ChNodeFEAxyzP self, double mm)"""
        return _fea.ChNodeFEAxyzP_SetMass(self, mm)

    def Get_ndof_x(self):
        r"""Get_ndof_x(ChNodeFEAxyzP self) -> int"""
        return _fea.ChNodeFEAxyzP_Get_ndof_x(self)

    def NodeIntStateGather(self, off_x, x, off_v, v, T):
        r"""NodeIntStateGather(ChNodeFEAxyzP self, unsigned int const off_x, chrono::ChState & x, unsigned int const off_v, chrono::ChStateDelta & v, double & T)"""
        return _fea.ChNodeFEAxyzP_NodeIntStateGather(self, off_x, x, off_v, v, T)

    def NodeIntStateScatter(self, off_x, x, off_v, v, T):
        r"""NodeIntStateScatter(ChNodeFEAxyzP self, unsigned int const off_x, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & v, double const T)"""
        return _fea.ChNodeFEAxyzP_NodeIntStateScatter(self, off_x, x, off_v, v, T)

    def NodeIntStateGatherAcceleration(self, off_a, a):
        r"""NodeIntStateGatherAcceleration(ChNodeFEAxyzP self, unsigned int const off_a, chrono::ChStateDelta & a)"""
        return _fea.ChNodeFEAxyzP_NodeIntStateGatherAcceleration(self, off_a, a)

    def NodeIntStateScatterAcceleration(self, off_a, a):
        r"""NodeIntStateScatterAcceleration(ChNodeFEAxyzP self, unsigned int const off_a, chrono::ChStateDelta const & a)"""
        return _fea.ChNodeFEAxyzP_NodeIntStateScatterAcceleration(self, off_a, a)

    def NodeIntLoadResidual_F(self, off, R, c):
        r"""NodeIntLoadResidual_F(ChNodeFEAxyzP self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _fea.ChNodeFEAxyzP_NodeIntLoadResidual_F(self, off, R, c)

    def NodeIntLoadResidual_Mv(self, off, R, w, c):
        r"""NodeIntLoadResidual_Mv(ChNodeFEAxyzP self, unsigned int const off, ChVectorDynamicD R, ChVectorDynamicD w, double const c)"""
        return _fea.ChNodeFEAxyzP_NodeIntLoadResidual_Mv(self, off, R, w, c)

    def NodeIntToDescriptor(self, off_v, v, R):
        r"""NodeIntToDescriptor(ChNodeFEAxyzP self, unsigned int const off_v, chrono::ChStateDelta const & v, ChVectorDynamicD R)"""
        return _fea.ChNodeFEAxyzP_NodeIntToDescriptor(self, off_v, v, R)

    def NodeIntFromDescriptor(self, off_v, v):
        r"""NodeIntFromDescriptor(ChNodeFEAxyzP self, unsigned int const off_v, chrono::ChStateDelta & v)"""
        return _fea.ChNodeFEAxyzP_NodeIntFromDescriptor(self, off_v, v)

    def InjectVariables(self, mdescriptor):
        r"""InjectVariables(ChNodeFEAxyzP self, ChSystemDescriptor & mdescriptor)"""
        return _fea.ChNodeFEAxyzP_InjectVariables(self, mdescriptor)

    def VariablesFbReset(self):
        r"""VariablesFbReset(ChNodeFEAxyzP self)"""
        return _fea.ChNodeFEAxyzP_VariablesFbReset(self)

    def VariablesFbLoadForces(self, factor=1):
        r"""VariablesFbLoadForces(ChNodeFEAxyzP self, double factor=1)"""
        return _fea.ChNodeFEAxyzP_VariablesFbLoadForces(self, factor)

    def VariablesQbLoadSpeed(self):
        r"""VariablesQbLoadSpeed(ChNodeFEAxyzP self)"""
        return _fea.ChNodeFEAxyzP_VariablesQbLoadSpeed(self)

    def VariablesQbSetSpeed(self, step=0):
        r"""VariablesQbSetSpeed(ChNodeFEAxyzP self, double step=0)"""
        return _fea.ChNodeFEAxyzP_VariablesQbSetSpeed(self, step)

    def VariablesFbIncrementMq(self):
        r"""VariablesFbIncrementMq(ChNodeFEAxyzP self)"""
        return _fea.ChNodeFEAxyzP_VariablesFbIncrementMq(self)

    def VariablesQbIncrementPosition(self, step):
        r"""VariablesQbIncrementPosition(ChNodeFEAxyzP self, double step)"""
        return _fea.ChNodeFEAxyzP_VariablesQbIncrementPosition(self, step)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChNodeFEAxyzP self, ChArchiveOut & marchive)"""
        return _fea.ChNodeFEAxyzP_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChNodeFEAxyzP self, chrono::ChArchiveIn & marchive)"""
        return _fea.ChNodeFEAxyzP_ArchiveIN(self, marchive)

# Register ChNodeFEAxyzP in _fea:
_fea.ChNodeFEAxyzP_swigregister(ChNodeFEAxyzP)

class ChNodeFEAxyzD(ChNodeFEAxyz):
    r"""Proxy of C++ chrono::fea::ChNodeFEAxyzD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChNodeFEAxyzD self, ChVectorD initial_pos=VNULL, ChVectorD initial_dir=VECT_X) -> ChNodeFEAxyzD
        __init__(ChNodeFEAxyzD self, ChNodeFEAxyzD other) -> ChNodeFEAxyzD
        """
        _fea.ChNodeFEAxyzD_swiginit(self, _fea.new_ChNodeFEAxyzD(*args))
    __swig_destroy__ = _fea.delete_ChNodeFEAxyzD

    def SetD(self, mD):
        r"""SetD(ChNodeFEAxyzD self, ChVectorD mD)"""
        return _fea.ChNodeFEAxyzD_SetD(self, mD)

    def GetD(self):
        r"""GetD(ChNodeFEAxyzD self) -> ChVectorD"""
        return _fea.ChNodeFEAxyzD_GetD(self)

    def SetD_dt(self, mD):
        r"""SetD_dt(ChNodeFEAxyzD self, ChVectorD mD)"""
        return _fea.ChNodeFEAxyzD_SetD_dt(self, mD)

    def GetD_dt(self):
        r"""GetD_dt(ChNodeFEAxyzD self) -> ChVectorD"""
        return _fea.ChNodeFEAxyzD_GetD_dt(self)

    def SetD_dtdt(self, mD):
        r"""SetD_dtdt(ChNodeFEAxyzD self, ChVectorD mD)"""
        return _fea.ChNodeFEAxyzD_SetD_dtdt(self, mD)

    def GetD_dtdt(self):
        r"""GetD_dtdt(ChNodeFEAxyzD self) -> ChVectorD"""
        return _fea.ChNodeFEAxyzD_GetD_dtdt(self)

    def Variables_D(self):
        r"""Variables_D(ChNodeFEAxyzD self) -> ChVariables &"""
        return _fea.ChNodeFEAxyzD_Variables_D(self)

    def SetNoSpeedNoAcceleration(self):
        r"""SetNoSpeedNoAcceleration(ChNodeFEAxyzD self)"""
        return _fea.ChNodeFEAxyzD_SetNoSpeedNoAcceleration(self)

    def GetMassDiagonal(self):
        r"""GetMassDiagonal(ChNodeFEAxyzD self) -> ChVectorDynamicD"""
        return _fea.ChNodeFEAxyzD_GetMassDiagonal(self)

    def SetFixed(self, mev):
        r"""SetFixed(ChNodeFEAxyzD self, bool mev)"""
        return _fea.ChNodeFEAxyzD_SetFixed(self, mev)

    def GetFixed(self):
        r"""GetFixed(ChNodeFEAxyzD self) -> bool"""
        return _fea.ChNodeFEAxyzD_GetFixed(self)

    def Get_ndof_x(self):
        r"""Get_ndof_x(ChNodeFEAxyzD self) -> int"""
        return _fea.ChNodeFEAxyzD_Get_ndof_x(self)

    def NodeIntStateGather(self, off_x, x, off_v, v, T):
        r"""NodeIntStateGather(ChNodeFEAxyzD self, unsigned int const off_x, chrono::ChState & x, unsigned int const off_v, chrono::ChStateDelta & v, double & T)"""
        return _fea.ChNodeFEAxyzD_NodeIntStateGather(self, off_x, x, off_v, v, T)

    def NodeIntStateScatter(self, off_x, x, off_v, v, T):
        r"""NodeIntStateScatter(ChNodeFEAxyzD self, unsigned int const off_x, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & v, double const T)"""
        return _fea.ChNodeFEAxyzD_NodeIntStateScatter(self, off_x, x, off_v, v, T)

    def NodeIntStateGatherAcceleration(self, off_a, a):
        r"""NodeIntStateGatherAcceleration(ChNodeFEAxyzD self, unsigned int const off_a, chrono::ChStateDelta & a)"""
        return _fea.ChNodeFEAxyzD_NodeIntStateGatherAcceleration(self, off_a, a)

    def NodeIntStateScatterAcceleration(self, off_a, a):
        r"""NodeIntStateScatterAcceleration(ChNodeFEAxyzD self, unsigned int const off_a, chrono::ChStateDelta const & a)"""
        return _fea.ChNodeFEAxyzD_NodeIntStateScatterAcceleration(self, off_a, a)

    def NodeIntStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""NodeIntStateIncrement(ChNodeFEAxyzD self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChNodeFEAxyzD_NodeIntStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def NodeIntLoadResidual_F(self, off, R, c):
        r"""NodeIntLoadResidual_F(ChNodeFEAxyzD self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _fea.ChNodeFEAxyzD_NodeIntLoadResidual_F(self, off, R, c)

    def NodeIntLoadResidual_Mv(self, off, R, w, c):
        r"""NodeIntLoadResidual_Mv(ChNodeFEAxyzD self, unsigned int const off, ChVectorDynamicD R, ChVectorDynamicD w, double const c)"""
        return _fea.ChNodeFEAxyzD_NodeIntLoadResidual_Mv(self, off, R, w, c)

    def NodeIntToDescriptor(self, off_v, v, R):
        r"""NodeIntToDescriptor(ChNodeFEAxyzD self, unsigned int const off_v, chrono::ChStateDelta const & v, ChVectorDynamicD R)"""
        return _fea.ChNodeFEAxyzD_NodeIntToDescriptor(self, off_v, v, R)

    def NodeIntFromDescriptor(self, off_v, v):
        r"""NodeIntFromDescriptor(ChNodeFEAxyzD self, unsigned int const off_v, chrono::ChStateDelta & v)"""
        return _fea.ChNodeFEAxyzD_NodeIntFromDescriptor(self, off_v, v)

    def InjectVariables(self, mdescriptor):
        r"""InjectVariables(ChNodeFEAxyzD self, ChSystemDescriptor & mdescriptor)"""
        return _fea.ChNodeFEAxyzD_InjectVariables(self, mdescriptor)

    def VariablesFbReset(self):
        r"""VariablesFbReset(ChNodeFEAxyzD self)"""
        return _fea.ChNodeFEAxyzD_VariablesFbReset(self)

    def VariablesFbLoadForces(self, factor=1):
        r"""VariablesFbLoadForces(ChNodeFEAxyzD self, double factor=1)"""
        return _fea.ChNodeFEAxyzD_VariablesFbLoadForces(self, factor)

    def VariablesQbLoadSpeed(self):
        r"""VariablesQbLoadSpeed(ChNodeFEAxyzD self)"""
        return _fea.ChNodeFEAxyzD_VariablesQbLoadSpeed(self)

    def VariablesQbSetSpeed(self, step=0):
        r"""VariablesQbSetSpeed(ChNodeFEAxyzD self, double step=0)"""
        return _fea.ChNodeFEAxyzD_VariablesQbSetSpeed(self, step)

    def VariablesFbIncrementMq(self):
        r"""VariablesFbIncrementMq(ChNodeFEAxyzD self)"""
        return _fea.ChNodeFEAxyzD_VariablesFbIncrementMq(self)

    def VariablesQbIncrementPosition(self, step):
        r"""VariablesQbIncrementPosition(ChNodeFEAxyzD self, double step)"""
        return _fea.ChNodeFEAxyzD_VariablesQbIncrementPosition(self, step)

    def LoadableGet_ndof_x(self):
        r"""LoadableGet_ndof_x(ChNodeFEAxyzD self) -> int"""
        return _fea.ChNodeFEAxyzD_LoadableGet_ndof_x(self)

    def LoadableGet_ndof_w(self):
        r"""LoadableGet_ndof_w(ChNodeFEAxyzD self) -> int"""
        return _fea.ChNodeFEAxyzD_LoadableGet_ndof_w(self)

    def LoadableGetStateBlock_x(self, block_offset, mD):
        r"""LoadableGetStateBlock_x(ChNodeFEAxyzD self, int block_offset, chrono::ChState & mD)"""
        return _fea.ChNodeFEAxyzD_LoadableGetStateBlock_x(self, block_offset, mD)

    def LoadableGetStateBlock_w(self, block_offset, mD):
        r"""LoadableGetStateBlock_w(ChNodeFEAxyzD self, int block_offset, chrono::ChStateDelta & mD)"""
        return _fea.ChNodeFEAxyzD_LoadableGetStateBlock_w(self, block_offset, mD)

    def LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""LoadableStateIncrement(ChNodeFEAxyzD self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChNodeFEAxyzD_LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def Get_field_ncoords(self):
        r"""Get_field_ncoords(ChNodeFEAxyzD self) -> int"""
        return _fea.ChNodeFEAxyzD_Get_field_ncoords(self)

    def GetSubBlockSize(self, nblock):
        r"""GetSubBlockSize(ChNodeFEAxyzD self, int nblock) -> unsigned int"""
        return _fea.ChNodeFEAxyzD_GetSubBlockSize(self, nblock)

    def LoadableGetVariables(self, mvars):
        r"""LoadableGetVariables(ChNodeFEAxyzD self, std::vector< ChVariables *,std::allocator< ChVariables * > > & mvars)"""
        return _fea.ChNodeFEAxyzD_LoadableGetVariables(self, mvars)

    def ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w):
        r"""ComputeNF(ChNodeFEAxyzD self, double const U, double const V, double const W, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _fea.ChNodeFEAxyzD_ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChNodeFEAxyzD self, ChArchiveOut & marchive)"""
        return _fea.ChNodeFEAxyzD_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChNodeFEAxyzD self, chrono::ChArchiveIn & marchive)"""
        return _fea.ChNodeFEAxyzD_ArchiveIN(self, marchive)
    D = property(_fea.ChNodeFEAxyzD_D_get, _fea.ChNodeFEAxyzD_D_set, doc=r"""D : chrono::ChVector<()>""")
    D_dt = property(_fea.ChNodeFEAxyzD_D_dt_get, _fea.ChNodeFEAxyzD_D_dt_set, doc=r"""D_dt : chrono::ChVector<()>""")
    D_dtdt = property(_fea.ChNodeFEAxyzD_D_dtdt_get, _fea.ChNodeFEAxyzD_D_dtdt_set, doc=r"""D_dtdt : chrono::ChVector<()>""")

# Register ChNodeFEAxyzD in _fea:
_fea.ChNodeFEAxyzD_swigregister(ChNodeFEAxyzD)

class ChNodeFEAxyzDD(ChNodeFEAxyzD):
    r"""Proxy of C++ chrono::fea::ChNodeFEAxyzDD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChNodeFEAxyzDD self, ChVectorD initial_pos=VNULL, ChVectorD initial_dir=VECT_X, ChVectorD initial_curv=VNULL) -> ChNodeFEAxyzDD
        __init__(ChNodeFEAxyzDD self, ChNodeFEAxyzDD other) -> ChNodeFEAxyzDD
        """
        _fea.ChNodeFEAxyzDD_swiginit(self, _fea.new_ChNodeFEAxyzDD(*args))
    __swig_destroy__ = _fea.delete_ChNodeFEAxyzDD

    def SetDD(self, mDD):
        r"""SetDD(ChNodeFEAxyzDD self, ChVectorD mDD)"""
        return _fea.ChNodeFEAxyzDD_SetDD(self, mDD)

    def GetDD(self):
        r"""GetDD(ChNodeFEAxyzDD self) -> ChVectorD"""
        return _fea.ChNodeFEAxyzDD_GetDD(self)

    def SetDD_dt(self, mDD):
        r"""SetDD_dt(ChNodeFEAxyzDD self, ChVectorD mDD)"""
        return _fea.ChNodeFEAxyzDD_SetDD_dt(self, mDD)

    def GetDD_dt(self):
        r"""GetDD_dt(ChNodeFEAxyzDD self) -> ChVectorD"""
        return _fea.ChNodeFEAxyzDD_GetDD_dt(self)

    def SetDD_dtdt(self, mDD):
        r"""SetDD_dtdt(ChNodeFEAxyzDD self, ChVectorD mDD)"""
        return _fea.ChNodeFEAxyzDD_SetDD_dtdt(self, mDD)

    def GetDD_dtdt(self):
        r"""GetDD_dtdt(ChNodeFEAxyzDD self) -> ChVectorD"""
        return _fea.ChNodeFEAxyzDD_GetDD_dtdt(self)

    def Variables_DD(self):
        r"""Variables_DD(ChNodeFEAxyzDD self) -> ChVariables &"""
        return _fea.ChNodeFEAxyzDD_Variables_DD(self)

    def SetNoSpeedNoAcceleration(self):
        r"""SetNoSpeedNoAcceleration(ChNodeFEAxyzDD self)"""
        return _fea.ChNodeFEAxyzDD_SetNoSpeedNoAcceleration(self)

    def GetMassDiagonalDD(self):
        r"""GetMassDiagonalDD(ChNodeFEAxyzDD self) -> ChVectorDynamicD"""
        return _fea.ChNodeFEAxyzDD_GetMassDiagonalDD(self)

    def SetFixed(self, mev):
        r"""SetFixed(ChNodeFEAxyzDD self, bool mev)"""
        return _fea.ChNodeFEAxyzDD_SetFixed(self, mev)

    def GetFixed(self):
        r"""GetFixed(ChNodeFEAxyzDD self) -> bool"""
        return _fea.ChNodeFEAxyzDD_GetFixed(self)

    def Get_ndof_x(self):
        r"""Get_ndof_x(ChNodeFEAxyzDD self) -> int"""
        return _fea.ChNodeFEAxyzDD_Get_ndof_x(self)

    def NodeIntStateGather(self, off_x, x, off_v, v, T):
        r"""NodeIntStateGather(ChNodeFEAxyzDD self, unsigned int const off_x, chrono::ChState & x, unsigned int const off_v, chrono::ChStateDelta & v, double & T)"""
        return _fea.ChNodeFEAxyzDD_NodeIntStateGather(self, off_x, x, off_v, v, T)

    def NodeIntStateScatter(self, off_x, x, off_v, v, T):
        r"""NodeIntStateScatter(ChNodeFEAxyzDD self, unsigned int const off_x, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & v, double const T)"""
        return _fea.ChNodeFEAxyzDD_NodeIntStateScatter(self, off_x, x, off_v, v, T)

    def NodeIntStateGatherAcceleration(self, off_a, a):
        r"""NodeIntStateGatherAcceleration(ChNodeFEAxyzDD self, unsigned int const off_a, chrono::ChStateDelta & a)"""
        return _fea.ChNodeFEAxyzDD_NodeIntStateGatherAcceleration(self, off_a, a)

    def NodeIntStateScatterAcceleration(self, off_a, a):
        r"""NodeIntStateScatterAcceleration(ChNodeFEAxyzDD self, unsigned int const off_a, chrono::ChStateDelta const & a)"""
        return _fea.ChNodeFEAxyzDD_NodeIntStateScatterAcceleration(self, off_a, a)

    def NodeIntStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""NodeIntStateIncrement(ChNodeFEAxyzDD self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChNodeFEAxyzDD_NodeIntStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def NodeIntLoadResidual_F(self, off, R, c):
        r"""NodeIntLoadResidual_F(ChNodeFEAxyzDD self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _fea.ChNodeFEAxyzDD_NodeIntLoadResidual_F(self, off, R, c)

    def NodeIntLoadResidual_Mv(self, off, R, w, c):
        r"""NodeIntLoadResidual_Mv(ChNodeFEAxyzDD self, unsigned int const off, ChVectorDynamicD R, ChVectorDynamicD w, double const c)"""
        return _fea.ChNodeFEAxyzDD_NodeIntLoadResidual_Mv(self, off, R, w, c)

    def NodeIntToDescriptor(self, off_v, v, R):
        r"""NodeIntToDescriptor(ChNodeFEAxyzDD self, unsigned int const off_v, chrono::ChStateDelta const & v, ChVectorDynamicD R)"""
        return _fea.ChNodeFEAxyzDD_NodeIntToDescriptor(self, off_v, v, R)

    def NodeIntFromDescriptor(self, off_v, v):
        r"""NodeIntFromDescriptor(ChNodeFEAxyzDD self, unsigned int const off_v, chrono::ChStateDelta & v)"""
        return _fea.ChNodeFEAxyzDD_NodeIntFromDescriptor(self, off_v, v)

    def InjectVariables(self, mdescriptor):
        r"""InjectVariables(ChNodeFEAxyzDD self, ChSystemDescriptor & mdescriptor)"""
        return _fea.ChNodeFEAxyzDD_InjectVariables(self, mdescriptor)

    def VariablesFbReset(self):
        r"""VariablesFbReset(ChNodeFEAxyzDD self)"""
        return _fea.ChNodeFEAxyzDD_VariablesFbReset(self)

    def VariablesFbLoadForces(self, factor=1):
        r"""VariablesFbLoadForces(ChNodeFEAxyzDD self, double factor=1)"""
        return _fea.ChNodeFEAxyzDD_VariablesFbLoadForces(self, factor)

    def VariablesQbLoadSpeed(self):
        r"""VariablesQbLoadSpeed(ChNodeFEAxyzDD self)"""
        return _fea.ChNodeFEAxyzDD_VariablesQbLoadSpeed(self)

    def VariablesQbSetSpeed(self, step=0):
        r"""VariablesQbSetSpeed(ChNodeFEAxyzDD self, double step=0)"""
        return _fea.ChNodeFEAxyzDD_VariablesQbSetSpeed(self, step)

    def VariablesFbIncrementMq(self):
        r"""VariablesFbIncrementMq(ChNodeFEAxyzDD self)"""
        return _fea.ChNodeFEAxyzDD_VariablesFbIncrementMq(self)

    def VariablesQbIncrementPosition(self, step):
        r"""VariablesQbIncrementPosition(ChNodeFEAxyzDD self, double step)"""
        return _fea.ChNodeFEAxyzDD_VariablesQbIncrementPosition(self, step)

    def LoadableGet_ndof_x(self):
        r"""LoadableGet_ndof_x(ChNodeFEAxyzDD self) -> int"""
        return _fea.ChNodeFEAxyzDD_LoadableGet_ndof_x(self)

    def LoadableGet_ndof_w(self):
        r"""LoadableGet_ndof_w(ChNodeFEAxyzDD self) -> int"""
        return _fea.ChNodeFEAxyzDD_LoadableGet_ndof_w(self)

    def LoadableGetStateBlock_x(self, block_offset, mDD):
        r"""LoadableGetStateBlock_x(ChNodeFEAxyzDD self, int block_offset, chrono::ChState & mDD)"""
        return _fea.ChNodeFEAxyzDD_LoadableGetStateBlock_x(self, block_offset, mDD)

    def LoadableGetStateBlock_w(self, block_offset, mDD):
        r"""LoadableGetStateBlock_w(ChNodeFEAxyzDD self, int block_offset, chrono::ChStateDelta & mDD)"""
        return _fea.ChNodeFEAxyzDD_LoadableGetStateBlock_w(self, block_offset, mDD)

    def LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""LoadableStateIncrement(ChNodeFEAxyzDD self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChNodeFEAxyzDD_LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def Get_field_ncoords(self):
        r"""Get_field_ncoords(ChNodeFEAxyzDD self) -> int"""
        return _fea.ChNodeFEAxyzDD_Get_field_ncoords(self)

    def GetSubBlockSize(self, nblock):
        r"""GetSubBlockSize(ChNodeFEAxyzDD self, int nblock) -> unsigned int"""
        return _fea.ChNodeFEAxyzDD_GetSubBlockSize(self, nblock)

    def LoadableGetVariables(self, mvars):
        r"""LoadableGetVariables(ChNodeFEAxyzDD self, std::vector< ChVariables *,std::allocator< ChVariables * > > & mvars)"""
        return _fea.ChNodeFEAxyzDD_LoadableGetVariables(self, mvars)

    def ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w):
        r"""ComputeNF(ChNodeFEAxyzDD self, double const U, double const V, double const W, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _fea.ChNodeFEAxyzDD_ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChNodeFEAxyzDD self, ChArchiveOut & marchive)"""
        return _fea.ChNodeFEAxyzDD_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChNodeFEAxyzDD self, chrono::ChArchiveIn & marchive)"""
        return _fea.ChNodeFEAxyzDD_ArchiveIN(self, marchive)
    DD = property(_fea.ChNodeFEAxyzDD_DD_get, _fea.ChNodeFEAxyzDD_DD_set, doc=r"""DD : chrono::ChVector<()>""")
    DD_dt = property(_fea.ChNodeFEAxyzDD_DD_dt_get, _fea.ChNodeFEAxyzDD_DD_dt_set, doc=r"""DD_dt : chrono::ChVector<()>""")
    DD_dtdt = property(_fea.ChNodeFEAxyzDD_DD_dtdt_get, _fea.ChNodeFEAxyzDD_DD_dtdt_set, doc=r"""DD_dtdt : chrono::ChVector<()>""")

# Register ChNodeFEAxyzDD in _fea:
_fea.ChNodeFEAxyzDD_swigregister(ChNodeFEAxyzDD)

class ChNodeFEAxyzrot(ChNodeFEAbase, pychrono.core.ChBodyFrame):
    r"""Proxy of C++ chrono::fea::ChNodeFEAxyzrot class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChNodeFEAxyzrot self, ChFrameD initialf=chrono::ChFrame< double >()) -> ChNodeFEAxyzrot
        __init__(ChNodeFEAxyzrot self, ChNodeFEAxyzrot other) -> ChNodeFEAxyzrot
        """
        _fea.ChNodeFEAxyzrot_swiginit(self, _fea.new_ChNodeFEAxyzrot(*args))
    __swig_destroy__ = _fea.delete_ChNodeFEAxyzrot

    def Variables(self):
        r"""Variables(ChNodeFEAxyzrot self) -> ChVariables &"""
        return _fea.ChNodeFEAxyzrot_Variables(self)

    def VariablesBody(self):
        r"""VariablesBody(ChNodeFEAxyzrot self) -> ChVariablesBodyOwnMass &"""
        return _fea.ChNodeFEAxyzrot_VariablesBody(self)

    def Relax(self):
        r"""Relax(ChNodeFEAxyzrot self)"""
        return _fea.ChNodeFEAxyzrot_Relax(self)

    def SetNoSpeedNoAcceleration(self):
        r"""SetNoSpeedNoAcceleration(ChNodeFEAxyzrot self)"""
        return _fea.ChNodeFEAxyzrot_SetNoSpeedNoAcceleration(self)

    def SetFixed(self, mev):
        r"""SetFixed(ChNodeFEAxyzrot self, bool mev)"""
        return _fea.ChNodeFEAxyzrot_SetFixed(self, mev)

    def GetFixed(self):
        r"""GetFixed(ChNodeFEAxyzrot self) -> bool"""
        return _fea.ChNodeFEAxyzrot_GetFixed(self)

    def GetMass(self):
        r"""GetMass(ChNodeFEAxyzrot self) -> double"""
        return _fea.ChNodeFEAxyzrot_GetMass(self)

    def SetMass(self, mm):
        r"""SetMass(ChNodeFEAxyzrot self, double mm)"""
        return _fea.ChNodeFEAxyzrot_SetMass(self, mm)

    def GetInertia(self):
        r"""GetInertia(ChNodeFEAxyzrot self) -> ChMatrix33D"""
        return _fea.ChNodeFEAxyzrot_GetInertia(self)

    def SetX0(self, mx):
        r"""SetX0(ChNodeFEAxyzrot self, ChFrameD mx)"""
        return _fea.ChNodeFEAxyzrot_SetX0(self, mx)

    def GetX0(self):
        r"""GetX0(ChNodeFEAxyzrot self) -> ChFrameD"""
        return _fea.ChNodeFEAxyzrot_GetX0(self)

    def GetX0ref(self):
        r"""GetX0ref(ChNodeFEAxyzrot self) -> ChFrameD"""
        return _fea.ChNodeFEAxyzrot_GetX0ref(self)

    def SetForce(self, mf):
        r"""SetForce(ChNodeFEAxyzrot self, ChVectorD mf)"""
        return _fea.ChNodeFEAxyzrot_SetForce(self, mf)

    def GetForce(self):
        r"""GetForce(ChNodeFEAxyzrot self) -> ChVectorD"""
        return _fea.ChNodeFEAxyzrot_GetForce(self)

    def SetTorque(self, mf):
        r"""SetTorque(ChNodeFEAxyzrot self, ChVectorD mf)"""
        return _fea.ChNodeFEAxyzrot_SetTorque(self, mf)

    def GetTorque(self):
        r"""GetTorque(ChNodeFEAxyzrot self) -> ChVectorD"""
        return _fea.ChNodeFEAxyzrot_GetTorque(self)

    def Frame(self):
        r"""Frame(ChNodeFEAxyzrot self) -> ChFrameMovingD"""
        return _fea.ChNodeFEAxyzrot_Frame(self)

    def Get_ndof_x(self):
        r"""Get_ndof_x(ChNodeFEAxyzrot self) -> int"""
        return _fea.ChNodeFEAxyzrot_Get_ndof_x(self)

    def Get_ndof_w(self):
        r"""Get_ndof_w(ChNodeFEAxyzrot self) -> int"""
        return _fea.ChNodeFEAxyzrot_Get_ndof_w(self)

    def GetVariables1(self):
        r"""GetVariables1(ChNodeFEAxyzrot self) -> ChVariables *"""
        return _fea.ChNodeFEAxyzrot_GetVariables1(self)

    def NodeIntStateGather(self, off_x, x, off_v, v, T):
        r"""NodeIntStateGather(ChNodeFEAxyzrot self, unsigned int const off_x, chrono::ChState & x, unsigned int const off_v, chrono::ChStateDelta & v, double & T)"""
        return _fea.ChNodeFEAxyzrot_NodeIntStateGather(self, off_x, x, off_v, v, T)

    def NodeIntStateScatter(self, off_x, x, off_v, v, T):
        r"""NodeIntStateScatter(ChNodeFEAxyzrot self, unsigned int const off_x, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & v, double const T)"""
        return _fea.ChNodeFEAxyzrot_NodeIntStateScatter(self, off_x, x, off_v, v, T)

    def NodeIntStateGatherAcceleration(self, off_a, a):
        r"""NodeIntStateGatherAcceleration(ChNodeFEAxyzrot self, unsigned int const off_a, chrono::ChStateDelta & a)"""
        return _fea.ChNodeFEAxyzrot_NodeIntStateGatherAcceleration(self, off_a, a)

    def NodeIntStateScatterAcceleration(self, off_a, a):
        r"""NodeIntStateScatterAcceleration(ChNodeFEAxyzrot self, unsigned int const off_a, chrono::ChStateDelta const & a)"""
        return _fea.ChNodeFEAxyzrot_NodeIntStateScatterAcceleration(self, off_a, a)

    def NodeIntStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""NodeIntStateIncrement(ChNodeFEAxyzrot self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChNodeFEAxyzrot_NodeIntStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def NodeIntLoadResidual_F(self, off, R, c):
        r"""NodeIntLoadResidual_F(ChNodeFEAxyzrot self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _fea.ChNodeFEAxyzrot_NodeIntLoadResidual_F(self, off, R, c)

    def NodeIntLoadResidual_Mv(self, off, R, w, c):
        r"""NodeIntLoadResidual_Mv(ChNodeFEAxyzrot self, unsigned int const off, ChVectorDynamicD R, ChVectorDynamicD w, double const c)"""
        return _fea.ChNodeFEAxyzrot_NodeIntLoadResidual_Mv(self, off, R, w, c)

    def NodeIntToDescriptor(self, off_v, v, R):
        r"""NodeIntToDescriptor(ChNodeFEAxyzrot self, unsigned int const off_v, chrono::ChStateDelta const & v, ChVectorDynamicD R)"""
        return _fea.ChNodeFEAxyzrot_NodeIntToDescriptor(self, off_v, v, R)

    def NodeIntFromDescriptor(self, off_v, v):
        r"""NodeIntFromDescriptor(ChNodeFEAxyzrot self, unsigned int const off_v, chrono::ChStateDelta & v)"""
        return _fea.ChNodeFEAxyzrot_NodeIntFromDescriptor(self, off_v, v)

    def InjectVariables(self, mdescriptor):
        r"""InjectVariables(ChNodeFEAxyzrot self, ChSystemDescriptor & mdescriptor)"""
        return _fea.ChNodeFEAxyzrot_InjectVariables(self, mdescriptor)

    def VariablesFbReset(self):
        r"""VariablesFbReset(ChNodeFEAxyzrot self)"""
        return _fea.ChNodeFEAxyzrot_VariablesFbReset(self)

    def VariablesFbLoadForces(self, factor=1):
        r"""VariablesFbLoadForces(ChNodeFEAxyzrot self, double factor=1)"""
        return _fea.ChNodeFEAxyzrot_VariablesFbLoadForces(self, factor)

    def VariablesQbLoadSpeed(self):
        r"""VariablesQbLoadSpeed(ChNodeFEAxyzrot self)"""
        return _fea.ChNodeFEAxyzrot_VariablesQbLoadSpeed(self)

    def VariablesQbSetSpeed(self, step=0):
        r"""VariablesQbSetSpeed(ChNodeFEAxyzrot self, double step=0)"""
        return _fea.ChNodeFEAxyzrot_VariablesQbSetSpeed(self, step)

    def VariablesFbIncrementMq(self):
        r"""VariablesFbIncrementMq(ChNodeFEAxyzrot self)"""
        return _fea.ChNodeFEAxyzrot_VariablesFbIncrementMq(self)

    def VariablesQbIncrementPosition(self, step):
        r"""VariablesQbIncrementPosition(ChNodeFEAxyzrot self, double step)"""
        return _fea.ChNodeFEAxyzrot_VariablesQbIncrementPosition(self, step)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChNodeFEAxyzrot self, ChArchiveOut & marchive)"""
        return _fea.ChNodeFEAxyzrot_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChNodeFEAxyzrot self, chrono::ChArchiveIn & marchive)"""
        return _fea.ChNodeFEAxyzrot_ArchiveIN(self, marchive)

# Register ChNodeFEAxyzrot in _fea:
_fea.ChNodeFEAxyzrot_swigregister(ChNodeFEAxyzrot)

class ChStrainStress3D(object):
    r"""Proxy of C++ chrono::fea::ChStrainStress3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    strain = property(_fea.ChStrainStress3D_strain_get, _fea.ChStrainStress3D_strain_set, doc=r"""strain : chrono::ChVectorN<(double,6)>""")
    stress = property(_fea.ChStrainStress3D_stress_get, _fea.ChStrainStress3D_stress_set, doc=r"""stress : chrono::ChVectorN<(double,6)>""")

    def __init__(self):
        r"""__init__(ChStrainStress3D self) -> ChStrainStress3D"""
        _fea.ChStrainStress3D_swiginit(self, _fea.new_ChStrainStress3D())
    __swig_destroy__ = _fea.delete_ChStrainStress3D

# Register ChStrainStress3D in _fea:
_fea.ChStrainStress3D_swigregister(ChStrainStress3D)

class ChElementBase(object):
    r"""Proxy of C++ chrono::fea::ChElementBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fea.delete_ChElementBase

    def GetNnodes(self):
        r"""GetNnodes(ChElementBase self) -> int"""
        return _fea.ChElementBase_GetNnodes(self)

    def GetNdofs(self):
        r"""GetNdofs(ChElementBase self) -> int"""
        return _fea.ChElementBase_GetNdofs(self)

    def GetNodeNdofs(self, n):
        r"""GetNodeNdofs(ChElementBase self, int n) -> int"""
        return _fea.ChElementBase_GetNodeNdofs(self, n)

    def GetNodeN(self, n):
        r"""GetNodeN(ChElementBase self, int n) -> std::shared_ptr< chrono::fea::ChNodeFEAbase >"""
        return _fea.ChElementBase_GetNodeN(self, n)

    def GetStateBlock(self, mD):
        r"""GetStateBlock(ChElementBase self, ChVectorDynamicD mD)"""
        return _fea.ChElementBase_GetStateBlock(self, mD)

    def ComputeNodalMass(self):
        r"""ComputeNodalMass(ChElementBase self)"""
        return _fea.ChElementBase_ComputeNodalMass(self)

    def ComputeInternalForces(self, Fi):
        r"""ComputeInternalForces(ChElementBase self, ChVectorDynamicD Fi)"""
        return _fea.ChElementBase_ComputeInternalForces(self, Fi)

    def Update(self):
        r"""Update(ChElementBase self)"""
        return _fea.ChElementBase_Update(self)

    def EleDoIntegration(self):
        r"""EleDoIntegration(ChElementBase self)"""
        return _fea.ChElementBase_EleDoIntegration(self)

    def EleIntLoadResidual_F(self, R, c):
        r"""EleIntLoadResidual_F(ChElementBase self, ChVectorDynamicD R, double const c)"""
        return _fea.ChElementBase_EleIntLoadResidual_F(self, R, c)

    def EleIntLoadResidual_Mv(self, R, w, c):
        r"""EleIntLoadResidual_Mv(ChElementBase self, ChVectorDynamicD R, ChVectorDynamicD w, double const c)"""
        return _fea.ChElementBase_EleIntLoadResidual_Mv(self, R, w, c)

    def InjectKRMmatrices(self, mdescriptor):
        r"""InjectKRMmatrices(ChElementBase self, ChSystemDescriptor & mdescriptor)"""
        return _fea.ChElementBase_InjectKRMmatrices(self, mdescriptor)

    def KRMmatricesLoad(self, Kfactor, Rfactor, Mfactor):
        r"""KRMmatricesLoad(ChElementBase self, double Kfactor, double Rfactor, double Mfactor)"""
        return _fea.ChElementBase_KRMmatricesLoad(self, Kfactor, Rfactor, Mfactor)

    def VariablesFbLoadInternalForces(self, factor=1.):
        r"""VariablesFbLoadInternalForces(ChElementBase self, double factor=1.)"""
        return _fea.ChElementBase_VariablesFbLoadInternalForces(self, factor)

    def VariablesFbIncrementMq(self):
        r"""VariablesFbIncrementMq(ChElementBase self)"""
        return _fea.ChElementBase_VariablesFbIncrementMq(self)

# Register ChElementBase in _fea:
_fea.ChElementBase_swigregister(ChElementBase)

class ChElementGeneric(ChElementBase):
    r"""Proxy of C++ chrono::fea::ChElementGeneric class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fea.delete_ChElementGeneric

    def Kstiffness(self):
        r"""Kstiffness(ChElementGeneric self) -> ChKblockGeneric &"""
        return _fea.ChElementGeneric_Kstiffness(self)

    def EleIntLoadResidual_F(self, R, c):
        r"""EleIntLoadResidual_F(ChElementGeneric self, ChVectorDynamicD R, double const c)"""
        return _fea.ChElementGeneric_EleIntLoadResidual_F(self, R, c)

    def EleIntLoadResidual_Mv(self, R, w, c):
        r"""EleIntLoadResidual_Mv(ChElementGeneric self, ChVectorDynamicD R, ChVectorDynamicD w, double const c)"""
        return _fea.ChElementGeneric_EleIntLoadResidual_Mv(self, R, w, c)

    def InjectKRMmatrices(self, mdescriptor):
        r"""InjectKRMmatrices(ChElementGeneric self, ChSystemDescriptor & mdescriptor)"""
        return _fea.ChElementGeneric_InjectKRMmatrices(self, mdescriptor)

    def KRMmatricesLoad(self, Kfactor, Rfactor, Mfactor):
        r"""KRMmatricesLoad(ChElementGeneric self, double Kfactor, double Rfactor, double Mfactor)"""
        return _fea.ChElementGeneric_KRMmatricesLoad(self, Kfactor, Rfactor, Mfactor)

    def VariablesFbLoadInternalForces(self, factor=1.):
        r"""VariablesFbLoadInternalForces(ChElementGeneric self, double factor=1.)"""
        return _fea.ChElementGeneric_VariablesFbLoadInternalForces(self, factor)

    def VariablesFbIncrementMq(self):
        r"""VariablesFbIncrementMq(ChElementGeneric self)"""
        return _fea.ChElementGeneric_VariablesFbIncrementMq(self)

# Register ChElementGeneric in _fea:
_fea.ChElementGeneric_swigregister(ChElementGeneric)

class ChElementBar(ChElementGeneric):
    r"""Proxy of C++ chrono::fea::ChElementBar class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChElementBar self) -> ChElementBar"""
        _fea.ChElementBar_swiginit(self, _fea.new_ChElementBar())
    __swig_destroy__ = _fea.delete_ChElementBar

    def GetNnodes(self):
        r"""GetNnodes(ChElementBar self) -> int"""
        return _fea.ChElementBar_GetNnodes(self)

    def GetNdofs(self):
        r"""GetNdofs(ChElementBar self) -> int"""
        return _fea.ChElementBar_GetNdofs(self)

    def GetNodeNdofs(self, n):
        r"""GetNodeNdofs(ChElementBar self, int n) -> int"""
        return _fea.ChElementBar_GetNodeNdofs(self, n)

    def GetNodeN(self, n):
        r"""GetNodeN(ChElementBar self, int n) -> std::shared_ptr< chrono::fea::ChNodeFEAbase >"""
        return _fea.ChElementBar_GetNodeN(self, n)

    def SetNodes(self, nodeA, nodeB):
        r"""SetNodes(ChElementBar self, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeA, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeB)"""
        return _fea.ChElementBar_SetNodes(self, nodeA, nodeB)

    def GetStateBlock(self, mD):
        r"""GetStateBlock(ChElementBar self, ChVectorDynamicD mD)"""
        return _fea.ChElementBar_GetStateBlock(self, mD)

    def ComputeInternalForces(self, Fi):
        r"""ComputeInternalForces(ChElementBar self, ChVectorDynamicD Fi)"""
        return _fea.ChElementBar_ComputeInternalForces(self, Fi)

    def SetBarArea(self, ma):
        r"""SetBarArea(ChElementBar self, double ma)"""
        return _fea.ChElementBar_SetBarArea(self, ma)

    def GetBarArea(self):
        r"""GetBarArea(ChElementBar self) -> double"""
        return _fea.ChElementBar_GetBarArea(self)

    def SetBarDensity(self, md):
        r"""SetBarDensity(ChElementBar self, double md)"""
        return _fea.ChElementBar_SetBarDensity(self, md)

    def GetBarDensity(self):
        r"""GetBarDensity(ChElementBar self) -> double"""
        return _fea.ChElementBar_GetBarDensity(self)

    def SetBarYoungModulus(self, mE):
        r"""SetBarYoungModulus(ChElementBar self, double mE)"""
        return _fea.ChElementBar_SetBarYoungModulus(self, mE)

    def GetBarYoungModulus(self):
        r"""GetBarYoungModulus(ChElementBar self) -> double"""
        return _fea.ChElementBar_GetBarYoungModulus(self)

    def SetBarRaleyghDamping(self, mr):
        r"""SetBarRaleyghDamping(ChElementBar self, double mr)"""
        return _fea.ChElementBar_SetBarRaleyghDamping(self, mr)

    def GetBarRaleyghDamping(self):
        r"""GetBarRaleyghDamping(ChElementBar self) -> double"""
        return _fea.ChElementBar_GetBarRaleyghDamping(self)

    def GetMass(self):
        r"""GetMass(ChElementBar self) -> double"""
        return _fea.ChElementBar_GetMass(self)

    def GetRestLength(self):
        r"""GetRestLength(ChElementBar self) -> double"""
        return _fea.ChElementBar_GetRestLength(self)

    def GetCurrentLength(self):
        r"""GetCurrentLength(ChElementBar self) -> double"""
        return _fea.ChElementBar_GetCurrentLength(self)

    def GetStrain(self):
        r"""GetStrain(ChElementBar self) -> double"""
        return _fea.ChElementBar_GetStrain(self)

    def GetStress(self):
        r"""GetStress(ChElementBar self) -> double"""
        return _fea.ChElementBar_GetStress(self)

    def GetCurrentForce(self):
        r"""GetCurrentForce(ChElementBar self) -> double"""
        return _fea.ChElementBar_GetCurrentForce(self)

# Register ChElementBar in _fea:
_fea.ChElementBar_swigregister(ChElementBar)

class ChElementSpring(ChElementGeneric):
    r"""Proxy of C++ chrono::fea::ChElementSpring class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChElementSpring self) -> ChElementSpring"""
        _fea.ChElementSpring_swiginit(self, _fea.new_ChElementSpring())
    __swig_destroy__ = _fea.delete_ChElementSpring

    def GetNnodes(self):
        r"""GetNnodes(ChElementSpring self) -> int"""
        return _fea.ChElementSpring_GetNnodes(self)

    def GetNdofs(self):
        r"""GetNdofs(ChElementSpring self) -> int"""
        return _fea.ChElementSpring_GetNdofs(self)

    def GetNodeNdofs(self, n):
        r"""GetNodeNdofs(ChElementSpring self, int n) -> int"""
        return _fea.ChElementSpring_GetNodeNdofs(self, n)

    def GetNodeN(self, n):
        r"""GetNodeN(ChElementSpring self, int n) -> std::shared_ptr< chrono::fea::ChNodeFEAbase >"""
        return _fea.ChElementSpring_GetNodeN(self, n)

    def SetNodes(self, nodeA, nodeB):
        r"""SetNodes(ChElementSpring self, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeA, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeB)"""
        return _fea.ChElementSpring_SetNodes(self, nodeA, nodeB)

    def GetStateBlock(self, mD):
        r"""GetStateBlock(ChElementSpring self, ChVectorDynamicD mD)"""
        return _fea.ChElementSpring_GetStateBlock(self, mD)

    def ComputeInternalForces(self, Fi):
        r"""ComputeInternalForces(ChElementSpring self, ChVectorDynamicD Fi)"""
        return _fea.ChElementSpring_ComputeInternalForces(self, Fi)

    def SetSpringK(self, ms):
        r"""SetSpringK(ChElementSpring self, double ms)"""
        return _fea.ChElementSpring_SetSpringK(self, ms)

    def GetSpringK(self):
        r"""GetSpringK(ChElementSpring self) -> double"""
        return _fea.ChElementSpring_GetSpringK(self)

    def SetDamperR(self, md):
        r"""SetDamperR(ChElementSpring self, double md)"""
        return _fea.ChElementSpring_SetDamperR(self, md)

    def GetDamperR(self):
        r"""GetDamperR(ChElementSpring self) -> double"""
        return _fea.ChElementSpring_GetDamperR(self)

    def GetCurrentForce(self):
        r"""GetCurrentForce(ChElementSpring self) -> double"""
        return _fea.ChElementSpring_GetCurrentForce(self)

# Register ChElementSpring in _fea:
_fea.ChElementSpring_swigregister(ChElementSpring)

class ChElementCorotational(object):
    r"""Proxy of C++ chrono::fea::ChElementCorotational class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fea.delete_ChElementCorotational

    def Rotation(self):
        r"""Rotation(ChElementCorotational self) -> ChMatrix33D"""
        return _fea.ChElementCorotational_Rotation(self)

    def UpdateRotation(self):
        r"""UpdateRotation(ChElementCorotational self)"""
        return _fea.ChElementCorotational_UpdateRotation(self)

# Register ChElementCorotational in _fea:
_fea.ChElementCorotational_swigregister(ChElementCorotational)

class ChBeamMaterialInternalData(object):
    r"""Proxy of C++ chrono::fea::ChBeamMaterialInternalData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChBeamMaterialInternalData self) -> ChBeamMaterialInternalData"""
        _fea.ChBeamMaterialInternalData_swiginit(self, _fea.new_ChBeamMaterialInternalData())
    __swig_destroy__ = _fea.delete_ChBeamMaterialInternalData

    def Copy(self, other):
        r"""Copy(ChBeamMaterialInternalData self, ChBeamMaterialInternalData other)"""
        return _fea.ChBeamMaterialInternalData_Copy(self, other)
    p_strain_acc = property(_fea.ChBeamMaterialInternalData_p_strain_acc_get, _fea.ChBeamMaterialInternalData_p_strain_acc_set, doc=r"""p_strain_acc : double""")

# Register ChBeamMaterialInternalData in _fea:
_fea.ChBeamMaterialInternalData_swigregister(ChBeamMaterialInternalData)

class ChBeamSectionProperties(object):
    r"""Proxy of C++ chrono::fea::ChBeamSectionProperties class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    y_drawsize = property(_fea.ChBeamSectionProperties_y_drawsize_get, _fea.ChBeamSectionProperties_y_drawsize_set, doc=r"""y_drawsize : double""")
    z_drawsize = property(_fea.ChBeamSectionProperties_z_drawsize_get, _fea.ChBeamSectionProperties_z_drawsize_set, doc=r"""z_drawsize : double""")
    is_circular = property(_fea.ChBeamSectionProperties_is_circular_get, _fea.ChBeamSectionProperties_is_circular_set, doc=r"""is_circular : bool""")
    Area = property(_fea.ChBeamSectionProperties_Area_get, _fea.ChBeamSectionProperties_Area_set, doc=r"""Area : double""")
    density = property(_fea.ChBeamSectionProperties_density_get, _fea.ChBeamSectionProperties_density_set, doc=r"""density : double""")
    __swig_destroy__ = _fea.delete_ChBeamSectionProperties

    def SetDrawThickness(self, thickness_y, thickness_z):
        r"""SetDrawThickness(ChBeamSectionProperties self, double thickness_y, double thickness_z)"""
        return _fea.ChBeamSectionProperties_SetDrawThickness(self, thickness_y, thickness_z)

    def GetDrawThicknessY(self):
        r"""GetDrawThicknessY(ChBeamSectionProperties self) -> double"""
        return _fea.ChBeamSectionProperties_GetDrawThicknessY(self)

    def GetDrawThicknessZ(self):
        r"""GetDrawThicknessZ(ChBeamSectionProperties self) -> double"""
        return _fea.ChBeamSectionProperties_GetDrawThicknessZ(self)

    def IsCircular(self):
        r"""IsCircular(ChBeamSectionProperties self) -> bool"""
        return _fea.ChBeamSectionProperties_IsCircular(self)

    def SetCircular(self, ic):
        r"""SetCircular(ChBeamSectionProperties self, bool ic)"""
        return _fea.ChBeamSectionProperties_SetCircular(self, ic)

    def SetDrawCircularRadius(self, draw_rad):
        r"""SetDrawCircularRadius(ChBeamSectionProperties self, double draw_rad)"""
        return _fea.ChBeamSectionProperties_SetDrawCircularRadius(self, draw_rad)

    def GetDrawCircularRadius(self):
        r"""GetDrawCircularRadius(ChBeamSectionProperties self) -> double"""
        return _fea.ChBeamSectionProperties_GetDrawCircularRadius(self)

    def SetArea(self, ma):
        r"""SetArea(ChBeamSectionProperties self, double const ma)"""
        return _fea.ChBeamSectionProperties_SetArea(self, ma)

    def GetArea(self):
        r"""GetArea(ChBeamSectionProperties self) -> double"""
        return _fea.ChBeamSectionProperties_GetArea(self)

    def SetDensity(self, md):
        r"""SetDensity(ChBeamSectionProperties self, double md)"""
        return _fea.ChBeamSectionProperties_SetDensity(self, md)

    def GetDensity(self):
        r"""GetDensity(ChBeamSectionProperties self) -> double"""
        return _fea.ChBeamSectionProperties_GetDensity(self)

    def SetAsRectangularSection(self, width_y, width_z):
        r"""SetAsRectangularSection(ChBeamSectionProperties self, double width_y, double width_z)"""
        return _fea.ChBeamSectionProperties_SetAsRectangularSection(self, width_y, width_z)

    def SetAsCircularSection(self, diameter):
        r"""SetAsCircularSection(ChBeamSectionProperties self, double diameter)"""
        return _fea.ChBeamSectionProperties_SetAsCircularSection(self, diameter)

# Register ChBeamSectionProperties in _fea:
_fea.ChBeamSectionProperties_swigregister(ChBeamSectionProperties)

class ChBeamSection(object):
    r"""Proxy of C++ chrono::fea::ChBeamSection class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    y_drawsize = property(_fea.ChBeamSection_y_drawsize_get, _fea.ChBeamSection_y_drawsize_set, doc=r"""y_drawsize : double""")
    z_drawsize = property(_fea.ChBeamSection_z_drawsize_get, _fea.ChBeamSection_z_drawsize_set, doc=r"""z_drawsize : double""")
    is_circular = property(_fea.ChBeamSection_is_circular_get, _fea.ChBeamSection_is_circular_set, doc=r"""is_circular : bool""")

    def __init__(self):
        r"""__init__(ChBeamSection self) -> ChBeamSection"""
        _fea.ChBeamSection_swiginit(self, _fea.new_ChBeamSection())
    __swig_destroy__ = _fea.delete_ChBeamSection

    def SetDrawThickness(self, thickness_y, thickness_z):
        r"""SetDrawThickness(ChBeamSection self, double thickness_y, double thickness_z)"""
        return _fea.ChBeamSection_SetDrawThickness(self, thickness_y, thickness_z)

    def GetDrawThicknessY(self):
        r"""GetDrawThicknessY(ChBeamSection self) -> double"""
        return _fea.ChBeamSection_GetDrawThicknessY(self)

    def GetDrawThicknessZ(self):
        r"""GetDrawThicknessZ(ChBeamSection self) -> double"""
        return _fea.ChBeamSection_GetDrawThicknessZ(self)

    def IsCircular(self):
        r"""IsCircular(ChBeamSection self) -> bool"""
        return _fea.ChBeamSection_IsCircular(self)

    def SetCircular(self, ic):
        r"""SetCircular(ChBeamSection self, bool ic)"""
        return _fea.ChBeamSection_SetCircular(self, ic)

    def SetDrawCircularRadius(self, draw_rad):
        r"""SetDrawCircularRadius(ChBeamSection self, double draw_rad)"""
        return _fea.ChBeamSection_SetDrawCircularRadius(self, draw_rad)

    def GetDrawCircularRadius(self):
        r"""GetDrawCircularRadius(ChBeamSection self) -> double"""
        return _fea.ChBeamSection_GetDrawCircularRadius(self)

# Register ChBeamSection in _fea:
_fea.ChBeamSection_swigregister(ChBeamSection)

class ChBeamSectionBasic(ChBeamSection):
    r"""Proxy of C++ chrono::fea::ChBeamSectionBasic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Area = property(_fea.ChBeamSectionBasic_Area_get, _fea.ChBeamSectionBasic_Area_set, doc=r"""Area : double""")
    Iyy = property(_fea.ChBeamSectionBasic_Iyy_get, _fea.ChBeamSectionBasic_Iyy_set, doc=r"""Iyy : double""")
    Izz = property(_fea.ChBeamSectionBasic_Izz_get, _fea.ChBeamSectionBasic_Izz_set, doc=r"""Izz : double""")
    J = property(_fea.ChBeamSectionBasic_J_get, _fea.ChBeamSectionBasic_J_set, doc=r"""J : double""")
    G = property(_fea.ChBeamSectionBasic_G_get, _fea.ChBeamSectionBasic_G_set, doc=r"""G : double""")
    E = property(_fea.ChBeamSectionBasic_E_get, _fea.ChBeamSectionBasic_E_set, doc=r"""E : double""")
    density = property(_fea.ChBeamSectionBasic_density_get, _fea.ChBeamSectionBasic_density_set, doc=r"""density : double""")
    rdamping = property(_fea.ChBeamSectionBasic_rdamping_get, _fea.ChBeamSectionBasic_rdamping_set, doc=r"""rdamping : double""")
    Ks_y = property(_fea.ChBeamSectionBasic_Ks_y_get, _fea.ChBeamSectionBasic_Ks_y_set, doc=r"""Ks_y : double""")
    Ks_z = property(_fea.ChBeamSectionBasic_Ks_z_get, _fea.ChBeamSectionBasic_Ks_z_set, doc=r"""Ks_z : double""")

    def __init__(self):
        r"""__init__(ChBeamSectionBasic self) -> ChBeamSectionBasic"""
        _fea.ChBeamSectionBasic_swiginit(self, _fea.new_ChBeamSectionBasic())
    __swig_destroy__ = _fea.delete_ChBeamSectionBasic

    def SetArea(self, ma):
        r"""SetArea(ChBeamSectionBasic self, double const ma)"""
        return _fea.ChBeamSectionBasic_SetArea(self, ma)

    def GetArea(self):
        r"""GetArea(ChBeamSectionBasic self) -> double"""
        return _fea.ChBeamSectionBasic_GetArea(self)

    def SetIyy(self, ma):
        r"""SetIyy(ChBeamSectionBasic self, double ma)"""
        return _fea.ChBeamSectionBasic_SetIyy(self, ma)

    def GetIyy(self):
        r"""GetIyy(ChBeamSectionBasic self) -> double"""
        return _fea.ChBeamSectionBasic_GetIyy(self)

    def SetIzz(self, ma):
        r"""SetIzz(ChBeamSectionBasic self, double ma)"""
        return _fea.ChBeamSectionBasic_SetIzz(self, ma)

    def GetIzz(self):
        r"""GetIzz(ChBeamSectionBasic self) -> double"""
        return _fea.ChBeamSectionBasic_GetIzz(self)

    def SetJ(self, ma):
        r"""SetJ(ChBeamSectionBasic self, double ma)"""
        return _fea.ChBeamSectionBasic_SetJ(self, ma)

    def GetJ(self):
        r"""GetJ(ChBeamSectionBasic self) -> double"""
        return _fea.ChBeamSectionBasic_GetJ(self)

    def SetKsy(self, ma):
        r"""SetKsy(ChBeamSectionBasic self, double ma)"""
        return _fea.ChBeamSectionBasic_SetKsy(self, ma)

    def GetKsy(self):
        r"""GetKsy(ChBeamSectionBasic self) -> double"""
        return _fea.ChBeamSectionBasic_GetKsy(self)

    def SetKsz(self, ma):
        r"""SetKsz(ChBeamSectionBasic self, double ma)"""
        return _fea.ChBeamSectionBasic_SetKsz(self, ma)

    def GetKsz(self):
        r"""GetKsz(ChBeamSectionBasic self) -> double"""
        return _fea.ChBeamSectionBasic_GetKsz(self)

    def SetAsRectangularSection(self, width_y, width_z):
        r"""SetAsRectangularSection(ChBeamSectionBasic self, double width_y, double width_z)"""
        return _fea.ChBeamSectionBasic_SetAsRectangularSection(self, width_y, width_z)

    def SetAsCircularSection(self, diameter):
        r"""SetAsCircularSection(ChBeamSectionBasic self, double diameter)"""
        return _fea.ChBeamSectionBasic_SetAsCircularSection(self, diameter)

    def SetDensity(self, md):
        r"""SetDensity(ChBeamSectionBasic self, double md)"""
        return _fea.ChBeamSectionBasic_SetDensity(self, md)

    def GetDensity(self):
        r"""GetDensity(ChBeamSectionBasic self) -> double"""
        return _fea.ChBeamSectionBasic_GetDensity(self)

    def SetYoungModulus(self, mE):
        r"""SetYoungModulus(ChBeamSectionBasic self, double mE)"""
        return _fea.ChBeamSectionBasic_SetYoungModulus(self, mE)

    def GetYoungModulus(self):
        r"""GetYoungModulus(ChBeamSectionBasic self) -> double"""
        return _fea.ChBeamSectionBasic_GetYoungModulus(self)

    def SetGshearModulus(self, mG):
        r"""SetGshearModulus(ChBeamSectionBasic self, double mG)"""
        return _fea.ChBeamSectionBasic_SetGshearModulus(self, mG)

    def GetGshearModulus(self):
        r"""GetGshearModulus(ChBeamSectionBasic self) -> double"""
        return _fea.ChBeamSectionBasic_GetGshearModulus(self)

    def SetGwithPoissonRatio(self, mpoisson):
        r"""SetGwithPoissonRatio(ChBeamSectionBasic self, double mpoisson)"""
        return _fea.ChBeamSectionBasic_SetGwithPoissonRatio(self, mpoisson)

    def SetBeamRaleyghDamping(self, mr):
        r"""SetBeamRaleyghDamping(ChBeamSectionBasic self, double mr)"""
        return _fea.ChBeamSectionBasic_SetBeamRaleyghDamping(self, mr)

    def GetBeamRaleyghDamping(self):
        r"""GetBeamRaleyghDamping(ChBeamSectionBasic self) -> double"""
        return _fea.ChBeamSectionBasic_GetBeamRaleyghDamping(self)

# Register ChBeamSectionBasic in _fea:
_fea.ChBeamSectionBasic_swigregister(ChBeamSectionBasic)

class ChBeamSectionAdvanced(ChBeamSectionBasic):
    r"""Proxy of C++ chrono::fea::ChBeamSectionAdvanced class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    alpha = property(_fea.ChBeamSectionAdvanced_alpha_get, _fea.ChBeamSectionAdvanced_alpha_set, doc=r"""alpha : double""")
    Cy = property(_fea.ChBeamSectionAdvanced_Cy_get, _fea.ChBeamSectionAdvanced_Cy_set, doc=r"""Cy : double""")
    Cz = property(_fea.ChBeamSectionAdvanced_Cz_get, _fea.ChBeamSectionAdvanced_Cz_set, doc=r"""Cz : double""")
    Sy = property(_fea.ChBeamSectionAdvanced_Sy_get, _fea.ChBeamSectionAdvanced_Sy_set, doc=r"""Sy : double""")
    Sz = property(_fea.ChBeamSectionAdvanced_Sz_get, _fea.ChBeamSectionAdvanced_Sz_set, doc=r"""Sz : double""")

    def __init__(self):
        r"""__init__(ChBeamSectionAdvanced self) -> ChBeamSectionAdvanced"""
        _fea.ChBeamSectionAdvanced_swiginit(self, _fea.new_ChBeamSectionAdvanced())
    __swig_destroy__ = _fea.delete_ChBeamSectionAdvanced

    def SetSectionRotation(self, ma):
        r"""SetSectionRotation(ChBeamSectionAdvanced self, double ma)"""
        return _fea.ChBeamSectionAdvanced_SetSectionRotation(self, ma)

    def GetSectionRotation(self):
        r"""GetSectionRotation(ChBeamSectionAdvanced self) -> double"""
        return _fea.ChBeamSectionAdvanced_GetSectionRotation(self)

    def SetCentroid(self, my, mz):
        r"""SetCentroid(ChBeamSectionAdvanced self, double my, double mz)"""
        return _fea.ChBeamSectionAdvanced_SetCentroid(self, my, mz)

    def GetCentroidY(self):
        r"""GetCentroidY(ChBeamSectionAdvanced self) -> double"""
        return _fea.ChBeamSectionAdvanced_GetCentroidY(self)

    def GetCentroidZ(self):
        r"""GetCentroidZ(ChBeamSectionAdvanced self) -> double"""
        return _fea.ChBeamSectionAdvanced_GetCentroidZ(self)

    def SetShearCenter(self, my, mz):
        r"""SetShearCenter(ChBeamSectionAdvanced self, double my, double mz)"""
        return _fea.ChBeamSectionAdvanced_SetShearCenter(self, my, mz)

    def GetShearCenterY(self):
        r"""GetShearCenterY(ChBeamSectionAdvanced self) -> double"""
        return _fea.ChBeamSectionAdvanced_GetShearCenterY(self)

    def GetShearCenterZ(self):
        r"""GetShearCenterZ(ChBeamSectionAdvanced self) -> double"""
        return _fea.ChBeamSectionAdvanced_GetShearCenterZ(self)

# Register ChBeamSectionAdvanced in _fea:
_fea.ChBeamSectionAdvanced_swigregister(ChBeamSectionAdvanced)

class ChBeamSectionCable(ChBeamSection):
    r"""Proxy of C++ chrono::fea::ChBeamSectionCable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Area = property(_fea.ChBeamSectionCable_Area_get, _fea.ChBeamSectionCable_Area_set, doc=r"""Area : double""")
    I = property(_fea.ChBeamSectionCable_I_get, _fea.ChBeamSectionCable_I_set, doc=r"""I : double""")
    E = property(_fea.ChBeamSectionCable_E_get, _fea.ChBeamSectionCable_E_set, doc=r"""E : double""")
    density = property(_fea.ChBeamSectionCable_density_get, _fea.ChBeamSectionCable_density_set, doc=r"""density : double""")
    rdamping = property(_fea.ChBeamSectionCable_rdamping_get, _fea.ChBeamSectionCable_rdamping_set, doc=r"""rdamping : double""")

    def __init__(self):
        r"""__init__(ChBeamSectionCable self) -> ChBeamSectionCable"""
        _fea.ChBeamSectionCable_swiginit(self, _fea.new_ChBeamSectionCable())
    __swig_destroy__ = _fea.delete_ChBeamSectionCable

    def SetArea(self, ma):
        r"""SetArea(ChBeamSectionCable self, double const ma)"""
        return _fea.ChBeamSectionCable_SetArea(self, ma)

    def GetArea(self):
        r"""GetArea(ChBeamSectionCable self) -> double"""
        return _fea.ChBeamSectionCable_GetArea(self)

    def SetI(self, ma):
        r"""SetI(ChBeamSectionCable self, double ma)"""
        return _fea.ChBeamSectionCable_SetI(self, ma)

    def GetI(self):
        r"""GetI(ChBeamSectionCable self) -> double"""
        return _fea.ChBeamSectionCable_GetI(self)

    def SetDiameter(self, diameter):
        r"""SetDiameter(ChBeamSectionCable self, double diameter)"""
        return _fea.ChBeamSectionCable_SetDiameter(self, diameter)

    def SetDensity(self, md):
        r"""SetDensity(ChBeamSectionCable self, double md)"""
        return _fea.ChBeamSectionCable_SetDensity(self, md)

    def GetDensity(self):
        r"""GetDensity(ChBeamSectionCable self) -> double"""
        return _fea.ChBeamSectionCable_GetDensity(self)

    def SetYoungModulus(self, mE):
        r"""SetYoungModulus(ChBeamSectionCable self, double mE)"""
        return _fea.ChBeamSectionCable_SetYoungModulus(self, mE)

    def GetYoungModulus(self):
        r"""GetYoungModulus(ChBeamSectionCable self) -> double"""
        return _fea.ChBeamSectionCable_GetYoungModulus(self)

    def SetBeamRaleyghDamping(self, mr):
        r"""SetBeamRaleyghDamping(ChBeamSectionCable self, double mr)"""
        return _fea.ChBeamSectionCable_SetBeamRaleyghDamping(self, mr)

    def GetBeamRaleyghDamping(self):
        r"""GetBeamRaleyghDamping(ChBeamSectionCable self) -> double"""
        return _fea.ChBeamSectionCable_GetBeamRaleyghDamping(self)

# Register ChBeamSectionCable in _fea:
_fea.ChBeamSectionCable_swigregister(ChBeamSectionCable)

class ChElasticityCosserat(object):
    r"""Proxy of C++ chrono::fea::ChElasticityCosserat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fea.delete_ChElasticityCosserat

    def ComputeStress(self, stress_n, stress_m, strain_e, strain_k):
        r"""ComputeStress(ChElasticityCosserat self, ChVectorD stress_n, ChVectorD stress_m, ChVectorD strain_e, ChVectorD strain_k)"""
        return _fea.ChElasticityCosserat_ComputeStress(self, stress_n, stress_m, strain_e, strain_k)

    def ComputeStiffnessMatrix(self, K, strain_e, strain_k):
        r"""ComputeStiffnessMatrix(ChElasticityCosserat self, ChMatrixDynamicD K, ChVectorD strain_e, ChVectorD strain_k)"""
        return _fea.ChElasticityCosserat_ComputeStiffnessMatrix(self, K, strain_e, strain_k)

    def SetAsRectangularSection(self, width_y, width_z):
        r"""SetAsRectangularSection(ChElasticityCosserat self, double width_y, double width_z)"""
        return _fea.ChElasticityCosserat_SetAsRectangularSection(self, width_y, width_z)

    def SetAsCircularSection(self, diameter):
        r"""SetAsCircularSection(ChElasticityCosserat self, double diameter)"""
        return _fea.ChElasticityCosserat_SetAsCircularSection(self, diameter)
    section = property(_fea.ChElasticityCosserat_section_get, _fea.ChElasticityCosserat_section_set, doc=r"""section : p.chrono::fea::ChBeamSectionCosserat""")

# Register ChElasticityCosserat in _fea:
_fea.ChElasticityCosserat_swigregister(ChElasticityCosserat)

class ChElasticityCosseratSimple(ChElasticityCosserat):
    r"""Proxy of C++ chrono::fea::ChElasticityCosseratSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Iyy = property(_fea.ChElasticityCosseratSimple_Iyy_get, _fea.ChElasticityCosseratSimple_Iyy_set, doc=r"""Iyy : double""")
    Izz = property(_fea.ChElasticityCosseratSimple_Izz_get, _fea.ChElasticityCosseratSimple_Izz_set, doc=r"""Izz : double""")
    J = property(_fea.ChElasticityCosseratSimple_J_get, _fea.ChElasticityCosseratSimple_J_set, doc=r"""J : double""")
    G = property(_fea.ChElasticityCosseratSimple_G_get, _fea.ChElasticityCosseratSimple_G_set, doc=r"""G : double""")
    E = property(_fea.ChElasticityCosseratSimple_E_get, _fea.ChElasticityCosseratSimple_E_set, doc=r"""E : double""")
    rdamping = property(_fea.ChElasticityCosseratSimple_rdamping_get, _fea.ChElasticityCosseratSimple_rdamping_set, doc=r"""rdamping : double""")
    Ks_y = property(_fea.ChElasticityCosseratSimple_Ks_y_get, _fea.ChElasticityCosseratSimple_Ks_y_set, doc=r"""Ks_y : double""")
    Ks_z = property(_fea.ChElasticityCosseratSimple_Ks_z_get, _fea.ChElasticityCosseratSimple_Ks_z_set, doc=r"""Ks_z : double""")

    def __init__(self):
        r"""__init__(ChElasticityCosseratSimple self) -> ChElasticityCosseratSimple"""
        _fea.ChElasticityCosseratSimple_swiginit(self, _fea.new_ChElasticityCosseratSimple())
    __swig_destroy__ = _fea.delete_ChElasticityCosseratSimple

    def SetIyy(self, ma):
        r"""SetIyy(ChElasticityCosseratSimple self, double ma)"""
        return _fea.ChElasticityCosseratSimple_SetIyy(self, ma)

    def GetIyy(self):
        r"""GetIyy(ChElasticityCosseratSimple self) -> double"""
        return _fea.ChElasticityCosseratSimple_GetIyy(self)

    def SetIzz(self, ma):
        r"""SetIzz(ChElasticityCosseratSimple self, double ma)"""
        return _fea.ChElasticityCosseratSimple_SetIzz(self, ma)

    def GetIzz(self):
        r"""GetIzz(ChElasticityCosseratSimple self) -> double"""
        return _fea.ChElasticityCosseratSimple_GetIzz(self)

    def SetJ(self, ma):
        r"""SetJ(ChElasticityCosseratSimple self, double ma)"""
        return _fea.ChElasticityCosseratSimple_SetJ(self, ma)

    def GetJ(self):
        r"""GetJ(ChElasticityCosseratSimple self) -> double"""
        return _fea.ChElasticityCosseratSimple_GetJ(self)

    def SetKsy(self, ma):
        r"""SetKsy(ChElasticityCosseratSimple self, double ma)"""
        return _fea.ChElasticityCosseratSimple_SetKsy(self, ma)

    def GetKsy(self):
        r"""GetKsy(ChElasticityCosseratSimple self) -> double"""
        return _fea.ChElasticityCosseratSimple_GetKsy(self)

    def SetKsz(self, ma):
        r"""SetKsz(ChElasticityCosseratSimple self, double ma)"""
        return _fea.ChElasticityCosseratSimple_SetKsz(self, ma)

    def GetKsz(self):
        r"""GetKsz(ChElasticityCosseratSimple self) -> double"""
        return _fea.ChElasticityCosseratSimple_GetKsz(self)

    def SetAsRectangularSection(self, width_y, width_z):
        r"""SetAsRectangularSection(ChElasticityCosseratSimple self, double width_y, double width_z)"""
        return _fea.ChElasticityCosseratSimple_SetAsRectangularSection(self, width_y, width_z)

    def SetAsCircularSection(self, diameter):
        r"""SetAsCircularSection(ChElasticityCosseratSimple self, double diameter)"""
        return _fea.ChElasticityCosseratSimple_SetAsCircularSection(self, diameter)

    def SetYoungModulus(self, mE):
        r"""SetYoungModulus(ChElasticityCosseratSimple self, double mE)"""
        return _fea.ChElasticityCosseratSimple_SetYoungModulus(self, mE)

    def GetYoungModulus(self):
        r"""GetYoungModulus(ChElasticityCosseratSimple self) -> double"""
        return _fea.ChElasticityCosseratSimple_GetYoungModulus(self)

    def SetGshearModulus(self, mG):
        r"""SetGshearModulus(ChElasticityCosseratSimple self, double mG)"""
        return _fea.ChElasticityCosseratSimple_SetGshearModulus(self, mG)

    def GetGshearModulus(self):
        r"""GetGshearModulus(ChElasticityCosseratSimple self) -> double"""
        return _fea.ChElasticityCosseratSimple_GetGshearModulus(self)

    def SetGwithPoissonRatio(self, mpoisson):
        r"""SetGwithPoissonRatio(ChElasticityCosseratSimple self, double mpoisson)"""
        return _fea.ChElasticityCosseratSimple_SetGwithPoissonRatio(self, mpoisson)

    def SetBeamRaleyghDamping(self, mr):
        r"""SetBeamRaleyghDamping(ChElasticityCosseratSimple self, double mr)"""
        return _fea.ChElasticityCosseratSimple_SetBeamRaleyghDamping(self, mr)

    def GetBeamRaleyghDamping(self):
        r"""GetBeamRaleyghDamping(ChElasticityCosseratSimple self) -> double"""
        return _fea.ChElasticityCosseratSimple_GetBeamRaleyghDamping(self)

    def ComputeStress(self, stress_n, stress_m, strain_e, strain_k):
        r"""ComputeStress(ChElasticityCosseratSimple self, ChVectorD stress_n, ChVectorD stress_m, ChVectorD strain_e, ChVectorD strain_k)"""
        return _fea.ChElasticityCosseratSimple_ComputeStress(self, stress_n, stress_m, strain_e, strain_k)

    def ComputeStiffnessMatrix(self, K, strain_e, strain_k):
        r"""ComputeStiffnessMatrix(ChElasticityCosseratSimple self, ChMatrixDynamicD K, ChVectorD strain_e, ChVectorD strain_k)"""
        return _fea.ChElasticityCosseratSimple_ComputeStiffnessMatrix(self, K, strain_e, strain_k)

# Register ChElasticityCosseratSimple in _fea:
_fea.ChElasticityCosseratSimple_swigregister(ChElasticityCosseratSimple)

class ChElasticityCosseratGeneric(ChElasticityCosserat):
    r"""Proxy of C++ chrono::fea::ChElasticityCosseratGeneric class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChElasticityCosseratGeneric self) -> ChElasticityCosseratGeneric"""
        _fea.ChElasticityCosseratGeneric_swiginit(self, _fea.new_ChElasticityCosseratGeneric())
    __swig_destroy__ = _fea.delete_ChElasticityCosseratGeneric

    def Ematrix(self):
        r"""Ematrix(ChElasticityCosseratGeneric self) -> chrono::ChMatrixNM< double,6,6 > &"""
        return _fea.ChElasticityCosseratGeneric_Ematrix(self)

    def SetAsRectangularSection(self, width_y, width_z):
        r"""SetAsRectangularSection(ChElasticityCosseratGeneric self, double width_y, double width_z)"""
        return _fea.ChElasticityCosseratGeneric_SetAsRectangularSection(self, width_y, width_z)

    def SetAsCircularSection(self, diameter):
        r"""SetAsCircularSection(ChElasticityCosseratGeneric self, double diameter)"""
        return _fea.ChElasticityCosseratGeneric_SetAsCircularSection(self, diameter)

    def ComputeStress(self, stress_n, stress_m, strain_e, strain_k):
        r"""ComputeStress(ChElasticityCosseratGeneric self, ChVectorD stress_n, ChVectorD stress_m, ChVectorD strain_e, ChVectorD strain_k)"""
        return _fea.ChElasticityCosseratGeneric_ComputeStress(self, stress_n, stress_m, strain_e, strain_k)

    def ComputeStiffnessMatrix(self, K, strain_e, strain_k):
        r"""ComputeStiffnessMatrix(ChElasticityCosseratGeneric self, ChMatrixDynamicD K, ChVectorD strain_e, ChVectorD strain_k)"""
        return _fea.ChElasticityCosseratGeneric_ComputeStiffnessMatrix(self, K, strain_e, strain_k)

# Register ChElasticityCosseratGeneric in _fea:
_fea.ChElasticityCosseratGeneric_swigregister(ChElasticityCosseratGeneric)

class ChElasticityCosseratAdvanced(ChElasticityCosseratSimple):
    r"""Proxy of C++ chrono::fea::ChElasticityCosseratAdvanced class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    alpha = property(_fea.ChElasticityCosseratAdvanced_alpha_get, _fea.ChElasticityCosseratAdvanced_alpha_set, doc=r"""alpha : double""")
    Cy = property(_fea.ChElasticityCosseratAdvanced_Cy_get, _fea.ChElasticityCosseratAdvanced_Cy_set, doc=r"""Cy : double""")
    Cz = property(_fea.ChElasticityCosseratAdvanced_Cz_get, _fea.ChElasticityCosseratAdvanced_Cz_set, doc=r"""Cz : double""")
    beta = property(_fea.ChElasticityCosseratAdvanced_beta_get, _fea.ChElasticityCosseratAdvanced_beta_set, doc=r"""beta : double""")
    Sy = property(_fea.ChElasticityCosseratAdvanced_Sy_get, _fea.ChElasticityCosseratAdvanced_Sy_set, doc=r"""Sy : double""")
    Sz = property(_fea.ChElasticityCosseratAdvanced_Sz_get, _fea.ChElasticityCosseratAdvanced_Sz_set, doc=r"""Sz : double""")

    def __init__(self):
        r"""__init__(ChElasticityCosseratAdvanced self) -> ChElasticityCosseratAdvanced"""
        _fea.ChElasticityCosseratAdvanced_swiginit(self, _fea.new_ChElasticityCosseratAdvanced())
    __swig_destroy__ = _fea.delete_ChElasticityCosseratAdvanced

    def SetSectionRotation(self, ma):
        r"""SetSectionRotation(ChElasticityCosseratAdvanced self, double ma)"""
        return _fea.ChElasticityCosseratAdvanced_SetSectionRotation(self, ma)

    def GetSectionRotation(self):
        r"""GetSectionRotation(ChElasticityCosseratAdvanced self) -> double"""
        return _fea.ChElasticityCosseratAdvanced_GetSectionRotation(self)

    def SetCentroid(self, my, mz):
        r"""SetCentroid(ChElasticityCosseratAdvanced self, double my, double mz)"""
        return _fea.ChElasticityCosseratAdvanced_SetCentroid(self, my, mz)

    def GetCentroidY(self):
        r"""GetCentroidY(ChElasticityCosseratAdvanced self) -> double"""
        return _fea.ChElasticityCosseratAdvanced_GetCentroidY(self)

    def GetCentroidZ(self):
        r"""GetCentroidZ(ChElasticityCosseratAdvanced self) -> double"""
        return _fea.ChElasticityCosseratAdvanced_GetCentroidZ(self)

    def SetShearRotation(self, mb):
        r"""SetShearRotation(ChElasticityCosseratAdvanced self, double mb)"""
        return _fea.ChElasticityCosseratAdvanced_SetShearRotation(self, mb)

    def GetShearRotation(self):
        r"""GetShearRotation(ChElasticityCosseratAdvanced self) -> double"""
        return _fea.ChElasticityCosseratAdvanced_GetShearRotation(self)

    def SetShearCenter(self, my, mz):
        r"""SetShearCenter(ChElasticityCosseratAdvanced self, double my, double mz)"""
        return _fea.ChElasticityCosseratAdvanced_SetShearCenter(self, my, mz)

    def GetShearCenterY(self):
        r"""GetShearCenterY(ChElasticityCosseratAdvanced self) -> double"""
        return _fea.ChElasticityCosseratAdvanced_GetShearCenterY(self)

    def GetShearCenterZ(self):
        r"""GetShearCenterZ(ChElasticityCosseratAdvanced self) -> double"""
        return _fea.ChElasticityCosseratAdvanced_GetShearCenterZ(self)

    def ComputeStress(self, stress_n, stress_m, strain_e, strain_k):
        r"""ComputeStress(ChElasticityCosseratAdvanced self, ChVectorD stress_n, ChVectorD stress_m, ChVectorD strain_e, ChVectorD strain_k)"""
        return _fea.ChElasticityCosseratAdvanced_ComputeStress(self, stress_n, stress_m, strain_e, strain_k)

    def ComputeStiffnessMatrix(self, K, strain_e, strain_k):
        r"""ComputeStiffnessMatrix(ChElasticityCosseratAdvanced self, ChMatrixDynamicD K, ChVectorD strain_e, ChVectorD strain_k)"""
        return _fea.ChElasticityCosseratAdvanced_ComputeStiffnessMatrix(self, K, strain_e, strain_k)

# Register ChElasticityCosseratAdvanced in _fea:
_fea.ChElasticityCosseratAdvanced_swigregister(ChElasticityCosseratAdvanced)

class ChElasticityCosseratMesh(ChElasticityCosserat):
    r"""Proxy of C++ chrono::fea::ChElasticityCosseratMesh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChElasticityCosseratMesh self) -> ChElasticityCosseratMesh"""
        _fea.ChElasticityCosseratMesh_swiginit(self, _fea.new_ChElasticityCosseratMesh())
    __swig_destroy__ = _fea.delete_ChElasticityCosseratMesh

    def Vertexes(self):
        r"""Vertexes(ChElasticityCosseratMesh self) -> std::vector< ChVector2< >,std::allocator< ChVector2< > > > &"""
        return _fea.ChElasticityCosseratMesh_Vertexes(self)

    def Materials(self):
        r"""Materials(ChElasticityCosseratMesh self) -> std::vector< std::shared_ptr< chrono::fea::ChElasticityCosseratMesh::ChSectionMaterial >,std::allocator< std::shared_ptr< chrono::fea::ChElasticityCosseratMesh::ChSectionMaterial > > > &"""
        return _fea.ChElasticityCosseratMesh_Materials(self)

    def Triangles(self):
        r"""Triangles(ChElasticityCosseratMesh self) -> std::vector< chrono::ChVector< int >,std::allocator< chrono::ChVector< int > > > &"""
        return _fea.ChElasticityCosseratMesh_Triangles(self)

    def SetAsRectangularSection(self, width_y, width_z):
        r"""SetAsRectangularSection(ChElasticityCosseratMesh self, double width_y, double width_z)"""
        return _fea.ChElasticityCosseratMesh_SetAsRectangularSection(self, width_y, width_z)

    def SetAsCircularSection(self, diameter):
        r"""SetAsCircularSection(ChElasticityCosseratMesh self, double diameter)"""
        return _fea.ChElasticityCosseratMesh_SetAsCircularSection(self, diameter)

    def ComputeStress(self, stress_n, stress_m, strain_e, strain_k):
        r"""ComputeStress(ChElasticityCosseratMesh self, ChVectorD stress_n, ChVectorD stress_m, ChVectorD strain_e, ChVectorD strain_k)"""
        return _fea.ChElasticityCosseratMesh_ComputeStress(self, stress_n, stress_m, strain_e, strain_k)

# Register ChElasticityCosseratMesh in _fea:
_fea.ChElasticityCosseratMesh_swigregister(ChElasticityCosseratMesh)

class ChSectionMaterial(object):
    r"""Proxy of C++ chrono::fea::ChElasticityCosseratMesh::ChSectionMaterial class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mE=1.0, mG=1.0):
        r"""__init__(ChSectionMaterial self, double mE=1.0, double mG=1.0) -> ChSectionMaterial"""
        _fea.ChSectionMaterial_swiginit(self, _fea.new_ChSectionMaterial(mE, mG))
    E = property(_fea.ChSectionMaterial_E_get, _fea.ChSectionMaterial_E_set, doc=r"""E : double""")
    G = property(_fea.ChSectionMaterial_G_get, _fea.ChSectionMaterial_G_set, doc=r"""G : double""")
    __swig_destroy__ = _fea.delete_ChSectionMaterial

# Register ChSectionMaterial in _fea:
_fea.ChSectionMaterial_swigregister(ChSectionMaterial)

class ChPlasticityCosserat(object):
    r"""Proxy of C++ chrono::fea::ChPlasticityCosserat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fea.delete_ChPlasticityCosserat

    def ComputeStressWithReturnMapping(self, stress_n, stress_m, e_strain_e_new, e_strain_k_new, data_new, tot_strain_e, tot_strain_k, data):
        r"""ComputeStressWithReturnMapping(ChPlasticityCosserat self, ChVectorD stress_n, ChVectorD stress_m, ChVectorD e_strain_e_new, ChVectorD e_strain_k_new, ChBeamMaterialInternalData data_new, ChVectorD tot_strain_e, ChVectorD tot_strain_k, ChBeamMaterialInternalData data) -> bool"""
        return _fea.ChPlasticityCosserat_ComputeStressWithReturnMapping(self, stress_n, stress_m, e_strain_e_new, e_strain_k_new, data_new, tot_strain_e, tot_strain_k, data)

    def ComputeStiffnessMatrixElastoplastic(self, K, strain_e, strain_k, data):
        r"""ComputeStiffnessMatrixElastoplastic(ChPlasticityCosserat self, ChMatrixDynamicD K, ChVectorD strain_e, ChVectorD strain_k, ChBeamMaterialInternalData data)"""
        return _fea.ChPlasticityCosserat_ComputeStiffnessMatrixElastoplastic(self, K, strain_e, strain_k, data)

    def CreatePlasticityData(self, numpoints, plastic_data):
        r"""CreatePlasticityData(ChPlasticityCosserat self, int numpoints, std::vector< std::unique_ptr< chrono::fea::ChBeamMaterialInternalData >,std::allocator< std::unique_ptr< chrono::fea::ChBeamMaterialInternalData > > > & plastic_data)"""
        return _fea.ChPlasticityCosserat_CreatePlasticityData(self, numpoints, plastic_data)

    def SetAsRectangularSection(self, width_y, width_z):
        r"""SetAsRectangularSection(ChPlasticityCosserat self, double width_y, double width_z)"""
        return _fea.ChPlasticityCosserat_SetAsRectangularSection(self, width_y, width_z)

    def SetAsCircularSection(self, diameter):
        r"""SetAsCircularSection(ChPlasticityCosserat self, double diameter)"""
        return _fea.ChPlasticityCosserat_SetAsCircularSection(self, diameter)
    section = property(_fea.ChPlasticityCosserat_section_get, _fea.ChPlasticityCosserat_section_set, doc=r"""section : p.chrono::fea::ChBeamSectionCosserat""")
    nr_yeld_tolerance = property(_fea.ChPlasticityCosserat_nr_yeld_tolerance_get, _fea.ChPlasticityCosserat_nr_yeld_tolerance_set, doc=r"""nr_yeld_tolerance : double""")
    nr_yeld_maxiters = property(_fea.ChPlasticityCosserat_nr_yeld_maxiters_get, _fea.ChPlasticityCosserat_nr_yeld_maxiters_set, doc=r"""nr_yeld_maxiters : int""")

# Register ChPlasticityCosserat in _fea:
_fea.ChPlasticityCosserat_swigregister(ChPlasticityCosserat)

class ChInternalDataLumpedCosserat(ChBeamMaterialInternalData):
    r"""Proxy of C++ chrono::fea::ChInternalDataLumpedCosserat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChInternalDataLumpedCosserat self) -> ChInternalDataLumpedCosserat"""
        _fea.ChInternalDataLumpedCosserat_swiginit(self, _fea.new_ChInternalDataLumpedCosserat())
    __swig_destroy__ = _fea.delete_ChInternalDataLumpedCosserat

    def Copy(self, other):
        r"""Copy(ChInternalDataLumpedCosserat self, ChBeamMaterialInternalData other)"""
        return _fea.ChInternalDataLumpedCosserat_Copy(self, other)
    p_strain_acc_e = property(_fea.ChInternalDataLumpedCosserat_p_strain_acc_e_get, _fea.ChInternalDataLumpedCosserat_p_strain_acc_e_set, doc=r"""p_strain_acc_e : chrono::ChVector<()>""")
    p_strain_acc_k = property(_fea.ChInternalDataLumpedCosserat_p_strain_acc_k_get, _fea.ChInternalDataLumpedCosserat_p_strain_acc_k_set, doc=r"""p_strain_acc_k : chrono::ChVector<()>""")
    p_strain_e = property(_fea.ChInternalDataLumpedCosserat_p_strain_e_get, _fea.ChInternalDataLumpedCosserat_p_strain_e_set, doc=r"""p_strain_e : chrono::ChVector<()>""")
    p_strain_k = property(_fea.ChInternalDataLumpedCosserat_p_strain_k_get, _fea.ChInternalDataLumpedCosserat_p_strain_k_set, doc=r"""p_strain_k : chrono::ChVector<()>""")

# Register ChInternalDataLumpedCosserat in _fea:
_fea.ChInternalDataLumpedCosserat_swigregister(ChInternalDataLumpedCosserat)

class ChPlasticityCosseratLumped(ChPlasticityCosserat):
    r"""Proxy of C++ chrono::fea::ChPlasticityCosseratLumped class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChPlasticityCosseratLumped self) -> ChPlasticityCosseratLumped"""
        _fea.ChPlasticityCosseratLumped_swiginit(self, _fea.new_ChPlasticityCosseratLumped())
    __swig_destroy__ = _fea.delete_ChPlasticityCosseratLumped

    def ComputeStressWithReturnMapping(self, stress_n, stress_m, e_strain_e_new, e_strain_k_new, data_new, tot_strain_e, tot_strain_k, data):
        r"""ComputeStressWithReturnMapping(ChPlasticityCosseratLumped self, ChVectorD stress_n, ChVectorD stress_m, ChVectorD e_strain_e_new, ChVectorD e_strain_k_new, ChBeamMaterialInternalData data_new, ChVectorD tot_strain_e, ChVectorD tot_strain_k, ChBeamMaterialInternalData data) -> bool"""
        return _fea.ChPlasticityCosseratLumped_ComputeStressWithReturnMapping(self, stress_n, stress_m, e_strain_e_new, e_strain_k_new, data_new, tot_strain_e, tot_strain_k, data)

    def CreatePlasticityData(self, numpoints, plastic_data):
        r"""CreatePlasticityData(ChPlasticityCosseratLumped self, int numpoints, std::vector< std::unique_ptr< chrono::fea::ChBeamMaterialInternalData >,std::allocator< std::unique_ptr< chrono::fea::ChBeamMaterialInternalData > > > & plastic_data)"""
        return _fea.ChPlasticityCosseratLumped_CreatePlasticityData(self, numpoints, plastic_data)

    def SetAsRectangularSection(self, width_y, width_z):
        r"""SetAsRectangularSection(ChPlasticityCosseratLumped self, double width_y, double width_z)"""
        return _fea.ChPlasticityCosseratLumped_SetAsRectangularSection(self, width_y, width_z)

    def SetAsCircularSection(self, diameter):
        r"""SetAsCircularSection(ChPlasticityCosseratLumped self, double diameter)"""
        return _fea.ChPlasticityCosseratLumped_SetAsCircularSection(self, diameter)
    n_yeld_x = property(_fea.ChPlasticityCosseratLumped_n_yeld_x_get, _fea.ChPlasticityCosseratLumped_n_yeld_x_set, doc=r"""n_yeld_x : std::shared_ptr<(chrono::ChFunction)>""")
    n_beta_x = property(_fea.ChPlasticityCosseratLumped_n_beta_x_get, _fea.ChPlasticityCosseratLumped_n_beta_x_set, doc=r"""n_beta_x : std::shared_ptr<(chrono::ChFunction)>""")
    n_yeld_y = property(_fea.ChPlasticityCosseratLumped_n_yeld_y_get, _fea.ChPlasticityCosseratLumped_n_yeld_y_set, doc=r"""n_yeld_y : std::shared_ptr<(chrono::ChFunction)>""")
    n_beta_y = property(_fea.ChPlasticityCosseratLumped_n_beta_y_get, _fea.ChPlasticityCosseratLumped_n_beta_y_set, doc=r"""n_beta_y : std::shared_ptr<(chrono::ChFunction)>""")
    n_yeld_z = property(_fea.ChPlasticityCosseratLumped_n_yeld_z_get, _fea.ChPlasticityCosseratLumped_n_yeld_z_set, doc=r"""n_yeld_z : std::shared_ptr<(chrono::ChFunction)>""")
    n_beta_z = property(_fea.ChPlasticityCosseratLumped_n_beta_z_get, _fea.ChPlasticityCosseratLumped_n_beta_z_set, doc=r"""n_beta_z : std::shared_ptr<(chrono::ChFunction)>""")
    n_yeld_Mx = property(_fea.ChPlasticityCosseratLumped_n_yeld_Mx_get, _fea.ChPlasticityCosseratLumped_n_yeld_Mx_set, doc=r"""n_yeld_Mx : std::shared_ptr<(chrono::ChFunction)>""")
    n_beta_Mx = property(_fea.ChPlasticityCosseratLumped_n_beta_Mx_get, _fea.ChPlasticityCosseratLumped_n_beta_Mx_set, doc=r"""n_beta_Mx : std::shared_ptr<(chrono::ChFunction)>""")
    n_yeld_My = property(_fea.ChPlasticityCosseratLumped_n_yeld_My_get, _fea.ChPlasticityCosseratLumped_n_yeld_My_set, doc=r"""n_yeld_My : std::shared_ptr<(chrono::ChFunction)>""")
    n_beta_My = property(_fea.ChPlasticityCosseratLumped_n_beta_My_get, _fea.ChPlasticityCosseratLumped_n_beta_My_set, doc=r"""n_beta_My : std::shared_ptr<(chrono::ChFunction)>""")
    n_yeld_Mz = property(_fea.ChPlasticityCosseratLumped_n_yeld_Mz_get, _fea.ChPlasticityCosseratLumped_n_yeld_Mz_set, doc=r"""n_yeld_Mz : std::shared_ptr<(chrono::ChFunction)>""")
    n_beta_Mz = property(_fea.ChPlasticityCosseratLumped_n_beta_Mz_get, _fea.ChPlasticityCosseratLumped_n_beta_Mz_set, doc=r"""n_beta_Mz : std::shared_ptr<(chrono::ChFunction)>""")

# Register ChPlasticityCosseratLumped in _fea:
_fea.ChPlasticityCosseratLumped_swigregister(ChPlasticityCosseratLumped)

class ChDampingCosserat(object):
    r"""Proxy of C++ chrono::fea::ChDampingCosserat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fea.delete_ChDampingCosserat

    def ComputeStress(self, stress_n, stress_m, dstrain_e, dstrain_k):
        r"""ComputeStress(ChDampingCosserat self, ChVectorD stress_n, ChVectorD stress_m, ChVectorD dstrain_e, ChVectorD dstrain_k)"""
        return _fea.ChDampingCosserat_ComputeStress(self, stress_n, stress_m, dstrain_e, dstrain_k)

    def ComputeDampingMatrix(self, R, dstrain_e, dstrain_k):
        r"""ComputeDampingMatrix(ChDampingCosserat self, ChMatrixDynamicD R, ChVectorD dstrain_e, ChVectorD dstrain_k)"""
        return _fea.ChDampingCosserat_ComputeDampingMatrix(self, R, dstrain_e, dstrain_k)

    def SetAsRectangularSection(self, width_y, width_z):
        r"""SetAsRectangularSection(ChDampingCosserat self, double width_y, double width_z)"""
        return _fea.ChDampingCosserat_SetAsRectangularSection(self, width_y, width_z)

    def SetAsCircularSection(self, diameter):
        r"""SetAsCircularSection(ChDampingCosserat self, double diameter)"""
        return _fea.ChDampingCosserat_SetAsCircularSection(self, diameter)
    section = property(_fea.ChDampingCosserat_section_get, _fea.ChDampingCosserat_section_set, doc=r"""section : p.chrono::fea::ChBeamSectionCosserat""")

# Register ChDampingCosserat in _fea:
_fea.ChDampingCosserat_swigregister(ChDampingCosserat)

class ChDampingCosseratLinear(ChDampingCosserat):
    r"""Proxy of C++ chrono::fea::ChDampingCosseratLinear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChDampingCosseratLinear self) -> ChDampingCosseratLinear"""
        _fea.ChDampingCosseratLinear_swiginit(self, _fea.new_ChDampingCosseratLinear())
    __swig_destroy__ = _fea.delete_ChDampingCosseratLinear

    def ComputeStress(self, stress_n, stress_m, dstrain_e, dstrain_k):
        r"""ComputeStress(ChDampingCosseratLinear self, ChVectorD stress_n, ChVectorD stress_m, ChVectorD dstrain_e, ChVectorD dstrain_k)"""
        return _fea.ChDampingCosseratLinear_ComputeStress(self, stress_n, stress_m, dstrain_e, dstrain_k)

    def ComputeDampingMatrix(self, R, dstrain_e, dstrain_k):
        r"""ComputeDampingMatrix(ChDampingCosseratLinear self, ChMatrixDynamicD R, ChVectorD dstrain_e, ChVectorD dstrain_k)"""
        return _fea.ChDampingCosseratLinear_ComputeDampingMatrix(self, R, dstrain_e, dstrain_k)

    def GetDampingCoefficientsRe(self):
        r"""GetDampingCoefficientsRe(ChDampingCosseratLinear self) -> ChVectorD"""
        return _fea.ChDampingCosseratLinear_GetDampingCoefficientsRe(self)

    def SetDampingCoefficientsRe(self, mR_e):
        r"""SetDampingCoefficientsRe(ChDampingCosseratLinear self, ChVectorD mR_e)"""
        return _fea.ChDampingCosseratLinear_SetDampingCoefficientsRe(self, mR_e)

    def GetDampingCoefficientsRk(self):
        r"""GetDampingCoefficientsRk(ChDampingCosseratLinear self) -> ChVectorD"""
        return _fea.ChDampingCosseratLinear_GetDampingCoefficientsRk(self)

    def SetDampingCoefficientsRk(self, mR_k):
        r"""SetDampingCoefficientsRk(ChDampingCosseratLinear self, ChVectorD mR_k)"""
        return _fea.ChDampingCosseratLinear_SetDampingCoefficientsRk(self, mR_k)

    def SetAsRectangularSection(self, width_y, width_z):
        r"""SetAsRectangularSection(ChDampingCosseratLinear self, double width_y, double width_z)"""
        return _fea.ChDampingCosseratLinear_SetAsRectangularSection(self, width_y, width_z)

    def SetAsCircularSection(self, diameter):
        r"""SetAsCircularSection(ChDampingCosseratLinear self, double diameter)"""
        return _fea.ChDampingCosseratLinear_SetAsCircularSection(self, diameter)

# Register ChDampingCosseratLinear in _fea:
_fea.ChDampingCosseratLinear_swigregister(ChDampingCosseratLinear)

class ChBeamSectionCosserat(ChBeamSectionProperties):
    r"""Proxy of C++ chrono::fea::ChBeamSectionCosserat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChBeamSectionCosserat self, std::shared_ptr< chrono::fea::ChElasticityCosserat > melasticity) -> ChBeamSectionCosserat
        __init__(ChBeamSectionCosserat self, std::shared_ptr< chrono::fea::ChElasticityCosserat > melasticity, std::shared_ptr< chrono::fea::ChPlasticityCosserat > mplasticity) -> ChBeamSectionCosserat
        __init__(ChBeamSectionCosserat self, std::shared_ptr< chrono::fea::ChElasticityCosserat > melasticity, std::shared_ptr< chrono::fea::ChPlasticityCosserat > mplasticity, std::shared_ptr< chrono::fea::ChDampingCosserat > mdamping) -> ChBeamSectionCosserat
        """
        _fea.ChBeamSectionCosserat_swiginit(self, _fea.new_ChBeamSectionCosserat(*args))
    __swig_destroy__ = _fea.delete_ChBeamSectionCosserat

    def ComputeStress(self, stress_n, stress_m, strain_e, strain_k, mdata_new=None, mdata=None):
        r"""ComputeStress(ChBeamSectionCosserat self, ChVectorD stress_n, ChVectorD stress_m, ChVectorD strain_e, ChVectorD strain_k, ChBeamMaterialInternalData mdata_new=None, ChBeamMaterialInternalData mdata=None)"""
        return _fea.ChBeamSectionCosserat_ComputeStress(self, stress_n, stress_m, strain_e, strain_k, mdata_new, mdata)

    def ComputeStiffnessMatrix(self, K, strain_e, strain_k, mdata=None):
        r"""ComputeStiffnessMatrix(ChBeamSectionCosserat self, ChMatrixDynamicD K, ChVectorD strain_e, ChVectorD strain_k, ChBeamMaterialInternalData mdata=None)"""
        return _fea.ChBeamSectionCosserat_ComputeStiffnessMatrix(self, K, strain_e, strain_k, mdata)

    def SetElasticity(self, melasticity):
        r"""SetElasticity(ChBeamSectionCosserat self, std::shared_ptr< chrono::fea::ChElasticityCosserat > melasticity)"""
        return _fea.ChBeamSectionCosserat_SetElasticity(self, melasticity)

    def GetElasticity(self):
        r"""GetElasticity(ChBeamSectionCosserat self) -> std::shared_ptr< chrono::fea::ChElasticityCosserat >"""
        return _fea.ChBeamSectionCosserat_GetElasticity(self)

    def SetPlasticity(self, mplasticity):
        r"""SetPlasticity(ChBeamSectionCosserat self, std::shared_ptr< chrono::fea::ChPlasticityCosserat > mplasticity)"""
        return _fea.ChBeamSectionCosserat_SetPlasticity(self, mplasticity)

    def GetPlasticity(self):
        r"""GetPlasticity(ChBeamSectionCosserat self) -> std::shared_ptr< chrono::fea::ChPlasticityCosserat >"""
        return _fea.ChBeamSectionCosserat_GetPlasticity(self)

    def SetDamping(self, mdamping):
        r"""SetDamping(ChBeamSectionCosserat self, std::shared_ptr< chrono::fea::ChDampingCosserat > mdamping)"""
        return _fea.ChBeamSectionCosserat_SetDamping(self, mdamping)

    def GetDamping(self):
        r"""GetDamping(ChBeamSectionCosserat self) -> std::shared_ptr< chrono::fea::ChDampingCosserat >"""
        return _fea.ChBeamSectionCosserat_GetDamping(self)

    def SetAsRectangularSection(self, width_y, width_z):
        r"""SetAsRectangularSection(ChBeamSectionCosserat self, double width_y, double width_z)"""
        return _fea.ChBeamSectionCosserat_SetAsRectangularSection(self, width_y, width_z)

    def SetAsCircularSection(self, diameter):
        r"""SetAsCircularSection(ChBeamSectionCosserat self, double diameter)"""
        return _fea.ChBeamSectionCosserat_SetAsCircularSection(self, diameter)

# Register ChBeamSectionCosserat in _fea:
_fea.ChBeamSectionCosserat_swigregister(ChBeamSectionCosserat)

class ChElementBeam(ChElementGeneric):
    r"""Proxy of C++ chrono::fea::ChElementBeam class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fea.delete_ChElementBeam

    def EvaluateSectionDisplacement(self, eta, u_displ, u_rotaz):
        r"""EvaluateSectionDisplacement(ChElementBeam self, double const eta, ChVectorD u_displ, ChVectorD u_rotaz)"""
        return _fea.ChElementBeam_EvaluateSectionDisplacement(self, eta, u_displ, u_rotaz)

    def EvaluateSectionFrame(self, eta, point, rot):
        r"""EvaluateSectionFrame(ChElementBeam self, double const eta, ChVectorD point, ChQuaternionD rot)"""
        return _fea.ChElementBeam_EvaluateSectionFrame(self, eta, point, rot)

    def EvaluateSectionForceTorque(self, eta, Fforce, Mtorque):
        r"""EvaluateSectionForceTorque(ChElementBeam self, double const eta, ChVectorD Fforce, ChVectorD Mtorque)"""
        return _fea.ChElementBeam_EvaluateSectionForceTorque(self, eta, Fforce, Mtorque)

    def EvaluateSectionStrain(self, eta, StrainV):
        r"""EvaluateSectionStrain(ChElementBeam self, double const eta, ChVectorD StrainV)"""
        return _fea.ChElementBeam_EvaluateSectionStrain(self, eta, StrainV)

    def GetMass(self):
        r"""GetMass(ChElementBeam self) -> double"""
        return _fea.ChElementBeam_GetMass(self)

    def GetRestLength(self):
        r"""GetRestLength(ChElementBeam self) -> double"""
        return _fea.ChElementBeam_GetRestLength(self)

    def SetRestLength(self, ml):
        r"""SetRestLength(ChElementBeam self, double ml)"""
        return _fea.ChElementBeam_SetRestLength(self, ml)

# Register ChElementBeam in _fea:
_fea.ChElementBeam_swigregister(ChElementBeam)

class ChElementBeamEuler(ChElementBeam, pychrono.core.ChLoadableU, pychrono.core.ChLoadableUVW, ChElementCorotational):
    r"""Proxy of C++ chrono::fea::ChElementBeamEuler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChElementBeamEuler self) -> ChElementBeamEuler"""
        _fea.ChElementBeamEuler_swiginit(self, _fea.new_ChElementBeamEuler())
    __swig_destroy__ = _fea.delete_ChElementBeamEuler

    def GetNnodes(self):
        r"""GetNnodes(ChElementBeamEuler self) -> int"""
        return _fea.ChElementBeamEuler_GetNnodes(self)

    def GetNdofs(self):
        r"""GetNdofs(ChElementBeamEuler self) -> int"""
        return _fea.ChElementBeamEuler_GetNdofs(self)

    def GetNodeNdofs(self, n):
        r"""GetNodeNdofs(ChElementBeamEuler self, int n) -> int"""
        return _fea.ChElementBeamEuler_GetNodeNdofs(self, n)

    def GetNodeN(self, n):
        r"""GetNodeN(ChElementBeamEuler self, int n) -> std::shared_ptr< chrono::fea::ChNodeFEAbase >"""
        return _fea.ChElementBeamEuler_GetNodeN(self, n)

    def SetNodes(self, nodeA, nodeB):
        r"""SetNodes(ChElementBeamEuler self, std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > nodeA, std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > nodeB)"""
        return _fea.ChElementBeamEuler_SetNodes(self, nodeA, nodeB)

    def SetSection(self, my_material):
        r"""SetSection(ChElementBeamEuler self, std::shared_ptr< chrono::fea::ChBeamSectionAdvanced > my_material)"""
        return _fea.ChElementBeamEuler_SetSection(self, my_material)

    def GetSection(self):
        r"""GetSection(ChElementBeamEuler self) -> std::shared_ptr< chrono::fea::ChBeamSectionAdvanced >"""
        return _fea.ChElementBeamEuler_GetSection(self)

    def GetNodeA(self):
        r"""GetNodeA(ChElementBeamEuler self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzrot >"""
        return _fea.ChElementBeamEuler_GetNodeA(self)

    def GetNodeB(self):
        r"""GetNodeB(ChElementBeamEuler self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzrot >"""
        return _fea.ChElementBeamEuler_GetNodeB(self)

    def SetNodeAreferenceRot(self, mrot):
        r"""SetNodeAreferenceRot(ChElementBeamEuler self, ChQuaternionD mrot)"""
        return _fea.ChElementBeamEuler_SetNodeAreferenceRot(self, mrot)

    def GetNodeAreferenceRot(self):
        r"""GetNodeAreferenceRot(ChElementBeamEuler self) -> ChQuaternionD"""
        return _fea.ChElementBeamEuler_GetNodeAreferenceRot(self)

    def SetNodeBreferenceRot(self, mrot):
        r"""SetNodeBreferenceRot(ChElementBeamEuler self, ChQuaternionD mrot)"""
        return _fea.ChElementBeamEuler_SetNodeBreferenceRot(self, mrot)

    def GetNodeBreferenceRot(self):
        r"""GetNodeBreferenceRot(ChElementBeamEuler self) -> ChQuaternionD"""
        return _fea.ChElementBeamEuler_GetNodeBreferenceRot(self)

    def GetAbsoluteRotation(self):
        r"""GetAbsoluteRotation(ChElementBeamEuler self) -> ChQuaternionD"""
        return _fea.ChElementBeamEuler_GetAbsoluteRotation(self)

    def GetRefRotation(self):
        r"""GetRefRotation(ChElementBeamEuler self) -> ChQuaternionD"""
        return _fea.ChElementBeamEuler_GetRefRotation(self)

    def SetDisableCorotate(self, md):
        r"""SetDisableCorotate(ChElementBeamEuler self, bool md)"""
        return _fea.ChElementBeamEuler_SetDisableCorotate(self, md)

    def SetDisableProjector(self, md):
        r"""SetDisableProjector(ChElementBeamEuler self, bool md)"""
        return _fea.ChElementBeamEuler_SetDisableProjector(self, md)

    def SetForceSymmetricStiffness(self, md):
        r"""SetForceSymmetricStiffness(ChElementBeamEuler self, bool md)"""
        return _fea.ChElementBeamEuler_SetForceSymmetricStiffness(self, md)

    def ShapeFunctions(self, N, eta):
        r"""ShapeFunctions(ChElementBeamEuler self, chrono::fea::ChElementBeamEuler::ShapeVector & N, double eta)"""
        return _fea.ChElementBeamEuler_ShapeFunctions(self, N, eta)

    def Update(self):
        r"""Update(ChElementBeamEuler self)"""
        return _fea.ChElementBeamEuler_Update(self)

    def UpdateRotation(self):
        r"""UpdateRotation(ChElementBeamEuler self)"""
        return _fea.ChElementBeamEuler_UpdateRotation(self)

    def GetStateBlock(self, mD):
        r"""GetStateBlock(ChElementBeamEuler self, ChVectorDynamicD mD)"""
        return _fea.ChElementBeamEuler_GetStateBlock(self, mD)

    def GetField_dt(self, mD_dt):
        r"""GetField_dt(ChElementBeamEuler self, ChVectorDynamicD mD_dt)"""
        return _fea.ChElementBeamEuler_GetField_dt(self, mD_dt)

    def ComputeStiffnessMatrix(self):
        r"""ComputeStiffnessMatrix(ChElementBeamEuler self)"""
        return _fea.ChElementBeamEuler_ComputeStiffnessMatrix(self)

    def ComputeInternalForces(self, Fi):
        r"""ComputeInternalForces(ChElementBeamEuler self, ChVectorDynamicD Fi)"""
        return _fea.ChElementBeamEuler_ComputeInternalForces(self, Fi)

    def EvaluateSectionDisplacement(self, eta, u_displ, u_rotaz):
        r"""EvaluateSectionDisplacement(ChElementBeamEuler self, double const eta, ChVectorD u_displ, ChVectorD u_rotaz)"""
        return _fea.ChElementBeamEuler_EvaluateSectionDisplacement(self, eta, u_displ, u_rotaz)

    def EvaluateSectionFrame(self, eta, point, rot):
        r"""EvaluateSectionFrame(ChElementBeamEuler self, double const eta, ChVectorD point, ChQuaternionD rot)"""
        return _fea.ChElementBeamEuler_EvaluateSectionFrame(self, eta, point, rot)

    def EvaluateSectionForceTorque(self, eta, Fforce, Mtorque):
        r"""EvaluateSectionForceTorque(ChElementBeamEuler self, double const eta, ChVectorD Fforce, ChVectorD Mtorque)"""
        return _fea.ChElementBeamEuler_EvaluateSectionForceTorque(self, eta, Fforce, Mtorque)

    def EvaluateSectionStrain(self, eta, StrainV):
        r"""EvaluateSectionStrain(ChElementBeamEuler self, double const eta, ChVectorD StrainV)"""
        return _fea.ChElementBeamEuler_EvaluateSectionStrain(self, eta, StrainV)

    def LoadableGet_ndof_x(self):
        r"""LoadableGet_ndof_x(ChElementBeamEuler self) -> int"""
        return _fea.ChElementBeamEuler_LoadableGet_ndof_x(self)

    def LoadableGet_ndof_w(self):
        r"""LoadableGet_ndof_w(ChElementBeamEuler self) -> int"""
        return _fea.ChElementBeamEuler_LoadableGet_ndof_w(self)

    def LoadableGetStateBlock_x(self, block_offset, mD):
        r"""LoadableGetStateBlock_x(ChElementBeamEuler self, int block_offset, chrono::ChState & mD)"""
        return _fea.ChElementBeamEuler_LoadableGetStateBlock_x(self, block_offset, mD)

    def LoadableGetStateBlock_w(self, block_offset, mD):
        r"""LoadableGetStateBlock_w(ChElementBeamEuler self, int block_offset, chrono::ChStateDelta & mD)"""
        return _fea.ChElementBeamEuler_LoadableGetStateBlock_w(self, block_offset, mD)

    def LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""LoadableStateIncrement(ChElementBeamEuler self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChElementBeamEuler_LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def Get_field_ncoords(self):
        r"""Get_field_ncoords(ChElementBeamEuler self) -> int"""
        return _fea.ChElementBeamEuler_Get_field_ncoords(self)

    def GetSubBlocks(self):
        r"""GetSubBlocks(ChElementBeamEuler self) -> int"""
        return _fea.ChElementBeamEuler_GetSubBlocks(self)

    def GetSubBlockOffset(self, nblock):
        r"""GetSubBlockOffset(ChElementBeamEuler self, int nblock) -> unsigned int"""
        return _fea.ChElementBeamEuler_GetSubBlockOffset(self, nblock)

    def GetSubBlockSize(self, nblock):
        r"""GetSubBlockSize(ChElementBeamEuler self, int nblock) -> unsigned int"""
        return _fea.ChElementBeamEuler_GetSubBlockSize(self, nblock)

    def LoadableGetVariables(self, mvars):
        r"""LoadableGetVariables(ChElementBeamEuler self, std::vector< ChVariables *,std::allocator< ChVariables * > > & mvars)"""
        return _fea.ChElementBeamEuler_LoadableGetVariables(self, mvars)

    def ComputeNF(self, *args):
        r"""
        ComputeNF(ChElementBeamEuler self, double const U, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)
        ComputeNF(ChElementBeamEuler self, double const U, double const V, double const W, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)
        """
        return _fea.ChElementBeamEuler_ComputeNF(self, *args)

    def GetDensity(self):
        r"""GetDensity(ChElementBeamEuler self) -> double"""
        return _fea.ChElementBeamEuler_GetDensity(self)

# Register ChElementBeamEuler in _fea:
_fea.ChElementBeamEuler_swigregister(ChElementBeamEuler)

class ChMaterialBeamANCF(object):
    r"""Proxy of C++ chrono::fea::ChMaterialBeamANCF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChMaterialBeamANCF self, double rho, double E, double nu, double const & k1, double const & k2) -> ChMaterialBeamANCF
        __init__(ChMaterialBeamANCF self, double rho, ChVectorD E, ChVectorD nu, ChVectorD G, double const & k1, double const & k2) -> ChMaterialBeamANCF
        """
        _fea.ChMaterialBeamANCF_swiginit(self, _fea.new_ChMaterialBeamANCF(*args))

    def Get_rho(self):
        r"""Get_rho(ChMaterialBeamANCF self) -> double"""
        return _fea.ChMaterialBeamANCF_Get_rho(self)

    def Get_E_eps(self):
        r"""Get_E_eps(ChMaterialBeamANCF self) -> chrono::ChMatrixNM< double,6,6 > const &"""
        return _fea.ChMaterialBeamANCF_Get_E_eps(self)

    def Get_E_eps_Nu(self):
        r"""Get_E_eps_Nu(ChMaterialBeamANCF self) -> chrono::ChMatrixNM< double,6,6 > const &"""
        return _fea.ChMaterialBeamANCF_Get_E_eps_Nu(self)
    __swig_destroy__ = _fea.delete_ChMaterialBeamANCF

# Register ChMaterialBeamANCF in _fea:
_fea.ChMaterialBeamANCF_swigregister(ChMaterialBeamANCF)

class ChElementBeamANCF(ChElementBeam, pychrono.core.ChLoadableU, pychrono.core.ChLoadableUVW):
    r"""Proxy of C++ chrono::fea::ChElementBeamANCF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fea.delete_ChElementBeamANCF

    def GetNnodes(self):
        r"""GetNnodes(ChElementBeamANCF self) -> int"""
        return _fea.ChElementBeamANCF_GetNnodes(self)

    def GetNdofs(self):
        r"""GetNdofs(ChElementBeamANCF self) -> int"""
        return _fea.ChElementBeamANCF_GetNdofs(self)

    def GetNodeNdofs(self, n):
        r"""GetNodeNdofs(ChElementBeamANCF self, int n) -> int"""
        return _fea.ChElementBeamANCF_GetNodeNdofs(self, n)

    def SetNodes(self, nodeA, nodeB, nodeC):
        r"""SetNodes(ChElementBeamANCF self, std::shared_ptr< chrono::fea::ChNodeFEAxyzDD > nodeA, std::shared_ptr< chrono::fea::ChNodeFEAxyzDD > nodeB, std::shared_ptr< chrono::fea::ChNodeFEAxyzDD > nodeC)"""
        return _fea.ChElementBeamANCF_SetNodes(self, nodeA, nodeB, nodeC)

    def SetDimensions(self, lenX, beam_h, beam_w):
        r"""SetDimensions(ChElementBeamANCF self, double lenX, double beam_h, double beam_w)"""
        return _fea.ChElementBeamANCF_SetDimensions(self, lenX, beam_h, beam_w)

    def SetMaterial(self, beam_mat):
        r"""SetMaterial(ChElementBeamANCF self, std::shared_ptr< chrono::fea::ChMaterialBeamANCF > beam_mat)"""
        return _fea.ChElementBeamANCF_SetMaterial(self, beam_mat)

    def GetNodeN(self, n):
        r"""GetNodeN(ChElementBeamANCF self, int n) -> std::shared_ptr< chrono::fea::ChNodeFEAbase >"""
        return _fea.ChElementBeamANCF_GetNodeN(self, n)

    def GetNodeA(self):
        r"""GetNodeA(ChElementBeamANCF self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzDD >"""
        return _fea.ChElementBeamANCF_GetNodeA(self)

    def GetNodeB(self):
        r"""GetNodeB(ChElementBeamANCF self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzDD >"""
        return _fea.ChElementBeamANCF_GetNodeB(self)

    def GetNodeC(self):
        r"""GetNodeC(ChElementBeamANCF self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzDD >"""
        return _fea.ChElementBeamANCF_GetNodeC(self)

    def GetMaterial(self):
        r"""GetMaterial(ChElementBeamANCF self) -> std::shared_ptr< chrono::fea::ChMaterialBeamANCF >"""
        return _fea.ChElementBeamANCF_GetMaterial(self)

    def SetGravityOn(self, val):
        r"""SetGravityOn(ChElementBeamANCF self, bool val)"""
        return _fea.ChElementBeamANCF_SetGravityOn(self, val)

    def SetAlphaDamp(self, a):
        r"""SetAlphaDamp(ChElementBeamANCF self, double a)"""
        return _fea.ChElementBeamANCF_SetAlphaDamp(self, a)

    def GetLengthX(self):
        r"""GetLengthX(ChElementBeamANCF self) -> double"""
        return _fea.ChElementBeamANCF_GetLengthX(self)

    def GetThicknessY(self):
        r"""GetThicknessY(ChElementBeamANCF self) -> double"""
        return _fea.ChElementBeamANCF_GetThicknessY(self)

    def GetThicknessZ(self):
        r"""GetThicknessZ(ChElementBeamANCF self) -> double"""
        return _fea.ChElementBeamANCF_GetThicknessZ(self)

    def ShapeFunctions(self, N, x, y, z):
        r"""ShapeFunctions(ChElementBeamANCF self, chrono::fea::ChElementBeamANCF::ShapeVector & N, double x, double y, double z)"""
        return _fea.ChElementBeamANCF_ShapeFunctions(self, N, x, y, z)

    def ShapeFunctionsDerivativeX(self, Nx, x, y, z):
        r"""ShapeFunctionsDerivativeX(ChElementBeamANCF self, chrono::fea::ChElementBeamANCF::ShapeVector & Nx, double x, double y, double z)"""
        return _fea.ChElementBeamANCF_ShapeFunctionsDerivativeX(self, Nx, x, y, z)

    def ShapeFunctionsDerivativeY(self, Ny, x, y, z):
        r"""ShapeFunctionsDerivativeY(ChElementBeamANCF self, chrono::fea::ChElementBeamANCF::ShapeVector & Ny, double x, double y, double z)"""
        return _fea.ChElementBeamANCF_ShapeFunctionsDerivativeY(self, Ny, x, y, z)

    def ShapeFunctionsDerivativeZ(self, Nz, x, y, z):
        r"""ShapeFunctionsDerivativeZ(ChElementBeamANCF self, chrono::fea::ChElementBeamANCF::ShapeVector & Nz, double x, double y, double z)"""
        return _fea.ChElementBeamANCF_ShapeFunctionsDerivativeZ(self, Nz, x, y, z)

    def EvaluateBeamSectionStrains(self):
        r"""EvaluateBeamSectionStrains(ChElementBeamANCF self) -> ChVectorD"""
        return _fea.ChElementBeamANCF_EvaluateBeamSectionStrains(self)
    CMPoisson = _fea.ChElementBeamANCF_CMPoisson
    
    CMNoPoisson = _fea.ChElementBeamANCF_CMNoPoisson
    

    def GetStateBlock(self, mD):
        r"""GetStateBlock(ChElementBeamANCF self, ChVectorDynamicD mD)"""
        return _fea.ChElementBeamANCF_GetStateBlock(self, mD)

    def ComputeNodalMass(self):
        r"""ComputeNodalMass(ChElementBeamANCF self)"""
        return _fea.ChElementBeamANCF_ComputeNodalMass(self)

    def ComputeInternalForces(self, Fi):
        r"""ComputeInternalForces(ChElementBeamANCF self, ChVectorDynamicD Fi)"""
        return _fea.ChElementBeamANCF_ComputeInternalForces(self, Fi)

    def Update(self):
        r"""Update(ChElementBeamANCF self)"""
        return _fea.ChElementBeamANCF_Update(self)

    def EvaluateSectionStrain(self, arg2, arg3):
        r"""EvaluateSectionStrain(ChElementBeamANCF self, double const arg2, ChVectorD arg3)"""
        return _fea.ChElementBeamANCF_EvaluateSectionStrain(self, arg2, arg3)

    def EvaluateSectionForceTorque(self, arg2, arg3, arg4):
        r"""EvaluateSectionForceTorque(ChElementBeamANCF self, double const arg2, ChVectorD arg3, ChVectorD arg4)"""
        return _fea.ChElementBeamANCF_EvaluateSectionForceTorque(self, arg2, arg3, arg4)

    def EvaluateSectionDisplacement(self, eta, u_displ, u_rotaz):
        r"""EvaluateSectionDisplacement(ChElementBeamANCF self, double const eta, ChVectorD u_displ, ChVectorD u_rotaz)"""
        return _fea.ChElementBeamANCF_EvaluateSectionDisplacement(self, eta, u_displ, u_rotaz)

    def EvaluateSectionFrame(self, eta, point, rot):
        r"""EvaluateSectionFrame(ChElementBeamANCF self, double const eta, ChVectorD point, ChQuaternionD rot)"""
        return _fea.ChElementBeamANCF_EvaluateSectionFrame(self, eta, point, rot)

    def ComputeInternalJacobians(self, Kfactor, Rfactor):
        r"""ComputeInternalJacobians(ChElementBeamANCF self, double Kfactor, double Rfactor)"""
        return _fea.ChElementBeamANCF_ComputeInternalJacobians(self, Kfactor, Rfactor)

    def ComputeMassMatrix(self):
        r"""ComputeMassMatrix(ChElementBeamANCF self)"""
        return _fea.ChElementBeamANCF_ComputeMassMatrix(self)

    def ComputeGravityForce(self, g_acc):
        r"""ComputeGravityForce(ChElementBeamANCF self, ChVectorD g_acc)"""
        return _fea.ChElementBeamANCF_ComputeGravityForce(self, g_acc)

    def Calc_detJ0(self, *args):
        r"""
        Calc_detJ0(ChElementBeamANCF self, double x, double y, double z) -> double
        Calc_detJ0(ChElementBeamANCF self, double x, double y, double z, chrono::fea::ChElementBeamANCF::ShapeVector & Nx, chrono::fea::ChElementBeamANCF::ShapeVector & Ny, chrono::fea::ChElementBeamANCF::ShapeVector & Nz, chrono::ChMatrixNM< double,1,3 > & Nx_d0, chrono::ChMatrixNM< double,1,3 > & Ny_d0, chrono::ChMatrixNM< double,1,3 > & Nz_d0) -> double
        """
        return _fea.ChElementBeamANCF_Calc_detJ0(self, *args)

    def CalcCoordMatrix(self, d):
        r"""CalcCoordMatrix(ChElementBeamANCF self, chrono::ChMatrixNM< double,9,3 > & d)"""
        return _fea.ChElementBeamANCF_CalcCoordMatrix(self, d)

    def CalcCoordDerivMatrix(self, dt):
        r"""CalcCoordDerivMatrix(ChElementBeamANCF self, chrono::ChVectorN< double,27 > & dt)"""
        return _fea.ChElementBeamANCF_CalcCoordDerivMatrix(self, dt)

    def SetStrainFormulation(self, model):
        r"""SetStrainFormulation(ChElementBeamANCF self, chrono::fea::ChElementBeamANCF::StrainFormulation model)"""
        return _fea.ChElementBeamANCF_SetStrainFormulation(self, model)

    def GetStrainFormulation(self):
        r"""GetStrainFormulation(ChElementBeamANCF self) -> chrono::fea::ChElementBeamANCF::StrainFormulation"""
        return _fea.ChElementBeamANCF_GetStrainFormulation(self)

    def LoadableGet_ndof_x(self):
        r"""LoadableGet_ndof_x(ChElementBeamANCF self) -> int"""
        return _fea.ChElementBeamANCF_LoadableGet_ndof_x(self)

    def LoadableGet_ndof_w(self):
        r"""LoadableGet_ndof_w(ChElementBeamANCF self) -> int"""
        return _fea.ChElementBeamANCF_LoadableGet_ndof_w(self)

    def LoadableGetStateBlock_x(self, block_offset, mD):
        r"""LoadableGetStateBlock_x(ChElementBeamANCF self, int block_offset, chrono::ChState & mD)"""
        return _fea.ChElementBeamANCF_LoadableGetStateBlock_x(self, block_offset, mD)

    def LoadableGetStateBlock_w(self, block_offset, mD):
        r"""LoadableGetStateBlock_w(ChElementBeamANCF self, int block_offset, chrono::ChStateDelta & mD)"""
        return _fea.ChElementBeamANCF_LoadableGetStateBlock_w(self, block_offset, mD)

    def LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""LoadableStateIncrement(ChElementBeamANCF self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChElementBeamANCF_LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def Get_field_ncoords(self):
        r"""Get_field_ncoords(ChElementBeamANCF self) -> int"""
        return _fea.ChElementBeamANCF_Get_field_ncoords(self)

    def GetSubBlocks(self):
        r"""GetSubBlocks(ChElementBeamANCF self) -> int"""
        return _fea.ChElementBeamANCF_GetSubBlocks(self)

    def GetSubBlockOffset(self, nblock):
        r"""GetSubBlockOffset(ChElementBeamANCF self, int nblock) -> unsigned int"""
        return _fea.ChElementBeamANCF_GetSubBlockOffset(self, nblock)

    def GetSubBlockSize(self, nblock):
        r"""GetSubBlockSize(ChElementBeamANCF self, int nblock) -> unsigned int"""
        return _fea.ChElementBeamANCF_GetSubBlockSize(self, nblock)

    def EvaluateSectionVelNorm(self, U, Result):
        r"""EvaluateSectionVelNorm(ChElementBeamANCF self, double U, ChVectorD Result)"""
        return _fea.ChElementBeamANCF_EvaluateSectionVelNorm(self, U, Result)

    def LoadableGetVariables(self, mvars):
        r"""LoadableGetVariables(ChElementBeamANCF self, std::vector< ChVariables *,std::allocator< ChVariables * > > & mvars)"""
        return _fea.ChElementBeamANCF_LoadableGetVariables(self, mvars)

    def ComputeNF(self, *args):
        r"""
        ComputeNF(ChElementBeamANCF self, double const U, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)
        ComputeNF(ChElementBeamANCF self, double const U, double const V, double const W, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)
        """
        return _fea.ChElementBeamANCF_ComputeNF(self, *args)

    def GetDensity(self):
        r"""GetDensity(ChElementBeamANCF self) -> double"""
        return _fea.ChElementBeamANCF_GetDensity(self)

    def ComputeTangent(self, U):
        r"""ComputeTangent(ChElementBeamANCF self, double const U) -> ChVectorD"""
        return _fea.ChElementBeamANCF_ComputeTangent(self, U)

# Register ChElementBeamANCF in _fea:
_fea.ChElementBeamANCF_swigregister(ChElementBeamANCF)

class ChElementBeamIGA(ChElementBeam, pychrono.core.ChLoadableU, pychrono.core.ChLoadableUVW):
    r"""Proxy of C++ chrono::fea::ChElementBeamIGA class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChElementBeamIGA self) -> ChElementBeamIGA"""
        _fea.ChElementBeamIGA_swiginit(self, _fea.new_ChElementBeamIGA())
    __swig_destroy__ = _fea.delete_ChElementBeamIGA

    def GetNnodes(self):
        r"""GetNnodes(ChElementBeamIGA self) -> int"""
        return _fea.ChElementBeamIGA_GetNnodes(self)

    def GetNdofs(self):
        r"""GetNdofs(ChElementBeamIGA self) -> int"""
        return _fea.ChElementBeamIGA_GetNdofs(self)

    def GetNodeNdofs(self, n):
        r"""GetNodeNdofs(ChElementBeamIGA self, int n) -> int"""
        return _fea.ChElementBeamIGA_GetNodeNdofs(self, n)

    def GetNodeN(self, n):
        r"""GetNodeN(ChElementBeamIGA self, int n) -> std::shared_ptr< chrono::fea::ChNodeFEAbase >"""
        return _fea.ChElementBeamIGA_GetNodeN(self, n)

    def GetNodes(self):
        r"""GetNodes(ChElementBeamIGA self) -> vector_ChNodeFEAxyzrot"""
        return _fea.ChElementBeamIGA_GetNodes(self)

    def SetNodesCubic(self, nodeA, nodeB, nodeC, nodeD, knotA1, knotA2, knotB1, knotB2, knotB3, knotB4, knotB5, knotB6):
        r"""SetNodesCubic(ChElementBeamIGA self, std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > nodeA, std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > nodeB, std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > nodeC, std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > nodeD, double knotA1, double knotA2, double knotB1, double knotB2, double knotB3, double knotB4, double knotB5, double knotB6)"""
        return _fea.ChElementBeamIGA_SetNodesCubic(self, nodeA, nodeB, nodeC, nodeD, knotA1, knotA2, knotB1, knotB2, knotB3, knotB4, knotB5, knotB6)

    def SetNodesGenericOrder(self, mynodes, myknots, myorder):
        r"""SetNodesGenericOrder(ChElementBeamIGA self, vector_ChNodeFEAxyzrot mynodes, std::vector< double,std::allocator< double > > myknots, int myorder)"""
        return _fea.ChElementBeamIGA_SetNodesGenericOrder(self, mynodes, myknots, myorder)

    def SetIntegrationPoints(self, npoints_s, npoints_b):
        r"""SetIntegrationPoints(ChElementBeamIGA self, int npoints_s, int npoints_b)"""
        return _fea.ChElementBeamIGA_SetIntegrationPoints(self, npoints_s, npoints_b)

    def SetSection(self, my_material):
        r"""SetSection(ChElementBeamIGA self, std::shared_ptr< chrono::fea::ChBeamSectionCosserat > my_material)"""
        return _fea.ChElementBeamIGA_SetSection(self, my_material)

    def GetSection(self):
        r"""GetSection(ChElementBeamIGA self) -> std::shared_ptr< chrono::fea::ChBeamSectionCosserat >"""
        return _fea.ChElementBeamIGA_GetSection(self)

    def GetKnotSequence(self):
        r"""GetKnotSequence(ChElementBeamIGA self) -> ChVectorDynamicD"""
        return _fea.ChElementBeamIGA_GetKnotSequence(self)

    def GetU1(self):
        r"""GetU1(ChElementBeamIGA self) -> double"""
        return _fea.ChElementBeamIGA_GetU1(self)

    def GetU2(self):
        r"""GetU2(ChElementBeamIGA self) -> double"""
        return _fea.ChElementBeamIGA_GetU2(self)

    def Update(self):
        r"""Update(ChElementBeamIGA self)"""
        return _fea.ChElementBeamIGA_Update(self)

    def GetPlasticData(self):
        r"""GetPlasticData(ChElementBeamIGA self) -> std::vector< std::unique_ptr< chrono::fea::ChBeamMaterialInternalData >,std::allocator< std::unique_ptr< chrono::fea::ChBeamMaterialInternalData > > > &"""
        return _fea.ChElementBeamIGA_GetPlasticData(self)

    def GetStressN(self):
        r"""GetStressN(ChElementBeamIGA self) -> vector_ChVectorD"""
        return _fea.ChElementBeamIGA_GetStressN(self)

    def GetStressM(self):
        r"""GetStressM(ChElementBeamIGA self) -> vector_ChVectorD"""
        return _fea.ChElementBeamIGA_GetStressM(self)

    def GetStrainE(self):
        r"""GetStrainE(ChElementBeamIGA self) -> vector_ChVectorD"""
        return _fea.ChElementBeamIGA_GetStrainE(self)

    def GetStrainK(self):
        r"""GetStrainK(ChElementBeamIGA self) -> vector_ChVectorD"""
        return _fea.ChElementBeamIGA_GetStrainK(self)

    def GetStateBlock(self, mD):
        r"""GetStateBlock(ChElementBeamIGA self, ChVectorDynamicD mD)"""
        return _fea.ChElementBeamIGA_GetStateBlock(self, mD)

    def ComputeInternalForces(self, Fi):
        r"""ComputeInternalForces(ChElementBeamIGA self, ChVectorDynamicD Fi)"""
        return _fea.ChElementBeamIGA_ComputeInternalForces(self, Fi)

    def ComputeInternalForces_impl(self, Fi, state_x, state_w, used_for_differentiation=False):
        r"""ComputeInternalForces_impl(ChElementBeamIGA self, ChVectorDynamicD Fi, chrono::ChState & state_x, chrono::ChStateDelta & state_w, bool used_for_differentiation=False)"""
        return _fea.ChElementBeamIGA_ComputeInternalForces_impl(self, Fi, state_x, state_w, used_for_differentiation)

    def EvaluateSectionDisplacement(self, eta, u_displ, u_rotaz):
        r"""EvaluateSectionDisplacement(ChElementBeamIGA self, double const eta, ChVectorD u_displ, ChVectorD u_rotaz)"""
        return _fea.ChElementBeamIGA_EvaluateSectionDisplacement(self, eta, u_displ, u_rotaz)

    def EvaluateSectionPoint(self, eta, point):
        r"""EvaluateSectionPoint(ChElementBeamIGA self, double const eta, ChVectorD point)"""
        return _fea.ChElementBeamIGA_EvaluateSectionPoint(self, eta, point)

    def EvaluateSectionFrame(self, eta, point, rot):
        r"""EvaluateSectionFrame(ChElementBeamIGA self, double const eta, ChVectorD point, ChQuaternionD rot)"""
        return _fea.ChElementBeamIGA_EvaluateSectionFrame(self, eta, point, rot)

    def EvaluateSectionForceTorque(self, eta, Fforce, Mtorque):
        r"""EvaluateSectionForceTorque(ChElementBeamIGA self, double const eta, ChVectorD Fforce, ChVectorD Mtorque)"""
        return _fea.ChElementBeamIGA_EvaluateSectionForceTorque(self, eta, Fforce, Mtorque)

    def EvaluateSectionStrain(self, eta, StrainV):
        r"""EvaluateSectionStrain(ChElementBeamIGA self, double const eta, ChVectorD StrainV)"""
        return _fea.ChElementBeamIGA_EvaluateSectionStrain(self, eta, StrainV)

    def EleDoIntegration(self):
        r"""EleDoIntegration(ChElementBeamIGA self)"""
        return _fea.ChElementBeamIGA_EleDoIntegration(self)

    def LoadableGet_ndof_x(self):
        r"""LoadableGet_ndof_x(ChElementBeamIGA self) -> int"""
        return _fea.ChElementBeamIGA_LoadableGet_ndof_x(self)

    def LoadableGet_ndof_w(self):
        r"""LoadableGet_ndof_w(ChElementBeamIGA self) -> int"""
        return _fea.ChElementBeamIGA_LoadableGet_ndof_w(self)

    def LoadableGetStateBlock_x(self, block_offset, mD):
        r"""LoadableGetStateBlock_x(ChElementBeamIGA self, int block_offset, chrono::ChState & mD)"""
        return _fea.ChElementBeamIGA_LoadableGetStateBlock_x(self, block_offset, mD)

    def LoadableGetStateBlock_w(self, block_offset, mD):
        r"""LoadableGetStateBlock_w(ChElementBeamIGA self, int block_offset, chrono::ChStateDelta & mD)"""
        return _fea.ChElementBeamIGA_LoadableGetStateBlock_w(self, block_offset, mD)

    def LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""LoadableStateIncrement(ChElementBeamIGA self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChElementBeamIGA_LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def Get_field_ncoords(self):
        r"""Get_field_ncoords(ChElementBeamIGA self) -> int"""
        return _fea.ChElementBeamIGA_Get_field_ncoords(self)

    def GetSubBlocks(self):
        r"""GetSubBlocks(ChElementBeamIGA self) -> int"""
        return _fea.ChElementBeamIGA_GetSubBlocks(self)

    def GetSubBlockOffset(self, nblock):
        r"""GetSubBlockOffset(ChElementBeamIGA self, int nblock) -> unsigned int"""
        return _fea.ChElementBeamIGA_GetSubBlockOffset(self, nblock)

    def GetSubBlockSize(self, nblock):
        r"""GetSubBlockSize(ChElementBeamIGA self, int nblock) -> unsigned int"""
        return _fea.ChElementBeamIGA_GetSubBlockSize(self, nblock)

    def LoadableGetVariables(self, mvars):
        r"""LoadableGetVariables(ChElementBeamIGA self, std::vector< ChVariables *,std::allocator< ChVariables * > > & mvars)"""
        return _fea.ChElementBeamIGA_LoadableGetVariables(self, mvars)

    def ComputeNF(self, *args):
        r"""
        ComputeNF(ChElementBeamIGA self, double const U, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)
        ComputeNF(ChElementBeamIGA self, double const U, double const V, double const W, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)
        """
        return _fea.ChElementBeamIGA_ComputeNF(self, *args)

    def GetDensity(self):
        r"""GetDensity(ChElementBeamIGA self) -> double"""
        return _fea.ChElementBeamIGA_GetDensity(self)

# Register ChElementBeamIGA in _fea:
_fea.ChElementBeamIGA_swigregister(ChElementBeamIGA)

class ChContinuumPoisson3D(ChContinuumMaterial):
    r"""Proxy of C++ chrono::fea::ChContinuumPoisson3D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChContinuumPoisson3D self) -> ChContinuumPoisson3D
        __init__(ChContinuumPoisson3D self, ChContinuumPoisson3D other) -> ChContinuumPoisson3D
        """
        _fea.ChContinuumPoisson3D_swiginit(self, _fea.new_ChContinuumPoisson3D(*args))
    __swig_destroy__ = _fea.delete_ChContinuumPoisson3D

    def Get_ConstitutiveMatrix(self):
        r"""Get_ConstitutiveMatrix(ChContinuumPoisson3D self) -> ChMatrixDynamicD"""
        return _fea.ChContinuumPoisson3D_Get_ConstitutiveMatrix(self)

    def Get_DtMultiplier(self):
        r"""Get_DtMultiplier(ChContinuumPoisson3D self) -> double"""
        return _fea.ChContinuumPoisson3D_Get_DtMultiplier(self)

# Register ChContinuumPoisson3D in _fea:
_fea.ChContinuumPoisson3D_swigregister(ChContinuumPoisson3D)

class ChContinuumElectrostatics(ChContinuumPoisson3D):
    r"""Proxy of C++ chrono::fea::ChContinuumElectrostatics class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChContinuumElectrostatics self) -> ChContinuumElectrostatics
        __init__(ChContinuumElectrostatics self, ChContinuumElectrostatics other) -> ChContinuumElectrostatics
        """
        _fea.ChContinuumElectrostatics_swiginit(self, _fea.new_ChContinuumElectrostatics(*args))
    __swig_destroy__ = _fea.delete_ChContinuumElectrostatics

    def SetPermittivity(self, me):
        r"""SetPermittivity(ChContinuumElectrostatics self, double me)"""
        return _fea.ChContinuumElectrostatics_SetPermittivity(self, me)

    def SetRelativePermettivity(self, re):
        r"""SetRelativePermettivity(ChContinuumElectrostatics self, double re)"""
        return _fea.ChContinuumElectrostatics_SetRelativePermettivity(self, re)

    def GetPermittivity(self):
        r"""GetPermittivity(ChContinuumElectrostatics self) -> double"""
        return _fea.ChContinuumElectrostatics_GetPermittivity(self)

    def Get_PermittivityEmatrix(self):
        r"""Get_PermittivityEmatrix(ChContinuumElectrostatics self) -> ChMatrixDynamicD"""
        return _fea.ChContinuumElectrostatics_Get_PermittivityEmatrix(self)

# Register ChContinuumElectrostatics in _fea:
_fea.ChContinuumElectrostatics_swigregister(ChContinuumElectrostatics)

class ChContinuumThermal(ChContinuumPoisson3D):
    r"""Proxy of C++ chrono::fea::ChContinuumThermal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChContinuumThermal self) -> ChContinuumThermal
        __init__(ChContinuumThermal self, ChContinuumThermal other) -> ChContinuumThermal
        """
        _fea.ChContinuumThermal_swiginit(self, _fea.new_ChContinuumThermal(*args))
    __swig_destroy__ = _fea.delete_ChContinuumThermal

    def SetThermalConductivityK(self, mk):
        r"""SetThermalConductivityK(ChContinuumThermal self, double mk)"""
        return _fea.ChContinuumThermal_SetThermalConductivityK(self, mk)

    def GetThermalConductivityK(self):
        r"""GetThermalConductivityK(ChContinuumThermal self) -> double"""
        return _fea.ChContinuumThermal_GetThermalConductivityK(self)

    def SetMassSpecificHeatCapacity(self, mc):
        r"""SetMassSpecificHeatCapacity(ChContinuumThermal self, double mc)"""
        return _fea.ChContinuumThermal_SetMassSpecificHeatCapacity(self, mc)

    def GetMassSpecificHeatCapacity(self):
        r"""GetMassSpecificHeatCapacity(ChContinuumThermal self) -> double"""
        return _fea.ChContinuumThermal_GetMassSpecificHeatCapacity(self)

    def Get_ThermalKmatrix(self):
        r"""Get_ThermalKmatrix(ChContinuumThermal self) -> ChMatrixDynamicD"""
        return _fea.ChContinuumThermal_Get_ThermalKmatrix(self)

    def Get_DtMultiplier(self):
        r"""Get_DtMultiplier(ChContinuumThermal self) -> double"""
        return _fea.ChContinuumThermal_Get_DtMultiplier(self)

# Register ChContinuumThermal in _fea:
_fea.ChContinuumThermal_swigregister(ChContinuumThermal)

class ChElementTetrahedron(ChElementGeneric, ChElementCorotational):
    r"""Proxy of C++ chrono::fea::ChElementTetrahedron class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetVolume(self):
        r"""GetVolume(ChElementTetrahedron self) -> double"""
        return _fea.ChElementTetrahedron_GetVolume(self)

    def Update(self):
        r"""Update(ChElementTetrahedron self)"""
        return _fea.ChElementTetrahedron_Update(self)
    __swig_destroy__ = _fea.delete_ChElementTetrahedron

# Register ChElementTetrahedron in _fea:
_fea.ChElementTetrahedron_swigregister(ChElementTetrahedron)

class ChElementTetra_4(ChElementTetrahedron, pychrono.core.ChLoadableUVW):
    r"""Proxy of C++ chrono::fea::ChElementTetra_4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChElementTetra_4 self) -> ChElementTetra_4"""
        _fea.ChElementTetra_4_swiginit(self, _fea.new_ChElementTetra_4())
    __swig_destroy__ = _fea.delete_ChElementTetra_4

    def GetNnodes(self):
        r"""GetNnodes(ChElementTetra_4 self) -> int"""
        return _fea.ChElementTetra_4_GetNnodes(self)

    def GetNdofs(self):
        r"""GetNdofs(ChElementTetra_4 self) -> int"""
        return _fea.ChElementTetra_4_GetNdofs(self)

    def GetNodeNdofs(self, n):
        r"""GetNodeNdofs(ChElementTetra_4 self, int n) -> int"""
        return _fea.ChElementTetra_4_GetNodeNdofs(self, n)

    def GetNodeN(self, n):
        r"""GetNodeN(ChElementTetra_4 self, int n) -> std::shared_ptr< chrono::fea::ChNodeFEAbase >"""
        return _fea.ChElementTetra_4_GetNodeN(self, n)

    def SetNodes(self, nodeA, nodeB, nodeC, nodeD):
        r"""SetNodes(ChElementTetra_4 self, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeA, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeB, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeC, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeD)"""
        return _fea.ChElementTetra_4_SetNodes(self, nodeA, nodeB, nodeC, nodeD)

    def ShapeFunctions(self, N, r, s, t):
        r"""ShapeFunctions(ChElementTetra_4 self, chrono::fea::ChElementTetra_4::ShapeVector & N, double r, double s, double t)"""
        return _fea.ChElementTetra_4_ShapeFunctions(self, N, r, s, t)

    def GetStateBlock(self, mD):
        r"""GetStateBlock(ChElementTetra_4 self, ChVectorDynamicD mD)"""
        return _fea.ChElementTetra_4_GetStateBlock(self, mD)

    def ComputeVolume(self):
        r"""ComputeVolume(ChElementTetra_4 self) -> double"""
        return _fea.ChElementTetra_4_ComputeVolume(self)

    def ComputeStiffnessMatrix(self):
        r"""ComputeStiffnessMatrix(ChElementTetra_4 self)"""
        return _fea.ChElementTetra_4_ComputeStiffnessMatrix(self)

    def UpdateRotation(self):
        r"""UpdateRotation(ChElementTetra_4 self)"""
        return _fea.ChElementTetra_4_UpdateRotation(self)

    def ComputeInternalForces(self, Fi):
        r"""ComputeInternalForces(ChElementTetra_4 self, ChVectorDynamicD Fi)"""
        return _fea.ChElementTetra_4_ComputeInternalForces(self, Fi)

    def SetMaterial(self, my_material):
        r"""SetMaterial(ChElementTetra_4 self, std::shared_ptr< chrono::fea::ChContinuumElastic > my_material)"""
        return _fea.ChElementTetra_4_SetMaterial(self, my_material)

    def GetMaterial(self):
        r"""GetMaterial(ChElementTetra_4 self) -> std::shared_ptr< chrono::fea::ChContinuumElastic >"""
        return _fea.ChElementTetra_4_GetMaterial(self)

    def GetMatrB(self):
        r"""GetMatrB(ChElementTetra_4 self) -> ChMatrixDynamicD"""
        return _fea.ChElementTetra_4_GetMatrB(self)

    def GetStiffnessMatrix(self):
        r"""GetStiffnessMatrix(ChElementTetra_4 self) -> ChMatrixDynamicD"""
        return _fea.ChElementTetra_4_GetStiffnessMatrix(self)

    def GetStrain(self):
        r"""GetStrain(ChElementTetra_4 self) -> ChStrainTensor< >"""
        return _fea.ChElementTetra_4_GetStrain(self)

    def GetStress(self):
        r"""GetStress(ChElementTetra_4 self) -> ChStressTensor< >"""
        return _fea.ChElementTetra_4_GetStress(self)

    def ComputeNodalMass(self):
        r"""ComputeNodalMass(ChElementTetra_4 self)"""
        return _fea.ChElementTetra_4_ComputeNodalMass(self)

    def LoadableGet_ndof_x(self):
        r"""LoadableGet_ndof_x(ChElementTetra_4 self) -> int"""
        return _fea.ChElementTetra_4_LoadableGet_ndof_x(self)

    def LoadableGet_ndof_w(self):
        r"""LoadableGet_ndof_w(ChElementTetra_4 self) -> int"""
        return _fea.ChElementTetra_4_LoadableGet_ndof_w(self)

    def LoadableGetStateBlock_x(self, block_offset, mD):
        r"""LoadableGetStateBlock_x(ChElementTetra_4 self, int block_offset, chrono::ChState & mD)"""
        return _fea.ChElementTetra_4_LoadableGetStateBlock_x(self, block_offset, mD)

    def LoadableGetStateBlock_w(self, block_offset, mD):
        r"""LoadableGetStateBlock_w(ChElementTetra_4 self, int block_offset, chrono::ChStateDelta & mD)"""
        return _fea.ChElementTetra_4_LoadableGetStateBlock_w(self, block_offset, mD)

    def LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""LoadableStateIncrement(ChElementTetra_4 self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChElementTetra_4_LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def Get_field_ncoords(self):
        r"""Get_field_ncoords(ChElementTetra_4 self) -> int"""
        return _fea.ChElementTetra_4_Get_field_ncoords(self)

    def GetSubBlocks(self):
        r"""GetSubBlocks(ChElementTetra_4 self) -> int"""
        return _fea.ChElementTetra_4_GetSubBlocks(self)

    def GetSubBlockOffset(self, nblock):
        r"""GetSubBlockOffset(ChElementTetra_4 self, int nblock) -> unsigned int"""
        return _fea.ChElementTetra_4_GetSubBlockOffset(self, nblock)

    def GetSubBlockSize(self, nblock):
        r"""GetSubBlockSize(ChElementTetra_4 self, int nblock) -> unsigned int"""
        return _fea.ChElementTetra_4_GetSubBlockSize(self, nblock)

    def LoadableGetVariables(self, mvars):
        r"""LoadableGetVariables(ChElementTetra_4 self, std::vector< ChVariables *,std::allocator< ChVariables * > > & mvars)"""
        return _fea.ChElementTetra_4_LoadableGetVariables(self, mvars)

    def ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w):
        r"""ComputeNF(ChElementTetra_4 self, double const U, double const V, double const W, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _fea.ChElementTetra_4_ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w)

    def GetDensity(self):
        r"""GetDensity(ChElementTetra_4 self) -> double"""
        return _fea.ChElementTetra_4_GetDensity(self)

    def IsTetrahedronIntegrationNeeded(self):
        r"""IsTetrahedronIntegrationNeeded(ChElementTetra_4 self) -> bool"""
        return _fea.ChElementTetra_4_IsTetrahedronIntegrationNeeded(self)

# Register ChElementTetra_4 in _fea:
_fea.ChElementTetra_4_swigregister(ChElementTetra_4)

class ChElementTetra_4_P(ChElementTetrahedron, pychrono.core.ChLoadableUVW):
    r"""Proxy of C++ chrono::fea::ChElementTetra_4_P class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChElementTetra_4_P self) -> ChElementTetra_4_P"""
        _fea.ChElementTetra_4_P_swiginit(self, _fea.new_ChElementTetra_4_P())
    __swig_destroy__ = _fea.delete_ChElementTetra_4_P

    def GetNnodes(self):
        r"""GetNnodes(ChElementTetra_4_P self) -> int"""
        return _fea.ChElementTetra_4_P_GetNnodes(self)

    def GetNdofs(self):
        r"""GetNdofs(ChElementTetra_4_P self) -> int"""
        return _fea.ChElementTetra_4_P_GetNdofs(self)

    def GetNodeNdofs(self, n):
        r"""GetNodeNdofs(ChElementTetra_4_P self, int n) -> int"""
        return _fea.ChElementTetra_4_P_GetNodeNdofs(self, n)

    def GetNodeN(self, n):
        r"""GetNodeN(ChElementTetra_4_P self, int n) -> std::shared_ptr< chrono::fea::ChNodeFEAbase >"""
        return _fea.ChElementTetra_4_P_GetNodeN(self, n)

    def SetNodes(self, nodeA, nodeB, nodeC, nodeD):
        r"""SetNodes(ChElementTetra_4_P self, std::shared_ptr< chrono::fea::ChNodeFEAxyzP > nodeA, std::shared_ptr< chrono::fea::ChNodeFEAxyzP > nodeB, std::shared_ptr< chrono::fea::ChNodeFEAxyzP > nodeC, std::shared_ptr< chrono::fea::ChNodeFEAxyzP > nodeD)"""
        return _fea.ChElementTetra_4_P_SetNodes(self, nodeA, nodeB, nodeC, nodeD)

    def ShapeFunctions(self, N, z0, z1, z2):
        r"""ShapeFunctions(ChElementTetra_4_P self, chrono::fea::ChElementTetra_4_P::ShapeVector & N, double z0, double z1, double z2)"""
        return _fea.ChElementTetra_4_P_ShapeFunctions(self, N, z0, z1, z2)

    def GetStateBlock(self, mD):
        r"""GetStateBlock(ChElementTetra_4_P self, ChVectorDynamicD mD)"""
        return _fea.ChElementTetra_4_P_GetStateBlock(self, mD)

    def ComputeVolume(self):
        r"""ComputeVolume(ChElementTetra_4_P self) -> double"""
        return _fea.ChElementTetra_4_P_ComputeVolume(self)

    def ComputeStiffnessMatrix(self):
        r"""ComputeStiffnessMatrix(ChElementTetra_4_P self)"""
        return _fea.ChElementTetra_4_P_ComputeStiffnessMatrix(self)

    def UpdateRotation(self):
        r"""UpdateRotation(ChElementTetra_4_P self)"""
        return _fea.ChElementTetra_4_P_UpdateRotation(self)

    def ComputeInternalForces(self, Fi):
        r"""ComputeInternalForces(ChElementTetra_4_P self, ChVectorDynamicD Fi)"""
        return _fea.ChElementTetra_4_P_ComputeInternalForces(self, Fi)

    def SetMaterial(self, my_material):
        r"""SetMaterial(ChElementTetra_4_P self, std::shared_ptr< chrono::fea::ChContinuumPoisson3D > my_material)"""
        return _fea.ChElementTetra_4_P_SetMaterial(self, my_material)

    def GetMaterial(self):
        r"""GetMaterial(ChElementTetra_4_P self) -> std::shared_ptr< chrono::fea::ChContinuumPoisson3D >"""
        return _fea.ChElementTetra_4_P_GetMaterial(self)

    def GetMatrB(self):
        r"""GetMatrB(ChElementTetra_4_P self) -> ChMatrixDynamicD"""
        return _fea.ChElementTetra_4_P_GetMatrB(self)

    def GetStiffnessMatrix(self):
        r"""GetStiffnessMatrix(ChElementTetra_4_P self) -> ChMatrixDynamicD"""
        return _fea.ChElementTetra_4_P_GetStiffnessMatrix(self)

    def GetPgradient(self):
        r"""GetPgradient(ChElementTetra_4_P self) -> chrono::ChVectorN< double,3 >"""
        return _fea.ChElementTetra_4_P_GetPgradient(self)

    def LoadableGet_ndof_x(self):
        r"""LoadableGet_ndof_x(ChElementTetra_4_P self) -> int"""
        return _fea.ChElementTetra_4_P_LoadableGet_ndof_x(self)

    def LoadableGet_ndof_w(self):
        r"""LoadableGet_ndof_w(ChElementTetra_4_P self) -> int"""
        return _fea.ChElementTetra_4_P_LoadableGet_ndof_w(self)

    def LoadableGetStateBlock_x(self, block_offset, mD):
        r"""LoadableGetStateBlock_x(ChElementTetra_4_P self, int block_offset, chrono::ChState & mD)"""
        return _fea.ChElementTetra_4_P_LoadableGetStateBlock_x(self, block_offset, mD)

    def LoadableGetStateBlock_w(self, block_offset, mD):
        r"""LoadableGetStateBlock_w(ChElementTetra_4_P self, int block_offset, chrono::ChStateDelta & mD)"""
        return _fea.ChElementTetra_4_P_LoadableGetStateBlock_w(self, block_offset, mD)

    def LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""LoadableStateIncrement(ChElementTetra_4_P self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChElementTetra_4_P_LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def Get_field_ncoords(self):
        r"""Get_field_ncoords(ChElementTetra_4_P self) -> int"""
        return _fea.ChElementTetra_4_P_Get_field_ncoords(self)

    def GetSubBlocks(self):
        r"""GetSubBlocks(ChElementTetra_4_P self) -> int"""
        return _fea.ChElementTetra_4_P_GetSubBlocks(self)

    def GetSubBlockOffset(self, nblock):
        r"""GetSubBlockOffset(ChElementTetra_4_P self, int nblock) -> unsigned int"""
        return _fea.ChElementTetra_4_P_GetSubBlockOffset(self, nblock)

    def GetSubBlockSize(self, nblock):
        r"""GetSubBlockSize(ChElementTetra_4_P self, int nblock) -> unsigned int"""
        return _fea.ChElementTetra_4_P_GetSubBlockSize(self, nblock)

    def LoadableGetVariables(self, mvars):
        r"""LoadableGetVariables(ChElementTetra_4_P self, std::vector< ChVariables *,std::allocator< ChVariables * > > & mvars)"""
        return _fea.ChElementTetra_4_P_LoadableGetVariables(self, mvars)

    def ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w):
        r"""ComputeNF(ChElementTetra_4_P self, double const U, double const V, double const W, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _fea.ChElementTetra_4_P_ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w)

    def GetDensity(self):
        r"""GetDensity(ChElementTetra_4_P self) -> double"""
        return _fea.ChElementTetra_4_P_GetDensity(self)

    def IsTetrahedronIntegrationNeeded(self):
        r"""IsTetrahedronIntegrationNeeded(ChElementTetra_4_P self) -> bool"""
        return _fea.ChElementTetra_4_P_IsTetrahedronIntegrationNeeded(self)

# Register ChElementTetra_4_P in _fea:
_fea.ChElementTetra_4_P_swigregister(ChElementTetra_4_P)

class ChElementTetra_10(ChElementTetrahedron, pychrono.core.ChLoadableUVW):
    r"""Proxy of C++ chrono::fea::ChElementTetra_10 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChElementTetra_10 self) -> ChElementTetra_10"""
        _fea.ChElementTetra_10_swiginit(self, _fea.new_ChElementTetra_10())
    __swig_destroy__ = _fea.delete_ChElementTetra_10

    def GetNnodes(self):
        r"""GetNnodes(ChElementTetra_10 self) -> int"""
        return _fea.ChElementTetra_10_GetNnodes(self)

    def GetNdofs(self):
        r"""GetNdofs(ChElementTetra_10 self) -> int"""
        return _fea.ChElementTetra_10_GetNdofs(self)

    def GetNodeNdofs(self, n):
        r"""GetNodeNdofs(ChElementTetra_10 self, int n) -> int"""
        return _fea.ChElementTetra_10_GetNodeNdofs(self, n)

    def GetNodeN(self, n):
        r"""GetNodeN(ChElementTetra_10 self, int n) -> std::shared_ptr< chrono::fea::ChNodeFEAbase >"""
        return _fea.ChElementTetra_10_GetNodeN(self, n)

    def SetNodes(self, nodeA, nodeB, nodeC, nodeD, nodeE, nodeF, nodeG, nodeH, nodeI, nodeJ):
        r"""SetNodes(ChElementTetra_10 self, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeA, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeB, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeC, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeD, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeE, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeF, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeG, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeH, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeI, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeJ)"""
        return _fea.ChElementTetra_10_SetNodes(self, nodeA, nodeB, nodeC, nodeD, nodeE, nodeF, nodeG, nodeH, nodeI, nodeJ)

    def ShapeFunctions(self, N, r, s, t):
        r"""ShapeFunctions(ChElementTetra_10 self, chrono::fea::ChElementTetra_10::ShapeVector & N, double r, double s, double t)"""
        return _fea.ChElementTetra_10_ShapeFunctions(self, N, r, s, t)

    def GetStateBlock(self, mD):
        r"""GetStateBlock(ChElementTetra_10 self, ChVectorDynamicD mD)"""
        return _fea.ChElementTetra_10_GetStateBlock(self, mD)

    def ComputeVolume(self):
        r"""ComputeVolume(ChElementTetra_10 self) -> double"""
        return _fea.ChElementTetra_10_ComputeVolume(self)

    def ComputeJacobian(self, Jacobian, zeta1, zeta2, zeta3, zeta4):
        r"""ComputeJacobian(ChElementTetra_10 self, ChMatrixDynamicD Jacobian, double zeta1, double zeta2, double zeta3, double zeta4)"""
        return _fea.ChElementTetra_10_ComputeJacobian(self, Jacobian, zeta1, zeta2, zeta3, zeta4)

    def ComputeMatrB(self, mmatrB, zeta1, zeta2, zeta3, zeta4, JacobianDet):
        r"""ComputeMatrB(ChElementTetra_10 self, ChMatrixDynamicD mmatrB, double zeta1, double zeta2, double zeta3, double zeta4, double & JacobianDet)"""
        return _fea.ChElementTetra_10_ComputeMatrB(self, mmatrB, zeta1, zeta2, zeta3, zeta4, JacobianDet)

    def ComputeStiffnessMatrix(self):
        r"""ComputeStiffnessMatrix(ChElementTetra_10 self)"""
        return _fea.ChElementTetra_10_ComputeStiffnessMatrix(self)

    def GetParameterForNodeID(self, nodeID, z1, z2, z3, z4):
        r"""GetParameterForNodeID(ChElementTetra_10 self, int const nodeID, double & z1, double & z2, double & z3, double & z4)"""
        return _fea.ChElementTetra_10_GetParameterForNodeID(self, nodeID, z1, z2, z3, z4)

    def GetStrain(self, z1, z2, z3, z4):
        r"""GetStrain(ChElementTetra_10 self, double z1, double z2, double z3, double z4) -> ChStrainTensor< >"""
        return _fea.ChElementTetra_10_GetStrain(self, z1, z2, z3, z4)

    def GetStress(self, z1, z2, z3, z4):
        r"""GetStress(ChElementTetra_10 self, double z1, double z2, double z3, double z4) -> ChStressTensor< >"""
        return _fea.ChElementTetra_10_GetStress(self, z1, z2, z3, z4)

    def UpdateRotation(self):
        r"""UpdateRotation(ChElementTetra_10 self)"""
        return _fea.ChElementTetra_10_UpdateRotation(self)

    def ComputeInternalForces(self, Fi):
        r"""ComputeInternalForces(ChElementTetra_10 self, ChVectorDynamicD Fi)"""
        return _fea.ChElementTetra_10_ComputeInternalForces(self, Fi)

    def SetMaterial(self, my_material):
        r"""SetMaterial(ChElementTetra_10 self, std::shared_ptr< chrono::fea::ChContinuumElastic > my_material)"""
        return _fea.ChElementTetra_10_SetMaterial(self, my_material)

    def GetMaterial(self):
        r"""GetMaterial(ChElementTetra_10 self) -> std::shared_ptr< chrono::fea::ChContinuumElastic >"""
        return _fea.ChElementTetra_10_GetMaterial(self)

    def GetMatrB(self, n):
        r"""GetMatrB(ChElementTetra_10 self, int n) -> ChMatrixDynamicD"""
        return _fea.ChElementTetra_10_GetMatrB(self, n)

    def GetStiffnessMatrix(self):
        r"""GetStiffnessMatrix(ChElementTetra_10 self) -> ChMatrixDynamicD"""
        return _fea.ChElementTetra_10_GetStiffnessMatrix(self)

    def LoadableGet_ndof_x(self):
        r"""LoadableGet_ndof_x(ChElementTetra_10 self) -> int"""
        return _fea.ChElementTetra_10_LoadableGet_ndof_x(self)

    def LoadableGet_ndof_w(self):
        r"""LoadableGet_ndof_w(ChElementTetra_10 self) -> int"""
        return _fea.ChElementTetra_10_LoadableGet_ndof_w(self)

    def LoadableGetStateBlock_x(self, block_offset, mD):
        r"""LoadableGetStateBlock_x(ChElementTetra_10 self, int block_offset, chrono::ChState & mD)"""
        return _fea.ChElementTetra_10_LoadableGetStateBlock_x(self, block_offset, mD)

    def LoadableGetStateBlock_w(self, block_offset, mD):
        r"""LoadableGetStateBlock_w(ChElementTetra_10 self, int block_offset, chrono::ChStateDelta & mD)"""
        return _fea.ChElementTetra_10_LoadableGetStateBlock_w(self, block_offset, mD)

    def LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""LoadableStateIncrement(ChElementTetra_10 self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChElementTetra_10_LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def Get_field_ncoords(self):
        r"""Get_field_ncoords(ChElementTetra_10 self) -> int"""
        return _fea.ChElementTetra_10_Get_field_ncoords(self)

    def GetSubBlocks(self):
        r"""GetSubBlocks(ChElementTetra_10 self) -> int"""
        return _fea.ChElementTetra_10_GetSubBlocks(self)

    def GetSubBlockOffset(self, nblock):
        r"""GetSubBlockOffset(ChElementTetra_10 self, int nblock) -> unsigned int"""
        return _fea.ChElementTetra_10_GetSubBlockOffset(self, nblock)

    def GetSubBlockSize(self, nblock):
        r"""GetSubBlockSize(ChElementTetra_10 self, int nblock) -> unsigned int"""
        return _fea.ChElementTetra_10_GetSubBlockSize(self, nblock)

    def LoadableGetVariables(self, mvars):
        r"""LoadableGetVariables(ChElementTetra_10 self, std::vector< ChVariables *,std::allocator< ChVariables * > > & mvars)"""
        return _fea.ChElementTetra_10_LoadableGetVariables(self, mvars)

    def ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w):
        r"""ComputeNF(ChElementTetra_10 self, double const U, double const V, double const W, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _fea.ChElementTetra_10_ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w)

    def GetDensity(self):
        r"""GetDensity(ChElementTetra_10 self) -> double"""
        return _fea.ChElementTetra_10_GetDensity(self)

    def IsTetrahedronIntegrationNeeded(self):
        r"""IsTetrahedronIntegrationNeeded(ChElementTetra_10 self) -> bool"""
        return _fea.ChElementTetra_10_IsTetrahedronIntegrationNeeded(self)

# Register ChElementTetra_10 in _fea:
_fea.ChElementTetra_10_swigregister(ChElementTetra_10)

class ChElementHexahedron(ChElementGeneric, ChElementCorotational):
    r"""Proxy of C++ chrono::fea::ChElementHexahedron class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fea.delete_ChElementHexahedron

    def GetVolume(self):
        r"""GetVolume(ChElementHexahedron self) -> double"""
        return _fea.ChElementHexahedron_GetVolume(self)

    def Update(self):
        r"""Update(ChElementHexahedron self)"""
        return _fea.ChElementHexahedron_Update(self)

# Register ChElementHexahedron in _fea:
_fea.ChElementHexahedron_swigregister(ChElementHexahedron)

class ChElementHexa_8(ChElementHexahedron, pychrono.core.ChLoadableUVW):
    r"""Proxy of C++ chrono::fea::ChElementHexa_8 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChElementHexa_8 self) -> ChElementHexa_8"""
        _fea.ChElementHexa_8_swiginit(self, _fea.new_ChElementHexa_8())
    __swig_destroy__ = _fea.delete_ChElementHexa_8

    def GetNnodes(self):
        r"""GetNnodes(ChElementHexa_8 self) -> int"""
        return _fea.ChElementHexa_8_GetNnodes(self)

    def GetNdofs(self):
        r"""GetNdofs(ChElementHexa_8 self) -> int"""
        return _fea.ChElementHexa_8_GetNdofs(self)

    def GetNodeNdofs(self, n):
        r"""GetNodeNdofs(ChElementHexa_8 self, int n) -> int"""
        return _fea.ChElementHexa_8_GetNodeNdofs(self, n)

    def GetNodeN(self, n):
        r"""GetNodeN(ChElementHexa_8 self, int n) -> std::shared_ptr< chrono::fea::ChNodeFEAbase >"""
        return _fea.ChElementHexa_8_GetNodeN(self, n)

    def SetNodes(self, nodeA, nodeB, nodeC, nodeD, nodeE, nodeF, nodeG, nodeH):
        r"""SetNodes(ChElementHexa_8 self, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeA, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeB, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeC, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeD, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeE, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeF, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeG, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeH)"""
        return _fea.ChElementHexa_8_SetNodes(self, nodeA, nodeB, nodeC, nodeD, nodeE, nodeF, nodeG, nodeH)

    def SetDefaultIntegrationRule(self):
        r"""SetDefaultIntegrationRule(ChElementHexa_8 self)"""
        return _fea.ChElementHexa_8_SetDefaultIntegrationRule(self)

    def SetReducedIntegrationRule(self):
        r"""SetReducedIntegrationRule(ChElementHexa_8 self)"""
        return _fea.ChElementHexa_8_SetReducedIntegrationRule(self)

    def SetIntegrationRule(self, nPoints):
        r"""SetIntegrationRule(ChElementHexa_8 self, int nPoints)"""
        return _fea.ChElementHexa_8_SetIntegrationRule(self, nPoints)

    def ShapeFunctions(self, N, z0, z1, z2):
        r"""ShapeFunctions(ChElementHexa_8 self, chrono::fea::ChElementHexa_8::ShapeVector & N, double z0, double z1, double z2)"""
        return _fea.ChElementHexa_8_ShapeFunctions(self, N, z0, z1, z2)

    def GetStateBlock(self, mD):
        r"""GetStateBlock(ChElementHexa_8 self, ChVectorDynamicD mD)"""
        return _fea.ChElementHexa_8_GetStateBlock(self, mD)

    def ComputeJacobian(self, Jacobian, J1, coord):
        r"""ComputeJacobian(ChElementHexa_8 self, ChMatrixDynamicD Jacobian, ChMatrixDynamicD J1, ChVectorD coord)"""
        return _fea.ChElementHexa_8_ComputeJacobian(self, Jacobian, J1, coord)

    def ComputeMatrB(self, *args):
        r"""
        ComputeMatrB(ChElementHexa_8 self, ChMatrixDynamicD MatrB, double zeta1, double zeta2, double zeta3, double & JacobianDet)
        ComputeMatrB(ChElementHexa_8 self, ChGaussPoint * GaussPt, double & JacobianDet)
        """
        return _fea.ChElementHexa_8_ComputeMatrB(self, *args)

    def ComputeStiffnessMatrix(self):
        r"""ComputeStiffnessMatrix(ChElementHexa_8 self)"""
        return _fea.ChElementHexa_8_ComputeStiffnessMatrix(self)

    def UpdateRotation(self):
        r"""UpdateRotation(ChElementHexa_8 self)"""
        return _fea.ChElementHexa_8_UpdateRotation(self)

    def GetStrain(self, z1, z2, z3):
        r"""GetStrain(ChElementHexa_8 self, double z1, double z2, double z3) -> ChStrainTensor< >"""
        return _fea.ChElementHexa_8_GetStrain(self, z1, z2, z3)

    def GetStress(self, z1, z2, z3):
        r"""GetStress(ChElementHexa_8 self, double z1, double z2, double z3) -> ChStressTensor< >"""
        return _fea.ChElementHexa_8_GetStress(self, z1, z2, z3)

    def ComputeInternalForces(self, Fi):
        r"""ComputeInternalForces(ChElementHexa_8 self, ChVectorDynamicD Fi)"""
        return _fea.ChElementHexa_8_ComputeInternalForces(self, Fi)

    def SetMaterial(self, my_material):
        r"""SetMaterial(ChElementHexa_8 self, std::shared_ptr< chrono::fea::ChContinuumElastic > my_material)"""
        return _fea.ChElementHexa_8_SetMaterial(self, my_material)

    def GetMaterial(self):
        r"""GetMaterial(ChElementHexa_8 self) -> std::shared_ptr< chrono::fea::ChContinuumElastic >"""
        return _fea.ChElementHexa_8_GetMaterial(self)

    def GetStiffnessMatrix(self):
        r"""GetStiffnessMatrix(ChElementHexa_8 self) -> ChMatrixDynamicD"""
        return _fea.ChElementHexa_8_GetStiffnessMatrix(self)

    def GetGaussPoint(self, N):
        r"""GetGaussPoint(ChElementHexa_8 self, int N) -> ChGaussPoint *"""
        return _fea.ChElementHexa_8_GetGaussPoint(self, N)

    def LoadableGet_ndof_x(self):
        r"""LoadableGet_ndof_x(ChElementHexa_8 self) -> int"""
        return _fea.ChElementHexa_8_LoadableGet_ndof_x(self)

    def LoadableGet_ndof_w(self):
        r"""LoadableGet_ndof_w(ChElementHexa_8 self) -> int"""
        return _fea.ChElementHexa_8_LoadableGet_ndof_w(self)

    def LoadableGetStateBlock_x(self, block_offset, mD):
        r"""LoadableGetStateBlock_x(ChElementHexa_8 self, int block_offset, chrono::ChState & mD)"""
        return _fea.ChElementHexa_8_LoadableGetStateBlock_x(self, block_offset, mD)

    def LoadableGetStateBlock_w(self, block_offset, mD):
        r"""LoadableGetStateBlock_w(ChElementHexa_8 self, int block_offset, chrono::ChStateDelta & mD)"""
        return _fea.ChElementHexa_8_LoadableGetStateBlock_w(self, block_offset, mD)

    def LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""LoadableStateIncrement(ChElementHexa_8 self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChElementHexa_8_LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def Get_field_ncoords(self):
        r"""Get_field_ncoords(ChElementHexa_8 self) -> int"""
        return _fea.ChElementHexa_8_Get_field_ncoords(self)

    def GetSubBlocks(self):
        r"""GetSubBlocks(ChElementHexa_8 self) -> int"""
        return _fea.ChElementHexa_8_GetSubBlocks(self)

    def GetSubBlockOffset(self, nblock):
        r"""GetSubBlockOffset(ChElementHexa_8 self, int nblock) -> unsigned int"""
        return _fea.ChElementHexa_8_GetSubBlockOffset(self, nblock)

    def GetSubBlockSize(self, nblock):
        r"""GetSubBlockSize(ChElementHexa_8 self, int nblock) -> unsigned int"""
        return _fea.ChElementHexa_8_GetSubBlockSize(self, nblock)

    def LoadableGetVariables(self, mvars):
        r"""LoadableGetVariables(ChElementHexa_8 self, std::vector< ChVariables *,std::allocator< ChVariables * > > & mvars)"""
        return _fea.ChElementHexa_8_LoadableGetVariables(self, mvars)

    def ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w):
        r"""ComputeNF(ChElementHexa_8 self, double const U, double const V, double const W, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _fea.ChElementHexa_8_ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w)

    def GetDensity(self):
        r"""GetDensity(ChElementHexa_8 self) -> double"""
        return _fea.ChElementHexa_8_GetDensity(self)

# Register ChElementHexa_8 in _fea:
_fea.ChElementHexa_8_swigregister(ChElementHexa_8)

class ChElementHexa_20(ChElementHexahedron, pychrono.core.ChLoadableUVW):
    r"""Proxy of C++ chrono::fea::ChElementHexa_20 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChElementHexa_20 self) -> ChElementHexa_20"""
        _fea.ChElementHexa_20_swiginit(self, _fea.new_ChElementHexa_20())
    __swig_destroy__ = _fea.delete_ChElementHexa_20

    def GetNnodes(self):
        r"""GetNnodes(ChElementHexa_20 self) -> int"""
        return _fea.ChElementHexa_20_GetNnodes(self)

    def GetNdofs(self):
        r"""GetNdofs(ChElementHexa_20 self) -> int"""
        return _fea.ChElementHexa_20_GetNdofs(self)

    def GetNodeNdofs(self, n):
        r"""GetNodeNdofs(ChElementHexa_20 self, int n) -> int"""
        return _fea.ChElementHexa_20_GetNodeNdofs(self, n)

    def GetNodeN(self, n):
        r"""GetNodeN(ChElementHexa_20 self, int n) -> std::shared_ptr< chrono::fea::ChNodeFEAbase >"""
        return _fea.ChElementHexa_20_GetNodeN(self, n)

    def SetNodes(self, nodeA, nodeB, nodeC, nodeD, nodeE, nodeF, nodeG, nodeH, nodeI, nodeJ, nodeK, nodeL, nodeM, nodeN, nodeO, nodeP, nodeQ, nodeR, nodeS, nodeT):
        r"""SetNodes(ChElementHexa_20 self, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeA, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeB, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeC, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeD, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeE, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeF, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeG, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeH, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeI, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeJ, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeK, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeL, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeM, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeN, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeO, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeP, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeQ, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeR, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeS, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeT)"""
        return _fea.ChElementHexa_20_SetNodes(self, nodeA, nodeB, nodeC, nodeD, nodeE, nodeF, nodeG, nodeH, nodeI, nodeJ, nodeK, nodeL, nodeM, nodeN, nodeO, nodeP, nodeQ, nodeR, nodeS, nodeT)

    def SetDefaultIntegrationRule(self):
        r"""SetDefaultIntegrationRule(ChElementHexa_20 self)"""
        return _fea.ChElementHexa_20_SetDefaultIntegrationRule(self)

    def SetReducedIntegrationRule(self):
        r"""SetReducedIntegrationRule(ChElementHexa_20 self)"""
        return _fea.ChElementHexa_20_SetReducedIntegrationRule(self)

    def SetIntegrationRule(self, nPoints):
        r"""SetIntegrationRule(ChElementHexa_20 self, int nPoints)"""
        return _fea.ChElementHexa_20_SetIntegrationRule(self, nPoints)

    def ShapeFunctions(self, N, r, s, t):
        r"""ShapeFunctions(ChElementHexa_20 self, chrono::fea::ChElementHexa_20::ShapeVector & N, double r, double s, double t)"""
        return _fea.ChElementHexa_20_ShapeFunctions(self, N, r, s, t)

    def GetStateBlock(self, mD):
        r"""GetStateBlock(ChElementHexa_20 self, ChVectorDynamicD mD)"""
        return _fea.ChElementHexa_20_GetStateBlock(self, mD)

    def ComputeJacobian(self, Jacobian, J1, coord):
        r"""ComputeJacobian(ChElementHexa_20 self, ChMatrixDynamicD Jacobian, ChMatrixDynamicD J1, ChVectorD coord)"""
        return _fea.ChElementHexa_20_ComputeJacobian(self, Jacobian, J1, coord)

    def ComputeMatrB(self, *args):
        r"""
        ComputeMatrB(ChElementHexa_20 self, ChMatrixDynamicD MatrB, double zeta1, double zeta2, double zeta3, double & JacobianDet)
        ComputeMatrB(ChElementHexa_20 self, ChGaussPoint * GaussPt, double & JacobianDet)
        """
        return _fea.ChElementHexa_20_ComputeMatrB(self, *args)

    def ComputeStiffnessMatrix(self):
        r"""ComputeStiffnessMatrix(ChElementHexa_20 self)"""
        return _fea.ChElementHexa_20_ComputeStiffnessMatrix(self)

    def UpdateRotation(self):
        r"""UpdateRotation(ChElementHexa_20 self)"""
        return _fea.ChElementHexa_20_UpdateRotation(self)

    def GetStrain(self, z1, z2, z3):
        r"""GetStrain(ChElementHexa_20 self, double z1, double z2, double z3) -> ChStrainTensor< >"""
        return _fea.ChElementHexa_20_GetStrain(self, z1, z2, z3)

    def GetStress(self, z1, z2, z3):
        r"""GetStress(ChElementHexa_20 self, double z1, double z2, double z3) -> ChStressTensor< >"""
        return _fea.ChElementHexa_20_GetStress(self, z1, z2, z3)

    def ComputeInternalForces(self, Fi):
        r"""ComputeInternalForces(ChElementHexa_20 self, ChVectorDynamicD Fi)"""
        return _fea.ChElementHexa_20_ComputeInternalForces(self, Fi)

    def SetMaterial(self, my_material):
        r"""SetMaterial(ChElementHexa_20 self, std::shared_ptr< chrono::fea::ChContinuumElastic > my_material)"""
        return _fea.ChElementHexa_20_SetMaterial(self, my_material)

    def GetMaterial(self):
        r"""GetMaterial(ChElementHexa_20 self) -> std::shared_ptr< chrono::fea::ChContinuumElastic >"""
        return _fea.ChElementHexa_20_GetMaterial(self)

    def GetStiffnessMatrix(self):
        r"""GetStiffnessMatrix(ChElementHexa_20 self) -> ChMatrixDynamicD"""
        return _fea.ChElementHexa_20_GetStiffnessMatrix(self)

    def GetGaussPoint(self, N):
        r"""GetGaussPoint(ChElementHexa_20 self, int N) -> ChGaussPoint *"""
        return _fea.ChElementHexa_20_GetGaussPoint(self, N)

    def LoadableGet_ndof_x(self):
        r"""LoadableGet_ndof_x(ChElementHexa_20 self) -> int"""
        return _fea.ChElementHexa_20_LoadableGet_ndof_x(self)

    def LoadableGet_ndof_w(self):
        r"""LoadableGet_ndof_w(ChElementHexa_20 self) -> int"""
        return _fea.ChElementHexa_20_LoadableGet_ndof_w(self)

    def LoadableGetStateBlock_x(self, block_offset, mD):
        r"""LoadableGetStateBlock_x(ChElementHexa_20 self, int block_offset, chrono::ChState & mD)"""
        return _fea.ChElementHexa_20_LoadableGetStateBlock_x(self, block_offset, mD)

    def LoadableGetStateBlock_w(self, block_offset, mD):
        r"""LoadableGetStateBlock_w(ChElementHexa_20 self, int block_offset, chrono::ChStateDelta & mD)"""
        return _fea.ChElementHexa_20_LoadableGetStateBlock_w(self, block_offset, mD)

    def LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""LoadableStateIncrement(ChElementHexa_20 self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChElementHexa_20_LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def Get_field_ncoords(self):
        r"""Get_field_ncoords(ChElementHexa_20 self) -> int"""
        return _fea.ChElementHexa_20_Get_field_ncoords(self)

    def GetSubBlocks(self):
        r"""GetSubBlocks(ChElementHexa_20 self) -> int"""
        return _fea.ChElementHexa_20_GetSubBlocks(self)

    def GetSubBlockOffset(self, nblock):
        r"""GetSubBlockOffset(ChElementHexa_20 self, int nblock) -> unsigned int"""
        return _fea.ChElementHexa_20_GetSubBlockOffset(self, nblock)

    def GetSubBlockSize(self, nblock):
        r"""GetSubBlockSize(ChElementHexa_20 self, int nblock) -> unsigned int"""
        return _fea.ChElementHexa_20_GetSubBlockSize(self, nblock)

    def LoadableGetVariables(self, mvars):
        r"""LoadableGetVariables(ChElementHexa_20 self, std::vector< ChVariables *,std::allocator< ChVariables * > > & mvars)"""
        return _fea.ChElementHexa_20_LoadableGetVariables(self, mvars)

    def ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w):
        r"""ComputeNF(ChElementHexa_20 self, double const U, double const V, double const W, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _fea.ChElementHexa_20_ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w)

    def GetDensity(self):
        r"""GetDensity(ChElementHexa_20 self) -> double"""
        return _fea.ChElementHexa_20_GetDensity(self)

# Register ChElementHexa_20 in _fea:
_fea.ChElementHexa_20_swigregister(ChElementHexa_20)

class ChElementBrick(ChElementGeneric, pychrono.core.ChLoadableUVW):
    r"""Proxy of C++ chrono::fea::ChElementBrick class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChElementBrick self) -> ChElementBrick"""
        _fea.ChElementBrick_swiginit(self, _fea.new_ChElementBrick())
    __swig_destroy__ = _fea.delete_ChElementBrick

    def GetNnodes(self):
        r"""GetNnodes(ChElementBrick self) -> int"""
        return _fea.ChElementBrick_GetNnodes(self)

    def GetNdofs(self):
        r"""GetNdofs(ChElementBrick self) -> int"""
        return _fea.ChElementBrick_GetNdofs(self)

    def GetNodeNdofs(self, n):
        r"""GetNodeNdofs(ChElementBrick self, int n) -> int"""
        return _fea.ChElementBrick_GetNodeNdofs(self, n)

    def GetNodeN(self, n):
        r"""GetNodeN(ChElementBrick self, int n) -> std::shared_ptr< chrono::fea::ChNodeFEAbase >"""
        return _fea.ChElementBrick_GetNodeN(self, n)

    def SetNodes(self, nodeA, nodeB, nodeC, nodeD, nodeE, nodeF, nodeG, nodeH):
        r"""SetNodes(ChElementBrick self, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeA, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeB, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeC, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeD, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeE, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeF, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeG, std::shared_ptr< chrono::fea::ChNodeFEAxyz > nodeH)"""
        return _fea.ChElementBrick_SetNodes(self, nodeA, nodeB, nodeC, nodeD, nodeE, nodeF, nodeG, nodeH)

    def SetElemNum(self, kb):
        r"""SetElemNum(ChElementBrick self, int kb)"""
        return _fea.ChElementBrick_SetElemNum(self, kb)

    def SetStockAlpha(self, a1, a2, a3, a4, a5, a6, a7, a8, a9):
        r"""SetStockAlpha(ChElementBrick self, double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)"""
        return _fea.ChElementBrick_SetStockAlpha(self, a1, a2, a3, a4, a5, a6, a7, a8, a9)

    def SetStockJac(self, a):
        r"""SetStockJac(ChElementBrick self, chrono::ChMatrixNM< double,24,24 > const & a)"""
        return _fea.ChElementBrick_SetStockJac(self, a)

    def SetStockKTE(self, a):
        r"""SetStockKTE(ChElementBrick self, chrono::ChMatrixNM< double,24,24 > const & a)"""
        return _fea.ChElementBrick_SetStockKTE(self, a)

    def SetInertFlexVec(self, a):
        r"""SetInertFlexVec(ChElementBrick self, chrono::ChVectorN< double,3 > const & a)"""
        return _fea.ChElementBrick_SetInertFlexVec(self, a)

    def GetElemNum(self):
        r"""GetElemNum(ChElementBrick self) -> int"""
        return _fea.ChElementBrick_GetElemNum(self)

    def GetInitialPos(self):
        r"""GetInitialPos(ChElementBrick self) -> chrono::ChMatrixNM< double,8,3 > const &"""
        return _fea.ChElementBrick_GetInitialPos(self)

    def GetNodeA(self):
        r"""GetNodeA(ChElementBrick self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChElementBrick_GetNodeA(self)

    def GetNodeB(self):
        r"""GetNodeB(ChElementBrick self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChElementBrick_GetNodeB(self)

    def GetNodeC(self):
        r"""GetNodeC(ChElementBrick self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChElementBrick_GetNodeC(self)

    def GetNodeD(self):
        r"""GetNodeD(ChElementBrick self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChElementBrick_GetNodeD(self)

    def GetNodeE(self):
        r"""GetNodeE(ChElementBrick self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChElementBrick_GetNodeE(self)

    def GetNodeF(self):
        r"""GetNodeF(ChElementBrick self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChElementBrick_GetNodeF(self)

    def GetNodeG(self):
        r"""GetNodeG(ChElementBrick self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChElementBrick_GetNodeG(self)

    def GetNodeH(self):
        r"""GetNodeH(ChElementBrick self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChElementBrick_GetNodeH(self)

    def GetLengthX(self):
        r"""GetLengthX(ChElementBrick self) -> double"""
        return _fea.ChElementBrick_GetLengthX(self)

    def GetLengthY(self):
        r"""GetLengthY(ChElementBrick self) -> double"""
        return _fea.ChElementBrick_GetLengthY(self)

    def GetLengthZ(self):
        r"""GetLengthZ(ChElementBrick self) -> double"""
        return _fea.ChElementBrick_GetLengthZ(self)

    def SetMaterial(self, my_material):
        r"""SetMaterial(ChElementBrick self, std::shared_ptr< chrono::fea::ChContinuumElastic > my_material)"""
        return _fea.ChElementBrick_SetMaterial(self, my_material)

    def GetMaterial(self):
        r"""GetMaterial(ChElementBrick self) -> std::shared_ptr< chrono::fea::ChContinuumElastic >"""
        return _fea.ChElementBrick_GetMaterial(self)

    def SetGravityOn(self, val):
        r"""SetGravityOn(ChElementBrick self, bool val)"""
        return _fea.ChElementBrick_SetGravityOn(self, val)

    def SetMooneyRivlin(self, val):
        r"""SetMooneyRivlin(ChElementBrick self, bool val)"""
        return _fea.ChElementBrick_SetMooneyRivlin(self, val)

    def SetMRCoefficients(self, C1, C2):
        r"""SetMRCoefficients(ChElementBrick self, double C1, double C2)"""
        return _fea.ChElementBrick_SetMRCoefficients(self, C1, C2)

    def ShapeFunctions(self, N, x, y, z):
        r"""ShapeFunctions(ChElementBrick self, chrono::fea::ChElementBrick::ShapeVector & N, double x, double y, double z)"""
        return _fea.ChElementBrick_ShapeFunctions(self, N, x, y, z)

    def ShapeFunctionsDerivativeX(self, Nx, x, y, z):
        r"""ShapeFunctionsDerivativeX(ChElementBrick self, chrono::fea::ChElementBrick::ShapeVector & Nx, double x, double y, double z)"""
        return _fea.ChElementBrick_ShapeFunctionsDerivativeX(self, Nx, x, y, z)

    def ShapeFunctionsDerivativeY(self, Ny, x, y, z):
        r"""ShapeFunctionsDerivativeY(ChElementBrick self, chrono::fea::ChElementBrick::ShapeVector & Ny, double x, double y, double z)"""
        return _fea.ChElementBrick_ShapeFunctionsDerivativeY(self, Ny, x, y, z)

    def ShapeFunctionsDerivativeZ(self, Nz, x, y, z):
        r"""ShapeFunctionsDerivativeZ(ChElementBrick self, chrono::fea::ChElementBrick::ShapeVector & Nz, double x, double y, double z)"""
        return _fea.ChElementBrick_ShapeFunctionsDerivativeZ(self, Nz, x, y, z)

    def LoadableGet_ndof_x(self):
        r"""LoadableGet_ndof_x(ChElementBrick self) -> int"""
        return _fea.ChElementBrick_LoadableGet_ndof_x(self)

    def LoadableGet_ndof_w(self):
        r"""LoadableGet_ndof_w(ChElementBrick self) -> int"""
        return _fea.ChElementBrick_LoadableGet_ndof_w(self)

    def LoadableGetStateBlock_x(self, block_offset, mD):
        r"""LoadableGetStateBlock_x(ChElementBrick self, int block_offset, chrono::ChState & mD)"""
        return _fea.ChElementBrick_LoadableGetStateBlock_x(self, block_offset, mD)

    def LoadableGetStateBlock_w(self, block_offset, mD):
        r"""LoadableGetStateBlock_w(ChElementBrick self, int block_offset, chrono::ChStateDelta & mD)"""
        return _fea.ChElementBrick_LoadableGetStateBlock_w(self, block_offset, mD)

    def LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""LoadableStateIncrement(ChElementBrick self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChElementBrick_LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def Get_field_ncoords(self):
        r"""Get_field_ncoords(ChElementBrick self) -> int"""
        return _fea.ChElementBrick_Get_field_ncoords(self)

    def GetSubBlocks(self):
        r"""GetSubBlocks(ChElementBrick self) -> int"""
        return _fea.ChElementBrick_GetSubBlocks(self)

    def GetSubBlockOffset(self, nblock):
        r"""GetSubBlockOffset(ChElementBrick self, int nblock) -> unsigned int"""
        return _fea.ChElementBrick_GetSubBlockOffset(self, nblock)

    def GetSubBlockSize(self, nblock):
        r"""GetSubBlockSize(ChElementBrick self, int nblock) -> unsigned int"""
        return _fea.ChElementBrick_GetSubBlockSize(self, nblock)

    def LoadableGetVariables(self, mvars):
        r"""LoadableGetVariables(ChElementBrick self, std::vector< ChVariables *,std::allocator< ChVariables * > > & mvars)"""
        return _fea.ChElementBrick_LoadableGetVariables(self, mvars)

    def ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w):
        r"""ComputeNF(ChElementBrick self, double const U, double const V, double const W, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _fea.ChElementBrick_ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w)

    def GetDensity(self):
        r"""GetDensity(ChElementBrick self) -> double"""
        return _fea.ChElementBrick_GetDensity(self)

# Register ChElementBrick in _fea:
_fea.ChElementBrick_swigregister(ChElementBrick)

class ChElementBrick_9(ChElementGeneric, pychrono.core.ChLoadableUVW):
    r"""Proxy of C++ chrono::fea::ChElementBrick_9 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChElementBrick_9 self) -> ChElementBrick_9"""
        _fea.ChElementBrick_9_swiginit(self, _fea.new_ChElementBrick_9())
    __swig_destroy__ = _fea.delete_ChElementBrick_9

    def GetNnodes(self):
        r"""GetNnodes(ChElementBrick_9 self) -> int"""
        return _fea.ChElementBrick_9_GetNnodes(self)

    def GetNdofs(self):
        r"""GetNdofs(ChElementBrick_9 self) -> int"""
        return _fea.ChElementBrick_9_GetNdofs(self)

    def GetNodeNdofs(self, n):
        r"""GetNodeNdofs(ChElementBrick_9 self, int n) -> int"""
        return _fea.ChElementBrick_9_GetNodeNdofs(self, n)

    def GetNodeN(self, n):
        r"""GetNodeN(ChElementBrick_9 self, int n) -> std::shared_ptr< chrono::fea::ChNodeFEAbase >"""
        return _fea.ChElementBrick_9_GetNodeN(self, n)

    def SetNodes(self, node1, node2, node3, node4, node5, node6, node7, node8, nodeC):
        r"""SetNodes(ChElementBrick_9 self, std::shared_ptr< chrono::fea::ChNodeFEAxyz > node1, std::shared_ptr< chrono::fea::ChNodeFEAxyz > node2, std::shared_ptr< chrono::fea::ChNodeFEAxyz > node3, std::shared_ptr< chrono::fea::ChNodeFEAxyz > node4, std::shared_ptr< chrono::fea::ChNodeFEAxyz > node5, std::shared_ptr< chrono::fea::ChNodeFEAxyz > node6, std::shared_ptr< chrono::fea::ChNodeFEAxyz > node7, std::shared_ptr< chrono::fea::ChNodeFEAxyz > node8, std::shared_ptr< ChNodeFEAcurv > nodeC)"""
        return _fea.ChElementBrick_9_SetNodes(self, node1, node2, node3, node4, node5, node6, node7, node8, nodeC)

    def GetNode1(self):
        r"""GetNode1(ChElementBrick_9 self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChElementBrick_9_GetNode1(self)

    def GetNode2(self):
        r"""GetNode2(ChElementBrick_9 self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChElementBrick_9_GetNode2(self)

    def GetNode3(self):
        r"""GetNode3(ChElementBrick_9 self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChElementBrick_9_GetNode3(self)

    def GetNode4(self):
        r"""GetNode4(ChElementBrick_9 self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChElementBrick_9_GetNode4(self)

    def GetNode5(self):
        r"""GetNode5(ChElementBrick_9 self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChElementBrick_9_GetNode5(self)

    def GetNode6(self):
        r"""GetNode6(ChElementBrick_9 self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChElementBrick_9_GetNode6(self)

    def GetNode7(self):
        r"""GetNode7(ChElementBrick_9 self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChElementBrick_9_GetNode7(self)

    def GetNode8(self):
        r"""GetNode8(ChElementBrick_9 self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChElementBrick_9_GetNode8(self)

    def GetCentralNode(self):
        r"""GetCentralNode(ChElementBrick_9 self) -> std::shared_ptr< ChNodeFEAcurv >"""
        return _fea.ChElementBrick_9_GetCentralNode(self)
    GreenLagrange = _fea.ChElementBrick_9_GreenLagrange
    
    Hencky = _fea.ChElementBrick_9_Hencky
    
    J2 = _fea.ChElementBrick_9_J2
    
    DruckerPrager = _fea.ChElementBrick_9_DruckerPrager
    
    DruckerPrager_Cap = _fea.ChElementBrick_9_DruckerPrager_Cap
    
    m_DP_iterationNo = property(_fea.ChElementBrick_9_m_DP_iterationNo_get, _fea.ChElementBrick_9_m_DP_iterationNo_set, doc=r"""m_DP_iterationNo : int""")
    m_DP_yield = property(_fea.ChElementBrick_9_m_DP_yield_get, _fea.ChElementBrick_9_m_DP_yield_set, doc=r"""m_DP_yield : double""")
    m_DPCapBeta = property(_fea.ChElementBrick_9_m_DPCapBeta_get, _fea.ChElementBrick_9_m_DPCapBeta_set, doc=r"""m_DPCapBeta : double""")

    def SetDimensions(self, dims):
        r"""SetDimensions(ChElementBrick_9 self, ChVectorD dims)"""
        return _fea.ChElementBrick_9_SetDimensions(self, dims)

    def GetDimensions(self):
        r"""GetDimensions(ChElementBrick_9 self) -> ChVectorD"""
        return _fea.ChElementBrick_9_GetDimensions(self)

    def SetMaterial(self, material):
        r"""SetMaterial(ChElementBrick_9 self, std::shared_ptr< chrono::fea::ChContinuumElastic > material)"""
        return _fea.ChElementBrick_9_SetMaterial(self, material)

    def GetMaterial(self):
        r"""GetMaterial(ChElementBrick_9 self) -> std::shared_ptr< chrono::fea::ChContinuumElastic >"""
        return _fea.ChElementBrick_9_GetMaterial(self)

    def SetGravityOn(self, val):
        r"""SetGravityOn(ChElementBrick_9 self, bool val)"""
        return _fea.ChElementBrick_9_SetGravityOn(self, val)

    def IsGravityOn(self):
        r"""IsGravityOn(ChElementBrick_9 self) -> bool"""
        return _fea.ChElementBrick_9_IsGravityOn(self)

    def SetAlphaDamp(self, a):
        r"""SetAlphaDamp(ChElementBrick_9 self, double a)"""
        return _fea.ChElementBrick_9_SetAlphaDamp(self, a)

    def SetStrainFormulation(self, model):
        r"""SetStrainFormulation(ChElementBrick_9 self, chrono::fea::ChElementBrick_9::StrainFormulation model)"""
        return _fea.ChElementBrick_9_SetStrainFormulation(self, model)

    def GetStrainFormulation(self):
        r"""GetStrainFormulation(ChElementBrick_9 self) -> chrono::fea::ChElementBrick_9::StrainFormulation"""
        return _fea.ChElementBrick_9_GetStrainFormulation(self)

    def SetPlasticityFormulation(self, model):
        r"""SetPlasticityFormulation(ChElementBrick_9 self, chrono::fea::ChElementBrick_9::PlasticityFormulation model)"""
        return _fea.ChElementBrick_9_SetPlasticityFormulation(self, model)

    def GetPlasticityFormulation(self):
        r"""GetPlasticityFormulation(ChElementBrick_9 self) -> chrono::fea::ChElementBrick_9::PlasticityFormulation"""
        return _fea.ChElementBrick_9_GetPlasticityFormulation(self)

    def SetDPIterationNo(self, ItNo):
        r"""SetDPIterationNo(ChElementBrick_9 self, int ItNo)"""
        return _fea.ChElementBrick_9_SetDPIterationNo(self, ItNo)

    def SetDPVector1(self, vec):
        r"""SetDPVector1(ChElementBrick_9 self, ChMatrixDynamicD vec)"""
        return _fea.ChElementBrick_9_SetDPVector1(self, vec)

    def SetDPVector2(self, vec):
        r"""SetDPVector2(ChElementBrick_9 self, ChMatrixDynamicD vec)"""
        return _fea.ChElementBrick_9_SetDPVector2(self, vec)

    def SetDPVectorSize(self, a):
        r"""SetDPVectorSize(ChElementBrick_9 self, int a)"""
        return _fea.ChElementBrick_9_SetDPVectorSize(self, a)

    def SetDPCapBeta(self, a):
        r"""SetDPCapBeta(ChElementBrick_9 self, double a)"""
        return _fea.ChElementBrick_9_SetDPCapBeta(self, a)

    def GetDPIterationNo(self):
        r"""GetDPIterationNo(ChElementBrick_9 self) -> int"""
        return _fea.ChElementBrick_9_GetDPIterationNo(self)

    def SetDPYieldTol(self, yieldf_tol):
        r"""SetDPYieldTol(ChElementBrick_9 self, double yieldf_tol)"""
        return _fea.ChElementBrick_9_SetDPYieldTol(self, yieldf_tol)

    def GetDPYieldTol(self):
        r"""GetDPYieldTol(ChElementBrick_9 self) -> double"""
        return _fea.ChElementBrick_9_GetDPYieldTol(self)

    def SetPlasticity(self, val):
        r"""SetPlasticity(ChElementBrick_9 self, bool val)"""
        return _fea.ChElementBrick_9_SetPlasticity(self, val)

    def SetDruckerPrager(self, val):
        r"""SetDruckerPrager(ChElementBrick_9 self, bool val)"""
        return _fea.ChElementBrick_9_SetDruckerPrager(self, val)

    def SetYieldStress(self, a):
        r"""SetYieldStress(ChElementBrick_9 self, double a)"""
        return _fea.ChElementBrick_9_SetYieldStress(self, a)

    def SetHardeningSlope(self, a):
        r"""SetHardeningSlope(ChElementBrick_9 self, double a)"""
        return _fea.ChElementBrick_9_SetHardeningSlope(self, a)

    def SetFriction(self, friction):
        r"""SetFriction(ChElementBrick_9 self, double friction)"""
        return _fea.ChElementBrick_9_SetFriction(self, friction)

    def SetDilatancy(self, dilatancy):
        r"""SetDilatancy(ChElementBrick_9 self, double dilatancy)"""
        return _fea.ChElementBrick_9_SetDilatancy(self, dilatancy)

    def SetDPType(self, a):
        r"""SetDPType(ChElementBrick_9 self, int a)"""
        return _fea.ChElementBrick_9_SetDPType(self, a)

    def SetCCPInitial(self, mat):
        r"""SetCCPInitial(ChElementBrick_9 self, chrono::ChMatrixNM< double,9,8 > mat)"""
        return _fea.ChElementBrick_9_SetCCPInitial(self, mat)

    def ShapeFunctions(self, N, x, y, z):
        r"""ShapeFunctions(ChElementBrick_9 self, chrono::fea::ChElementBrick_9::ShapeVector & N, double x, double y, double z)"""
        return _fea.ChElementBrick_9_ShapeFunctions(self, N, x, y, z)

    def ShapeFunctionsDerivativeX(self, Nx, x, y, z):
        r"""ShapeFunctionsDerivativeX(ChElementBrick_9 self, chrono::fea::ChElementBrick_9::ShapeVector & Nx, double x, double y, double z)"""
        return _fea.ChElementBrick_9_ShapeFunctionsDerivativeX(self, Nx, x, y, z)

    def ShapeFunctionsDerivativeY(self, Ny, x, y, z):
        r"""ShapeFunctionsDerivativeY(ChElementBrick_9 self, chrono::fea::ChElementBrick_9::ShapeVector & Ny, double x, double y, double z)"""
        return _fea.ChElementBrick_9_ShapeFunctionsDerivativeY(self, Ny, x, y, z)

    def ShapeFunctionsDerivativeZ(self, Nz, x, y, z):
        r"""ShapeFunctionsDerivativeZ(ChElementBrick_9 self, chrono::fea::ChElementBrick_9::ShapeVector & Nz, double x, double y, double z)"""
        return _fea.ChElementBrick_9_ShapeFunctionsDerivativeZ(self, Nz, x, y, z)

    def Get_field_ncoords(self):
        r"""Get_field_ncoords(ChElementBrick_9 self) -> int"""
        return _fea.ChElementBrick_9_Get_field_ncoords(self)

    def GetSubBlocks(self):
        r"""GetSubBlocks(ChElementBrick_9 self) -> int"""
        return _fea.ChElementBrick_9_GetSubBlocks(self)

    def GetSubBlockOffset(self, nblock):
        r"""GetSubBlockOffset(ChElementBrick_9 self, int nblock) -> unsigned int"""
        return _fea.ChElementBrick_9_GetSubBlockOffset(self, nblock)

    def GetSubBlockSize(self, nblock):
        r"""GetSubBlockSize(ChElementBrick_9 self, int nblock) -> unsigned int"""
        return _fea.ChElementBrick_9_GetSubBlockSize(self, nblock)

    def LoadableGet_ndof_x(self):
        r"""LoadableGet_ndof_x(ChElementBrick_9 self) -> int"""
        return _fea.ChElementBrick_9_LoadableGet_ndof_x(self)

    def LoadableGet_ndof_w(self):
        r"""LoadableGet_ndof_w(ChElementBrick_9 self) -> int"""
        return _fea.ChElementBrick_9_LoadableGet_ndof_w(self)

    def LoadableGetStateBlock_x(self, block_offset, mD):
        r"""LoadableGetStateBlock_x(ChElementBrick_9 self, int block_offset, chrono::ChState & mD)"""
        return _fea.ChElementBrick_9_LoadableGetStateBlock_x(self, block_offset, mD)

    def LoadableGetStateBlock_w(self, block_offset, mD):
        r"""LoadableGetStateBlock_w(ChElementBrick_9 self, int block_offset, chrono::ChStateDelta & mD)"""
        return _fea.ChElementBrick_9_LoadableGetStateBlock_w(self, block_offset, mD)

    def LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""LoadableStateIncrement(ChElementBrick_9 self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChElementBrick_9_LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def LoadableGetVariables(self, mvars):
        r"""LoadableGetVariables(ChElementBrick_9 self, std::vector< ChVariables *,std::allocator< ChVariables * > > & mvars)"""
        return _fea.ChElementBrick_9_LoadableGetVariables(self, mvars)

    def ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w):
        r"""ComputeNF(ChElementBrick_9 self, double const U, double const V, double const W, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _fea.ChElementBrick_9_ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w)

    def GetDensity(self):
        r"""GetDensity(ChElementBrick_9 self) -> double"""
        return _fea.ChElementBrick_9_GetDensity(self)

# Register ChElementBrick_9 in _fea:
_fea.ChElementBrick_9_swigregister(ChElementBrick_9)

class ChMaterialShellANCF(object):
    r"""Proxy of C++ chrono::fea::ChMaterialShellANCF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChMaterialShellANCF self, double rho, double E, double nu) -> ChMaterialShellANCF
        __init__(ChMaterialShellANCF self, double rho, ChVectorD E, ChVectorD nu, ChVectorD G) -> ChMaterialShellANCF
        """
        _fea.ChMaterialShellANCF_swiginit(self, _fea.new_ChMaterialShellANCF(*args))

    def Get_rho(self):
        r"""Get_rho(ChMaterialShellANCF self) -> double"""
        return _fea.ChMaterialShellANCF_Get_rho(self)

    def Get_E_eps(self):
        r"""Get_E_eps(ChMaterialShellANCF self) -> chrono::ChMatrixNM< double,6,6 > const &"""
        return _fea.ChMaterialShellANCF_Get_E_eps(self)
    __swig_destroy__ = _fea.delete_ChMaterialShellANCF

# Register ChMaterialShellANCF in _fea:
_fea.ChMaterialShellANCF_swigregister(ChMaterialShellANCF)

class ChElasticityReissner(object):
    r"""Proxy of C++ chrono::fea::ChElasticityReissner class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fea.delete_ChElasticityReissner

    def ComputeStress(self, n_u, n_v, m_u, m_v, eps_u, eps_v, kur_u, kur_v, z_inf, z_sup, angle):
        r"""ComputeStress(ChElasticityReissner self, ChVectorD n_u, ChVectorD n_v, ChVectorD m_u, ChVectorD m_v, ChVectorD eps_u, ChVectorD eps_v, ChVectorD kur_u, ChVectorD kur_v, double const z_inf, double const z_sup, double const angle)"""
        return _fea.ChElasticityReissner_ComputeStress(self, n_u, n_v, m_u, m_v, eps_u, eps_v, kur_u, kur_v, z_inf, z_sup, angle)
    section = property(_fea.ChElasticityReissner_section_get, _fea.ChElasticityReissner_section_set, doc=r"""section : p.chrono::fea::ChMaterialShellReissner""")

# Register ChElasticityReissner in _fea:
_fea.ChElasticityReissner_swigregister(ChElasticityReissner)

class ChElasticityReissnerIsothropic(ChElasticityReissner):
    r"""Proxy of C++ chrono::fea::ChElasticityReissnerIsothropic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, E, nu, alpha=1.0, beta=0.1):
        r"""__init__(ChElasticityReissnerIsothropic self, double E, double nu, double alpha=1.0, double beta=0.1) -> ChElasticityReissnerIsothropic"""
        _fea.ChElasticityReissnerIsothropic_swiginit(self, _fea.new_ChElasticityReissnerIsothropic(E, nu, alpha, beta))

    def Get_E(self):
        r"""Get_E(ChElasticityReissnerIsothropic self) -> double"""
        return _fea.ChElasticityReissnerIsothropic_Get_E(self)

    def Get_nu(self):
        r"""Get_nu(ChElasticityReissnerIsothropic self) -> double"""
        return _fea.ChElasticityReissnerIsothropic_Get_nu(self)

    def Get_alpha(self):
        r"""Get_alpha(ChElasticityReissnerIsothropic self) -> double"""
        return _fea.ChElasticityReissnerIsothropic_Get_alpha(self)

    def Get_beta(self):
        r"""Get_beta(ChElasticityReissnerIsothropic self) -> double"""
        return _fea.ChElasticityReissnerIsothropic_Get_beta(self)

    def ComputeStress(self, n_u, n_v, m_u, m_v, eps_u, eps_v, kur_u, kur_v, z_inf, z_sup, angle):
        r"""ComputeStress(ChElasticityReissnerIsothropic self, ChVectorD n_u, ChVectorD n_v, ChVectorD m_u, ChVectorD m_v, ChVectorD eps_u, ChVectorD eps_v, ChVectorD kur_u, ChVectorD kur_v, double const z_inf, double const z_sup, double const angle)"""
        return _fea.ChElasticityReissnerIsothropic_ComputeStress(self, n_u, n_v, m_u, m_v, eps_u, eps_v, kur_u, kur_v, z_inf, z_sup, angle)
    __swig_destroy__ = _fea.delete_ChElasticityReissnerIsothropic

# Register ChElasticityReissnerIsothropic in _fea:
_fea.ChElasticityReissnerIsothropic_swigregister(ChElasticityReissnerIsothropic)

class ChElasticityReissnerOrthotropic(ChElasticityReissner):
    r"""Proxy of C++ chrono::fea::ChElasticityReissnerOrthotropic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChElasticityReissnerOrthotropic self, double m_E_x, double m_E_y, double m_nu_xy, double m_G_xy, double m_G_xz, double m_G_yz, double m_alpha=1.0, double m_beta=0.1) -> ChElasticityReissnerOrthotropic
        __init__(ChElasticityReissnerOrthotropic self, double m_E, double m_nu, double m_alpha=1.0, double m_beta=0.1) -> ChElasticityReissnerOrthotropic
        """
        _fea.ChElasticityReissnerOrthotropic_swiginit(self, _fea.new_ChElasticityReissnerOrthotropic(*args))

    def Get_E_x(self):
        r"""Get_E_x(ChElasticityReissnerOrthotropic self) -> double"""
        return _fea.ChElasticityReissnerOrthotropic_Get_E_x(self)

    def Get_E_y(self):
        r"""Get_E_y(ChElasticityReissnerOrthotropic self) -> double"""
        return _fea.ChElasticityReissnerOrthotropic_Get_E_y(self)

    def Get_nu_xy(self):
        r"""Get_nu_xy(ChElasticityReissnerOrthotropic self) -> double"""
        return _fea.ChElasticityReissnerOrthotropic_Get_nu_xy(self)

    def Get_nu_yx(self):
        r"""Get_nu_yx(ChElasticityReissnerOrthotropic self) -> double"""
        return _fea.ChElasticityReissnerOrthotropic_Get_nu_yx(self)

    def Get_G_xy(self):
        r"""Get_G_xy(ChElasticityReissnerOrthotropic self) -> double"""
        return _fea.ChElasticityReissnerOrthotropic_Get_G_xy(self)

    def Get_G_xz(self):
        r"""Get_G_xz(ChElasticityReissnerOrthotropic self) -> double"""
        return _fea.ChElasticityReissnerOrthotropic_Get_G_xz(self)

    def Get_G_yz(self):
        r"""Get_G_yz(ChElasticityReissnerOrthotropic self) -> double"""
        return _fea.ChElasticityReissnerOrthotropic_Get_G_yz(self)

    def Get_alpha(self):
        r"""Get_alpha(ChElasticityReissnerOrthotropic self) -> double"""
        return _fea.ChElasticityReissnerOrthotropic_Get_alpha(self)

    def Get_beta(self):
        r"""Get_beta(ChElasticityReissnerOrthotropic self) -> double"""
        return _fea.ChElasticityReissnerOrthotropic_Get_beta(self)

    def ComputeStress(self, n_u, n_v, m_u, m_v, eps_u, eps_v, kur_u, kur_v, z_inf, z_sup, angle):
        r"""ComputeStress(ChElasticityReissnerOrthotropic self, ChVectorD n_u, ChVectorD n_v, ChVectorD m_u, ChVectorD m_v, ChVectorD eps_u, ChVectorD eps_v, ChVectorD kur_u, ChVectorD kur_v, double const z_inf, double const z_sup, double const angle)"""
        return _fea.ChElasticityReissnerOrthotropic_ComputeStress(self, n_u, n_v, m_u, m_v, eps_u, eps_v, kur_u, kur_v, z_inf, z_sup, angle)
    __swig_destroy__ = _fea.delete_ChElasticityReissnerOrthotropic

# Register ChElasticityReissnerOrthotropic in _fea:
_fea.ChElasticityReissnerOrthotropic_swigregister(ChElasticityReissnerOrthotropic)

class ChElasticityReissnerGeneric(ChElasticityReissner):
    r"""Proxy of C++ chrono::fea::ChElasticityReissnerGeneric class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChElasticityReissnerGeneric self) -> ChElasticityReissnerGeneric"""
        _fea.ChElasticityReissnerGeneric_swiginit(self, _fea.new_ChElasticityReissnerGeneric())
    __swig_destroy__ = _fea.delete_ChElasticityReissnerGeneric

    def Ematrix(self):
        r"""Ematrix(ChElasticityReissnerGeneric self) -> chrono::ChMatrixNM< double,12,12 > &"""
        return _fea.ChElasticityReissnerGeneric_Ematrix(self)

    def ComputeStress(self, n_u, n_v, m_u, m_v, eps_u, eps_v, kur_u, kur_v, z_inf, z_sup, angle):
        r"""ComputeStress(ChElasticityReissnerGeneric self, ChVectorD n_u, ChVectorD n_v, ChVectorD m_u, ChVectorD m_v, ChVectorD eps_u, ChVectorD eps_v, ChVectorD kur_u, ChVectorD kur_v, double const z_inf, double const z_sup, double const angle)"""
        return _fea.ChElasticityReissnerGeneric_ComputeStress(self, n_u, n_v, m_u, m_v, eps_u, eps_v, kur_u, kur_v, z_inf, z_sup, angle)

# Register ChElasticityReissnerGeneric in _fea:
_fea.ChElasticityReissnerGeneric_swigregister(ChElasticityReissnerGeneric)

class ChShellReissnerInternalData(object):
    r"""Proxy of C++ chrono::fea::ChShellReissnerInternalData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChShellReissnerInternalData self) -> ChShellReissnerInternalData"""
        _fea.ChShellReissnerInternalData_swiginit(self, _fea.new_ChShellReissnerInternalData())
    __swig_destroy__ = _fea.delete_ChShellReissnerInternalData

    def Copy(self, other):
        r"""Copy(ChShellReissnerInternalData self, ChShellReissnerInternalData other)"""
        return _fea.ChShellReissnerInternalData_Copy(self, other)
    p_strain_acc = property(_fea.ChShellReissnerInternalData_p_strain_acc_get, _fea.ChShellReissnerInternalData_p_strain_acc_set, doc=r"""p_strain_acc : double""")

# Register ChShellReissnerInternalData in _fea:
_fea.ChShellReissnerInternalData_swigregister(ChShellReissnerInternalData)

class ChPlasticityReissner(object):
    r"""Proxy of C++ chrono::fea::ChPlasticityReissner class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fea.delete_ChPlasticityReissner

    def ComputeStressWithReturnMapping(self, n_u, n_v, m_u, m_v, data_new, eps_u_trial, eps_v_trial, kur_u_trial, kur_v_trial, data, z_inf, z_sup, angle):
        r"""ComputeStressWithReturnMapping(ChPlasticityReissner self, ChVectorD n_u, ChVectorD n_v, ChVectorD m_u, ChVectorD m_v, ChShellReissnerInternalData data_new, ChVectorD eps_u_trial, ChVectorD eps_v_trial, ChVectorD kur_u_trial, ChVectorD kur_v_trial, ChShellReissnerInternalData data, double const z_inf, double const z_sup, double const angle) -> bool"""
        return _fea.ChPlasticityReissner_ComputeStressWithReturnMapping(self, n_u, n_v, m_u, m_v, data_new, eps_u_trial, eps_v_trial, kur_u_trial, kur_v_trial, data, z_inf, z_sup, angle)

    def CreatePlasticityData(self, numpoints, plastic_data):
        r"""CreatePlasticityData(ChPlasticityReissner self, int numpoints, std::vector< std::unique_ptr< chrono::fea::ChShellReissnerInternalData >,std::allocator< std::unique_ptr< chrono::fea::ChShellReissnerInternalData > > > & plastic_data)"""
        return _fea.ChPlasticityReissner_CreatePlasticityData(self, numpoints, plastic_data)
    section = property(_fea.ChPlasticityReissner_section_get, _fea.ChPlasticityReissner_section_set, doc=r"""section : p.chrono::fea::ChMaterialShellReissner""")
    nr_yeld_tolerance = property(_fea.ChPlasticityReissner_nr_yeld_tolerance_get, _fea.ChPlasticityReissner_nr_yeld_tolerance_set, doc=r"""nr_yeld_tolerance : double""")
    nr_yeld_maxiters = property(_fea.ChPlasticityReissner_nr_yeld_maxiters_get, _fea.ChPlasticityReissner_nr_yeld_maxiters_set, doc=r"""nr_yeld_maxiters : int""")

# Register ChPlasticityReissner in _fea:
_fea.ChPlasticityReissner_swigregister(ChPlasticityReissner)

class ChDampingReissner(object):
    r"""Proxy of C++ chrono::fea::ChDampingReissner class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fea.delete_ChDampingReissner

    def ComputeStress(self, n_u, n_v, m_u, m_v, deps_u, deps_v, dkur_u, dkur_v, z_inf, z_sup, angle):
        r"""ComputeStress(ChDampingReissner self, ChVectorD n_u, ChVectorD n_v, ChVectorD m_u, ChVectorD m_v, ChVectorD deps_u, ChVectorD deps_v, ChVectorD dkur_u, ChVectorD dkur_v, double const z_inf, double const z_sup, double const angle)"""
        return _fea.ChDampingReissner_ComputeStress(self, n_u, n_v, m_u, m_v, deps_u, deps_v, dkur_u, dkur_v, z_inf, z_sup, angle)
    section = property(_fea.ChDampingReissner_section_get, _fea.ChDampingReissner_section_set, doc=r"""section : p.chrono::fea::ChMaterialShellReissner""")

# Register ChDampingReissner in _fea:
_fea.ChDampingReissner_swigregister(ChDampingReissner)

class ChMaterialShellReissner(object):
    r"""Proxy of C++ chrono::fea::ChMaterialShellReissner class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChMaterialShellReissner self, std::shared_ptr< chrono::fea::ChElasticityReissner > melasticity) -> ChMaterialShellReissner
        __init__(ChMaterialShellReissner self, std::shared_ptr< chrono::fea::ChElasticityReissner > melasticity, std::shared_ptr< chrono::fea::ChPlasticityReissner > mplasticity) -> ChMaterialShellReissner
        __init__(ChMaterialShellReissner self, std::shared_ptr< chrono::fea::ChElasticityReissner > melasticity, std::shared_ptr< chrono::fea::ChPlasticityReissner > mplasticity, std::shared_ptr< chrono::fea::ChDampingReissner > mdamping) -> ChMaterialShellReissner
        """
        _fea.ChMaterialShellReissner_swiginit(self, _fea.new_ChMaterialShellReissner(*args))
    __swig_destroy__ = _fea.delete_ChMaterialShellReissner

    def ComputeStress(self, n_u, n_v, m_u, m_v, eps_u, eps_v, kur_u, kur_v, z_inf, z_sup, angle, mdata_new=None, mdata=None):
        r"""ComputeStress(ChMaterialShellReissner self, ChVectorD n_u, ChVectorD n_v, ChVectorD m_u, ChVectorD m_v, ChVectorD eps_u, ChVectorD eps_v, ChVectorD kur_u, ChVectorD kur_v, double const z_inf, double const z_sup, double const angle, ChShellReissnerInternalData mdata_new=None, ChShellReissnerInternalData mdata=None)"""
        return _fea.ChMaterialShellReissner_ComputeStress(self, n_u, n_v, m_u, m_v, eps_u, eps_v, kur_u, kur_v, z_inf, z_sup, angle, mdata_new, mdata)

    def SetElasticity(self, melasticity):
        r"""SetElasticity(ChMaterialShellReissner self, std::shared_ptr< chrono::fea::ChElasticityReissner > melasticity)"""
        return _fea.ChMaterialShellReissner_SetElasticity(self, melasticity)

    def GetElasticity(self):
        r"""GetElasticity(ChMaterialShellReissner self) -> std::shared_ptr< chrono::fea::ChElasticityReissner >"""
        return _fea.ChMaterialShellReissner_GetElasticity(self)

    def SetPlasticity(self, mplasticity):
        r"""SetPlasticity(ChMaterialShellReissner self, std::shared_ptr< chrono::fea::ChPlasticityReissner > mplasticity)"""
        return _fea.ChMaterialShellReissner_SetPlasticity(self, mplasticity)

    def GetPlasticity(self):
        r"""GetPlasticity(ChMaterialShellReissner self) -> std::shared_ptr< chrono::fea::ChPlasticityReissner >"""
        return _fea.ChMaterialShellReissner_GetPlasticity(self)

    def SetDamping(self, mdamping):
        r"""SetDamping(ChMaterialShellReissner self, std::shared_ptr< chrono::fea::ChDampingReissner > mdamping)"""
        return _fea.ChMaterialShellReissner_SetDamping(self, mdamping)

    def GetDamping(self):
        r"""GetDamping(ChMaterialShellReissner self) -> std::shared_ptr< chrono::fea::ChDampingReissner >"""
        return _fea.ChMaterialShellReissner_GetDamping(self)

    def SetDensity(self, md):
        r"""SetDensity(ChMaterialShellReissner self, double md)"""
        return _fea.ChMaterialShellReissner_SetDensity(self, md)

    def GetDensity(self):
        r"""GetDensity(ChMaterialShellReissner self) -> double"""
        return _fea.ChMaterialShellReissner_GetDensity(self)

    def Get_rho(self):
        r"""Get_rho(ChMaterialShellReissner self) -> double"""
        return _fea.ChMaterialShellReissner_Get_rho(self)

# Register ChMaterialShellReissner in _fea:
_fea.ChMaterialShellReissner_swigregister(ChMaterialShellReissner)

class ChMaterialShellReissnerIsothropic(ChMaterialShellReissner):
    r"""Proxy of C++ chrono::fea::ChMaterialShellReissnerIsothropic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mdensity, E, nu, alpha=1.0, beta=0.1):
        r"""__init__(ChMaterialShellReissnerIsothropic self, double mdensity, double E, double nu, double alpha=1.0, double beta=0.1) -> ChMaterialShellReissnerIsothropic"""
        _fea.ChMaterialShellReissnerIsothropic_swiginit(self, _fea.new_ChMaterialShellReissnerIsothropic(mdensity, E, nu, alpha, beta))
    __swig_destroy__ = _fea.delete_ChMaterialShellReissnerIsothropic

# Register ChMaterialShellReissnerIsothropic in _fea:
_fea.ChMaterialShellReissnerIsothropic_swigregister(ChMaterialShellReissnerIsothropic)

class ChMaterialShellReissnerOrthotropic(ChMaterialShellReissner):
    r"""Proxy of C++ chrono::fea::ChMaterialShellReissnerOrthotropic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChMaterialShellReissnerOrthotropic self, double mdensity, double m_E_x, double m_E_y, double m_nu_xy, double m_G_xy, double m_G_xz, double m_G_yz, double m_alpha=1.0, double m_beta=0.1) -> ChMaterialShellReissnerOrthotropic
        __init__(ChMaterialShellReissnerOrthotropic self, double mdensity, double m_E, double m_nu, double m_alpha=1.0, double m_beta=0.1) -> ChMaterialShellReissnerOrthotropic
        """
        _fea.ChMaterialShellReissnerOrthotropic_swiginit(self, _fea.new_ChMaterialShellReissnerOrthotropic(*args))
    __swig_destroy__ = _fea.delete_ChMaterialShellReissnerOrthotropic

# Register ChMaterialShellReissnerOrthotropic in _fea:
_fea.ChMaterialShellReissnerOrthotropic_swigregister(ChMaterialShellReissnerOrthotropic)

class ChElasticityKirchhoff(object):
    r"""Proxy of C++ chrono::fea::ChElasticityKirchhoff class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fea.delete_ChElasticityKirchhoff

    def ComputeStress(self, n, m, eps, kur, z_inf, z_sup, angle):
        r"""ComputeStress(ChElasticityKirchhoff self, ChVectorD n, ChVectorD m, ChVectorD eps, ChVectorD kur, double const z_inf, double const z_sup, double const angle)"""
        return _fea.ChElasticityKirchhoff_ComputeStress(self, n, m, eps, kur, z_inf, z_sup, angle)
    section = property(_fea.ChElasticityKirchhoff_section_get, _fea.ChElasticityKirchhoff_section_set, doc=r"""section : p.chrono::fea::ChMaterialShellKirchhoff""")

# Register ChElasticityKirchhoff in _fea:
_fea.ChElasticityKirchhoff_swigregister(ChElasticityKirchhoff)

class ChElasticityKirchhoffIsothropic(ChElasticityKirchhoff):
    r"""Proxy of C++ chrono::fea::ChElasticityKirchhoffIsothropic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, E, nu):
        r"""__init__(ChElasticityKirchhoffIsothropic self, double E, double nu) -> ChElasticityKirchhoffIsothropic"""
        _fea.ChElasticityKirchhoffIsothropic_swiginit(self, _fea.new_ChElasticityKirchhoffIsothropic(E, nu))

    def Get_E(self):
        r"""Get_E(ChElasticityKirchhoffIsothropic self) -> double"""
        return _fea.ChElasticityKirchhoffIsothropic_Get_E(self)

    def Get_nu(self):
        r"""Get_nu(ChElasticityKirchhoffIsothropic self) -> double"""
        return _fea.ChElasticityKirchhoffIsothropic_Get_nu(self)

    def ComputeStress(self, n, m, eps, kur, z_inf, z_sup, angle):
        r"""ComputeStress(ChElasticityKirchhoffIsothropic self, ChVectorD n, ChVectorD m, ChVectorD eps, ChVectorD kur, double const z_inf, double const z_sup, double const angle)"""
        return _fea.ChElasticityKirchhoffIsothropic_ComputeStress(self, n, m, eps, kur, z_inf, z_sup, angle)
    __swig_destroy__ = _fea.delete_ChElasticityKirchhoffIsothropic

# Register ChElasticityKirchhoffIsothropic in _fea:
_fea.ChElasticityKirchhoffIsothropic_swigregister(ChElasticityKirchhoffIsothropic)

class ChElasticityKirchhoffOrthotropic(ChElasticityKirchhoff):
    r"""Proxy of C++ chrono::fea::ChElasticityKirchhoffOrthotropic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChElasticityKirchhoffOrthotropic self, double m_E_x, double m_E_y, double m_nu_xy, double m_G_xy) -> ChElasticityKirchhoffOrthotropic
        __init__(ChElasticityKirchhoffOrthotropic self, double m_E, double m_nu) -> ChElasticityKirchhoffOrthotropic
        """
        _fea.ChElasticityKirchhoffOrthotropic_swiginit(self, _fea.new_ChElasticityKirchhoffOrthotropic(*args))

    def Get_E_x(self):
        r"""Get_E_x(ChElasticityKirchhoffOrthotropic self) -> double"""
        return _fea.ChElasticityKirchhoffOrthotropic_Get_E_x(self)

    def Get_E_y(self):
        r"""Get_E_y(ChElasticityKirchhoffOrthotropic self) -> double"""
        return _fea.ChElasticityKirchhoffOrthotropic_Get_E_y(self)

    def Get_nu_xy(self):
        r"""Get_nu_xy(ChElasticityKirchhoffOrthotropic self) -> double"""
        return _fea.ChElasticityKirchhoffOrthotropic_Get_nu_xy(self)

    def Get_nu_yx(self):
        r"""Get_nu_yx(ChElasticityKirchhoffOrthotropic self) -> double"""
        return _fea.ChElasticityKirchhoffOrthotropic_Get_nu_yx(self)

    def Get_G_xy(self):
        r"""Get_G_xy(ChElasticityKirchhoffOrthotropic self) -> double"""
        return _fea.ChElasticityKirchhoffOrthotropic_Get_G_xy(self)

    def ComputeStress(self, n, m, eps, kur, z_inf, z_sup, angle):
        r"""ComputeStress(ChElasticityKirchhoffOrthotropic self, ChVectorD n, ChVectorD m, ChVectorD eps, ChVectorD kur, double const z_inf, double const z_sup, double const angle)"""
        return _fea.ChElasticityKirchhoffOrthotropic_ComputeStress(self, n, m, eps, kur, z_inf, z_sup, angle)
    __swig_destroy__ = _fea.delete_ChElasticityKirchhoffOrthotropic

# Register ChElasticityKirchhoffOrthotropic in _fea:
_fea.ChElasticityKirchhoffOrthotropic_swigregister(ChElasticityKirchhoffOrthotropic)

class ChElasticityKirchhoffGeneric(ChElasticityKirchhoff):
    r"""Proxy of C++ chrono::fea::ChElasticityKirchhoffGeneric class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChElasticityKirchhoffGeneric self) -> ChElasticityKirchhoffGeneric"""
        _fea.ChElasticityKirchhoffGeneric_swiginit(self, _fea.new_ChElasticityKirchhoffGeneric())
    __swig_destroy__ = _fea.delete_ChElasticityKirchhoffGeneric

    def Ematrix(self):
        r"""Ematrix(ChElasticityKirchhoffGeneric self) -> chrono::ChMatrixNM< double,6,6 > &"""
        return _fea.ChElasticityKirchhoffGeneric_Ematrix(self)

    def ComputeStress(self, n, m, eps, kur, z_inf, z_sup, angle):
        r"""ComputeStress(ChElasticityKirchhoffGeneric self, ChVectorD n, ChVectorD m, ChVectorD eps, ChVectorD kur, double const z_inf, double const z_sup, double const angle)"""
        return _fea.ChElasticityKirchhoffGeneric_ComputeStress(self, n, m, eps, kur, z_inf, z_sup, angle)

# Register ChElasticityKirchhoffGeneric in _fea:
_fea.ChElasticityKirchhoffGeneric_swigregister(ChElasticityKirchhoffGeneric)

class ChShellKirchhoffInternalData(object):
    r"""Proxy of C++ chrono::fea::ChShellKirchhoffInternalData class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChShellKirchhoffInternalData self) -> ChShellKirchhoffInternalData"""
        _fea.ChShellKirchhoffInternalData_swiginit(self, _fea.new_ChShellKirchhoffInternalData())
    __swig_destroy__ = _fea.delete_ChShellKirchhoffInternalData

    def Copy(self, other):
        r"""Copy(ChShellKirchhoffInternalData self, ChShellKirchhoffInternalData other)"""
        return _fea.ChShellKirchhoffInternalData_Copy(self, other)
    p_strain_acc = property(_fea.ChShellKirchhoffInternalData_p_strain_acc_get, _fea.ChShellKirchhoffInternalData_p_strain_acc_set, doc=r"""p_strain_acc : double""")

# Register ChShellKirchhoffInternalData in _fea:
_fea.ChShellKirchhoffInternalData_swigregister(ChShellKirchhoffInternalData)

class ChPlasticityKirchhoff(object):
    r"""Proxy of C++ chrono::fea::ChPlasticityKirchhoff class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fea.delete_ChPlasticityKirchhoff

    def ComputeStressWithReturnMapping(self, n, m, data_new, eps_trial, kur_trial, data, z_inf, z_sup, angle):
        r"""ComputeStressWithReturnMapping(ChPlasticityKirchhoff self, ChVectorD n, ChVectorD m, ChShellKirchhoffInternalData data_new, ChVectorD eps_trial, ChVectorD kur_trial, ChShellKirchhoffInternalData data, double const z_inf, double const z_sup, double const angle) -> bool"""
        return _fea.ChPlasticityKirchhoff_ComputeStressWithReturnMapping(self, n, m, data_new, eps_trial, kur_trial, data, z_inf, z_sup, angle)

    def CreatePlasticityData(self, numpoints, plastic_data):
        r"""CreatePlasticityData(ChPlasticityKirchhoff self, int numpoints, std::vector< std::unique_ptr< chrono::fea::ChShellKirchhoffInternalData >,std::allocator< std::unique_ptr< chrono::fea::ChShellKirchhoffInternalData > > > & plastic_data)"""
        return _fea.ChPlasticityKirchhoff_CreatePlasticityData(self, numpoints, plastic_data)
    section = property(_fea.ChPlasticityKirchhoff_section_get, _fea.ChPlasticityKirchhoff_section_set, doc=r"""section : p.chrono::fea::ChMaterialShellKirchhoff""")
    nr_yeld_tolerance = property(_fea.ChPlasticityKirchhoff_nr_yeld_tolerance_get, _fea.ChPlasticityKirchhoff_nr_yeld_tolerance_set, doc=r"""nr_yeld_tolerance : double""")
    nr_yeld_maxiters = property(_fea.ChPlasticityKirchhoff_nr_yeld_maxiters_get, _fea.ChPlasticityKirchhoff_nr_yeld_maxiters_set, doc=r"""nr_yeld_maxiters : int""")

# Register ChPlasticityKirchhoff in _fea:
_fea.ChPlasticityKirchhoff_swigregister(ChPlasticityKirchhoff)

class ChDampingKirchhoff(object):
    r"""Proxy of C++ chrono::fea::ChDampingKirchhoff class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fea.delete_ChDampingKirchhoff

    def ComputeStress(self, n, m, deps, dkur, z_inf, z_sup, angle):
        r"""ComputeStress(ChDampingKirchhoff self, ChVectorD n, ChVectorD m, ChVectorD deps, ChVectorD dkur, double const z_inf, double const z_sup, double const angle)"""
        return _fea.ChDampingKirchhoff_ComputeStress(self, n, m, deps, dkur, z_inf, z_sup, angle)
    section = property(_fea.ChDampingKirchhoff_section_get, _fea.ChDampingKirchhoff_section_set, doc=r"""section : p.chrono::fea::ChMaterialShellKirchhoff""")

# Register ChDampingKirchhoff in _fea:
_fea.ChDampingKirchhoff_swigregister(ChDampingKirchhoff)

class ChMaterialShellKirchhoff(object):
    r"""Proxy of C++ chrono::fea::ChMaterialShellKirchhoff class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChMaterialShellKirchhoff self, std::shared_ptr< chrono::fea::ChElasticityKirchhoff > melasticity) -> ChMaterialShellKirchhoff
        __init__(ChMaterialShellKirchhoff self, std::shared_ptr< chrono::fea::ChElasticityKirchhoff > melasticity, std::shared_ptr< chrono::fea::ChPlasticityKirchhoff > mplasticity) -> ChMaterialShellKirchhoff
        __init__(ChMaterialShellKirchhoff self, std::shared_ptr< chrono::fea::ChElasticityKirchhoff > melasticity, std::shared_ptr< chrono::fea::ChPlasticityKirchhoff > mplasticity, std::shared_ptr< chrono::fea::ChDampingKirchhoff > mdamping) -> ChMaterialShellKirchhoff
        """
        _fea.ChMaterialShellKirchhoff_swiginit(self, _fea.new_ChMaterialShellKirchhoff(*args))
    __swig_destroy__ = _fea.delete_ChMaterialShellKirchhoff

    def ComputeStress(self, n, m, eps, kur, z_inf, z_sup, angle, mdata_new=None, mdata=None):
        r"""ComputeStress(ChMaterialShellKirchhoff self, ChVectorD n, ChVectorD m, ChVectorD eps, ChVectorD kur, double const z_inf, double const z_sup, double const angle, ChShellKirchhoffInternalData mdata_new=None, ChShellKirchhoffInternalData mdata=None)"""
        return _fea.ChMaterialShellKirchhoff_ComputeStress(self, n, m, eps, kur, z_inf, z_sup, angle, mdata_new, mdata)

    def SetElasticity(self, melasticity):
        r"""SetElasticity(ChMaterialShellKirchhoff self, std::shared_ptr< chrono::fea::ChElasticityKirchhoff > melasticity)"""
        return _fea.ChMaterialShellKirchhoff_SetElasticity(self, melasticity)

    def GetElasticity(self):
        r"""GetElasticity(ChMaterialShellKirchhoff self) -> std::shared_ptr< chrono::fea::ChElasticityKirchhoff >"""
        return _fea.ChMaterialShellKirchhoff_GetElasticity(self)

    def SetPlasticity(self, mplasticity):
        r"""SetPlasticity(ChMaterialShellKirchhoff self, std::shared_ptr< chrono::fea::ChPlasticityKirchhoff > mplasticity)"""
        return _fea.ChMaterialShellKirchhoff_SetPlasticity(self, mplasticity)

    def GetPlasticity(self):
        r"""GetPlasticity(ChMaterialShellKirchhoff self) -> std::shared_ptr< chrono::fea::ChPlasticityKirchhoff >"""
        return _fea.ChMaterialShellKirchhoff_GetPlasticity(self)

    def SetDamping(self, mdamping):
        r"""SetDamping(ChMaterialShellKirchhoff self, std::shared_ptr< chrono::fea::ChDampingKirchhoff > mdamping)"""
        return _fea.ChMaterialShellKirchhoff_SetDamping(self, mdamping)

    def GetDamping(self):
        r"""GetDamping(ChMaterialShellKirchhoff self) -> std::shared_ptr< chrono::fea::ChDampingKirchhoff >"""
        return _fea.ChMaterialShellKirchhoff_GetDamping(self)

    def SetDensity(self, md):
        r"""SetDensity(ChMaterialShellKirchhoff self, double md)"""
        return _fea.ChMaterialShellKirchhoff_SetDensity(self, md)

    def GetDensity(self):
        r"""GetDensity(ChMaterialShellKirchhoff self) -> double"""
        return _fea.ChMaterialShellKirchhoff_GetDensity(self)

# Register ChMaterialShellKirchhoff in _fea:
_fea.ChMaterialShellKirchhoff_swigregister(ChMaterialShellKirchhoff)

class ChElementShell(ChElementGeneric):
    r"""Proxy of C++ chrono::fea::ChElementShell class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fea.delete_ChElementShell

    def EvaluateSectionDisplacement(self, u, v, u_displ, u_rotaz):
        r"""EvaluateSectionDisplacement(ChElementShell self, double const u, double const v, ChVectorD u_displ, ChVectorD u_rotaz)"""
        return _fea.ChElementShell_EvaluateSectionDisplacement(self, u, v, u_displ, u_rotaz)

    def EvaluateSectionFrame(self, u, v, point, rot):
        r"""EvaluateSectionFrame(ChElementShell self, double const u, double const v, ChVectorD point, ChQuaternionD rot)"""
        return _fea.ChElementShell_EvaluateSectionFrame(self, u, v, point, rot)

    def EvaluateSectionPoint(self, u, v, point):
        r"""EvaluateSectionPoint(ChElementShell self, double const u, double const v, ChVectorD point)"""
        return _fea.ChElementShell_EvaluateSectionPoint(self, u, v, point)

    def EvaluateSectionVelNorm(self, U, V, Result):
        r"""EvaluateSectionVelNorm(ChElementShell self, double U, double V, ChVectorD Result)"""
        return _fea.ChElementShell_EvaluateSectionVelNorm(self, U, V, Result)

    def IsTriangleShell(self):
        r"""IsTriangleShell(ChElementShell self) -> bool"""
        return _fea.ChElementShell_IsTriangleShell(self)

# Register ChElementShell in _fea:
_fea.ChElementShell_swigregister(ChElementShell)

class ChElementShellReissner4(ChElementShell, pychrono.core.ChLoadableUV, pychrono.core.ChLoadableUVW):
    r"""Proxy of C++ chrono::fea::ChElementShellReissner4 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChElementShellReissner4 self) -> ChElementShellReissner4"""
        _fea.ChElementShellReissner4_swiginit(self, _fea.new_ChElementShellReissner4())
    __swig_destroy__ = _fea.delete_ChElementShellReissner4

    def GetNnodes(self):
        r"""GetNnodes(ChElementShellReissner4 self) -> int"""
        return _fea.ChElementShellReissner4_GetNnodes(self)

    def GetNdofs(self):
        r"""GetNdofs(ChElementShellReissner4 self) -> int"""
        return _fea.ChElementShellReissner4_GetNdofs(self)

    def GetNodeNdofs(self, n):
        r"""GetNodeNdofs(ChElementShellReissner4 self, int n) -> int"""
        return _fea.ChElementShellReissner4_GetNodeNdofs(self, n)

    def SetNodes(self, nodeA, nodeB, nodeC, nodeD):
        r"""SetNodes(ChElementShellReissner4 self, std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > nodeA, std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > nodeB, std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > nodeC, std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > nodeD)"""
        return _fea.ChElementShellReissner4_SetNodes(self, nodeA, nodeB, nodeC, nodeD)

    def GetNodeN(self, n):
        r"""GetNodeN(ChElementShellReissner4 self, int n) -> std::shared_ptr< chrono::fea::ChNodeFEAbase >"""
        return _fea.ChElementShellReissner4_GetNodeN(self, n)

    def GetNodeA(self):
        r"""GetNodeA(ChElementShellReissner4 self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzrot >"""
        return _fea.ChElementShellReissner4_GetNodeA(self)

    def GetNodeB(self):
        r"""GetNodeB(ChElementShellReissner4 self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzrot >"""
        return _fea.ChElementShellReissner4_GetNodeB(self)

    def GetNodeC(self):
        r"""GetNodeC(ChElementShellReissner4 self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzrot >"""
        return _fea.ChElementShellReissner4_GetNodeC(self)

    def GetNodeD(self):
        r"""GetNodeD(ChElementShellReissner4 self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzrot >"""
        return _fea.ChElementShellReissner4_GetNodeD(self)

    def SetAsNeutral(self):
        r"""SetAsNeutral(ChElementShellReissner4 self)"""
        return _fea.ChElementShellReissner4_SetAsNeutral(self)

    def AddLayer(self, thickness, theta, material):
        r"""AddLayer(ChElementShellReissner4 self, double thickness, double theta, std::shared_ptr< chrono::fea::ChMaterialShellReissner > material)"""
        return _fea.ChElementShellReissner4_AddLayer(self, thickness, theta, material)

    def SetLayerZreferenceCentered(self):
        r"""SetLayerZreferenceCentered(ChElementShellReissner4 self)"""
        return _fea.ChElementShellReissner4_SetLayerZreferenceCentered(self)

    def SetLayerZreference(self, z_from_bottom):
        r"""SetLayerZreference(ChElementShellReissner4 self, double z_from_bottom)"""
        return _fea.ChElementShellReissner4_SetLayerZreference(self, z_from_bottom)

    def GetNumLayers(self):
        r"""GetNumLayers(ChElementShellReissner4 self) -> size_t"""
        return _fea.ChElementShellReissner4_GetNumLayers(self)

    def GetLayer(self, i):
        r"""GetLayer(ChElementShellReissner4 self, size_t i) -> ShellReissner4Layer"""
        return _fea.ChElementShellReissner4_GetLayer(self, i)

    def SetAlphaDamp(self, a):
        r"""SetAlphaDamp(ChElementShellReissner4 self, double a)"""
        return _fea.ChElementShellReissner4_SetAlphaDamp(self, a)

    def GetLengthX(self):
        r"""GetLengthX(ChElementShellReissner4 self) -> double"""
        return _fea.ChElementShellReissner4_GetLengthX(self)

    def GetLengthY(self):
        r"""GetLengthY(ChElementShellReissner4 self) -> double"""
        return _fea.ChElementShellReissner4_GetLengthY(self)

    def GetThickness(self):
        r"""GetThickness(ChElementShellReissner4 self) -> double"""
        return _fea.ChElementShellReissner4_GetThickness(self)

    def GetAvgRot(self):
        r"""GetAvgRot(ChElementShellReissner4 self) -> ChQuaternionD"""
        return _fea.ChElementShellReissner4_GetAvgRot(self)

    def ShapeFunctions(self, N, x, y):
        r"""ShapeFunctions(ChElementShellReissner4 self, chrono::fea::ChElementShellReissner4::ShapeVector & N, double x, double y)"""
        return _fea.ChElementShellReissner4_ShapeFunctions(self, N, x, y)

    def ShapeFunctionsDerivativeX(self, Nx, x, y):
        r"""ShapeFunctionsDerivativeX(ChElementShellReissner4 self, chrono::fea::ChElementShellReissner4::ShapeVector & Nx, double x, double y)"""
        return _fea.ChElementShellReissner4_ShapeFunctionsDerivativeX(self, Nx, x, y)

    def ShapeFunctionsDerivativeY(self, Ny, x, y):
        r"""ShapeFunctionsDerivativeY(ChElementShellReissner4 self, chrono::fea::ChElementShellReissner4::ShapeVector & Ny, double x, double y)"""
        return _fea.ChElementShellReissner4_ShapeFunctionsDerivativeY(self, Ny, x, y)

    def EvaluateGP(self, igp):
        r"""EvaluateGP(ChElementShellReissner4 self, int igp) -> ChVectorD"""
        return _fea.ChElementShellReissner4_EvaluateGP(self, igp)

    def EvaluatePT(self, ipt):
        r"""EvaluatePT(ChElementShellReissner4 self, int ipt) -> ChVectorD"""
        return _fea.ChElementShellReissner4_EvaluatePT(self, ipt)

    def iGetNumDof(self):
        r"""iGetNumDof(ChElementShellReissner4 self) -> unsigned int"""
        return _fea.ChElementShellReissner4_iGetNumDof(self)
    m_nodes = property(_fea.ChElementShellReissner4_m_nodes_get, _fea.ChElementShellReissner4_m_nodes_set, doc=r"""m_nodes : std::vector<(std::shared_ptr<(chrono::fea::ChNodeFEAxyzrot)>,std::allocator<(std::shared_ptr<(chrono::fea::ChNodeFEAxyzrot)>)>)>""")
    m_layers = property(_fea.ChElementShellReissner4_m_layers_get, _fea.ChElementShellReissner4_m_layers_set, doc=r"""m_layers : std::vector<(chrono::fea::ChElementShellReissner4::Layer,std::allocator<(chrono::fea::ChElementShellReissner4::Layer)>)>""")
    m_layers_z = property(_fea.ChElementShellReissner4_m_layers_z_get, _fea.ChElementShellReissner4_m_layers_z_set, doc=r"""m_layers_z : std::vector<(double,std::allocator<(double)>)>""")
    tot_thickness = property(_fea.ChElementShellReissner4_tot_thickness_get, _fea.ChElementShellReissner4_tot_thickness_set, doc=r"""tot_thickness : double""")
    m_lenX = property(_fea.ChElementShellReissner4_m_lenX_get, _fea.ChElementShellReissner4_m_lenX_set, doc=r"""m_lenX : double""")
    m_lenY = property(_fea.ChElementShellReissner4_m_lenY_get, _fea.ChElementShellReissner4_m_lenY_set, doc=r"""m_lenY : double""")
    m_Alpha = property(_fea.ChElementShellReissner4_m_Alpha_get, _fea.ChElementShellReissner4_m_Alpha_set, doc=r"""m_Alpha : double""")
    m_MassMatrix = property(_fea.ChElementShellReissner4_m_MassMatrix_get, _fea.ChElementShellReissner4_m_MassMatrix_set, doc=r"""m_MassMatrix : chrono::ChMatrixNM<(double,24,24)>""")
    m_JacobianMatrix = property(_fea.ChElementShellReissner4_m_JacobianMatrix_get, _fea.ChElementShellReissner4_m_JacobianMatrix_set, doc=r"""m_JacobianMatrix : chrono::ChMatrixNM<(double,24,24)>""")
    IP_1_1 = _fea.ChElementShellReissner4_IP_1_1
    
    IP_1_2 = _fea.ChElementShellReissner4_IP_1_2
    
    IP_1_3 = _fea.ChElementShellReissner4_IP_1_3
    
    IP_2_1 = _fea.ChElementShellReissner4_IP_2_1
    
    IP_2_2 = _fea.ChElementShellReissner4_IP_2_2
    
    IP_2_3 = _fea.ChElementShellReissner4_IP_2_3
    
    IP_3_1 = _fea.ChElementShellReissner4_IP_3_1
    
    IP_3_2 = _fea.ChElementShellReissner4_IP_3_2
    
    IP_3_3 = _fea.ChElementShellReissner4_IP_3_3
    
    NUMIP = _fea.ChElementShellReissner4_NUMIP
    
    xi_i = property(_fea.ChElementShellReissner4_xi_i_get, _fea.ChElementShellReissner4_xi_i_set, doc=r"""xi_i : a(chrono::fea::ChElementShellReissner4::NUMIP).a(2).double""")
    w_i = property(_fea.ChElementShellReissner4_w_i_get, _fea.ChElementShellReissner4_w_i_set, doc=r"""w_i : a(chrono::fea::ChElementShellReissner4::NUMIP).double""")
    SSEP_1 = _fea.ChElementShellReissner4_SSEP_1
    
    SSEP_2 = _fea.ChElementShellReissner4_SSEP_2
    
    SSEP_3 = _fea.ChElementShellReissner4_SSEP_3
    
    SSEP_4 = _fea.ChElementShellReissner4_SSEP_4
    
    NUMSSEP = _fea.ChElementShellReissner4_NUMSSEP
    
    xi_A = property(_fea.ChElementShellReissner4_xi_A_get, _fea.ChElementShellReissner4_xi_A_set, doc=r"""xi_A : a(chrono::fea::ChElementShellReissner4::NUMSSEP).a(2).double""")
    NODE1 = _fea.ChElementShellReissner4_NODE1
    
    NODE2 = _fea.ChElementShellReissner4_NODE2
    
    NODE3 = _fea.ChElementShellReissner4_NODE3
    
    NODE4 = _fea.ChElementShellReissner4_NODE4
    
    NUMNODES = _fea.ChElementShellReissner4_NUMNODES
    
    xi_n = property(_fea.ChElementShellReissner4_xi_n_get, _fea.ChElementShellReissner4_xi_n_set, doc=r"""xi_n : a(chrono::fea::ChElementShellReissner4::NUMNODES).a(2).double""")
    xi_0 = property(_fea.ChElementShellReissner4_xi_0_get, _fea.ChElementShellReissner4_xi_0_set, doc=r"""xi_0 : a(2).double""")
    STRAIN = _fea.ChElementShellReissner4_STRAIN
    
    CURVAT = _fea.ChElementShellReissner4_CURVAT
    
    NUMDEFORM = _fea.ChElementShellReissner4_NUMDEFORM
    
    IDOFS = _fea.ChElementShellReissner4_IDOFS
    
    mvariables = property(_fea.ChElementShellReissner4_mvariables_get, _fea.ChElementShellReissner4_mvariables_set, doc=r"""mvariables : p.ChVariablesGenericDiagonalMass""")
    xa_0 = property(_fea.ChElementShellReissner4_xa_0_get, _fea.ChElementShellReissner4_xa_0_set, doc=r"""xa_0 : a(chrono::fea::ChElementShellReissner4::NUMNODES).chrono::ChVector<()>""")
    xa = property(_fea.ChElementShellReissner4_xa_get, _fea.ChElementShellReissner4_xa_set, doc=r"""xa : a(chrono::fea::ChElementShellReissner4::NUMNODES).chrono::ChVector<()>""")
    iTa = property(_fea.ChElementShellReissner4_iTa_get, _fea.ChElementShellReissner4_iTa_set, doc=r"""iTa : a(chrono::fea::ChElementShellReissner4::NUMNODES).chrono::ChMatrix33<()>""")
    iTa_i = property(_fea.ChElementShellReissner4_iTa_i_get, _fea.ChElementShellReissner4_iTa_i_set, doc=r"""iTa_i : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChMatrix33<()>""")
    iTa_A = property(_fea.ChElementShellReissner4_iTa_A_get, _fea.ChElementShellReissner4_iTa_A_set, doc=r"""iTa_A : a(chrono::fea::ChElementShellReissner4::NUMSSEP).chrono::ChMatrix33<()>""")
    phi_tilde_n = property(_fea.ChElementShellReissner4_phi_tilde_n_get, _fea.ChElementShellReissner4_phi_tilde_n_set, doc=r"""phi_tilde_n : a(chrono::fea::ChElementShellReissner4::NUMNODES).chrono::ChVector<()>""")
    phi_tilde_i = property(_fea.ChElementShellReissner4_phi_tilde_i_get, _fea.ChElementShellReissner4_phi_tilde_i_set, doc=r"""phi_tilde_i : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChVector<()>""")
    phi_tilde_A = property(_fea.ChElementShellReissner4_phi_tilde_A_get, _fea.ChElementShellReissner4_phi_tilde_A_set, doc=r"""phi_tilde_A : a(chrono::fea::ChElementShellReissner4::NUMSSEP).chrono::ChVector<()>""")
    phi_tilde_0 = property(_fea.ChElementShellReissner4_phi_tilde_0_get, _fea.ChElementShellReissner4_phi_tilde_0_set, doc=r"""phi_tilde_0 : chrono::ChVector<()>""")
    T0_overline = property(_fea.ChElementShellReissner4_T0_overline_get, _fea.ChElementShellReissner4_T0_overline_set, doc=r"""T0_overline : chrono::ChMatrix33<()>""")
    T_overline = property(_fea.ChElementShellReissner4_T_overline_get, _fea.ChElementShellReissner4_T_overline_set, doc=r"""T_overline : chrono::ChMatrix33<()>""")
    T_0_0 = property(_fea.ChElementShellReissner4_T_0_0_get, _fea.ChElementShellReissner4_T_0_0_set, doc=r"""T_0_0 : chrono::ChMatrix33<()>""")
    T_0_i = property(_fea.ChElementShellReissner4_T_0_i_get, _fea.ChElementShellReissner4_T_0_i_set, doc=r"""T_0_i : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChMatrix33<()>""")
    T_0_A = property(_fea.ChElementShellReissner4_T_0_A_get, _fea.ChElementShellReissner4_T_0_A_set, doc=r"""T_0_A : a(chrono::fea::ChElementShellReissner4::NUMSSEP).chrono::ChMatrix33<()>""")
    T_0 = property(_fea.ChElementShellReissner4_T_0_get, _fea.ChElementShellReissner4_T_0_set, doc=r"""T_0 : chrono::ChMatrix33<()>""")
    T_i = property(_fea.ChElementShellReissner4_T_i_get, _fea.ChElementShellReissner4_T_i_set, doc=r"""T_i : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChMatrix33<()>""")
    T_A = property(_fea.ChElementShellReissner4_T_A_get, _fea.ChElementShellReissner4_T_A_set, doc=r"""T_A : a(chrono::fea::ChElementShellReissner4::NUMSSEP).chrono::ChMatrix33<()>""")
    Phi_Delta_i = property(_fea.ChElementShellReissner4_Phi_Delta_i_get, _fea.ChElementShellReissner4_Phi_Delta_i_set, doc=r"""Phi_Delta_i : a(chrono::fea::ChElementShellReissner4::NUMIP).a(chrono::fea::ChElementShellReissner4::NUMNODES).chrono::ChMatrix33<()>""")
    Phi_Delta_A = property(_fea.ChElementShellReissner4_Phi_Delta_A_get, _fea.ChElementShellReissner4_Phi_Delta_A_set, doc=r"""Phi_Delta_A : a(chrono::fea::ChElementShellReissner4::NUMIP).a(chrono::fea::ChElementShellReissner4::NUMNODES).chrono::ChMatrix33<()>""")
    Kappa_delta_i_1 = property(_fea.ChElementShellReissner4_Kappa_delta_i_1_get, _fea.ChElementShellReissner4_Kappa_delta_i_1_set, doc=r"""Kappa_delta_i_1 : a(chrono::fea::ChElementShellReissner4::NUMIP).a(chrono::fea::ChElementShellReissner4::NUMNODES).chrono::ChMatrix33<()>""")
    Kappa_delta_i_2 = property(_fea.ChElementShellReissner4_Kappa_delta_i_2_get, _fea.ChElementShellReissner4_Kappa_delta_i_2_set, doc=r"""Kappa_delta_i_2 : a(chrono::fea::ChElementShellReissner4::NUMIP).a(chrono::fea::ChElementShellReissner4::NUMNODES).chrono::ChMatrix33<()>""")
    Q_i = property(_fea.ChElementShellReissner4_Q_i_get, _fea.ChElementShellReissner4_Q_i_set, doc=r"""Q_i : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChMatrix33<()>""")
    Q_A = property(_fea.ChElementShellReissner4_Q_A_get, _fea.ChElementShellReissner4_Q_A_set, doc=r"""Q_A : a(chrono::fea::ChElementShellReissner4::NUMSSEP).chrono::ChMatrix33<()>""")
    k_1_i = property(_fea.ChElementShellReissner4_k_1_i_get, _fea.ChElementShellReissner4_k_1_i_set, doc=r"""k_1_i : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChVector<()>""")
    k_2_i = property(_fea.ChElementShellReissner4_k_2_i_get, _fea.ChElementShellReissner4_k_2_i_set, doc=r"""k_2_i : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChVector<()>""")
    eps_tilde_1_0_i = property(_fea.ChElementShellReissner4_eps_tilde_1_0_i_get, _fea.ChElementShellReissner4_eps_tilde_1_0_i_set, doc=r"""eps_tilde_1_0_i : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChVector<()>""")
    eps_tilde_2_0_i = property(_fea.ChElementShellReissner4_eps_tilde_2_0_i_get, _fea.ChElementShellReissner4_eps_tilde_2_0_i_set, doc=r"""eps_tilde_2_0_i : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChVector<()>""")
    eps_tilde_1_0_A = property(_fea.ChElementShellReissner4_eps_tilde_1_0_A_get, _fea.ChElementShellReissner4_eps_tilde_1_0_A_set, doc=r"""eps_tilde_1_0_A : a(chrono::fea::ChElementShellReissner4::NUMSSEP).chrono::ChVector<()>""")
    eps_tilde_2_0_A = property(_fea.ChElementShellReissner4_eps_tilde_2_0_A_get, _fea.ChElementShellReissner4_eps_tilde_2_0_A_set, doc=r"""eps_tilde_2_0_A : a(chrono::fea::ChElementShellReissner4::NUMSSEP).chrono::ChVector<()>""")
    eps_tilde_1_i = property(_fea.ChElementShellReissner4_eps_tilde_1_i_get, _fea.ChElementShellReissner4_eps_tilde_1_i_set, doc=r"""eps_tilde_1_i : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChVector<()>""")
    eps_tilde_2_i = property(_fea.ChElementShellReissner4_eps_tilde_2_i_get, _fea.ChElementShellReissner4_eps_tilde_2_i_set, doc=r"""eps_tilde_2_i : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChVector<()>""")
    eps_tilde_1_A = property(_fea.ChElementShellReissner4_eps_tilde_1_A_get, _fea.ChElementShellReissner4_eps_tilde_1_A_set, doc=r"""eps_tilde_1_A : a(chrono::fea::ChElementShellReissner4::NUMSSEP).chrono::ChVector<()>""")
    eps_tilde_2_A = property(_fea.ChElementShellReissner4_eps_tilde_2_A_get, _fea.ChElementShellReissner4_eps_tilde_2_A_set, doc=r"""eps_tilde_2_A : a(chrono::fea::ChElementShellReissner4::NUMSSEP).chrono::ChVector<()>""")
    k_tilde_1_0_i = property(_fea.ChElementShellReissner4_k_tilde_1_0_i_get, _fea.ChElementShellReissner4_k_tilde_1_0_i_set, doc=r"""k_tilde_1_0_i : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChVector<()>""")
    k_tilde_2_0_i = property(_fea.ChElementShellReissner4_k_tilde_2_0_i_get, _fea.ChElementShellReissner4_k_tilde_2_0_i_set, doc=r"""k_tilde_2_0_i : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChVector<()>""")
    k_tilde_1_i = property(_fea.ChElementShellReissner4_k_tilde_1_i_get, _fea.ChElementShellReissner4_k_tilde_1_i_set, doc=r"""k_tilde_1_i : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChVector<()>""")
    k_tilde_2_i = property(_fea.ChElementShellReissner4_k_tilde_2_i_get, _fea.ChElementShellReissner4_k_tilde_2_i_set, doc=r"""k_tilde_2_i : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChVector<()>""")
    S_alpha_beta_0 = property(_fea.ChElementShellReissner4_S_alpha_beta_0_get, _fea.ChElementShellReissner4_S_alpha_beta_0_set, doc=r"""S_alpha_beta_0 : chrono::ChMatrixNM<(double,2,2)>""")
    S_alpha_beta_i = property(_fea.ChElementShellReissner4_S_alpha_beta_i_get, _fea.ChElementShellReissner4_S_alpha_beta_i_set, doc=r"""S_alpha_beta_i : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChMatrixNM<(double,2,2)>""")
    S_alpha_beta_A = property(_fea.ChElementShellReissner4_S_alpha_beta_A_get, _fea.ChElementShellReissner4_S_alpha_beta_A_set, doc=r"""S_alpha_beta_A : a(chrono::fea::ChElementShellReissner4::NUMSSEP).chrono::ChMatrixNM<(double,2,2)>""")
    alpha_0 = property(_fea.ChElementShellReissner4_alpha_0_get, _fea.ChElementShellReissner4_alpha_0_set, doc=r"""alpha_0 : double""")
    alpha_i = property(_fea.ChElementShellReissner4_alpha_i_get, _fea.ChElementShellReissner4_alpha_i_set, doc=r"""alpha_i : a(chrono::fea::ChElementShellReissner4::NUMIP).double""")
    L_alpha_beta_i = property(_fea.ChElementShellReissner4_L_alpha_beta_i_get, _fea.ChElementShellReissner4_L_alpha_beta_i_set, doc=r"""L_alpha_beta_i : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChMatrixNM<(double,4,2)>""")
    L_alpha_beta_A = property(_fea.ChElementShellReissner4_L_alpha_beta_A_get, _fea.ChElementShellReissner4_L_alpha_beta_A_set, doc=r"""L_alpha_beta_A : a(chrono::fea::ChElementShellReissner4::NUMSSEP).chrono::ChMatrixNM<(double,4,2)>""")
    B_overline_i = property(_fea.ChElementShellReissner4_B_overline_i_get, _fea.ChElementShellReissner4_B_overline_i_set, doc=r"""B_overline_i : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChMatrixNM<(double,12,24)>""")
    D_overline_i = property(_fea.ChElementShellReissner4_D_overline_i_get, _fea.ChElementShellReissner4_D_overline_i_set, doc=r"""D_overline_i : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChMatrixNM<(double,15,24)>""")
    G_i = property(_fea.ChElementShellReissner4_G_i_get, _fea.ChElementShellReissner4_G_i_set, doc=r"""G_i : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChMatrixNM<(double,15,15)>""")
    P_i = property(_fea.ChElementShellReissner4_P_i_get, _fea.ChElementShellReissner4_P_i_set, doc=r"""P_i : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChMatrixNM<(double,12,chrono::fea::ChElementShellReissner4::IDOFS)>""")
    K_beta_beta_i = property(_fea.ChElementShellReissner4_K_beta_beta_i_get, _fea.ChElementShellReissner4_K_beta_beta_i_set, doc=r"""K_beta_beta_i : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChMatrixNM<(double,chrono::fea::ChElementShellReissner4::IDOFS,chrono::fea::ChElementShellReissner4::IDOFS)>""")
    y_i_1 = property(_fea.ChElementShellReissner4_y_i_1_get, _fea.ChElementShellReissner4_y_i_1_set, doc=r"""y_i_1 : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChVector<()>""")
    y_i_2 = property(_fea.ChElementShellReissner4_y_i_2_get, _fea.ChElementShellReissner4_y_i_2_set, doc=r"""y_i_2 : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChVector<()>""")
    beta = property(_fea.ChElementShellReissner4_beta_get, _fea.ChElementShellReissner4_beta_set, doc=r"""beta : chrono::ChVectorN<(double,chrono::fea::ChElementShellReissner4::IDOFS)>""")
    epsilon_hat = property(_fea.ChElementShellReissner4_epsilon_hat_get, _fea.ChElementShellReissner4_epsilon_hat_set, doc=r"""epsilon_hat : chrono::ChVectorN<(double,12)>""")
    epsilon = property(_fea.ChElementShellReissner4_epsilon_get, _fea.ChElementShellReissner4_epsilon_set, doc=r"""epsilon : chrono::ChVectorN<(double,12)>""")
    stress_i = property(_fea.ChElementShellReissner4_stress_i_get, _fea.ChElementShellReissner4_stress_i_set, doc=r"""stress_i : a(chrono::fea::ChElementShellReissner4::NUMIP).chrono::ChVectorN<(double,12)>""")
    bFirstRes = property(_fea.ChElementShellReissner4_bFirstRes_get, _fea.ChElementShellReissner4_bFirstRes_set, doc=r"""bFirstRes : bool""")

    def GetStateBlock(self, mD):
        r"""GetStateBlock(ChElementShellReissner4 self, ChVectorDynamicD mD)"""
        return _fea.ChElementShellReissner4_GetStateBlock(self, mD)

    def ComputeInternalForces(self, Fi):
        r"""ComputeInternalForces(ChElementShellReissner4 self, ChVectorDynamicD Fi)"""
        return _fea.ChElementShellReissner4_ComputeInternalForces(self, Fi)

    def Update(self):
        r"""Update(ChElementShellReissner4 self)"""
        return _fea.ChElementShellReissner4_Update(self)

    def EvaluateSectionDisplacement(self, u, v, u_displ, u_rotaz):
        r"""EvaluateSectionDisplacement(ChElementShellReissner4 self, double const u, double const v, ChVectorD u_displ, ChVectorD u_rotaz)"""
        return _fea.ChElementShellReissner4_EvaluateSectionDisplacement(self, u, v, u_displ, u_rotaz)

    def EvaluateSectionFrame(self, u, v, point, rot):
        r"""EvaluateSectionFrame(ChElementShellReissner4 self, double const u, double const v, ChVectorD point, ChQuaternionD rot)"""
        return _fea.ChElementShellReissner4_EvaluateSectionFrame(self, u, v, point, rot)

    def EvaluateSectionPoint(self, u, v, point):
        r"""EvaluateSectionPoint(ChElementShellReissner4 self, double const u, double const v, ChVectorD point)"""
        return _fea.ChElementShellReissner4_EvaluateSectionPoint(self, u, v, point)

    def ComputeInternalJacobians(self, Kfactor, Rfactor):
        r"""ComputeInternalJacobians(ChElementShellReissner4 self, double Kfactor, double Rfactor)"""
        return _fea.ChElementShellReissner4_ComputeInternalJacobians(self, Kfactor, Rfactor)

    def ComputeMassMatrix(self):
        r"""ComputeMassMatrix(ChElementShellReissner4 self)"""
        return _fea.ChElementShellReissner4_ComputeMassMatrix(self)

    def LoadableGet_ndof_x(self):
        r"""LoadableGet_ndof_x(ChElementShellReissner4 self) -> int"""
        return _fea.ChElementShellReissner4_LoadableGet_ndof_x(self)

    def LoadableGet_ndof_w(self):
        r"""LoadableGet_ndof_w(ChElementShellReissner4 self) -> int"""
        return _fea.ChElementShellReissner4_LoadableGet_ndof_w(self)

    def LoadableGetStateBlock_x(self, block_offset, mD):
        r"""LoadableGetStateBlock_x(ChElementShellReissner4 self, int block_offset, chrono::ChState & mD)"""
        return _fea.ChElementShellReissner4_LoadableGetStateBlock_x(self, block_offset, mD)

    def LoadableGetStateBlock_w(self, block_offset, mD):
        r"""LoadableGetStateBlock_w(ChElementShellReissner4 self, int block_offset, chrono::ChStateDelta & mD)"""
        return _fea.ChElementShellReissner4_LoadableGetStateBlock_w(self, block_offset, mD)

    def LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""LoadableStateIncrement(ChElementShellReissner4 self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChElementShellReissner4_LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def Get_field_ncoords(self):
        r"""Get_field_ncoords(ChElementShellReissner4 self) -> int"""
        return _fea.ChElementShellReissner4_Get_field_ncoords(self)

    def GetSubBlocks(self):
        r"""GetSubBlocks(ChElementShellReissner4 self) -> int"""
        return _fea.ChElementShellReissner4_GetSubBlocks(self)

    def GetSubBlockOffset(self, nblock):
        r"""GetSubBlockOffset(ChElementShellReissner4 self, int nblock) -> unsigned int"""
        return _fea.ChElementShellReissner4_GetSubBlockOffset(self, nblock)

    def GetSubBlockSize(self, nblock):
        r"""GetSubBlockSize(ChElementShellReissner4 self, int nblock) -> unsigned int"""
        return _fea.ChElementShellReissner4_GetSubBlockSize(self, nblock)

    def EvaluateSectionVelNorm(self, U, V, Result):
        r"""EvaluateSectionVelNorm(ChElementShellReissner4 self, double U, double V, ChVectorD Result)"""
        return _fea.ChElementShellReissner4_EvaluateSectionVelNorm(self, U, V, Result)

    def LoadableGetVariables(self, mvars):
        r"""LoadableGetVariables(ChElementShellReissner4 self, std::vector< ChVariables *,std::allocator< ChVariables * > > & mvars)"""
        return _fea.ChElementShellReissner4_LoadableGetVariables(self, mvars)

    def ComputeNF(self, *args):
        r"""
        ComputeNF(ChElementShellReissner4 self, double const U, double const V, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)
        ComputeNF(ChElementShellReissner4 self, double const U, double const V, double const W, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)
        """
        return _fea.ChElementShellReissner4_ComputeNF(self, *args)

    def GetDensity(self):
        r"""GetDensity(ChElementShellReissner4 self) -> double"""
        return _fea.ChElementShellReissner4_GetDensity(self)

    def ComputeNormal(self, U, V):
        r"""ComputeNormal(ChElementShellReissner4 self, double const U, double const V) -> ChVectorD"""
        return _fea.ChElementShellReissner4_ComputeNormal(self, U, V)

# Register ChElementShellReissner4 in _fea:
_fea.ChElementShellReissner4_swigregister(ChElementShellReissner4)
cvar = _fea.cvar

class ShellReissner4Layer(object):
    r"""Proxy of C++ chrono::fea::ChElementShellReissner4::Layer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Get_thickness(self):
        r"""Get_thickness(ShellReissner4Layer self) -> double"""
        return _fea.ShellReissner4Layer_Get_thickness(self)

    def Get_theta(self):
        r"""Get_theta(ShellReissner4Layer self) -> double"""
        return _fea.ShellReissner4Layer_Get_theta(self)

    def GetMaterial(self):
        r"""GetMaterial(ShellReissner4Layer self) -> std::shared_ptr< chrono::fea::ChMaterialShellReissner >"""
        return _fea.ShellReissner4Layer_GetMaterial(self)
    __swig_destroy__ = _fea.delete_ShellReissner4Layer

# Register ShellReissner4Layer in _fea:
_fea.ShellReissner4Layer_swigregister(ShellReissner4Layer)

class ChElementShellANCF(ChElementShell, pychrono.core.ChLoadableUV, pychrono.core.ChLoadableUVW):
    r"""Proxy of C++ chrono::fea::ChElementShellANCF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChElementShellANCF self) -> ChElementShellANCF"""
        _fea.ChElementShellANCF_swiginit(self, _fea.new_ChElementShellANCF())
    __swig_destroy__ = _fea.delete_ChElementShellANCF

    def GetNnodes(self):
        r"""GetNnodes(ChElementShellANCF self) -> int"""
        return _fea.ChElementShellANCF_GetNnodes(self)

    def GetNdofs(self):
        r"""GetNdofs(ChElementShellANCF self) -> int"""
        return _fea.ChElementShellANCF_GetNdofs(self)

    def GetNodeNdofs(self, n):
        r"""GetNodeNdofs(ChElementShellANCF self, int n) -> int"""
        return _fea.ChElementShellANCF_GetNodeNdofs(self, n)

    def SetNodes(self, nodeA, nodeB, nodeC, nodeD):
        r"""SetNodes(ChElementShellANCF self, std::shared_ptr< chrono::fea::ChNodeFEAxyzD > nodeA, std::shared_ptr< chrono::fea::ChNodeFEAxyzD > nodeB, std::shared_ptr< chrono::fea::ChNodeFEAxyzD > nodeC, std::shared_ptr< chrono::fea::ChNodeFEAxyzD > nodeD)"""
        return _fea.ChElementShellANCF_SetNodes(self, nodeA, nodeB, nodeC, nodeD)

    def SetDimensions(self, lenX, lenY):
        r"""SetDimensions(ChElementShellANCF self, double lenX, double lenY)"""
        return _fea.ChElementShellANCF_SetDimensions(self, lenX, lenY)

    def GetNodeN(self, n):
        r"""GetNodeN(ChElementShellANCF self, int n) -> std::shared_ptr< chrono::fea::ChNodeFEAbase >"""
        return _fea.ChElementShellANCF_GetNodeN(self, n)

    def GetNodeA(self):
        r"""GetNodeA(ChElementShellANCF self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzD >"""
        return _fea.ChElementShellANCF_GetNodeA(self)

    def GetNodeB(self):
        r"""GetNodeB(ChElementShellANCF self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzD >"""
        return _fea.ChElementShellANCF_GetNodeB(self)

    def GetNodeC(self):
        r"""GetNodeC(ChElementShellANCF self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzD >"""
        return _fea.ChElementShellANCF_GetNodeC(self)

    def GetNodeD(self):
        r"""GetNodeD(ChElementShellANCF self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzD >"""
        return _fea.ChElementShellANCF_GetNodeD(self)

    def AddLayer(self, thickness, theta, material):
        r"""AddLayer(ChElementShellANCF self, double thickness, double theta, std::shared_ptr< chrono::fea::ChMaterialShellANCF > material)"""
        return _fea.ChElementShellANCF_AddLayer(self, thickness, theta, material)

    def GetNumLayers(self):
        r"""GetNumLayers(ChElementShellANCF self) -> size_t"""
        return _fea.ChElementShellANCF_GetNumLayers(self)

    def GetLayer(self, i):
        r"""GetLayer(ChElementShellANCF self, size_t i) -> ShellANCF"""
        return _fea.ChElementShellANCF_GetLayer(self, i)

    def SetGravityOn(self, val):
        r"""SetGravityOn(ChElementShellANCF self, bool val)"""
        return _fea.ChElementShellANCF_SetGravityOn(self, val)

    def SetAlphaDamp(self, a):
        r"""SetAlphaDamp(ChElementShellANCF self, double a)"""
        return _fea.ChElementShellANCF_SetAlphaDamp(self, a)

    def GetLengthX(self):
        r"""GetLengthX(ChElementShellANCF self) -> double"""
        return _fea.ChElementShellANCF_GetLengthX(self)

    def GetLengthY(self):
        r"""GetLengthY(ChElementShellANCF self) -> double"""
        return _fea.ChElementShellANCF_GetLengthY(self)

    def GetThickness(self):
        r"""GetThickness(ChElementShellANCF self) -> double"""
        return _fea.ChElementShellANCF_GetThickness(self)

    def ShapeFunctions(self, N, x, y, z):
        r"""ShapeFunctions(ChElementShellANCF self, chrono::fea::ChElementShellANCF::ShapeVector & N, double x, double y, double z)"""
        return _fea.ChElementShellANCF_ShapeFunctions(self, N, x, y, z)

    def ShapeFunctionsDerivativeX(self, Nx, x, y, z):
        r"""ShapeFunctionsDerivativeX(ChElementShellANCF self, chrono::fea::ChElementShellANCF::ShapeVector & Nx, double x, double y, double z)"""
        return _fea.ChElementShellANCF_ShapeFunctionsDerivativeX(self, Nx, x, y, z)

    def ShapeFunctionsDerivativeY(self, Ny, x, y, z):
        r"""ShapeFunctionsDerivativeY(ChElementShellANCF self, chrono::fea::ChElementShellANCF::ShapeVector & Ny, double x, double y, double z)"""
        return _fea.ChElementShellANCF_ShapeFunctionsDerivativeY(self, Ny, x, y, z)

    def ShapeFunctionsDerivativeZ(self, Nz, x, y, z):
        r"""ShapeFunctionsDerivativeZ(ChElementShellANCF self, chrono::fea::ChElementShellANCF::ShapeVector & Nz, double x, double y, double z)"""
        return _fea.ChElementShellANCF_ShapeFunctionsDerivativeZ(self, Nz, x, y, z)

    def EvaluateSectionStrainStress(self, loc, layer_id):
        r"""EvaluateSectionStrainStress(ChElementShellANCF self, ChVectorD loc, int layer_id) -> ChStrainStress3D"""
        return _fea.ChElementShellANCF_EvaluateSectionStrainStress(self, loc, layer_id)

    def EvaluateDeflection(self, defVec):
        r"""EvaluateDeflection(ChElementShellANCF self, double & defVec)"""
        return _fea.ChElementShellANCF_EvaluateDeflection(self, defVec)

    def GetStateBlock(self, mD):
        r"""GetStateBlock(ChElementShellANCF self, ChVectorDynamicD mD)"""
        return _fea.ChElementShellANCF_GetStateBlock(self, mD)

    def ComputeNodalMass(self):
        r"""ComputeNodalMass(ChElementShellANCF self)"""
        return _fea.ChElementShellANCF_ComputeNodalMass(self)

    def ComputeInternalForces(self, Fi):
        r"""ComputeInternalForces(ChElementShellANCF self, ChVectorDynamicD Fi)"""
        return _fea.ChElementShellANCF_ComputeInternalForces(self, Fi)

    def Update(self):
        r"""Update(ChElementShellANCF self)"""
        return _fea.ChElementShellANCF_Update(self)

    def EvaluateSectionDisplacement(self, u, v, u_displ, u_rotaz):
        r"""EvaluateSectionDisplacement(ChElementShellANCF self, double const u, double const v, ChVectorD u_displ, ChVectorD u_rotaz)"""
        return _fea.ChElementShellANCF_EvaluateSectionDisplacement(self, u, v, u_displ, u_rotaz)

    def EvaluateSectionFrame(self, u, v, point, rot):
        r"""EvaluateSectionFrame(ChElementShellANCF self, double const u, double const v, ChVectorD point, ChQuaternionD rot)"""
        return _fea.ChElementShellANCF_EvaluateSectionFrame(self, u, v, point, rot)

    def EvaluateSectionPoint(self, u, v, point):
        r"""EvaluateSectionPoint(ChElementShellANCF self, double const u, double const v, ChVectorD point)"""
        return _fea.ChElementShellANCF_EvaluateSectionPoint(self, u, v, point)

    def ComputeInternalJacobians(self, Kfactor, Rfactor):
        r"""ComputeInternalJacobians(ChElementShellANCF self, double Kfactor, double Rfactor)"""
        return _fea.ChElementShellANCF_ComputeInternalJacobians(self, Kfactor, Rfactor)

    def ComputeMassMatrix(self):
        r"""ComputeMassMatrix(ChElementShellANCF self)"""
        return _fea.ChElementShellANCF_ComputeMassMatrix(self)

    def ComputeGravityForce(self, g_acc):
        r"""ComputeGravityForce(ChElementShellANCF self, ChVectorD g_acc)"""
        return _fea.ChElementShellANCF_ComputeGravityForce(self, g_acc)

    def ShapeFunctionANSbilinearShell(self, S_ANS, x, y):
        r"""ShapeFunctionANSbilinearShell(ChElementShellANCF self, chrono::ChMatrixNM< double,1,4 > & S_ANS, double x, double y)"""
        return _fea.ChElementShellANCF_ShapeFunctionANSbilinearShell(self, S_ANS, x, y)

    def CalcStrainANSbilinearShell(self):
        r"""CalcStrainANSbilinearShell(ChElementShellANCF self)"""
        return _fea.ChElementShellANCF_CalcStrainANSbilinearShell(self)

    def Basis_M(self, M, x, y, z):
        r"""Basis_M(ChElementShellANCF self, chrono::ChMatrixNM< double,6,5 > & M, double x, double y, double z)"""
        return _fea.ChElementShellANCF_Basis_M(self, M, x, y, z)

    def Calc_detJ0(self, *args):
        r"""
        Calc_detJ0(ChElementShellANCF self, double x, double y, double z) -> double
        Calc_detJ0(ChElementShellANCF self, double x, double y, double z, chrono::fea::ChElementShellANCF::ShapeVector & Nx, chrono::fea::ChElementShellANCF::ShapeVector & Ny, chrono::fea::ChElementShellANCF::ShapeVector & Nz, chrono::ChMatrixNM< double,1,3 > & Nx_d0, chrono::ChMatrixNM< double,1,3 > & Ny_d0, chrono::ChMatrixNM< double,1,3 > & Nz_d0) -> double
        """
        return _fea.ChElementShellANCF_Calc_detJ0(self, *args)

    def CalcCoordMatrix(self, d):
        r"""CalcCoordMatrix(ChElementShellANCF self, chrono::ChMatrixNM< double,8,3 > & d)"""
        return _fea.ChElementShellANCF_CalcCoordMatrix(self, d)

    def CalcCoordDerivMatrix(self, dt):
        r"""CalcCoordDerivMatrix(ChElementShellANCF self, chrono::ChVectorN< double,24 > & dt)"""
        return _fea.ChElementShellANCF_CalcCoordDerivMatrix(self, dt)

    def LoadableGet_ndof_x(self):
        r"""LoadableGet_ndof_x(ChElementShellANCF self) -> int"""
        return _fea.ChElementShellANCF_LoadableGet_ndof_x(self)

    def LoadableGet_ndof_w(self):
        r"""LoadableGet_ndof_w(ChElementShellANCF self) -> int"""
        return _fea.ChElementShellANCF_LoadableGet_ndof_w(self)

    def LoadableGetStateBlock_x(self, block_offset, mD):
        r"""LoadableGetStateBlock_x(ChElementShellANCF self, int block_offset, chrono::ChState & mD)"""
        return _fea.ChElementShellANCF_LoadableGetStateBlock_x(self, block_offset, mD)

    def LoadableGetStateBlock_w(self, block_offset, mD):
        r"""LoadableGetStateBlock_w(ChElementShellANCF self, int block_offset, chrono::ChStateDelta & mD)"""
        return _fea.ChElementShellANCF_LoadableGetStateBlock_w(self, block_offset, mD)

    def LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""LoadableStateIncrement(ChElementShellANCF self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChElementShellANCF_LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def Get_field_ncoords(self):
        r"""Get_field_ncoords(ChElementShellANCF self) -> int"""
        return _fea.ChElementShellANCF_Get_field_ncoords(self)

    def GetSubBlocks(self):
        r"""GetSubBlocks(ChElementShellANCF self) -> int"""
        return _fea.ChElementShellANCF_GetSubBlocks(self)

    def GetSubBlockOffset(self, nblock):
        r"""GetSubBlockOffset(ChElementShellANCF self, int nblock) -> unsigned int"""
        return _fea.ChElementShellANCF_GetSubBlockOffset(self, nblock)

    def GetSubBlockSize(self, nblock):
        r"""GetSubBlockSize(ChElementShellANCF self, int nblock) -> unsigned int"""
        return _fea.ChElementShellANCF_GetSubBlockSize(self, nblock)

    def EvaluateSectionVelNorm(self, U, V, Result):
        r"""EvaluateSectionVelNorm(ChElementShellANCF self, double U, double V, ChVectorD Result)"""
        return _fea.ChElementShellANCF_EvaluateSectionVelNorm(self, U, V, Result)

    def LoadableGetVariables(self, mvars):
        r"""LoadableGetVariables(ChElementShellANCF self, std::vector< ChVariables *,std::allocator< ChVariables * > > & mvars)"""
        return _fea.ChElementShellANCF_LoadableGetVariables(self, mvars)

    def ComputeNF(self, *args):
        r"""
        ComputeNF(ChElementShellANCF self, double const U, double const V, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)
        ComputeNF(ChElementShellANCF self, double const U, double const V, double const W, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)
        """
        return _fea.ChElementShellANCF_ComputeNF(self, *args)

    def GetDensity(self):
        r"""GetDensity(ChElementShellANCF self) -> double"""
        return _fea.ChElementShellANCF_GetDensity(self)

    def ComputeNormal(self, U, V):
        r"""ComputeNormal(ChElementShellANCF self, double const U, double const V) -> ChVectorD"""
        return _fea.ChElementShellANCF_ComputeNormal(self, U, V)

# Register ChElementShellANCF in _fea:
_fea.ChElementShellANCF_swigregister(ChElementShellANCF)

class ShellANCF(object):
    r"""Proxy of C++ chrono::fea::ChElementShellANCF::Layer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Get_thickness(self):
        r"""Get_thickness(ShellANCF self) -> double"""
        return _fea.ShellANCF_Get_thickness(self)

    def Get_theta(self):
        r"""Get_theta(ShellANCF self) -> double"""
        return _fea.ShellANCF_Get_theta(self)

    def GetMaterial(self):
        r"""GetMaterial(ShellANCF self) -> std::shared_ptr< chrono::fea::ChMaterialShellANCF >"""
        return _fea.ShellANCF_GetMaterial(self)
    __swig_destroy__ = _fea.delete_ShellANCF

# Register ShellANCF in _fea:
_fea.ShellANCF_swigregister(ShellANCF)

class ChElementShellANCF_8(ChElementShell, pychrono.core.ChLoadableUV, pychrono.core.ChLoadableUVW):
    r"""Proxy of C++ chrono::fea::ChElementShellANCF_8 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChElementShellANCF_8 self) -> ChElementShellANCF_8"""
        _fea.ChElementShellANCF_8_swiginit(self, _fea.new_ChElementShellANCF_8())
    __swig_destroy__ = _fea.delete_ChElementShellANCF_8

    def GetNnodes(self):
        r"""GetNnodes(ChElementShellANCF_8 self) -> int"""
        return _fea.ChElementShellANCF_8_GetNnodes(self)

    def GetNdofs(self):
        r"""GetNdofs(ChElementShellANCF_8 self) -> int"""
        return _fea.ChElementShellANCF_8_GetNdofs(self)

    def GetNodeNdofs(self, n):
        r"""GetNodeNdofs(ChElementShellANCF_8 self, int n) -> int"""
        return _fea.ChElementShellANCF_8_GetNodeNdofs(self, n)

    def SetNodes(self, nodeA, nodeB, nodeC, nodeD, nodeE, nodeF, nodeG, nodeH):
        r"""SetNodes(ChElementShellANCF_8 self, std::shared_ptr< chrono::fea::ChNodeFEAxyzDD > nodeA, std::shared_ptr< chrono::fea::ChNodeFEAxyzDD > nodeB, std::shared_ptr< chrono::fea::ChNodeFEAxyzDD > nodeC, std::shared_ptr< chrono::fea::ChNodeFEAxyzDD > nodeD, std::shared_ptr< chrono::fea::ChNodeFEAxyzDD > nodeE, std::shared_ptr< chrono::fea::ChNodeFEAxyzDD > nodeF, std::shared_ptr< chrono::fea::ChNodeFEAxyzDD > nodeG, std::shared_ptr< chrono::fea::ChNodeFEAxyzDD > nodeH)"""
        return _fea.ChElementShellANCF_8_SetNodes(self, nodeA, nodeB, nodeC, nodeD, nodeE, nodeF, nodeG, nodeH)

    def SetDimensions(self, lenX, lenY):
        r"""SetDimensions(ChElementShellANCF_8 self, double lenX, double lenY)"""
        return _fea.ChElementShellANCF_8_SetDimensions(self, lenX, lenY)

    def GetNodeN(self, n):
        r"""GetNodeN(ChElementShellANCF_8 self, int n) -> std::shared_ptr< chrono::fea::ChNodeFEAbase >"""
        return _fea.ChElementShellANCF_8_GetNodeN(self, n)

    def GetNodeA(self):
        r"""GetNodeA(ChElementShellANCF_8 self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzDD >"""
        return _fea.ChElementShellANCF_8_GetNodeA(self)

    def GetNodeB(self):
        r"""GetNodeB(ChElementShellANCF_8 self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzDD >"""
        return _fea.ChElementShellANCF_8_GetNodeB(self)

    def GetNodeC(self):
        r"""GetNodeC(ChElementShellANCF_8 self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzDD >"""
        return _fea.ChElementShellANCF_8_GetNodeC(self)

    def GetNodeD(self):
        r"""GetNodeD(ChElementShellANCF_8 self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzDD >"""
        return _fea.ChElementShellANCF_8_GetNodeD(self)

    def GetNodeE(self):
        r"""GetNodeE(ChElementShellANCF_8 self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzDD >"""
        return _fea.ChElementShellANCF_8_GetNodeE(self)

    def GetNodeF(self):
        r"""GetNodeF(ChElementShellANCF_8 self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzDD >"""
        return _fea.ChElementShellANCF_8_GetNodeF(self)

    def GetNodeG(self):
        r"""GetNodeG(ChElementShellANCF_8 self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzDD >"""
        return _fea.ChElementShellANCF_8_GetNodeG(self)

    def GetNodeH(self):
        r"""GetNodeH(ChElementShellANCF_8 self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzDD >"""
        return _fea.ChElementShellANCF_8_GetNodeH(self)

    def AddLayer(self, thickness, theta, material):
        r"""AddLayer(ChElementShellANCF_8 self, double thickness, double theta, std::shared_ptr< chrono::fea::ChMaterialShellANCF > material)"""
        return _fea.ChElementShellANCF_8_AddLayer(self, thickness, theta, material)

    def GetNumLayers(self):
        r"""GetNumLayers(ChElementShellANCF_8 self) -> size_t"""
        return _fea.ChElementShellANCF_8_GetNumLayers(self)

    def GetLayer(self, i):
        r"""GetLayer(ChElementShellANCF_8 self, size_t i) -> ShellANCF_8Layer"""
        return _fea.ChElementShellANCF_8_GetLayer(self, i)

    def SetGravityOn(self, val):
        r"""SetGravityOn(ChElementShellANCF_8 self, bool val)"""
        return _fea.ChElementShellANCF_8_SetGravityOn(self, val)

    def SetAlphaDamp(self, a):
        r"""SetAlphaDamp(ChElementShellANCF_8 self, double a)"""
        return _fea.ChElementShellANCF_8_SetAlphaDamp(self, a)

    def GetLengthX(self):
        r"""GetLengthX(ChElementShellANCF_8 self) -> double"""
        return _fea.ChElementShellANCF_8_GetLengthX(self)

    def GetLengthY(self):
        r"""GetLengthY(ChElementShellANCF_8 self) -> double"""
        return _fea.ChElementShellANCF_8_GetLengthY(self)

    def GetThickness(self):
        r"""GetThickness(ChElementShellANCF_8 self) -> double"""
        return _fea.ChElementShellANCF_8_GetThickness(self)

    def ShapeFunctions(self, N, x, y, z):
        r"""ShapeFunctions(ChElementShellANCF_8 self, chrono::fea::ChElementShellANCF_8::ShapeVector & N, double x, double y, double z)"""
        return _fea.ChElementShellANCF_8_ShapeFunctions(self, N, x, y, z)

    def ShapeFunctionsDerivativeX(self, Nx, x, y, z):
        r"""ShapeFunctionsDerivativeX(ChElementShellANCF_8 self, chrono::fea::ChElementShellANCF_8::ShapeVector & Nx, double x, double y, double z)"""
        return _fea.ChElementShellANCF_8_ShapeFunctionsDerivativeX(self, Nx, x, y, z)

    def ShapeFunctionsDerivativeY(self, Ny, x, y, z):
        r"""ShapeFunctionsDerivativeY(ChElementShellANCF_8 self, chrono::fea::ChElementShellANCF_8::ShapeVector & Ny, double x, double y, double z)"""
        return _fea.ChElementShellANCF_8_ShapeFunctionsDerivativeY(self, Ny, x, y, z)

    def ShapeFunctionsDerivativeZ(self, Nz, x, y, z):
        r"""ShapeFunctionsDerivativeZ(ChElementShellANCF_8 self, chrono::fea::ChElementShellANCF_8::ShapeVector & Nz, double x, double y, double z)"""
        return _fea.ChElementShellANCF_8_ShapeFunctionsDerivativeZ(self, Nz, x, y, z)

    def EvaluateSectionStrainStress(self, loc, layer_id):
        r"""EvaluateSectionStrainStress(ChElementShellANCF_8 self, ChVectorD loc, int layer_id) -> ChStrainStress3D"""
        return _fea.ChElementShellANCF_8_EvaluateSectionStrainStress(self, loc, layer_id)

    def GetStateBlock(self, mDD):
        r"""GetStateBlock(ChElementShellANCF_8 self, ChVectorDynamicD mDD)"""
        return _fea.ChElementShellANCF_8_GetStateBlock(self, mDD)

    def ComputeNodalMass(self):
        r"""ComputeNodalMass(ChElementShellANCF_8 self)"""
        return _fea.ChElementShellANCF_8_ComputeNodalMass(self)

    def ComputeInternalForces(self, Fi):
        r"""ComputeInternalForces(ChElementShellANCF_8 self, ChVectorDynamicD Fi)"""
        return _fea.ChElementShellANCF_8_ComputeInternalForces(self, Fi)

    def Update(self):
        r"""Update(ChElementShellANCF_8 self)"""
        return _fea.ChElementShellANCF_8_Update(self)

    def EvaluateSectionDisplacement(self, u, v, u_displ, u_rotaz):
        r"""EvaluateSectionDisplacement(ChElementShellANCF_8 self, double const u, double const v, ChVectorD u_displ, ChVectorD u_rotaz)"""
        return _fea.ChElementShellANCF_8_EvaluateSectionDisplacement(self, u, v, u_displ, u_rotaz)

    def EvaluateSectionFrame(self, u, v, point, rot):
        r"""EvaluateSectionFrame(ChElementShellANCF_8 self, double const u, double const v, ChVectorD point, ChQuaternionD rot)"""
        return _fea.ChElementShellANCF_8_EvaluateSectionFrame(self, u, v, point, rot)

    def EvaluateSectionPoint(self, u, v, point):
        r"""EvaluateSectionPoint(ChElementShellANCF_8 self, double const u, double const v, ChVectorD point)"""
        return _fea.ChElementShellANCF_8_EvaluateSectionPoint(self, u, v, point)

    def ComputeInternalJacobians(self, Kfactor, Rfactor):
        r"""ComputeInternalJacobians(ChElementShellANCF_8 self, double Kfactor, double Rfactor)"""
        return _fea.ChElementShellANCF_8_ComputeInternalJacobians(self, Kfactor, Rfactor)

    def ComputeMassMatrix(self):
        r"""ComputeMassMatrix(ChElementShellANCF_8 self)"""
        return _fea.ChElementShellANCF_8_ComputeMassMatrix(self)

    def ComputeGravityForce(self, g_acc):
        r"""ComputeGravityForce(ChElementShellANCF_8 self, ChVectorD g_acc)"""
        return _fea.ChElementShellANCF_8_ComputeGravityForce(self, g_acc)

    def Calc_detJ0(self, *args):
        r"""
        Calc_detJ0(ChElementShellANCF_8 self, double x, double y, double z) -> double
        Calc_detJ0(ChElementShellANCF_8 self, double x, double y, double z, chrono::fea::ChElementShellANCF_8::ShapeVector & Nx, chrono::fea::ChElementShellANCF_8::ShapeVector & Ny, chrono::fea::ChElementShellANCF_8::ShapeVector & Nz, chrono::ChMatrixNM< double,1,3 > & Nx_d0, chrono::ChMatrixNM< double,1,3 > & Ny_d0, chrono::ChMatrixNM< double,1,3 > & Nz_d0) -> double
        """
        return _fea.ChElementShellANCF_8_Calc_detJ0(self, *args)

    def CalcCoordMatrix(self, d):
        r"""CalcCoordMatrix(ChElementShellANCF_8 self, chrono::ChMatrixNM< double,24,3 > & d)"""
        return _fea.ChElementShellANCF_8_CalcCoordMatrix(self, d)

    def CalcCoordDerivMatrix(self, dt):
        r"""CalcCoordDerivMatrix(ChElementShellANCF_8 self, chrono::ChVectorN< double,72 > & dt)"""
        return _fea.ChElementShellANCF_8_CalcCoordDerivMatrix(self, dt)

    def LoadableGet_ndof_x(self):
        r"""LoadableGet_ndof_x(ChElementShellANCF_8 self) -> int"""
        return _fea.ChElementShellANCF_8_LoadableGet_ndof_x(self)

    def LoadableGet_ndof_w(self):
        r"""LoadableGet_ndof_w(ChElementShellANCF_8 self) -> int"""
        return _fea.ChElementShellANCF_8_LoadableGet_ndof_w(self)

    def LoadableGetStateBlock_x(self, block_offset, mDD):
        r"""LoadableGetStateBlock_x(ChElementShellANCF_8 self, int block_offset, chrono::ChState & mDD)"""
        return _fea.ChElementShellANCF_8_LoadableGetStateBlock_x(self, block_offset, mDD)

    def LoadableGetStateBlock_w(self, block_offset, mDD):
        r"""LoadableGetStateBlock_w(ChElementShellANCF_8 self, int block_offset, chrono::ChStateDelta & mDD)"""
        return _fea.ChElementShellANCF_8_LoadableGetStateBlock_w(self, block_offset, mDD)

    def LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""LoadableStateIncrement(ChElementShellANCF_8 self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChElementShellANCF_8_LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def Get_field_ncoords(self):
        r"""Get_field_ncoords(ChElementShellANCF_8 self) -> int"""
        return _fea.ChElementShellANCF_8_Get_field_ncoords(self)

    def GetSubBlocks(self):
        r"""GetSubBlocks(ChElementShellANCF_8 self) -> int"""
        return _fea.ChElementShellANCF_8_GetSubBlocks(self)

    def GetSubBlockOffset(self, nblock):
        r"""GetSubBlockOffset(ChElementShellANCF_8 self, int nblock) -> unsigned int"""
        return _fea.ChElementShellANCF_8_GetSubBlockOffset(self, nblock)

    def GetSubBlockSize(self, nblock):
        r"""GetSubBlockSize(ChElementShellANCF_8 self, int nblock) -> unsigned int"""
        return _fea.ChElementShellANCF_8_GetSubBlockSize(self, nblock)

    def EvaluateSectionVelNorm(self, U, V, Result):
        r"""EvaluateSectionVelNorm(ChElementShellANCF_8 self, double U, double V, ChVectorD Result)"""
        return _fea.ChElementShellANCF_8_EvaluateSectionVelNorm(self, U, V, Result)

    def LoadableGetVariables(self, mvars):
        r"""LoadableGetVariables(ChElementShellANCF_8 self, std::vector< ChVariables *,std::allocator< ChVariables * > > & mvars)"""
        return _fea.ChElementShellANCF_8_LoadableGetVariables(self, mvars)

    def ComputeNF(self, *args):
        r"""
        ComputeNF(ChElementShellANCF_8 self, double const U, double const V, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)
        ComputeNF(ChElementShellANCF_8 self, double const U, double const V, double const W, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)
        """
        return _fea.ChElementShellANCF_8_ComputeNF(self, *args)

    def GetDensity(self):
        r"""GetDensity(ChElementShellANCF_8 self) -> double"""
        return _fea.ChElementShellANCF_8_GetDensity(self)

    def ComputeNormal(self, U, V):
        r"""ComputeNormal(ChElementShellANCF_8 self, double const U, double const V) -> ChVectorD"""
        return _fea.ChElementShellANCF_8_ComputeNormal(self, U, V)

# Register ChElementShellANCF_8 in _fea:
_fea.ChElementShellANCF_8_swigregister(ChElementShellANCF_8)

class ShellANCF_8Layer(object):
    r"""Proxy of C++ chrono::fea::ChElementShellANCF_8::Layer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Get_thickness(self):
        r"""Get_thickness(ShellANCF_8Layer self) -> double"""
        return _fea.ShellANCF_8Layer_Get_thickness(self)

    def Get_theta(self):
        r"""Get_theta(ShellANCF_8Layer self) -> double"""
        return _fea.ShellANCF_8Layer_Get_theta(self)

    def GetMaterial(self):
        r"""GetMaterial(ShellANCF_8Layer self) -> std::shared_ptr< chrono::fea::ChMaterialShellANCF >"""
        return _fea.ShellANCF_8Layer_GetMaterial(self)
    __swig_destroy__ = _fea.delete_ShellANCF_8Layer

# Register ShellANCF_8Layer in _fea:
_fea.ShellANCF_8Layer_swigregister(ShellANCF_8Layer)

class ChElementShellBST(ChElementShell, pychrono.core.ChLoadableUV, pychrono.core.ChLoadableUVW):
    r"""Proxy of C++ chrono::fea::ChElementShellBST class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChElementShellBST self) -> ChElementShellBST"""
        _fea.ChElementShellBST_swiginit(self, _fea.new_ChElementShellBST())
    __swig_destroy__ = _fea.delete_ChElementShellBST

    def SetNodes(self, node0, node1, node2, node3, node4, node5):
        r"""SetNodes(ChElementShellBST self, std::shared_ptr< chrono::fea::ChNodeFEAxyz > node0, std::shared_ptr< chrono::fea::ChNodeFEAxyz > node1, std::shared_ptr< chrono::fea::ChNodeFEAxyz > node2, std::shared_ptr< chrono::fea::ChNodeFEAxyz > node3, std::shared_ptr< chrono::fea::ChNodeFEAxyz > node4, std::shared_ptr< chrono::fea::ChNodeFEAxyz > node5)"""
        return _fea.ChElementShellBST_SetNodes(self, node0, node1, node2, node3, node4, node5)

    def GetNnodes(self):
        r"""GetNnodes(ChElementShellBST self) -> int"""
        return _fea.ChElementShellBST_GetNnodes(self)

    def GetNdofs(self):
        r"""GetNdofs(ChElementShellBST self) -> int"""
        return _fea.ChElementShellBST_GetNdofs(self)

    def GetNodeNdofs(self, n):
        r"""GetNodeNdofs(ChElementShellBST self, int n) -> int"""
        return _fea.ChElementShellBST_GetNodeNdofs(self, n)

    def GetNodeN(self, n):
        r"""GetNodeN(ChElementShellBST self, int n) -> std::shared_ptr< chrono::fea::ChNodeFEAbase >"""
        return _fea.ChElementShellBST_GetNodeN(self, n)

    def GetNodeTriangleN(self, n):
        r"""GetNodeTriangleN(ChElementShellBST self, int n) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChElementShellBST_GetNodeTriangleN(self, n)

    def GetNodeNeighbourN(self, n):
        r"""GetNodeNeighbourN(ChElementShellBST self, int n) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChElementShellBST_GetNodeNeighbourN(self, n)

    def SetAsNeutral(self):
        r"""SetAsNeutral(ChElementShellBST self)"""
        return _fea.ChElementShellBST_SetAsNeutral(self)

    def AddLayer(self, thickness, theta, material):
        r"""AddLayer(ChElementShellBST self, double thickness, double theta, std::shared_ptr< chrono::fea::ChMaterialShellKirchhoff > material)"""
        return _fea.ChElementShellBST_AddLayer(self, thickness, theta, material)

    def SetLayerZreferenceCentered(self):
        r"""SetLayerZreferenceCentered(ChElementShellBST self)"""
        return _fea.ChElementShellBST_SetLayerZreferenceCentered(self)

    def SetLayerZreference(self, z_from_bottom):
        r"""SetLayerZreference(ChElementShellBST self, double z_from_bottom)"""
        return _fea.ChElementShellBST_SetLayerZreference(self, z_from_bottom)

    def GetNumLayers(self):
        r"""GetNumLayers(ChElementShellBST self) -> size_t"""
        return _fea.ChElementShellBST_GetNumLayers(self)

    def GetLayer(self, i):
        r"""GetLayer(ChElementShellBST self, size_t i) -> ShellBSTLayer"""
        return _fea.ChElementShellBST_GetLayer(self, i)

    def GetThickness(self):
        r"""GetThickness(ChElementShellBST self) -> double"""
        return _fea.ChElementShellBST_GetThickness(self)

    def ShapeFunctions(self, N, u, v):
        r"""ShapeFunctions(ChElementShellBST self, chrono::fea::ChElementShellBST::ShapeVector & N, double const u, double const v)"""
        return _fea.ChElementShellBST_ShapeFunctions(self, N, u, v)

    def ShapeFunctionsDerivativeU(self, Nu, u, v):
        r"""ShapeFunctionsDerivativeU(ChElementShellBST self, chrono::fea::ChElementShellBST::ShapeVector & Nu, double const u, double const v)"""
        return _fea.ChElementShellBST_ShapeFunctionsDerivativeU(self, Nu, u, v)

    def ShapeFunctionsDerivativeV(self, Nv, u, v):
        r"""ShapeFunctionsDerivativeV(ChElementShellBST self, chrono::fea::ChElementShellBST::ShapeVector & Nv, double const u, double const v)"""
        return _fea.ChElementShellBST_ShapeFunctionsDerivativeV(self, Nv, u, v)

    def ShapeFunctionsDerivativeX(self, Nx, Jux, u, v):
        r"""ShapeFunctionsDerivativeX(ChElementShellBST self, chrono::fea::ChElementShellBST::ShapeVector & Nx, chrono::ChMatrixNM< double,2,2 > const & Jux, double const u, double const v)"""
        return _fea.ChElementShellBST_ShapeFunctionsDerivativeX(self, Nx, Jux, u, v)

    def ShapeFunctionsDerivativeY(self, Ny, Jux, u, v):
        r"""ShapeFunctionsDerivativeY(ChElementShellBST self, chrono::fea::ChElementShellBST::ShapeVector & Ny, chrono::ChMatrixNM< double,2,2 > const & Jux, double const u, double const v)"""
        return _fea.ChElementShellBST_ShapeFunctionsDerivativeY(self, Ny, Jux, u, v)
    m_nodes = property(_fea.ChElementShellBST_m_nodes_get, _fea.ChElementShellBST_m_nodes_set, doc=r"""m_nodes : std::vector<(std::shared_ptr<(chrono::fea::ChNodeFEAxyz)>,std::allocator<(std::shared_ptr<(chrono::fea::ChNodeFEAxyz)>)>)>""")
    m_layers = property(_fea.ChElementShellBST_m_layers_get, _fea.ChElementShellBST_m_layers_set, doc=r"""m_layers : std::vector<(chrono::fea::ChElementShellBST::Layer,std::allocator<(chrono::fea::ChElementShellBST::Layer)>)>""")
    m_layers_z = property(_fea.ChElementShellBST_m_layers_z_get, _fea.ChElementShellBST_m_layers_z_set, doc=r"""m_layers_z : std::vector<(double,std::allocator<(double)>)>""")
    tot_thickness = property(_fea.ChElementShellBST_tot_thickness_get, _fea.ChElementShellBST_tot_thickness_set, doc=r"""tot_thickness : double""")
    Jux = property(_fea.ChElementShellBST_Jux_get, _fea.ChElementShellBST_Jux_set, doc=r"""Jux : chrono::ChMatrixNM<(double,2,2)>""")
    area = property(_fea.ChElementShellBST_area_get, _fea.ChElementShellBST_area_set, doc=r"""area : double""")
    l0 = property(_fea.ChElementShellBST_l0_get, _fea.ChElementShellBST_l0_set, doc=r"""l0 : chrono::ChVector<()>""")
    cM = property(_fea.ChElementShellBST_cM_get, _fea.ChElementShellBST_cM_set, doc=r"""cM : a(3).chrono::ChVector<()>""")
    cI = property(_fea.ChElementShellBST_cI_get, _fea.ChElementShellBST_cI_set, doc=r"""cI : a(3).chrono::ChVector<()>""")
    rI = property(_fea.ChElementShellBST_rI_get, _fea.ChElementShellBST_rI_set, doc=r"""rI : chrono::ChVector<()>""")
    phi0 = property(_fea.ChElementShellBST_phi0_get, _fea.ChElementShellBST_phi0_set, doc=r"""phi0 : chrono::ChVector<()>""")
    phi = property(_fea.ChElementShellBST_phi_get, _fea.ChElementShellBST_phi_set, doc=r"""phi : chrono::ChVector<()>""")
    k0 = property(_fea.ChElementShellBST_k0_get, _fea.ChElementShellBST_k0_set, doc=r"""k0 : chrono::ChVector<()>""")
    e0 = property(_fea.ChElementShellBST_e0_get, _fea.ChElementShellBST_e0_set, doc=r"""e0 : chrono::ChVector<()>""")
    k = property(_fea.ChElementShellBST_k_get, _fea.ChElementShellBST_k_set, doc=r"""k : chrono::ChVector<()>""")
    e = property(_fea.ChElementShellBST_e_get, _fea.ChElementShellBST_e_set, doc=r"""e : chrono::ChVector<()>""")
    n = property(_fea.ChElementShellBST_n_get, _fea.ChElementShellBST_n_set, doc=r"""n : chrono::ChVector<()>""")
    m = property(_fea.ChElementShellBST_m_get, _fea.ChElementShellBST_m_set, doc=r"""m : chrono::ChVector<()>""")

    def GetStateBlock(self, mD):
        r"""GetStateBlock(ChElementShellBST self, ChVectorDynamicD mD)"""
        return _fea.ChElementShellBST_GetStateBlock(self, mD)

    def ComputeInternalForces(self, Fi):
        r"""ComputeInternalForces(ChElementShellBST self, ChVectorDynamicD Fi)"""
        return _fea.ChElementShellBST_ComputeInternalForces(self, Fi)

    def ComputeInternalForces_impl(self, Fi, state_x, state_w, used_for_differentiation=False):
        r"""ComputeInternalForces_impl(ChElementShellBST self, ChVectorDynamicD Fi, chrono::ChState & state_x, chrono::ChStateDelta & state_w, bool used_for_differentiation=False)"""
        return _fea.ChElementShellBST_ComputeInternalForces_impl(self, Fi, state_x, state_w, used_for_differentiation)

    def Update(self):
        r"""Update(ChElementShellBST self)"""
        return _fea.ChElementShellBST_Update(self)

    def EvaluateSectionDisplacement(self, u, v, u_displ, u_rotaz):
        r"""EvaluateSectionDisplacement(ChElementShellBST self, double const u, double const v, ChVectorD u_displ, ChVectorD u_rotaz)"""
        return _fea.ChElementShellBST_EvaluateSectionDisplacement(self, u, v, u_displ, u_rotaz)

    def EvaluateSectionFrame(self, u, v, point, rot):
        r"""EvaluateSectionFrame(ChElementShellBST self, double const u, double const v, ChVectorD point, ChQuaternionD rot)"""
        return _fea.ChElementShellBST_EvaluateSectionFrame(self, u, v, point, rot)

    def EvaluateSectionPoint(self, u, v, point):
        r"""EvaluateSectionPoint(ChElementShellBST self, double const u, double const v, ChVectorD point)"""
        return _fea.ChElementShellBST_EvaluateSectionPoint(self, u, v, point)

    def EvaluateSectionVelNorm(self, U, V, Result):
        r"""EvaluateSectionVelNorm(ChElementShellBST self, double U, double V, ChVectorD Result)"""
        return _fea.ChElementShellBST_EvaluateSectionVelNorm(self, U, V, Result)

    def IsTriangleShell(self):
        r"""IsTriangleShell(ChElementShellBST self) -> bool"""
        return _fea.ChElementShellBST_IsTriangleShell(self)

    def LoadableGet_ndof_x(self):
        r"""LoadableGet_ndof_x(ChElementShellBST self) -> int"""
        return _fea.ChElementShellBST_LoadableGet_ndof_x(self)

    def LoadableGet_ndof_w(self):
        r"""LoadableGet_ndof_w(ChElementShellBST self) -> int"""
        return _fea.ChElementShellBST_LoadableGet_ndof_w(self)

    def LoadableGetStateBlock_x(self, block_offset, mD):
        r"""LoadableGetStateBlock_x(ChElementShellBST self, int block_offset, chrono::ChState & mD)"""
        return _fea.ChElementShellBST_LoadableGetStateBlock_x(self, block_offset, mD)

    def LoadableGetStateBlock_w(self, block_offset, mD):
        r"""LoadableGetStateBlock_w(ChElementShellBST self, int block_offset, chrono::ChStateDelta & mD)"""
        return _fea.ChElementShellBST_LoadableGetStateBlock_w(self, block_offset, mD)

    def LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""LoadableStateIncrement(ChElementShellBST self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChElementShellBST_LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def Get_field_ncoords(self):
        r"""Get_field_ncoords(ChElementShellBST self) -> int"""
        return _fea.ChElementShellBST_Get_field_ncoords(self)

    def GetSubBlocks(self):
        r"""GetSubBlocks(ChElementShellBST self) -> int"""
        return _fea.ChElementShellBST_GetSubBlocks(self)

    def GetSubBlockOffset(self, nblock):
        r"""GetSubBlockOffset(ChElementShellBST self, int nblock) -> unsigned int"""
        return _fea.ChElementShellBST_GetSubBlockOffset(self, nblock)

    def GetSubBlockSize(self, nblock):
        r"""GetSubBlockSize(ChElementShellBST self, int nblock) -> unsigned int"""
        return _fea.ChElementShellBST_GetSubBlockSize(self, nblock)

    def LoadableGetVariables(self, mvars):
        r"""LoadableGetVariables(ChElementShellBST self, std::vector< ChVariables *,std::allocator< ChVariables * > > & mvars)"""
        return _fea.ChElementShellBST_LoadableGetVariables(self, mvars)

    def ComputeNF(self, *args):
        r"""
        ComputeNF(ChElementShellBST self, double const U, double const V, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)
        ComputeNF(ChElementShellBST self, double const U, double const V, double const W, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)
        """
        return _fea.ChElementShellBST_ComputeNF(self, *args)

    def GetDensity(self):
        r"""GetDensity(ChElementShellBST self) -> double"""
        return _fea.ChElementShellBST_GetDensity(self)

    def ComputeNormal(self, U, V):
        r"""ComputeNormal(ChElementShellBST self, double const U, double const V) -> ChVectorD"""
        return _fea.ChElementShellBST_ComputeNormal(self, U, V)

    def IsTriangleIntegrationNeeded(self):
        r"""IsTriangleIntegrationNeeded(ChElementShellBST self) -> bool"""
        return _fea.ChElementShellBST_IsTriangleIntegrationNeeded(self)

    def IsTrianglePrismIntegrationNeeded(self):
        r"""IsTrianglePrismIntegrationNeeded(ChElementShellBST self) -> bool"""
        return _fea.ChElementShellBST_IsTrianglePrismIntegrationNeeded(self)

# Register ChElementShellBST in _fea:
_fea.ChElementShellBST_swigregister(ChElementShellBST)

class ShellBSTLayer(object):
    r"""Proxy of C++ chrono::fea::ChElementShellBST::Layer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Get_thickness(self):
        r"""Get_thickness(ShellBSTLayer self) -> double"""
        return _fea.ShellBSTLayer_Get_thickness(self)

    def Get_theta(self):
        r"""Get_theta(ShellBSTLayer self) -> double"""
        return _fea.ShellBSTLayer_Get_theta(self)

    def GetMaterial(self):
        r"""GetMaterial(ShellBSTLayer self) -> std::shared_ptr< chrono::fea::ChMaterialShellKirchhoff >"""
        return _fea.ShellBSTLayer_GetMaterial(self)
    __swig_destroy__ = _fea.delete_ShellBSTLayer

# Register ShellBSTLayer in _fea:
_fea.ShellBSTLayer_swigregister(ShellBSTLayer)

class ChElementCableANCF(ChElementBeam, pychrono.core.ChLoadableU, pychrono.core.ChLoadableUVW):
    r"""Proxy of C++ chrono::fea::ChElementCableANCF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_use_damping = property(_fea.ChElementCableANCF_m_use_damping_get, _fea.ChElementCableANCF_m_use_damping_set, doc=r"""m_use_damping : bool""")
    m_alpha = property(_fea.ChElementCableANCF_m_alpha_get, _fea.ChElementCableANCF_m_alpha_set, doc=r"""m_alpha : double""")

    def __init__(self):
        r"""__init__(ChElementCableANCF self) -> ChElementCableANCF"""
        _fea.ChElementCableANCF_swiginit(self, _fea.new_ChElementCableANCF())
    __swig_destroy__ = _fea.delete_ChElementCableANCF

    def GetNnodes(self):
        r"""GetNnodes(ChElementCableANCF self) -> int"""
        return _fea.ChElementCableANCF_GetNnodes(self)

    def GetNdofs(self):
        r"""GetNdofs(ChElementCableANCF self) -> int"""
        return _fea.ChElementCableANCF_GetNdofs(self)

    def GetNodeNdofs(self, n):
        r"""GetNodeNdofs(ChElementCableANCF self, int n) -> int"""
        return _fea.ChElementCableANCF_GetNodeNdofs(self, n)

    def GetNodeN(self, n):
        r"""GetNodeN(ChElementCableANCF self, int n) -> std::shared_ptr< chrono::fea::ChNodeFEAbase >"""
        return _fea.ChElementCableANCF_GetNodeN(self, n)

    def SetNodes(self, nodeA, nodeB):
        r"""SetNodes(ChElementCableANCF self, std::shared_ptr< chrono::fea::ChNodeFEAxyzD > nodeA, std::shared_ptr< chrono::fea::ChNodeFEAxyzD > nodeB)"""
        return _fea.ChElementCableANCF_SetNodes(self, nodeA, nodeB)

    def SetSection(self, my_material):
        r"""SetSection(ChElementCableANCF self, std::shared_ptr< chrono::fea::ChBeamSectionCable > my_material)"""
        return _fea.ChElementCableANCF_SetSection(self, my_material)

    def GetSection(self):
        r"""GetSection(ChElementCableANCF self) -> std::shared_ptr< chrono::fea::ChBeamSectionCable >"""
        return _fea.ChElementCableANCF_GetSection(self)

    def GetNodeA(self):
        r"""GetNodeA(ChElementCableANCF self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzD >"""
        return _fea.ChElementCableANCF_GetNodeA(self)

    def GetNodeB(self):
        r"""GetNodeB(ChElementCableANCF self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzD >"""
        return _fea.ChElementCableANCF_GetNodeB(self)

    def GetCurrLength(self):
        r"""GetCurrLength(ChElementCableANCF self) -> double"""
        return _fea.ChElementCableANCF_GetCurrLength(self)

    def ShapeFunctions(self, N, xi):
        r"""ShapeFunctions(ChElementCableANCF self, chrono::fea::ChElementCableANCF::ShapeVector & N, double xi)"""
        return _fea.ChElementCableANCF_ShapeFunctions(self, N, xi)

    def ShapeFunctionsDerivatives(self, Nd, xi):
        r"""ShapeFunctionsDerivatives(ChElementCableANCF self, chrono::fea::ChElementCableANCF::ShapeVector & Nd, double xi)"""
        return _fea.ChElementCableANCF_ShapeFunctionsDerivatives(self, Nd, xi)

    def ShapeFunctionsDerivatives2(self, Ndd, xi):
        r"""ShapeFunctionsDerivatives2(ChElementCableANCF self, chrono::fea::ChElementCableANCF::ShapeVector & Ndd, double xi)"""
        return _fea.ChElementCableANCF_ShapeFunctionsDerivatives2(self, Ndd, xi)

    def Update(self):
        r"""Update(ChElementCableANCF self)"""
        return _fea.ChElementCableANCF_Update(self)

    def GetStateBlock(self, mD):
        r"""GetStateBlock(ChElementCableANCF self, ChVectorDynamicD mD)"""
        return _fea.ChElementCableANCF_GetStateBlock(self, mD)

    def ComputeInternalJacobians(self, Kfactor, Rfactor):
        r"""ComputeInternalJacobians(ChElementCableANCF self, double Kfactor, double Rfactor)"""
        return _fea.ChElementCableANCF_ComputeInternalJacobians(self, Kfactor, Rfactor)

    def ComputeMassMatrix(self):
        r"""ComputeMassMatrix(ChElementCableANCF self)"""
        return _fea.ChElementCableANCF_ComputeMassMatrix(self)

    def ComputeInternalForces(self, Fi):
        r"""ComputeInternalForces(ChElementCableANCF self, ChVectorDynamicD Fi)"""
        return _fea.ChElementCableANCF_ComputeInternalForces(self, Fi)

    def EvaluateSectionDisplacement(self, eta, u_displ, u_rotaz):
        r"""EvaluateSectionDisplacement(ChElementCableANCF self, double const eta, ChVectorD u_displ, ChVectorD u_rotaz)"""
        return _fea.ChElementCableANCF_EvaluateSectionDisplacement(self, eta, u_displ, u_rotaz)

    def EvaluateSectionFrame(self, eta, point, rot):
        r"""EvaluateSectionFrame(ChElementCableANCF self, double const eta, ChVectorD point, ChQuaternionD rot)"""
        return _fea.ChElementCableANCF_EvaluateSectionFrame(self, eta, point, rot)

    def EvaluateSectionForceTorque(self, eta, Fforce, Mtorque):
        r"""EvaluateSectionForceTorque(ChElementCableANCF self, double const eta, ChVectorD Fforce, ChVectorD Mtorque)"""
        return _fea.ChElementCableANCF_EvaluateSectionForceTorque(self, eta, Fforce, Mtorque)

    def EvaluateSectionStrain(self, eta, StrainV):
        r"""EvaluateSectionStrain(ChElementCableANCF self, double const eta, ChVectorD StrainV)"""
        return _fea.ChElementCableANCF_EvaluateSectionStrain(self, eta, StrainV)

    def SetAlphaDamp(self, a):
        r"""SetAlphaDamp(ChElementCableANCF self, double a)"""
        return _fea.ChElementCableANCF_SetAlphaDamp(self, a)

    def LoadableGet_ndof_x(self):
        r"""LoadableGet_ndof_x(ChElementCableANCF self) -> int"""
        return _fea.ChElementCableANCF_LoadableGet_ndof_x(self)

    def LoadableGet_ndof_w(self):
        r"""LoadableGet_ndof_w(ChElementCableANCF self) -> int"""
        return _fea.ChElementCableANCF_LoadableGet_ndof_w(self)

    def LoadableGetStateBlock_x(self, block_offset, mD):
        r"""LoadableGetStateBlock_x(ChElementCableANCF self, int block_offset, chrono::ChState & mD)"""
        return _fea.ChElementCableANCF_LoadableGetStateBlock_x(self, block_offset, mD)

    def LoadableGetStateBlock_w(self, block_offset, mD):
        r"""LoadableGetStateBlock_w(ChElementCableANCF self, int block_offset, chrono::ChStateDelta & mD)"""
        return _fea.ChElementCableANCF_LoadableGetStateBlock_w(self, block_offset, mD)

    def LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""LoadableStateIncrement(ChElementCableANCF self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChElementCableANCF_LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def Get_field_ncoords(self):
        r"""Get_field_ncoords(ChElementCableANCF self) -> int"""
        return _fea.ChElementCableANCF_Get_field_ncoords(self)

    def GetSubBlocks(self):
        r"""GetSubBlocks(ChElementCableANCF self) -> int"""
        return _fea.ChElementCableANCF_GetSubBlocks(self)

    def GetSubBlockOffset(self, nblock):
        r"""GetSubBlockOffset(ChElementCableANCF self, int nblock) -> unsigned int"""
        return _fea.ChElementCableANCF_GetSubBlockOffset(self, nblock)

    def GetSubBlockSize(self, nblock):
        r"""GetSubBlockSize(ChElementCableANCF self, int nblock) -> unsigned int"""
        return _fea.ChElementCableANCF_GetSubBlockSize(self, nblock)

    def LoadableGetVariables(self, mvars):
        r"""LoadableGetVariables(ChElementCableANCF self, std::vector< ChVariables *,std::allocator< ChVariables * > > & mvars)"""
        return _fea.ChElementCableANCF_LoadableGetVariables(self, mvars)

    def ComputeNF(self, *args):
        r"""
        ComputeNF(ChElementCableANCF self, double const U, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)
        ComputeNF(ChElementCableANCF self, double const U, double const V, double const W, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)
        """
        return _fea.ChElementCableANCF_ComputeNF(self, *args)

    def GetDensity(self):
        r"""GetDensity(ChElementCableANCF self) -> double"""
        return _fea.ChElementCableANCF_GetDensity(self)

# Register ChElementCableANCF in _fea:
_fea.ChElementCableANCF_swigregister(ChElementCableANCF)

class ChContactSurface(object):
    r"""Proxy of C++ chrono::fea::ChContactSurface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fea.delete_ChContactSurface

    def GetMesh(self):
        r"""GetMesh(ChContactSurface self) -> ChMesh"""
        return _fea.ChContactSurface_GetMesh(self)

    def SetMesh(self, mm):
        r"""SetMesh(ChContactSurface self, ChMesh mm)"""
        return _fea.ChContactSurface_SetMesh(self, mm)

    def SetMaterialSurface(self, mnewsurf):
        r"""SetMaterialSurface(ChContactSurface self, std::shared_ptr< chrono::ChMaterialSurface > const & mnewsurf)"""
        return _fea.ChContactSurface_SetMaterialSurface(self, mnewsurf)

    def GetMaterialSurface(self):
        r"""GetMaterialSurface(ChContactSurface self) -> std::shared_ptr< chrono::ChMaterialSurface > &"""
        return _fea.ChContactSurface_GetMaterialSurface(self)

    def SurfaceSyncCollisionModels(self):
        r"""SurfaceSyncCollisionModels(ChContactSurface self)"""
        return _fea.ChContactSurface_SurfaceSyncCollisionModels(self)

    def SurfaceAddCollisionModelsToSystem(self, msys):
        r"""SurfaceAddCollisionModelsToSystem(ChContactSurface self, chrono::ChSystem * msys)"""
        return _fea.ChContactSurface_SurfaceAddCollisionModelsToSystem(self, msys)

    def SurfaceRemoveCollisionModelsFromSystem(self, msys):
        r"""SurfaceRemoveCollisionModelsFromSystem(ChContactSurface self, chrono::ChSystem * msys)"""
        return _fea.ChContactSurface_SurfaceRemoveCollisionModelsFromSystem(self, msys)

# Register ChContactSurface in _fea:
_fea.ChContactSurface_swigregister(ChContactSurface)

class ChContactTriangleXYZ(pychrono.core.ChLoadableUV):
    r"""Proxy of C++ chrono::fea::ChContactTriangleXYZ class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChContactTriangleXYZ self) -> ChContactTriangleXYZ
        __init__(ChContactTriangleXYZ self, std::shared_ptr< chrono::fea::ChNodeFEAxyz > n1, std::shared_ptr< chrono::fea::ChNodeFEAxyz > n2, std::shared_ptr< chrono::fea::ChNodeFEAxyz > n3, ChContactSurface acontainer=None) -> ChContactTriangleXYZ
        """
        _fea.ChContactTriangleXYZ_swiginit(self, _fea.new_ChContactTriangleXYZ(*args))
    __swig_destroy__ = _fea.delete_ChContactTriangleXYZ

    def GetCollisionModel(self):
        r"""GetCollisionModel(ChContactTriangleXYZ self) -> ChCollisionModel"""
        return _fea.ChContactTriangleXYZ_GetCollisionModel(self)

    def GetNode1(self):
        r"""GetNode1(ChContactTriangleXYZ self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChContactTriangleXYZ_GetNode1(self)

    def GetNode2(self):
        r"""GetNode2(ChContactTriangleXYZ self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChContactTriangleXYZ_GetNode2(self)

    def GetNode3(self):
        r"""GetNode3(ChContactTriangleXYZ self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChContactTriangleXYZ_GetNode3(self)

    def SetNode1(self, mn):
        r"""SetNode1(ChContactTriangleXYZ self, std::shared_ptr< chrono::fea::ChNodeFEAxyz > mn)"""
        return _fea.ChContactTriangleXYZ_SetNode1(self, mn)

    def SetNode2(self, mn):
        r"""SetNode2(ChContactTriangleXYZ self, std::shared_ptr< chrono::fea::ChNodeFEAxyz > mn)"""
        return _fea.ChContactTriangleXYZ_SetNode2(self, mn)

    def SetNode3(self, mn):
        r"""SetNode3(ChContactTriangleXYZ self, std::shared_ptr< chrono::fea::ChNodeFEAxyz > mn)"""
        return _fea.ChContactTriangleXYZ_SetNode3(self, mn)

    def GetContactSurface(self):
        r"""GetContactSurface(ChContactTriangleXYZ self) -> ChContactSurface"""
        return _fea.ChContactTriangleXYZ_GetContactSurface(self)

    def SetContactSurface(self, mc):
        r"""SetContactSurface(ChContactTriangleXYZ self, ChContactSurface mc)"""
        return _fea.ChContactTriangleXYZ_SetContactSurface(self, mc)

    def GetContactableType(self):
        r"""GetContactableType(ChContactTriangleXYZ self) -> chrono::ChContactable::eChContactableType"""
        return _fea.ChContactTriangleXYZ_GetContactableType(self)

    def GetVariables1(self):
        r"""GetVariables1(ChContactTriangleXYZ self) -> ChVariables *"""
        return _fea.ChContactTriangleXYZ_GetVariables1(self)

    def GetVariables2(self):
        r"""GetVariables2(ChContactTriangleXYZ self) -> ChVariables *"""
        return _fea.ChContactTriangleXYZ_GetVariables2(self)

    def GetVariables3(self):
        r"""GetVariables3(ChContactTriangleXYZ self) -> ChVariables *"""
        return _fea.ChContactTriangleXYZ_GetVariables3(self)

    def IsContactActive(self):
        r"""IsContactActive(ChContactTriangleXYZ self) -> bool"""
        return _fea.ChContactTriangleXYZ_IsContactActive(self)

    def ContactableGet_ndof_x(self):
        r"""ContactableGet_ndof_x(ChContactTriangleXYZ self) -> int"""
        return _fea.ChContactTriangleXYZ_ContactableGet_ndof_x(self)

    def ContactableGet_ndof_w(self):
        r"""ContactableGet_ndof_w(ChContactTriangleXYZ self) -> int"""
        return _fea.ChContactTriangleXYZ_ContactableGet_ndof_w(self)

    def ContactableGetStateBlock_x(self, x):
        r"""ContactableGetStateBlock_x(ChContactTriangleXYZ self, chrono::ChState & x)"""
        return _fea.ChContactTriangleXYZ_ContactableGetStateBlock_x(self, x)

    def ContactableGetStateBlock_w(self, w):
        r"""ContactableGetStateBlock_w(ChContactTriangleXYZ self, chrono::ChStateDelta & w)"""
        return _fea.ChContactTriangleXYZ_ContactableGetStateBlock_w(self, w)

    def ContactableIncrementState(self, x, dw, x_new):
        r"""ContactableIncrementState(ChContactTriangleXYZ self, chrono::ChState const & x, chrono::ChStateDelta const & dw, chrono::ChState & x_new)"""
        return _fea.ChContactTriangleXYZ_ContactableIncrementState(self, x, dw, x_new)

    def GetContactPoint(self, loc_point, state_x):
        r"""GetContactPoint(ChContactTriangleXYZ self, ChVectorD loc_point, chrono::ChState const & state_x) -> ChVectorD"""
        return _fea.ChContactTriangleXYZ_GetContactPoint(self, loc_point, state_x)

    def GetContactPointSpeed(self, *args):
        r"""
        GetContactPointSpeed(ChContactTriangleXYZ self, ChVectorD loc_point, chrono::ChState const & state_x, chrono::ChStateDelta const & state_w) -> ChVectorD
        GetContactPointSpeed(ChContactTriangleXYZ self, ChVectorD abs_point) -> ChVectorD
        """
        return _fea.ChContactTriangleXYZ_GetContactPointSpeed(self, *args)

    def GetCsysForCollisionModel(self):
        r"""GetCsysForCollisionModel(ChContactTriangleXYZ self) -> ChCoordsysD"""
        return _fea.ChContactTriangleXYZ_GetCsysForCollisionModel(self)

    def ContactForceLoadResidual_F(self, F, abs_point, R):
        r"""ContactForceLoadResidual_F(ChContactTriangleXYZ self, ChVectorD F, ChVectorD abs_point, ChVectorDynamicD R)"""
        return _fea.ChContactTriangleXYZ_ContactForceLoadResidual_F(self, F, abs_point, R)

    def ContactForceLoadQ(self, F, point, state_x, Q, offset):
        r"""ContactForceLoadQ(ChContactTriangleXYZ self, ChVectorD F, ChVectorD point, chrono::ChState const & state_x, ChVectorDynamicD Q, int offset)"""
        return _fea.ChContactTriangleXYZ_ContactForceLoadQ(self, F, point, state_x, Q, offset)

    def GetContactableMass(self):
        r"""GetContactableMass(ChContactTriangleXYZ self) -> double"""
        return _fea.ChContactTriangleXYZ_GetContactableMass(self)

    def GetMaterialSurface(self):
        r"""GetMaterialSurface(ChContactTriangleXYZ self) -> std::shared_ptr< chrono::ChMaterialSurface > &"""
        return _fea.ChContactTriangleXYZ_GetMaterialSurface(self)

    def GetPhysicsItem(self):
        r"""GetPhysicsItem(ChContactTriangleXYZ self) -> ChPhysicsItem"""
        return _fea.ChContactTriangleXYZ_GetPhysicsItem(self)

    def LoadableGet_ndof_x(self):
        r"""LoadableGet_ndof_x(ChContactTriangleXYZ self) -> int"""
        return _fea.ChContactTriangleXYZ_LoadableGet_ndof_x(self)

    def LoadableGet_ndof_w(self):
        r"""LoadableGet_ndof_w(ChContactTriangleXYZ self) -> int"""
        return _fea.ChContactTriangleXYZ_LoadableGet_ndof_w(self)

    def LoadableGetStateBlock_x(self, block_offset, mD):
        r"""LoadableGetStateBlock_x(ChContactTriangleXYZ self, int block_offset, chrono::ChState & mD)"""
        return _fea.ChContactTriangleXYZ_LoadableGetStateBlock_x(self, block_offset, mD)

    def LoadableGetStateBlock_w(self, block_offset, mD):
        r"""LoadableGetStateBlock_w(ChContactTriangleXYZ self, int block_offset, chrono::ChStateDelta & mD)"""
        return _fea.ChContactTriangleXYZ_LoadableGetStateBlock_w(self, block_offset, mD)

    def LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""LoadableStateIncrement(ChContactTriangleXYZ self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChContactTriangleXYZ_LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def Get_field_ncoords(self):
        r"""Get_field_ncoords(ChContactTriangleXYZ self) -> int"""
        return _fea.ChContactTriangleXYZ_Get_field_ncoords(self)

    def GetSubBlocks(self):
        r"""GetSubBlocks(ChContactTriangleXYZ self) -> int"""
        return _fea.ChContactTriangleXYZ_GetSubBlocks(self)

    def GetSubBlockOffset(self, nblock):
        r"""GetSubBlockOffset(ChContactTriangleXYZ self, int nblock) -> unsigned int"""
        return _fea.ChContactTriangleXYZ_GetSubBlockOffset(self, nblock)

    def GetSubBlockSize(self, nblock):
        r"""GetSubBlockSize(ChContactTriangleXYZ self, int nblock) -> unsigned int"""
        return _fea.ChContactTriangleXYZ_GetSubBlockSize(self, nblock)

    def LoadableGetVariables(self, mvars):
        r"""LoadableGetVariables(ChContactTriangleXYZ self, std::vector< ChVariables *,std::allocator< ChVariables * > > & mvars)"""
        return _fea.ChContactTriangleXYZ_LoadableGetVariables(self, mvars)

    def ComputeNF(self, U, V, Qi, detJ, F, state_x, state_w):
        r"""ComputeNF(ChContactTriangleXYZ self, double const U, double const V, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _fea.ChContactTriangleXYZ_ComputeNF(self, U, V, Qi, detJ, F, state_x, state_w)

    def ComputeNormal(self, U, V):
        r"""ComputeNormal(ChContactTriangleXYZ self, double const U, double const V) -> ChVectorD"""
        return _fea.ChContactTriangleXYZ_ComputeNormal(self, U, V)

    def IsTriangleIntegrationNeeded(self):
        r"""IsTriangleIntegrationNeeded(ChContactTriangleXYZ self) -> bool"""
        return _fea.ChContactTriangleXYZ_IsTriangleIntegrationNeeded(self)

# Register ChContactTriangleXYZ in _fea:
_fea.ChContactTriangleXYZ_swigregister(ChContactTriangleXYZ)

class ChContactTriangleXYZROT(pychrono.core.ChLoadableUV):
    r"""Proxy of C++ chrono::fea::ChContactTriangleXYZROT class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChContactTriangleXYZROT self) -> ChContactTriangleXYZROT
        __init__(ChContactTriangleXYZROT self, std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > n1, std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > n2, std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > n3, ChContactSurface acontainer=None) -> ChContactTriangleXYZROT
        """
        _fea.ChContactTriangleXYZROT_swiginit(self, _fea.new_ChContactTriangleXYZROT(*args))
    __swig_destroy__ = _fea.delete_ChContactTriangleXYZROT

    def GetCollisionModel(self):
        r"""GetCollisionModel(ChContactTriangleXYZROT self) -> ChCollisionModel"""
        return _fea.ChContactTriangleXYZROT_GetCollisionModel(self)

    def GetNode1(self):
        r"""GetNode1(ChContactTriangleXYZROT self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzrot >"""
        return _fea.ChContactTriangleXYZROT_GetNode1(self)

    def GetNode2(self):
        r"""GetNode2(ChContactTriangleXYZROT self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzrot >"""
        return _fea.ChContactTriangleXYZROT_GetNode2(self)

    def GetNode3(self):
        r"""GetNode3(ChContactTriangleXYZROT self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzrot >"""
        return _fea.ChContactTriangleXYZROT_GetNode3(self)

    def SetNode1(self, mn):
        r"""SetNode1(ChContactTriangleXYZROT self, std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > mn)"""
        return _fea.ChContactTriangleXYZROT_SetNode1(self, mn)

    def SetNode2(self, mn):
        r"""SetNode2(ChContactTriangleXYZROT self, std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > mn)"""
        return _fea.ChContactTriangleXYZROT_SetNode2(self, mn)

    def SetNode3(self, mn):
        r"""SetNode3(ChContactTriangleXYZROT self, std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > mn)"""
        return _fea.ChContactTriangleXYZROT_SetNode3(self, mn)

    def GetContactSurface(self):
        r"""GetContactSurface(ChContactTriangleXYZROT self) -> ChContactSurface"""
        return _fea.ChContactTriangleXYZROT_GetContactSurface(self)

    def SetContactSurface(self, mc):
        r"""SetContactSurface(ChContactTriangleXYZROT self, ChContactSurface mc)"""
        return _fea.ChContactTriangleXYZROT_SetContactSurface(self, mc)

    def GetContactableType(self):
        r"""GetContactableType(ChContactTriangleXYZROT self) -> chrono::ChContactable::eChContactableType"""
        return _fea.ChContactTriangleXYZROT_GetContactableType(self)

    def GetVariables1(self):
        r"""GetVariables1(ChContactTriangleXYZROT self) -> ChVariables *"""
        return _fea.ChContactTriangleXYZROT_GetVariables1(self)

    def GetVariables2(self):
        r"""GetVariables2(ChContactTriangleXYZROT self) -> ChVariables *"""
        return _fea.ChContactTriangleXYZROT_GetVariables2(self)

    def GetVariables3(self):
        r"""GetVariables3(ChContactTriangleXYZROT self) -> ChVariables *"""
        return _fea.ChContactTriangleXYZROT_GetVariables3(self)

    def IsContactActive(self):
        r"""IsContactActive(ChContactTriangleXYZROT self) -> bool"""
        return _fea.ChContactTriangleXYZROT_IsContactActive(self)

    def ContactableGet_ndof_x(self):
        r"""ContactableGet_ndof_x(ChContactTriangleXYZROT self) -> int"""
        return _fea.ChContactTriangleXYZROT_ContactableGet_ndof_x(self)

    def ContactableGet_ndof_w(self):
        r"""ContactableGet_ndof_w(ChContactTriangleXYZROT self) -> int"""
        return _fea.ChContactTriangleXYZROT_ContactableGet_ndof_w(self)

    def ContactableGetStateBlock_x(self, x):
        r"""ContactableGetStateBlock_x(ChContactTriangleXYZROT self, chrono::ChState & x)"""
        return _fea.ChContactTriangleXYZROT_ContactableGetStateBlock_x(self, x)

    def ContactableGetStateBlock_w(self, w):
        r"""ContactableGetStateBlock_w(ChContactTriangleXYZROT self, chrono::ChStateDelta & w)"""
        return _fea.ChContactTriangleXYZROT_ContactableGetStateBlock_w(self, w)

    def ContactableIncrementState(self, x, dw, x_new):
        r"""ContactableIncrementState(ChContactTriangleXYZROT self, chrono::ChState const & x, chrono::ChStateDelta const & dw, chrono::ChState & x_new)"""
        return _fea.ChContactTriangleXYZROT_ContactableIncrementState(self, x, dw, x_new)

    def GetContactPoint(self, loc_point, state_x):
        r"""GetContactPoint(ChContactTriangleXYZROT self, ChVectorD loc_point, chrono::ChState const & state_x) -> ChVectorD"""
        return _fea.ChContactTriangleXYZROT_GetContactPoint(self, loc_point, state_x)

    def GetContactPointSpeed(self, *args):
        r"""
        GetContactPointSpeed(ChContactTriangleXYZROT self, ChVectorD loc_point, chrono::ChState const & state_x, chrono::ChStateDelta const & state_w) -> ChVectorD
        GetContactPointSpeed(ChContactTriangleXYZROT self, ChVectorD abs_point) -> ChVectorD
        """
        return _fea.ChContactTriangleXYZROT_GetContactPointSpeed(self, *args)

    def GetCsysForCollisionModel(self):
        r"""GetCsysForCollisionModel(ChContactTriangleXYZROT self) -> ChCoordsysD"""
        return _fea.ChContactTriangleXYZROT_GetCsysForCollisionModel(self)

    def ContactForceLoadResidual_F(self, F, abs_point, R):
        r"""ContactForceLoadResidual_F(ChContactTriangleXYZROT self, ChVectorD F, ChVectorD abs_point, ChVectorDynamicD R)"""
        return _fea.ChContactTriangleXYZROT_ContactForceLoadResidual_F(self, F, abs_point, R)

    def ContactForceLoadQ(self, F, point, state_x, Q, offset):
        r"""ContactForceLoadQ(ChContactTriangleXYZROT self, ChVectorD F, ChVectorD point, chrono::ChState const & state_x, ChVectorDynamicD Q, int offset)"""
        return _fea.ChContactTriangleXYZROT_ContactForceLoadQ(self, F, point, state_x, Q, offset)

    def GetContactableMass(self):
        r"""GetContactableMass(ChContactTriangleXYZROT self) -> double"""
        return _fea.ChContactTriangleXYZROT_GetContactableMass(self)

    def GetMaterialSurface(self):
        r"""GetMaterialSurface(ChContactTriangleXYZROT self) -> std::shared_ptr< chrono::ChMaterialSurface > &"""
        return _fea.ChContactTriangleXYZROT_GetMaterialSurface(self)

    def GetPhysicsItem(self):
        r"""GetPhysicsItem(ChContactTriangleXYZROT self) -> ChPhysicsItem"""
        return _fea.ChContactTriangleXYZROT_GetPhysicsItem(self)

    def LoadableGet_ndof_x(self):
        r"""LoadableGet_ndof_x(ChContactTriangleXYZROT self) -> int"""
        return _fea.ChContactTriangleXYZROT_LoadableGet_ndof_x(self)

    def LoadableGet_ndof_w(self):
        r"""LoadableGet_ndof_w(ChContactTriangleXYZROT self) -> int"""
        return _fea.ChContactTriangleXYZROT_LoadableGet_ndof_w(self)

    def LoadableGetStateBlock_x(self, block_offset, mD):
        r"""LoadableGetStateBlock_x(ChContactTriangleXYZROT self, int block_offset, chrono::ChState & mD)"""
        return _fea.ChContactTriangleXYZROT_LoadableGetStateBlock_x(self, block_offset, mD)

    def LoadableGetStateBlock_w(self, block_offset, mD):
        r"""LoadableGetStateBlock_w(ChContactTriangleXYZROT self, int block_offset, chrono::ChStateDelta & mD)"""
        return _fea.ChContactTriangleXYZROT_LoadableGetStateBlock_w(self, block_offset, mD)

    def LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""LoadableStateIncrement(ChContactTriangleXYZROT self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChContactTriangleXYZROT_LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def Get_field_ncoords(self):
        r"""Get_field_ncoords(ChContactTriangleXYZROT self) -> int"""
        return _fea.ChContactTriangleXYZROT_Get_field_ncoords(self)

    def GetSubBlocks(self):
        r"""GetSubBlocks(ChContactTriangleXYZROT self) -> int"""
        return _fea.ChContactTriangleXYZROT_GetSubBlocks(self)

    def GetSubBlockOffset(self, nblock):
        r"""GetSubBlockOffset(ChContactTriangleXYZROT self, int nblock) -> unsigned int"""
        return _fea.ChContactTriangleXYZROT_GetSubBlockOffset(self, nblock)

    def GetSubBlockSize(self, nblock):
        r"""GetSubBlockSize(ChContactTriangleXYZROT self, int nblock) -> unsigned int"""
        return _fea.ChContactTriangleXYZROT_GetSubBlockSize(self, nblock)

    def LoadableGetVariables(self, mvars):
        r"""LoadableGetVariables(ChContactTriangleXYZROT self, std::vector< ChVariables *,std::allocator< ChVariables * > > & mvars)"""
        return _fea.ChContactTriangleXYZROT_LoadableGetVariables(self, mvars)

    def ComputeNF(self, U, V, Qi, detJ, F, state_x, state_w):
        r"""ComputeNF(ChContactTriangleXYZROT self, double const U, double const V, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _fea.ChContactTriangleXYZROT_ComputeNF(self, U, V, Qi, detJ, F, state_x, state_w)

    def ComputeNormal(self, U, V):
        r"""ComputeNormal(ChContactTriangleXYZROT self, double const U, double const V) -> ChVectorD"""
        return _fea.ChContactTriangleXYZROT_ComputeNormal(self, U, V)

    def IsTriangleIntegrationNeeded(self):
        r"""IsTriangleIntegrationNeeded(ChContactTriangleXYZROT self) -> bool"""
        return _fea.ChContactTriangleXYZROT_IsTriangleIntegrationNeeded(self)

# Register ChContactTriangleXYZROT in _fea:
_fea.ChContactTriangleXYZROT_swigregister(ChContactTriangleXYZROT)

class ChContactSurfaceMesh(ChContactSurface):
    r"""Proxy of C++ chrono::fea::ChContactSurfaceMesh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, parentmesh=None):
        r"""__init__(ChContactSurfaceMesh self, ChMesh parentmesh=None) -> ChContactSurfaceMesh"""
        _fea.ChContactSurfaceMesh_swiginit(self, _fea.new_ChContactSurfaceMesh(parentmesh))
    __swig_destroy__ = _fea.delete_ChContactSurfaceMesh

    def AddFacesFromBoundary(self, sphere_swept=0.0, ccw=True):
        r"""AddFacesFromBoundary(ChContactSurfaceMesh self, double sphere_swept=0.0, bool ccw=True)"""
        return _fea.ChContactSurfaceMesh_AddFacesFromBoundary(self, sphere_swept, ccw)

    def GetTriangleList(self):
        r"""GetTriangleList(ChContactSurfaceMesh self) -> std::vector< std::shared_ptr< chrono::fea::ChContactTriangleXYZ >,std::allocator< std::shared_ptr< chrono::fea::ChContactTriangleXYZ > > > &"""
        return _fea.ChContactSurfaceMesh_GetTriangleList(self)

    def GetTriangleListRot(self):
        r"""GetTriangleListRot(ChContactSurfaceMesh self) -> std::vector< std::shared_ptr< chrono::fea::ChContactTriangleXYZROT >,std::allocator< std::shared_ptr< chrono::fea::ChContactTriangleXYZROT > > > &"""
        return _fea.ChContactSurfaceMesh_GetTriangleListRot(self)

    def GetNumTriangles(self):
        r"""GetNumTriangles(ChContactSurfaceMesh self) -> unsigned int"""
        return _fea.ChContactSurfaceMesh_GetNumTriangles(self)

    def GetNumVertices(self):
        r"""GetNumVertices(ChContactSurfaceMesh self) -> unsigned int"""
        return _fea.ChContactSurfaceMesh_GetNumVertices(self)

    def SurfaceSyncCollisionModels(self):
        r"""SurfaceSyncCollisionModels(ChContactSurfaceMesh self)"""
        return _fea.ChContactSurfaceMesh_SurfaceSyncCollisionModels(self)

    def SurfaceAddCollisionModelsToSystem(self, msys):
        r"""SurfaceAddCollisionModelsToSystem(ChContactSurfaceMesh self, chrono::ChSystem * msys)"""
        return _fea.ChContactSurfaceMesh_SurfaceAddCollisionModelsToSystem(self, msys)

    def SurfaceRemoveCollisionModelsFromSystem(self, msys):
        r"""SurfaceRemoveCollisionModelsFromSystem(ChContactSurfaceMesh self, chrono::ChSystem * msys)"""
        return _fea.ChContactSurfaceMesh_SurfaceRemoveCollisionModelsFromSystem(self, msys)

# Register ChContactSurfaceMesh in _fea:
_fea.ChContactSurfaceMesh_swigregister(ChContactSurfaceMesh)

class ChContactNodeXYZ(object):
    r"""Proxy of C++ chrono::fea::ChContactNodeXYZ class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, anode=None, acontainer=None):
        r"""__init__(ChContactNodeXYZ self, ChNodeFEAxyz anode=None, ChContactSurface acontainer=None) -> ChContactNodeXYZ"""
        _fea.ChContactNodeXYZ_swiginit(self, _fea.new_ChContactNodeXYZ(anode, acontainer))

    def GetNode(self):
        r"""GetNode(ChContactNodeXYZ self) -> ChNodeFEAxyz"""
        return _fea.ChContactNodeXYZ_GetNode(self)

    def SetNode(self, mn):
        r"""SetNode(ChContactNodeXYZ self, ChNodeFEAxyz mn)"""
        return _fea.ChContactNodeXYZ_SetNode(self, mn)

    def GetContactSurface(self, *args):
        r"""
        GetContactSurface(ChContactNodeXYZ self) -> ChContactSurface
        GetContactSurface(ChContactNodeXYZ self, ChContactSurface mc)
        """
        return _fea.ChContactNodeXYZ_GetContactSurface(self, *args)

    def GetContactableType(self):
        r"""GetContactableType(ChContactNodeXYZ self) -> chrono::ChContactable::eChContactableType"""
        return _fea.ChContactNodeXYZ_GetContactableType(self)

    def GetVariables1(self):
        r"""GetVariables1(ChContactNodeXYZ self) -> ChVariables *"""
        return _fea.ChContactNodeXYZ_GetVariables1(self)

    def IsContactActive(self):
        r"""IsContactActive(ChContactNodeXYZ self) -> bool"""
        return _fea.ChContactNodeXYZ_IsContactActive(self)

    def ContactableGet_ndof_x(self):
        r"""ContactableGet_ndof_x(ChContactNodeXYZ self) -> int"""
        return _fea.ChContactNodeXYZ_ContactableGet_ndof_x(self)

    def ContactableGet_ndof_w(self):
        r"""ContactableGet_ndof_w(ChContactNodeXYZ self) -> int"""
        return _fea.ChContactNodeXYZ_ContactableGet_ndof_w(self)

    def ContactableGetStateBlock_x(self, x):
        r"""ContactableGetStateBlock_x(ChContactNodeXYZ self, chrono::ChState & x)"""
        return _fea.ChContactNodeXYZ_ContactableGetStateBlock_x(self, x)

    def ContactableGetStateBlock_w(self, w):
        r"""ContactableGetStateBlock_w(ChContactNodeXYZ self, chrono::ChStateDelta & w)"""
        return _fea.ChContactNodeXYZ_ContactableGetStateBlock_w(self, w)

    def ContactableIncrementState(self, x, dw, x_new):
        r"""ContactableIncrementState(ChContactNodeXYZ self, chrono::ChState const & x, chrono::ChStateDelta const & dw, chrono::ChState & x_new)"""
        return _fea.ChContactNodeXYZ_ContactableIncrementState(self, x, dw, x_new)

    def GetContactPoint(self, loc_point, state_x):
        r"""GetContactPoint(ChContactNodeXYZ self, ChVectorD loc_point, chrono::ChState const & state_x) -> ChVectorD"""
        return _fea.ChContactNodeXYZ_GetContactPoint(self, loc_point, state_x)

    def GetContactPointSpeed(self, *args):
        r"""
        GetContactPointSpeed(ChContactNodeXYZ self, ChVectorD loc_point, chrono::ChState const & state_x, chrono::ChStateDelta const & state_w) -> ChVectorD
        GetContactPointSpeed(ChContactNodeXYZ self, ChVectorD abs_point) -> ChVectorD
        """
        return _fea.ChContactNodeXYZ_GetContactPointSpeed(self, *args)

    def GetCsysForCollisionModel(self):
        r"""GetCsysForCollisionModel(ChContactNodeXYZ self) -> ChCoordsysD"""
        return _fea.ChContactNodeXYZ_GetCsysForCollisionModel(self)

    def ContactForceLoadResidual_F(self, F, abs_point, R):
        r"""ContactForceLoadResidual_F(ChContactNodeXYZ self, ChVectorD F, ChVectorD abs_point, ChVectorDynamicD R)"""
        return _fea.ChContactNodeXYZ_ContactForceLoadResidual_F(self, F, abs_point, R)

    def ContactForceLoadQ(self, F, point, state_x, Q, offset):
        r"""ContactForceLoadQ(ChContactNodeXYZ self, ChVectorD F, ChVectorD point, chrono::ChState const & state_x, ChVectorDynamicD Q, int offset)"""
        return _fea.ChContactNodeXYZ_ContactForceLoadQ(self, F, point, state_x, Q, offset)

    def GetContactableMass(self):
        r"""GetContactableMass(ChContactNodeXYZ self) -> double"""
        return _fea.ChContactNodeXYZ_GetContactableMass(self)

    def GetMaterialSurface(self):
        r"""GetMaterialSurface(ChContactNodeXYZ self) -> std::shared_ptr< chrono::ChMaterialSurface > &"""
        return _fea.ChContactNodeXYZ_GetMaterialSurface(self)

    def GetPhysicsItem(self):
        r"""GetPhysicsItem(ChContactNodeXYZ self) -> ChPhysicsItem"""
        return _fea.ChContactNodeXYZ_GetPhysicsItem(self)
    __swig_destroy__ = _fea.delete_ChContactNodeXYZ

# Register ChContactNodeXYZ in _fea:
_fea.ChContactNodeXYZ_swigregister(ChContactNodeXYZ)

class ChContactNodeXYZsphere(ChContactNodeXYZ):
    r"""Proxy of C++ chrono::fea::ChContactNodeXYZsphere class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, anode=None, acontainer=None):
        r"""__init__(ChContactNodeXYZsphere self, ChNodeFEAxyz anode=None, ChContactSurface acontainer=None) -> ChContactNodeXYZsphere"""
        _fea.ChContactNodeXYZsphere_swiginit(self, _fea.new_ChContactNodeXYZsphere(anode, acontainer))
    __swig_destroy__ = _fea.delete_ChContactNodeXYZsphere

    def GetCollisionModel(self):
        r"""GetCollisionModel(ChContactNodeXYZsphere self) -> ChCollisionModel"""
        return _fea.ChContactNodeXYZsphere_GetCollisionModel(self)

# Register ChContactNodeXYZsphere in _fea:
_fea.ChContactNodeXYZsphere_swigregister(ChContactNodeXYZsphere)

class ChContactNodeXYZROT(object):
    r"""Proxy of C++ chrono::fea::ChContactNodeXYZROT class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, anode=None, acontainer=None):
        r"""__init__(ChContactNodeXYZROT self, ChNodeFEAxyzrot anode=None, ChContactSurface acontainer=None) -> ChContactNodeXYZROT"""
        _fea.ChContactNodeXYZROT_swiginit(self, _fea.new_ChContactNodeXYZROT(anode, acontainer))

    def GetNode(self):
        r"""GetNode(ChContactNodeXYZROT self) -> ChNodeFEAxyzrot"""
        return _fea.ChContactNodeXYZROT_GetNode(self)

    def SetNode(self, mn):
        r"""SetNode(ChContactNodeXYZROT self, ChNodeFEAxyzrot mn)"""
        return _fea.ChContactNodeXYZROT_SetNode(self, mn)

    def GetContactSurface(self, *args):
        r"""
        GetContactSurface(ChContactNodeXYZROT self) -> ChContactSurface
        GetContactSurface(ChContactNodeXYZROT self, ChContactSurface mc)
        """
        return _fea.ChContactNodeXYZROT_GetContactSurface(self, *args)

    def GetContactableType(self):
        r"""GetContactableType(ChContactNodeXYZROT self) -> chrono::ChContactable::eChContactableType"""
        return _fea.ChContactNodeXYZROT_GetContactableType(self)

    def GetVariables1(self):
        r"""GetVariables1(ChContactNodeXYZROT self) -> ChVariables *"""
        return _fea.ChContactNodeXYZROT_GetVariables1(self)

    def IsContactActive(self):
        r"""IsContactActive(ChContactNodeXYZROT self) -> bool"""
        return _fea.ChContactNodeXYZROT_IsContactActive(self)

    def ContactableGet_ndof_x(self):
        r"""ContactableGet_ndof_x(ChContactNodeXYZROT self) -> int"""
        return _fea.ChContactNodeXYZROT_ContactableGet_ndof_x(self)

    def ContactableGet_ndof_w(self):
        r"""ContactableGet_ndof_w(ChContactNodeXYZROT self) -> int"""
        return _fea.ChContactNodeXYZROT_ContactableGet_ndof_w(self)

    def ContactableGetStateBlock_x(self, x):
        r"""ContactableGetStateBlock_x(ChContactNodeXYZROT self, chrono::ChState & x)"""
        return _fea.ChContactNodeXYZROT_ContactableGetStateBlock_x(self, x)

    def ContactableGetStateBlock_w(self, w):
        r"""ContactableGetStateBlock_w(ChContactNodeXYZROT self, chrono::ChStateDelta & w)"""
        return _fea.ChContactNodeXYZROT_ContactableGetStateBlock_w(self, w)

    def ContactableIncrementState(self, x, dw, x_new):
        r"""ContactableIncrementState(ChContactNodeXYZROT self, chrono::ChState const & x, chrono::ChStateDelta const & dw, chrono::ChState & x_new)"""
        return _fea.ChContactNodeXYZROT_ContactableIncrementState(self, x, dw, x_new)

    def GetContactPoint(self, loc_point, state_x):
        r"""GetContactPoint(ChContactNodeXYZROT self, ChVectorD loc_point, chrono::ChState const & state_x) -> ChVectorD"""
        return _fea.ChContactNodeXYZROT_GetContactPoint(self, loc_point, state_x)

    def GetContactPointSpeed(self, *args):
        r"""
        GetContactPointSpeed(ChContactNodeXYZROT self, ChVectorD loc_point, chrono::ChState const & state_x, chrono::ChStateDelta const & state_w) -> ChVectorD
        GetContactPointSpeed(ChContactNodeXYZROT self, ChVectorD abs_point) -> ChVectorD
        """
        return _fea.ChContactNodeXYZROT_GetContactPointSpeed(self, *args)

    def GetCsysForCollisionModel(self):
        r"""GetCsysForCollisionModel(ChContactNodeXYZROT self) -> ChCoordsysD"""
        return _fea.ChContactNodeXYZROT_GetCsysForCollisionModel(self)

    def ContactForceLoadResidual_F(self, F, abs_point, R):
        r"""ContactForceLoadResidual_F(ChContactNodeXYZROT self, ChVectorD F, ChVectorD abs_point, ChVectorDynamicD R)"""
        return _fea.ChContactNodeXYZROT_ContactForceLoadResidual_F(self, F, abs_point, R)

    def ContactForceLoadQ(self, F, point, state_x, Q, offset):
        r"""ContactForceLoadQ(ChContactNodeXYZROT self, ChVectorD F, ChVectorD point, chrono::ChState const & state_x, ChVectorDynamicD Q, int offset)"""
        return _fea.ChContactNodeXYZROT_ContactForceLoadQ(self, F, point, state_x, Q, offset)

    def GetContactableMass(self):
        r"""GetContactableMass(ChContactNodeXYZROT self) -> double"""
        return _fea.ChContactNodeXYZROT_GetContactableMass(self)

    def GetMaterialSurface(self):
        r"""GetMaterialSurface(ChContactNodeXYZROT self) -> std::shared_ptr< chrono::ChMaterialSurface > &"""
        return _fea.ChContactNodeXYZROT_GetMaterialSurface(self)

    def GetPhysicsItem(self):
        r"""GetPhysicsItem(ChContactNodeXYZROT self) -> ChPhysicsItem"""
        return _fea.ChContactNodeXYZROT_GetPhysicsItem(self)
    __swig_destroy__ = _fea.delete_ChContactNodeXYZROT

# Register ChContactNodeXYZROT in _fea:
_fea.ChContactNodeXYZROT_swigregister(ChContactNodeXYZROT)

class ChContactNodeXYZROTsphere(ChContactNodeXYZROT):
    r"""Proxy of C++ chrono::fea::ChContactNodeXYZROTsphere class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, anode=None, acontainer=None):
        r"""__init__(ChContactNodeXYZROTsphere self, ChNodeFEAxyzrot anode=None, ChContactSurface acontainer=None) -> ChContactNodeXYZROTsphere"""
        _fea.ChContactNodeXYZROTsphere_swiginit(self, _fea.new_ChContactNodeXYZROTsphere(anode, acontainer))
    __swig_destroy__ = _fea.delete_ChContactNodeXYZROTsphere

    def GetCollisionModel(self):
        r"""GetCollisionModel(ChContactNodeXYZROTsphere self) -> ChCollisionModel"""
        return _fea.ChContactNodeXYZROTsphere_GetCollisionModel(self)

# Register ChContactNodeXYZROTsphere in _fea:
_fea.ChContactNodeXYZROTsphere_swigregister(ChContactNodeXYZROTsphere)

class ChContactSurfaceNodeCloud(ChContactSurface):
    r"""Proxy of C++ chrono::fea::ChContactSurfaceNodeCloud class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, parentmesh=None):
        r"""__init__(ChContactSurfaceNodeCloud self, ChMesh parentmesh=None) -> ChContactSurfaceNodeCloud"""
        _fea.ChContactSurfaceNodeCloud_swiginit(self, _fea.new_ChContactSurfaceNodeCloud(parentmesh))
    __swig_destroy__ = _fea.delete_ChContactSurfaceNodeCloud

    def AddNode(self, *args):
        r"""
        AddNode(ChContactSurfaceNodeCloud self, std::shared_ptr< chrono::fea::ChNodeFEAxyz > mnode, double const point_radius=0.001)
        AddNode(ChContactSurfaceNodeCloud self, std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > mnode, double const point_radius=0.001)
        """
        return _fea.ChContactSurfaceNodeCloud_AddNode(self, *args)

    def AddAllNodes(self, point_radius=0.001):
        r"""AddAllNodes(ChContactSurfaceNodeCloud self, double const point_radius=0.001)"""
        return _fea.ChContactSurfaceNodeCloud_AddAllNodes(self, point_radius)

    def AddFacesFromNodeSet(self, node_set, point_radius=0.001):
        r"""AddFacesFromNodeSet(ChContactSurfaceNodeCloud self, vector_ChNodeFEAbase node_set, double const point_radius=0.001)"""
        return _fea.ChContactSurfaceNodeCloud_AddFacesFromNodeSet(self, node_set, point_radius)

    def GetNnodes(self):
        r"""GetNnodes(ChContactSurfaceNodeCloud self) -> unsigned int"""
        return _fea.ChContactSurfaceNodeCloud_GetNnodes(self)

    def GetNnodesRot(self):
        r"""GetNnodesRot(ChContactSurfaceNodeCloud self) -> unsigned int"""
        return _fea.ChContactSurfaceNodeCloud_GetNnodesRot(self)

    def GetNode(self, n):
        r"""GetNode(ChContactSurfaceNodeCloud self, unsigned int n) -> std::shared_ptr< chrono::fea::ChContactNodeXYZsphere >"""
        return _fea.ChContactSurfaceNodeCloud_GetNode(self, n)

    def GetNodeRot(self, n):
        r"""GetNodeRot(ChContactSurfaceNodeCloud self, unsigned int n) -> std::shared_ptr< chrono::fea::ChContactNodeXYZROTsphere >"""
        return _fea.ChContactSurfaceNodeCloud_GetNodeRot(self, n)

    def SurfaceSyncCollisionModels(self):
        r"""SurfaceSyncCollisionModels(ChContactSurfaceNodeCloud self)"""
        return _fea.ChContactSurfaceNodeCloud_SurfaceSyncCollisionModels(self)

    def SurfaceAddCollisionModelsToSystem(self, msys):
        r"""SurfaceAddCollisionModelsToSystem(ChContactSurfaceNodeCloud self, chrono::ChSystem * msys)"""
        return _fea.ChContactSurfaceNodeCloud_SurfaceAddCollisionModelsToSystem(self, msys)

    def SurfaceRemoveCollisionModelsFromSystem(self, msys):
        r"""SurfaceRemoveCollisionModelsFromSystem(ChContactSurfaceNodeCloud self, chrono::ChSystem * msys)"""
        return _fea.ChContactSurfaceNodeCloud_SurfaceRemoveCollisionModelsFromSystem(self, msys)

# Register ChContactSurfaceNodeCloud in _fea:
_fea.ChContactSurfaceNodeCloud_swigregister(ChContactSurfaceNodeCloud)

class vector_ChNodeFEAbase(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_ChNodeFEAbase self) -> SwigPyIterator"""
        return _fea.vector_ChNodeFEAbase_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_ChNodeFEAbase self) -> bool"""
        return _fea.vector_ChNodeFEAbase___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_ChNodeFEAbase self) -> bool"""
        return _fea.vector_ChNodeFEAbase___bool__(self)

    def __len__(self):
        r"""__len__(vector_ChNodeFEAbase self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::size_type"""
        return _fea.vector_ChNodeFEAbase___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_ChNodeFEAbase self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::difference_type j) -> vector_ChNodeFEAbase"""
        return _fea.vector_ChNodeFEAbase___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_ChNodeFEAbase self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::difference_type j)
        __setslice__(vector_ChNodeFEAbase self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::difference_type j, vector_ChNodeFEAbase v)
        """
        return _fea.vector_ChNodeFEAbase___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_ChNodeFEAbase self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::difference_type j)"""
        return _fea.vector_ChNodeFEAbase___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_ChNodeFEAbase self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::difference_type i)
        __delitem__(vector_ChNodeFEAbase self, PySliceObject * slice)
        """
        return _fea.vector_ChNodeFEAbase___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_ChNodeFEAbase self, PySliceObject * slice) -> vector_ChNodeFEAbase
        __getitem__(vector_ChNodeFEAbase self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::difference_type i) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::value_type const &
        """
        return _fea.vector_ChNodeFEAbase___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_ChNodeFEAbase self, PySliceObject * slice, vector_ChNodeFEAbase v)
        __setitem__(vector_ChNodeFEAbase self, PySliceObject * slice)
        __setitem__(vector_ChNodeFEAbase self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::value_type const & x)
        """
        return _fea.vector_ChNodeFEAbase___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_ChNodeFEAbase self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::value_type"""
        return _fea.vector_ChNodeFEAbase_pop(self)

    def append(self, x):
        r"""append(vector_ChNodeFEAbase self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::value_type const & x)"""
        return _fea.vector_ChNodeFEAbase_append(self, x)

    def empty(self):
        r"""empty(vector_ChNodeFEAbase self) -> bool"""
        return _fea.vector_ChNodeFEAbase_empty(self)

    def size(self):
        r"""size(vector_ChNodeFEAbase self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::size_type"""
        return _fea.vector_ChNodeFEAbase_size(self)

    def swap(self, v):
        r"""swap(vector_ChNodeFEAbase self, vector_ChNodeFEAbase v)"""
        return _fea.vector_ChNodeFEAbase_swap(self, v)

    def begin(self):
        r"""begin(vector_ChNodeFEAbase self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::iterator"""
        return _fea.vector_ChNodeFEAbase_begin(self)

    def end(self):
        r"""end(vector_ChNodeFEAbase self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::iterator"""
        return _fea.vector_ChNodeFEAbase_end(self)

    def rbegin(self):
        r"""rbegin(vector_ChNodeFEAbase self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::reverse_iterator"""
        return _fea.vector_ChNodeFEAbase_rbegin(self)

    def rend(self):
        r"""rend(vector_ChNodeFEAbase self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::reverse_iterator"""
        return _fea.vector_ChNodeFEAbase_rend(self)

    def clear(self):
        r"""clear(vector_ChNodeFEAbase self)"""
        return _fea.vector_ChNodeFEAbase_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_ChNodeFEAbase self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::allocator_type"""
        return _fea.vector_ChNodeFEAbase_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_ChNodeFEAbase self)"""
        return _fea.vector_ChNodeFEAbase_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_ChNodeFEAbase self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::iterator pos) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::iterator
        erase(vector_ChNodeFEAbase self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::iterator first, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::iterator last) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::iterator
        """
        return _fea.vector_ChNodeFEAbase_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_ChNodeFEAbase self) -> vector_ChNodeFEAbase
        __init__(vector_ChNodeFEAbase self, vector_ChNodeFEAbase other) -> vector_ChNodeFEAbase
        __init__(vector_ChNodeFEAbase self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::size_type size) -> vector_ChNodeFEAbase
        __init__(vector_ChNodeFEAbase self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::size_type size, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::value_type const & value) -> vector_ChNodeFEAbase
        """
        _fea.vector_ChNodeFEAbase_swiginit(self, _fea.new_vector_ChNodeFEAbase(*args))

    def push_back(self, x):
        r"""push_back(vector_ChNodeFEAbase self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::value_type const & x)"""
        return _fea.vector_ChNodeFEAbase_push_back(self, x)

    def front(self):
        r"""front(vector_ChNodeFEAbase self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::value_type const &"""
        return _fea.vector_ChNodeFEAbase_front(self)

    def back(self):
        r"""back(vector_ChNodeFEAbase self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::value_type const &"""
        return _fea.vector_ChNodeFEAbase_back(self)

    def assign(self, n, x):
        r"""assign(vector_ChNodeFEAbase self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::size_type n, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::value_type const & x)"""
        return _fea.vector_ChNodeFEAbase_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_ChNodeFEAbase self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::size_type new_size)
        resize(vector_ChNodeFEAbase self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::size_type new_size, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::value_type const & x)
        """
        return _fea.vector_ChNodeFEAbase_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_ChNodeFEAbase self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::iterator pos, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::value_type const & x) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::iterator
        insert(vector_ChNodeFEAbase self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::iterator pos, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::size_type n, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::value_type const & x)
        """
        return _fea.vector_ChNodeFEAbase_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_ChNodeFEAbase self, std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::size_type n)"""
        return _fea.vector_ChNodeFEAbase_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_ChNodeFEAbase self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase > >::size_type"""
        return _fea.vector_ChNodeFEAbase_capacity(self)
    __swig_destroy__ = _fea.delete_vector_ChNodeFEAbase

# Register vector_ChNodeFEAbase in _fea:
_fea.vector_ChNodeFEAbase_swigregister(vector_ChNodeFEAbase)

class vector_ChElementBase(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< chrono::fea::ChElementBase > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_ChElementBase self) -> SwigPyIterator"""
        return _fea.vector_ChElementBase_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_ChElementBase self) -> bool"""
        return _fea.vector_ChElementBase___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_ChElementBase self) -> bool"""
        return _fea.vector_ChElementBase___bool__(self)

    def __len__(self):
        r"""__len__(vector_ChElementBase self) -> std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::size_type"""
        return _fea.vector_ChElementBase___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_ChElementBase self, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::difference_type j) -> vector_ChElementBase"""
        return _fea.vector_ChElementBase___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_ChElementBase self, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::difference_type j)
        __setslice__(vector_ChElementBase self, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::difference_type j, vector_ChElementBase v)
        """
        return _fea.vector_ChElementBase___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_ChElementBase self, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::difference_type j)"""
        return _fea.vector_ChElementBase___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_ChElementBase self, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::difference_type i)
        __delitem__(vector_ChElementBase self, PySliceObject * slice)
        """
        return _fea.vector_ChElementBase___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_ChElementBase self, PySliceObject * slice) -> vector_ChElementBase
        __getitem__(vector_ChElementBase self, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::difference_type i) -> std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::value_type const &
        """
        return _fea.vector_ChElementBase___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_ChElementBase self, PySliceObject * slice, vector_ChElementBase v)
        __setitem__(vector_ChElementBase self, PySliceObject * slice)
        __setitem__(vector_ChElementBase self, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::value_type const & x)
        """
        return _fea.vector_ChElementBase___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_ChElementBase self) -> std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::value_type"""
        return _fea.vector_ChElementBase_pop(self)

    def append(self, x):
        r"""append(vector_ChElementBase self, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::value_type const & x)"""
        return _fea.vector_ChElementBase_append(self, x)

    def empty(self):
        r"""empty(vector_ChElementBase self) -> bool"""
        return _fea.vector_ChElementBase_empty(self)

    def size(self):
        r"""size(vector_ChElementBase self) -> std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::size_type"""
        return _fea.vector_ChElementBase_size(self)

    def swap(self, v):
        r"""swap(vector_ChElementBase self, vector_ChElementBase v)"""
        return _fea.vector_ChElementBase_swap(self, v)

    def begin(self):
        r"""begin(vector_ChElementBase self) -> std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::iterator"""
        return _fea.vector_ChElementBase_begin(self)

    def end(self):
        r"""end(vector_ChElementBase self) -> std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::iterator"""
        return _fea.vector_ChElementBase_end(self)

    def rbegin(self):
        r"""rbegin(vector_ChElementBase self) -> std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::reverse_iterator"""
        return _fea.vector_ChElementBase_rbegin(self)

    def rend(self):
        r"""rend(vector_ChElementBase self) -> std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::reverse_iterator"""
        return _fea.vector_ChElementBase_rend(self)

    def clear(self):
        r"""clear(vector_ChElementBase self)"""
        return _fea.vector_ChElementBase_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_ChElementBase self) -> std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::allocator_type"""
        return _fea.vector_ChElementBase_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_ChElementBase self)"""
        return _fea.vector_ChElementBase_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_ChElementBase self, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::iterator pos) -> std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::iterator
        erase(vector_ChElementBase self, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::iterator first, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::iterator last) -> std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::iterator
        """
        return _fea.vector_ChElementBase_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_ChElementBase self) -> vector_ChElementBase
        __init__(vector_ChElementBase self, vector_ChElementBase other) -> vector_ChElementBase
        __init__(vector_ChElementBase self, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::size_type size) -> vector_ChElementBase
        __init__(vector_ChElementBase self, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::size_type size, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::value_type const & value) -> vector_ChElementBase
        """
        _fea.vector_ChElementBase_swiginit(self, _fea.new_vector_ChElementBase(*args))

    def push_back(self, x):
        r"""push_back(vector_ChElementBase self, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::value_type const & x)"""
        return _fea.vector_ChElementBase_push_back(self, x)

    def front(self):
        r"""front(vector_ChElementBase self) -> std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::value_type const &"""
        return _fea.vector_ChElementBase_front(self)

    def back(self):
        r"""back(vector_ChElementBase self) -> std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::value_type const &"""
        return _fea.vector_ChElementBase_back(self)

    def assign(self, n, x):
        r"""assign(vector_ChElementBase self, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::size_type n, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::value_type const & x)"""
        return _fea.vector_ChElementBase_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_ChElementBase self, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::size_type new_size)
        resize(vector_ChElementBase self, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::size_type new_size, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::value_type const & x)
        """
        return _fea.vector_ChElementBase_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_ChElementBase self, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::iterator pos, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::value_type const & x) -> std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::iterator
        insert(vector_ChElementBase self, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::iterator pos, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::size_type n, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::value_type const & x)
        """
        return _fea.vector_ChElementBase_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_ChElementBase self, std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::size_type n)"""
        return _fea.vector_ChElementBase_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_ChElementBase self) -> std::vector< std::shared_ptr< chrono::fea::ChElementBase > >::size_type"""
        return _fea.vector_ChElementBase_capacity(self)
    __swig_destroy__ = _fea.delete_vector_ChElementBase

# Register vector_ChElementBase in _fea:
_fea.vector_ChElementBase_swigregister(vector_ChElementBase)

class ChMesh(pychrono.core.ChIndexedNodes):
    r"""Proxy of C++ chrono::fea::ChMesh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChMesh self) -> ChMesh
        __init__(ChMesh self, ChMesh other) -> ChMesh
        """
        _fea.ChMesh_swiginit(self, _fea.new_ChMesh(*args))
    __swig_destroy__ = _fea.delete_ChMesh

    def Clone(self):
        r"""Clone(ChMesh self) -> ChMesh"""
        return _fea.ChMesh_Clone(self)

    def AddNode(self, m_node):
        r"""AddNode(ChMesh self, std::shared_ptr< chrono::fea::ChNodeFEAbase > m_node)"""
        return _fea.ChMesh_AddNode(self, m_node)

    def AddElement(self, m_elem):
        r"""AddElement(ChMesh self, std::shared_ptr< chrono::fea::ChElementBase > m_elem)"""
        return _fea.ChMesh_AddElement(self, m_elem)

    def ClearNodes(self):
        r"""ClearNodes(ChMesh self)"""
        return _fea.ChMesh_ClearNodes(self)

    def ClearElements(self):
        r"""ClearElements(ChMesh self)"""
        return _fea.ChMesh_ClearElements(self)

    def GetNodes(self):
        r"""GetNodes(ChMesh self) -> vector_ChNodeFEAbase"""
        return _fea.ChMesh_GetNodes(self)

    def GetElements(self):
        r"""GetElements(ChMesh self) -> vector_ChElementBase"""
        return _fea.ChMesh_GetElements(self)

    def GetNode(self, n):
        r"""GetNode(ChMesh self, unsigned int n) -> std::shared_ptr< chrono::ChNodeBase >"""
        return _fea.ChMesh_GetNode(self, n)

    def GetElement(self, n):
        r"""GetElement(ChMesh self, unsigned int n) -> std::shared_ptr< chrono::fea::ChElementBase >"""
        return _fea.ChMesh_GetElement(self, n)

    def GetNnodes(self):
        r"""GetNnodes(ChMesh self) -> unsigned int"""
        return _fea.ChMesh_GetNnodes(self)

    def GetNelements(self):
        r"""GetNelements(ChMesh self) -> unsigned int"""
        return _fea.ChMesh_GetNelements(self)

    def GetDOF(self):
        r"""GetDOF(ChMesh self) -> int"""
        return _fea.ChMesh_GetDOF(self)

    def GetDOF_w(self):
        r"""GetDOF_w(ChMesh self) -> int"""
        return _fea.ChMesh_GetDOF_w(self)

    def GetCollide(self):
        r"""GetCollide(ChMesh self) -> bool"""
        return _fea.ChMesh_GetCollide(self)

    def ResetCounters(self):
        r"""ResetCounters(ChMesh self)"""
        return _fea.ChMesh_ResetCounters(self)

    def GetNumCallsInternalForces(self):
        r"""GetNumCallsInternalForces(ChMesh self) -> int"""
        return _fea.ChMesh_GetNumCallsInternalForces(self)

    def GetNumCallsJacobianLoad(self):
        r"""GetNumCallsJacobianLoad(ChMesh self) -> int"""
        return _fea.ChMesh_GetNumCallsJacobianLoad(self)

    def ResetTimers(self):
        r"""ResetTimers(ChMesh self)"""
        return _fea.ChMesh_ResetTimers(self)

    def GetTimeInternalForces(self):
        r"""GetTimeInternalForces(ChMesh self) -> double"""
        return _fea.ChMesh_GetTimeInternalForces(self)

    def GetTimeJacobianLoad(self):
        r"""GetTimeJacobianLoad(ChMesh self) -> double"""
        return _fea.ChMesh_GetTimeJacobianLoad(self)

    def AddContactSurface(self, m_surf):
        r"""AddContactSurface(ChMesh self, std::shared_ptr< chrono::fea::ChContactSurface > m_surf)"""
        return _fea.ChMesh_AddContactSurface(self, m_surf)

    def GetContactSurface(self, n):
        r"""GetContactSurface(ChMesh self, unsigned int n) -> std::shared_ptr< chrono::fea::ChContactSurface >"""
        return _fea.ChMesh_GetContactSurface(self, n)

    def GetNcontactSurfaces(self):
        r"""GetNcontactSurfaces(ChMesh self) -> unsigned int"""
        return _fea.ChMesh_GetNcontactSurfaces(self)

    def ClearContactSurfaces(self):
        r"""ClearContactSurfaces(ChMesh self)"""
        return _fea.ChMesh_ClearContactSurfaces(self)

    def AddMeshSurface(self, m_surf):
        r"""AddMeshSurface(ChMesh self, std::shared_ptr< ChMeshSurface > m_surf)"""
        return _fea.ChMesh_AddMeshSurface(self, m_surf)

    def GetMeshSurface(self, n):
        r"""GetMeshSurface(ChMesh self, unsigned int n) -> std::shared_ptr< ChMeshSurface >"""
        return _fea.ChMesh_GetMeshSurface(self, n)

    def GetNmeshSurfaces(self):
        r"""GetNmeshSurfaces(ChMesh self) -> unsigned int"""
        return _fea.ChMesh_GetNmeshSurfaces(self)

    def ClearMeshSurfaces(self):
        r"""ClearMeshSurfaces(ChMesh self)"""
        return _fea.ChMesh_ClearMeshSurfaces(self)

    def Relax(self):
        r"""Relax(ChMesh self)"""
        return _fea.ChMesh_Relax(self)

    def SetNoSpeedNoAcceleration(self):
        r"""SetNoSpeedNoAcceleration(ChMesh self)"""
        return _fea.ChMesh_SetNoSpeedNoAcceleration(self)

    def Setup(self):
        r"""Setup(ChMesh self)"""
        return _fea.ChMesh_Setup(self)

    def Update(self, m_time, update_assets=True):
        r"""Update(ChMesh self, double m_time, bool update_assets=True)"""
        return _fea.ChMesh_Update(self, m_time, update_assets)

    def SyncCollisionModels(self):
        r"""SyncCollisionModels(ChMesh self)"""
        return _fea.ChMesh_SyncCollisionModels(self)

    def AddCollisionModelsToSystem(self):
        r"""AddCollisionModelsToSystem(ChMesh self)"""
        return _fea.ChMesh_AddCollisionModelsToSystem(self)

    def RemoveCollisionModelsFromSystem(self):
        r"""RemoveCollisionModelsFromSystem(ChMesh self)"""
        return _fea.ChMesh_RemoveCollisionModelsFromSystem(self)

    def SetAutomaticGravity(self, mg, num_points=1):
        r"""SetAutomaticGravity(ChMesh self, bool mg, int num_points=1)"""
        return _fea.ChMesh_SetAutomaticGravity(self, mg, num_points)

    def GetAutomaticGravity(self):
        r"""GetAutomaticGravity(ChMesh self) -> bool"""
        return _fea.ChMesh_GetAutomaticGravity(self)

    def ComputeMassProperties(self, mass, com, inertia):
        r"""ComputeMassProperties(ChMesh self, double & mass, ChVectorD com, ChMatrix33D inertia)"""
        return _fea.ChMesh_ComputeMassProperties(self, mass, com, inertia)

    def IntStateGather(self, off_x, x, off_v, v, T):
        r"""IntStateGather(ChMesh self, unsigned int const off_x, chrono::ChState & x, unsigned int const off_v, chrono::ChStateDelta & v, double & T)"""
        return _fea.ChMesh_IntStateGather(self, off_x, x, off_v, v, T)

    def IntStateScatter(self, off_x, x, off_v, v, T):
        r"""IntStateScatter(ChMesh self, unsigned int const off_x, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & v, double const T)"""
        return _fea.ChMesh_IntStateScatter(self, off_x, x, off_v, v, T)

    def IntStateGatherAcceleration(self, off_a, a):
        r"""IntStateGatherAcceleration(ChMesh self, unsigned int const off_a, chrono::ChStateDelta & a)"""
        return _fea.ChMesh_IntStateGatherAcceleration(self, off_a, a)

    def IntStateScatterAcceleration(self, off_a, a):
        r"""IntStateScatterAcceleration(ChMesh self, unsigned int const off_a, chrono::ChStateDelta const & a)"""
        return _fea.ChMesh_IntStateScatterAcceleration(self, off_a, a)

    def IntStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""IntStateIncrement(ChMesh self, unsigned int const off_x, chrono::ChState & x_new, chrono::ChState const & x, unsigned int const off_v, chrono::ChStateDelta const & Dv)"""
        return _fea.ChMesh_IntStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def IntLoadResidual_F(self, off, R, c):
        r"""IntLoadResidual_F(ChMesh self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _fea.ChMesh_IntLoadResidual_F(self, off, R, c)

    def IntLoadResidual_Mv(self, off, R, w, c):
        r"""IntLoadResidual_Mv(ChMesh self, unsigned int const off, ChVectorDynamicD R, ChVectorDynamicD w, double const c)"""
        return _fea.ChMesh_IntLoadResidual_Mv(self, off, R, w, c)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChMesh self, unsigned int const off_v, chrono::ChStateDelta const & v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _fea.ChMesh_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChMesh self, unsigned int const off_v, chrono::ChStateDelta & v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _fea.ChMesh_IntFromDescriptor(self, off_v, v, off_L, L)

    def InjectKRMmatrices(self, mdescriptor):
        r"""InjectKRMmatrices(ChMesh self, ChSystemDescriptor & mdescriptor)"""
        return _fea.ChMesh_InjectKRMmatrices(self, mdescriptor)

    def KRMmatricesLoad(self, Kfactor, Rfactor, Mfactor):
        r"""KRMmatricesLoad(ChMesh self, double Kfactor, double Rfactor, double Mfactor)"""
        return _fea.ChMesh_KRMmatricesLoad(self, Kfactor, Rfactor, Mfactor)

    def VariablesFbReset(self):
        r"""VariablesFbReset(ChMesh self)"""
        return _fea.ChMesh_VariablesFbReset(self)

    def VariablesFbLoadForces(self, factor=1):
        r"""VariablesFbLoadForces(ChMesh self, double factor=1)"""
        return _fea.ChMesh_VariablesFbLoadForces(self, factor)

    def VariablesQbLoadSpeed(self):
        r"""VariablesQbLoadSpeed(ChMesh self)"""
        return _fea.ChMesh_VariablesQbLoadSpeed(self)

    def VariablesFbIncrementMq(self):
        r"""VariablesFbIncrementMq(ChMesh self)"""
        return _fea.ChMesh_VariablesFbIncrementMq(self)

    def VariablesQbSetSpeed(self, step=0):
        r"""VariablesQbSetSpeed(ChMesh self, double step=0)"""
        return _fea.ChMesh_VariablesQbSetSpeed(self, step)

    def VariablesQbIncrementPosition(self, step):
        r"""VariablesQbIncrementPosition(ChMesh self, double step)"""
        return _fea.ChMesh_VariablesQbIncrementPosition(self, step)

    def InjectVariables(self, mdescriptor):
        r"""InjectVariables(ChMesh self, ChSystemDescriptor & mdescriptor)"""
        return _fea.ChMesh_InjectVariables(self, mdescriptor)

# Register ChMesh in _fea:
_fea.ChMesh_swigregister(ChMesh)

class ChMeshSurface(object):
    r"""Proxy of C++ chrono::fea::ChMeshSurface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, parentmesh=None):
        r"""__init__(ChMeshSurface self, ChMesh parentmesh=None) -> ChMeshSurface"""
        _fea.ChMeshSurface_swiginit(self, _fea.new_ChMeshSurface(parentmesh))
    __swig_destroy__ = _fea.delete_ChMeshSurface

    def GetMesh(self):
        r"""GetMesh(ChMeshSurface self) -> ChMesh"""
        return _fea.ChMeshSurface_GetMesh(self)

    def SetMesh(self, mm):
        r"""SetMesh(ChMeshSurface self, ChMesh mm)"""
        return _fea.ChMeshSurface_SetMesh(self, mm)

    def GetFacesList(self):
        r"""GetFacesList(ChMeshSurface self) -> std::vector< std::shared_ptr< chrono::ChLoadableUV >,std::allocator< std::shared_ptr< chrono::ChLoadableUV > > > &"""
        return _fea.ChMeshSurface_GetFacesList(self)

    def AddFace(self, mface):
        r"""AddFace(ChMeshSurface self, std::shared_ptr< chrono::ChLoadableUV > mface)"""
        return _fea.ChMeshSurface_AddFace(self, mface)

    def AddFacesFromNodeSet(self, node_set):
        r"""AddFacesFromNodeSet(ChMeshSurface self, vector_ChNodeFEAbase node_set)"""
        return _fea.ChMeshSurface_AddFacesFromNodeSet(self, node_set)

    def AddFacesFromBoundary(self):
        r"""AddFacesFromBoundary(ChMeshSurface self)"""
        return _fea.ChMeshSurface_AddFacesFromBoundary(self)

# Register ChMeshSurface in _fea:
_fea.ChMeshSurface_swigregister(ChMeshSurface)

class ChVisualizationFEAmesh(pychrono.core.ChAssetLevel):
    r"""Proxy of C++ chrono::fea::ChVisualizationFEAmesh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    E_PLOT_NONE = _fea.ChVisualizationFEAmesh_E_PLOT_NONE
    
    E_PLOT_SURFACE = _fea.ChVisualizationFEAmesh_E_PLOT_SURFACE
    
    E_PLOT_CONTACTSURFACES = _fea.ChVisualizationFEAmesh_E_PLOT_CONTACTSURFACES
    
    E_PLOT_LOADSURFACES = _fea.ChVisualizationFEAmesh_E_PLOT_LOADSURFACES
    
    E_PLOT_NODE_DISP_NORM = _fea.ChVisualizationFEAmesh_E_PLOT_NODE_DISP_NORM
    
    E_PLOT_NODE_DISP_X = _fea.ChVisualizationFEAmesh_E_PLOT_NODE_DISP_X
    
    E_PLOT_NODE_DISP_Y = _fea.ChVisualizationFEAmesh_E_PLOT_NODE_DISP_Y
    
    E_PLOT_NODE_DISP_Z = _fea.ChVisualizationFEAmesh_E_PLOT_NODE_DISP_Z
    
    E_PLOT_NODE_SPEED_NORM = _fea.ChVisualizationFEAmesh_E_PLOT_NODE_SPEED_NORM
    
    E_PLOT_NODE_SPEED_X = _fea.ChVisualizationFEAmesh_E_PLOT_NODE_SPEED_X
    
    E_PLOT_NODE_SPEED_Y = _fea.ChVisualizationFEAmesh_E_PLOT_NODE_SPEED_Y
    
    E_PLOT_NODE_SPEED_Z = _fea.ChVisualizationFEAmesh_E_PLOT_NODE_SPEED_Z
    
    E_PLOT_NODE_ACCEL_NORM = _fea.ChVisualizationFEAmesh_E_PLOT_NODE_ACCEL_NORM
    
    E_PLOT_NODE_ACCEL_X = _fea.ChVisualizationFEAmesh_E_PLOT_NODE_ACCEL_X
    
    E_PLOT_NODE_ACCEL_Y = _fea.ChVisualizationFEAmesh_E_PLOT_NODE_ACCEL_Y
    
    E_PLOT_NODE_ACCEL_Z = _fea.ChVisualizationFEAmesh_E_PLOT_NODE_ACCEL_Z
    
    E_PLOT_ELEM_STRAIN_VONMISES = _fea.ChVisualizationFEAmesh_E_PLOT_ELEM_STRAIN_VONMISES
    
    E_PLOT_ELEM_STRESS_VONMISES = _fea.ChVisualizationFEAmesh_E_PLOT_ELEM_STRESS_VONMISES
    
    E_PLOT_ELEM_STRAIN_HYDROSTATIC = _fea.ChVisualizationFEAmesh_E_PLOT_ELEM_STRAIN_HYDROSTATIC
    
    E_PLOT_ELEM_STRESS_HYDROSTATIC = _fea.ChVisualizationFEAmesh_E_PLOT_ELEM_STRESS_HYDROSTATIC
    
    E_PLOT_ELEM_BEAM_MX = _fea.ChVisualizationFEAmesh_E_PLOT_ELEM_BEAM_MX
    
    E_PLOT_ELEM_BEAM_MY = _fea.ChVisualizationFEAmesh_E_PLOT_ELEM_BEAM_MY
    
    E_PLOT_ELEM_BEAM_MZ = _fea.ChVisualizationFEAmesh_E_PLOT_ELEM_BEAM_MZ
    
    E_PLOT_ELEM_BEAM_TX = _fea.ChVisualizationFEAmesh_E_PLOT_ELEM_BEAM_TX
    
    E_PLOT_ELEM_BEAM_TY = _fea.ChVisualizationFEAmesh_E_PLOT_ELEM_BEAM_TY
    
    E_PLOT_ELEM_BEAM_TZ = _fea.ChVisualizationFEAmesh_E_PLOT_ELEM_BEAM_TZ
    
    E_PLOT_NODE_P = _fea.ChVisualizationFEAmesh_E_PLOT_NODE_P
    
    E_PLOT_ANCF_BEAM_AX = _fea.ChVisualizationFEAmesh_E_PLOT_ANCF_BEAM_AX
    
    E_PLOT_ANCF_BEAM_BD = _fea.ChVisualizationFEAmesh_E_PLOT_ANCF_BEAM_BD
    
    E_GLYPH_NONE = _fea.ChVisualizationFEAmesh_E_GLYPH_NONE
    
    E_GLYPH_NODE_DOT_POS = _fea.ChVisualizationFEAmesh_E_GLYPH_NODE_DOT_POS
    
    E_GLYPH_NODE_CSYS = _fea.ChVisualizationFEAmesh_E_GLYPH_NODE_CSYS
    
    E_GLYPH_NODE_VECT_SPEED = _fea.ChVisualizationFEAmesh_E_GLYPH_NODE_VECT_SPEED
    
    E_GLYPH_NODE_VECT_ACCEL = _fea.ChVisualizationFEAmesh_E_GLYPH_NODE_VECT_ACCEL
    
    E_GLYPH_ELEM_TENS_STRAIN = _fea.ChVisualizationFEAmesh_E_GLYPH_ELEM_TENS_STRAIN
    
    E_GLYPH_ELEM_TENS_STRESS = _fea.ChVisualizationFEAmesh_E_GLYPH_ELEM_TENS_STRESS
    
    E_GLYPH_ELEM_VECT_DP = _fea.ChVisualizationFEAmesh_E_GLYPH_ELEM_VECT_DP
    

    def __init__(self, mymesh):
        r"""__init__(ChVisualizationFEAmesh self, ChMesh mymesh) -> ChVisualizationFEAmesh"""
        _fea.ChVisualizationFEAmesh_swiginit(self, _fea.new_ChVisualizationFEAmesh(mymesh))
    __swig_destroy__ = _fea.delete_ChVisualizationFEAmesh

    def GetMesh(self):
        r"""GetMesh(ChVisualizationFEAmesh self) -> ChMesh"""
        return _fea.ChVisualizationFEAmesh_GetMesh(self)

    def GetFEMdataType(self):
        r"""GetFEMdataType(ChVisualizationFEAmesh self) -> chrono::fea::ChVisualizationFEAmesh::eChFemDataType"""
        return _fea.ChVisualizationFEAmesh_GetFEMdataType(self)

    def SetFEMdataType(self, mdata):
        r"""SetFEMdataType(ChVisualizationFEAmesh self, chrono::fea::ChVisualizationFEAmesh::eChFemDataType mdata)"""
        return _fea.ChVisualizationFEAmesh_SetFEMdataType(self, mdata)

    def GetFEMglyphType(self):
        r"""GetFEMglyphType(ChVisualizationFEAmesh self) -> chrono::fea::ChVisualizationFEAmesh::eChFemGlyphs"""
        return _fea.ChVisualizationFEAmesh_GetFEMglyphType(self)

    def SetFEMglyphType(self, mdata):
        r"""SetFEMglyphType(ChVisualizationFEAmesh self, chrono::fea::ChVisualizationFEAmesh::eChFemGlyphs mdata)"""
        return _fea.ChVisualizationFEAmesh_SetFEMglyphType(self, mdata)

    def SetColorscaleMinMax(self, mmin, mmax):
        r"""SetColorscaleMinMax(ChVisualizationFEAmesh self, double mmin, double mmax)"""
        return _fea.ChVisualizationFEAmesh_SetColorscaleMinMax(self, mmin, mmax)

    def SetSymbolsScale(self, mscale):
        r"""SetSymbolsScale(ChVisualizationFEAmesh self, double mscale)"""
        return _fea.ChVisualizationFEAmesh_SetSymbolsScale(self, mscale)

    def GetSymbolsScale(self):
        r"""GetSymbolsScale(ChVisualizationFEAmesh self) -> double"""
        return _fea.ChVisualizationFEAmesh_GetSymbolsScale(self)

    def SetSymbolsThickness(self, mthick):
        r"""SetSymbolsThickness(ChVisualizationFEAmesh self, double mthick)"""
        return _fea.ChVisualizationFEAmesh_SetSymbolsThickness(self, mthick)

    def GetSymbolsThickness(self):
        r"""GetSymbolsThickness(ChVisualizationFEAmesh self) -> double"""
        return _fea.ChVisualizationFEAmesh_GetSymbolsThickness(self)

    def SetBeamResolution(self, mres):
        r"""SetBeamResolution(ChVisualizationFEAmesh self, int mres)"""
        return _fea.ChVisualizationFEAmesh_SetBeamResolution(self, mres)

    def GetBeamResolution(self):
        r"""GetBeamResolution(ChVisualizationFEAmesh self) -> int"""
        return _fea.ChVisualizationFEAmesh_GetBeamResolution(self)

    def SetBeamResolutionSection(self, mres):
        r"""SetBeamResolutionSection(ChVisualizationFEAmesh self, int mres)"""
        return _fea.ChVisualizationFEAmesh_SetBeamResolutionSection(self, mres)

    def GetBeamResolutionSection(self):
        r"""GetBeamResolutionSection(ChVisualizationFEAmesh self) -> int"""
        return _fea.ChVisualizationFEAmesh_GetBeamResolutionSection(self)

    def SetShellResolution(self, mres):
        r"""SetShellResolution(ChVisualizationFEAmesh self, int mres)"""
        return _fea.ChVisualizationFEAmesh_SetShellResolution(self, mres)

    def GetShellResolution(self):
        r"""GetShellResolution(ChVisualizationFEAmesh self) -> int"""
        return _fea.ChVisualizationFEAmesh_GetShellResolution(self)

    def SetShrinkElements(self, mshrink, mfact):
        r"""SetShrinkElements(ChVisualizationFEAmesh self, bool mshrink, double mfact)"""
        return _fea.ChVisualizationFEAmesh_SetShrinkElements(self, mshrink, mfact)

    def SetWireframe(self, mwireframe):
        r"""SetWireframe(ChVisualizationFEAmesh self, bool mwireframe)"""
        return _fea.ChVisualizationFEAmesh_SetWireframe(self, mwireframe)

    def SetBackfaceCull(self, mbc):
        r"""SetBackfaceCull(ChVisualizationFEAmesh self, bool mbc)"""
        return _fea.ChVisualizationFEAmesh_SetBackfaceCull(self, mbc)

    def SetZbufferHide(self, mhide):
        r"""SetZbufferHide(ChVisualizationFEAmesh self, bool mhide)"""
        return _fea.ChVisualizationFEAmesh_SetZbufferHide(self, mhide)

    def SetDefaultMeshColor(self, mcolor):
        r"""SetDefaultMeshColor(ChVisualizationFEAmesh self, ChColor mcolor)"""
        return _fea.ChVisualizationFEAmesh_SetDefaultMeshColor(self, mcolor)

    def SetDefaultSymbolsColor(self, mcolor):
        r"""SetDefaultSymbolsColor(ChVisualizationFEAmesh self, ChColor mcolor)"""
        return _fea.ChVisualizationFEAmesh_SetDefaultSymbolsColor(self, mcolor)

    def SetSmoothFaces(self, msmooth):
        r"""SetSmoothFaces(ChVisualizationFEAmesh self, bool msmooth)"""
        return _fea.ChVisualizationFEAmesh_SetSmoothFaces(self, msmooth)

    def SetDrawInUndeformedReference(self, mdu):
        r"""SetDrawInUndeformedReference(ChVisualizationFEAmesh self, bool mdu)"""
        return _fea.ChVisualizationFEAmesh_SetDrawInUndeformedReference(self, mdu)

    def Update(self, updater, coords):
        r"""Update(ChVisualizationFEAmesh self, ChPhysicsItem updater, ChCoordsysD coords)"""
        return _fea.ChVisualizationFEAmesh_Update(self, updater, coords)

# Register ChVisualizationFEAmesh in _fea:
_fea.ChVisualizationFEAmesh_swigregister(ChVisualizationFEAmesh)

class ChLinkDirFrame(pychrono.core.ChLinkBase):
    r"""Proxy of C++ chrono::fea::ChLinkDirFrame class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkDirFrame self) -> ChLinkDirFrame
        __init__(ChLinkDirFrame self, ChLinkDirFrame other) -> ChLinkDirFrame
        """
        _fea.ChLinkDirFrame_swiginit(self, _fea.new_ChLinkDirFrame(*args))
    __swig_destroy__ = _fea.delete_ChLinkDirFrame

    def Clone(self):
        r"""Clone(ChLinkDirFrame self) -> ChLinkDirFrame"""
        return _fea.ChLinkDirFrame_Clone(self)

    def GetNumCoords(self):
        r"""GetNumCoords(ChLinkDirFrame self) -> int"""
        return _fea.ChLinkDirFrame_GetNumCoords(self)

    def GetDOC_c(self):
        r"""GetDOC_c(ChLinkDirFrame self) -> int"""
        return _fea.ChLinkDirFrame_GetDOC_c(self)

    def Get_react_torque(self):
        r"""Get_react_torque(ChLinkDirFrame self) -> ChVectorD"""
        return _fea.ChLinkDirFrame_Get_react_torque(self)

    def GetC(self):
        r"""GetC(ChLinkDirFrame self) -> chrono::ChVectorN< double,2 >"""
        return _fea.ChLinkDirFrame_GetC(self)

    def IntStateGatherReactions(self, off_L, L):
        r"""IntStateGatherReactions(ChLinkDirFrame self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _fea.ChLinkDirFrame_IntStateGatherReactions(self, off_L, L)

    def IntStateScatterReactions(self, off_L, L):
        r"""IntStateScatterReactions(ChLinkDirFrame self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _fea.ChLinkDirFrame_IntStateScatterReactions(self, off_L, L)

    def IntLoadResidual_CqL(self, off_L, R, L, c):
        r"""IntLoadResidual_CqL(ChLinkDirFrame self, unsigned int const off_L, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _fea.ChLinkDirFrame_IntLoadResidual_CqL(self, off_L, R, L, c)

    def IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp):
        r"""IntLoadConstraint_C(ChLinkDirFrame self, unsigned int const off, ChVectorDynamicD Qc, double const c, bool do_clamp, double recovery_clamp)"""
        return _fea.ChLinkDirFrame_IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChLinkDirFrame self, unsigned int const off_v, chrono::ChStateDelta const & v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _fea.ChLinkDirFrame_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChLinkDirFrame self, unsigned int const off_v, chrono::ChStateDelta & v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _fea.ChLinkDirFrame_IntFromDescriptor(self, off_v, v, off_L, L)

    def InjectConstraints(self, mdescriptor):
        r"""InjectConstraints(ChLinkDirFrame self, ChSystemDescriptor & mdescriptor)"""
        return _fea.ChLinkDirFrame_InjectConstraints(self, mdescriptor)

    def ConstraintsBiReset(self):
        r"""ConstraintsBiReset(ChLinkDirFrame self)"""
        return _fea.ChLinkDirFrame_ConstraintsBiReset(self)

    def ConstraintsBiLoad_C(self, factor=1., recovery_clamp=0.1, do_clamp=False):
        r"""ConstraintsBiLoad_C(ChLinkDirFrame self, double factor=1., double recovery_clamp=0.1, bool do_clamp=False)"""
        return _fea.ChLinkDirFrame_ConstraintsBiLoad_C(self, factor, recovery_clamp, do_clamp)

    def ConstraintsBiLoad_Ct(self, factor=1.):
        r"""ConstraintsBiLoad_Ct(ChLinkDirFrame self, double factor=1.)"""
        return _fea.ChLinkDirFrame_ConstraintsBiLoad_Ct(self, factor)

    def ConstraintsLoadJacobians(self):
        r"""ConstraintsLoadJacobians(ChLinkDirFrame self)"""
        return _fea.ChLinkDirFrame_ConstraintsLoadJacobians(self)

    def ConstraintsFetch_react(self, factor=1.):
        r"""ConstraintsFetch_react(ChLinkDirFrame self, double factor=1.)"""
        return _fea.ChLinkDirFrame_ConstraintsFetch_react(self, factor)

    def GetLinkAbsoluteCoords(self):
        r"""GetLinkAbsoluteCoords(ChLinkDirFrame self) -> ChCoordsysD"""
        return _fea.ChLinkDirFrame_GetLinkAbsoluteCoords(self)

    def Initialize(self, node, body, dir=None):
        r"""Initialize(ChLinkDirFrame self, std::shared_ptr< chrono::fea::ChNodeFEAxyzD > node, std::shared_ptr< chrono::ChBodyFrame > body, ChVectorD dir=None) -> int"""
        return _fea.ChLinkDirFrame_Initialize(self, node, body, dir)

    def GetConstrainedNode(self):
        r"""GetConstrainedNode(ChLinkDirFrame self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzD >"""
        return _fea.ChLinkDirFrame_GetConstrainedNode(self)

    def GetConstrainedBodyFrame(self):
        r"""GetConstrainedBodyFrame(ChLinkDirFrame self) -> std::shared_ptr< chrono::ChBodyFrame >"""
        return _fea.ChLinkDirFrame_GetConstrainedBodyFrame(self)

    def GetDirection(self):
        r"""GetDirection(ChLinkDirFrame self) -> ChVectorD"""
        return _fea.ChLinkDirFrame_GetDirection(self)

    def SetDirectionInBodyCoords(self, dir_loc):
        r"""SetDirectionInBodyCoords(ChLinkDirFrame self, ChVectorD dir_loc)"""
        return _fea.ChLinkDirFrame_SetDirectionInBodyCoords(self, dir_loc)

    def SetDirectionInAbsoluteCoords(self, dir_abs):
        r"""SetDirectionInAbsoluteCoords(ChLinkDirFrame self, ChVectorD dir_abs)"""
        return _fea.ChLinkDirFrame_SetDirectionInAbsoluteCoords(self, dir_abs)

    def GetReactionOnNode(self):
        r"""GetReactionOnNode(ChLinkDirFrame self) -> ChVectorD"""
        return _fea.ChLinkDirFrame_GetReactionOnNode(self)

    def GetReactionOnBody(self):
        r"""GetReactionOnBody(ChLinkDirFrame self) -> ChVectorD"""
        return _fea.ChLinkDirFrame_GetReactionOnBody(self)

    def Update(self, mytime, update_assets=True):
        r"""Update(ChLinkDirFrame self, double mytime, bool update_assets=True)"""
        return _fea.ChLinkDirFrame_Update(self, mytime, update_assets)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkDirFrame self, ChArchiveOut & marchive)"""
        return _fea.ChLinkDirFrame_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkDirFrame self, chrono::ChArchiveIn & marchive)"""
        return _fea.ChLinkDirFrame_ArchiveIN(self, marchive)

# Register ChLinkDirFrame in _fea:
_fea.ChLinkDirFrame_swigregister(ChLinkDirFrame)

class ChLinkPointFrame(pychrono.core.ChLinkBase):
    r"""Proxy of C++ chrono::fea::ChLinkPointFrame class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkPointFrame self) -> ChLinkPointFrame
        __init__(ChLinkPointFrame self, ChLinkPointFrame other) -> ChLinkPointFrame
        """
        _fea.ChLinkPointFrame_swiginit(self, _fea.new_ChLinkPointFrame(*args))
    __swig_destroy__ = _fea.delete_ChLinkPointFrame

    def Clone(self):
        r"""Clone(ChLinkPointFrame self) -> ChLinkPointFrame"""
        return _fea.ChLinkPointFrame_Clone(self)

    def GetNumCoords(self):
        r"""GetNumCoords(ChLinkPointFrame self) -> int"""
        return _fea.ChLinkPointFrame_GetNumCoords(self)

    def GetDOC_c(self):
        r"""GetDOC_c(ChLinkPointFrame self) -> int"""
        return _fea.ChLinkPointFrame_GetDOC_c(self)

    def Get_react_force(self):
        r"""Get_react_force(ChLinkPointFrame self) -> ChVectorD"""
        return _fea.ChLinkPointFrame_Get_react_force(self)

    def GetC(self):
        r"""GetC(ChLinkPointFrame self) -> chrono::ChVectorN< double,3 >"""
        return _fea.ChLinkPointFrame_GetC(self)

    def IntStateGatherReactions(self, off_L, L):
        r"""IntStateGatherReactions(ChLinkPointFrame self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _fea.ChLinkPointFrame_IntStateGatherReactions(self, off_L, L)

    def IntStateScatterReactions(self, off_L, L):
        r"""IntStateScatterReactions(ChLinkPointFrame self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _fea.ChLinkPointFrame_IntStateScatterReactions(self, off_L, L)

    def IntLoadResidual_CqL(self, off_L, R, L, c):
        r"""IntLoadResidual_CqL(ChLinkPointFrame self, unsigned int const off_L, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _fea.ChLinkPointFrame_IntLoadResidual_CqL(self, off_L, R, L, c)

    def IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp):
        r"""IntLoadConstraint_C(ChLinkPointFrame self, unsigned int const off, ChVectorDynamicD Qc, double const c, bool do_clamp, double recovery_clamp)"""
        return _fea.ChLinkPointFrame_IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChLinkPointFrame self, unsigned int const off_v, chrono::ChStateDelta const & v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _fea.ChLinkPointFrame_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChLinkPointFrame self, unsigned int const off_v, chrono::ChStateDelta & v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _fea.ChLinkPointFrame_IntFromDescriptor(self, off_v, v, off_L, L)

    def InjectConstraints(self, mdescriptor):
        r"""InjectConstraints(ChLinkPointFrame self, ChSystemDescriptor & mdescriptor)"""
        return _fea.ChLinkPointFrame_InjectConstraints(self, mdescriptor)

    def ConstraintsBiReset(self):
        r"""ConstraintsBiReset(ChLinkPointFrame self)"""
        return _fea.ChLinkPointFrame_ConstraintsBiReset(self)

    def ConstraintsBiLoad_C(self, factor=1, recovery_clamp=0.1, do_clamp=False):
        r"""ConstraintsBiLoad_C(ChLinkPointFrame self, double factor=1, double recovery_clamp=0.1, bool do_clamp=False)"""
        return _fea.ChLinkPointFrame_ConstraintsBiLoad_C(self, factor, recovery_clamp, do_clamp)

    def ConstraintsBiLoad_Ct(self, factor=1):
        r"""ConstraintsBiLoad_Ct(ChLinkPointFrame self, double factor=1)"""
        return _fea.ChLinkPointFrame_ConstraintsBiLoad_Ct(self, factor)

    def ConstraintsLoadJacobians(self):
        r"""ConstraintsLoadJacobians(ChLinkPointFrame self)"""
        return _fea.ChLinkPointFrame_ConstraintsLoadJacobians(self)

    def ConstraintsFetch_react(self, factor=1):
        r"""ConstraintsFetch_react(ChLinkPointFrame self, double factor=1)"""
        return _fea.ChLinkPointFrame_ConstraintsFetch_react(self, factor)

    def GetLinkAbsoluteCoords(self):
        r"""GetLinkAbsoluteCoords(ChLinkPointFrame self) -> ChCoordsysD"""
        return _fea.ChLinkPointFrame_GetLinkAbsoluteCoords(self)

    def Initialize(self, node, body, pos=None):
        r"""Initialize(ChLinkPointFrame self, std::shared_ptr< chrono::fea::ChNodeFEAxyz > node, std::shared_ptr< chrono::ChBodyFrame > body, ChVectorD pos=None) -> int"""
        return _fea.ChLinkPointFrame_Initialize(self, node, body, pos)

    def GetConstrainedNode(self):
        r"""GetConstrainedNode(ChLinkPointFrame self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChLinkPointFrame_GetConstrainedNode(self)

    def GetConstrainedBodyFrame(self):
        r"""GetConstrainedBodyFrame(ChLinkPointFrame self) -> std::shared_ptr< chrono::ChBodyFrame >"""
        return _fea.ChLinkPointFrame_GetConstrainedBodyFrame(self)

    def GetAttachPosition(self):
        r"""GetAttachPosition(ChLinkPointFrame self) -> ChVectorD"""
        return _fea.ChLinkPointFrame_GetAttachPosition(self)

    def GetAttachReference(self):
        r"""GetAttachReference(ChLinkPointFrame self) -> ChCoordsysD"""
        return _fea.ChLinkPointFrame_GetAttachReference(self)

    def SetAttachPositionInBodyCoords(self, pos_loc):
        r"""SetAttachPositionInBodyCoords(ChLinkPointFrame self, ChVectorD pos_loc)"""
        return _fea.ChLinkPointFrame_SetAttachPositionInBodyCoords(self, pos_loc)

    def SetAttachPositionInAbsoluteCoords(self, pos_abs):
        r"""SetAttachPositionInAbsoluteCoords(ChLinkPointFrame self, ChVectorD pos_abs)"""
        return _fea.ChLinkPointFrame_SetAttachPositionInAbsoluteCoords(self, pos_abs)

    def SetAttachReferenceInBodyCoords(self, csys_loc):
        r"""SetAttachReferenceInBodyCoords(ChLinkPointFrame self, ChCoordsysD csys_loc)"""
        return _fea.ChLinkPointFrame_SetAttachReferenceInBodyCoords(self, csys_loc)

    def SetAttachReferenceInAbsoluteCoords(self, csys_abs):
        r"""SetAttachReferenceInAbsoluteCoords(ChLinkPointFrame self, ChCoordsysD csys_abs)"""
        return _fea.ChLinkPointFrame_SetAttachReferenceInAbsoluteCoords(self, csys_abs)

    def GetReactionOnNode(self):
        r"""GetReactionOnNode(ChLinkPointFrame self) -> ChVectorD"""
        return _fea.ChLinkPointFrame_GetReactionOnNode(self)

    def GetReactionOnBody(self):
        r"""GetReactionOnBody(ChLinkPointFrame self) -> ChVectorD"""
        return _fea.ChLinkPointFrame_GetReactionOnBody(self)

    def Update(self, mytime, update_assets=True):
        r"""Update(ChLinkPointFrame self, double mytime, bool update_assets=True)"""
        return _fea.ChLinkPointFrame_Update(self, mytime, update_assets)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkPointFrame self, ChArchiveOut & marchive)"""
        return _fea.ChLinkPointFrame_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkPointFrame self, chrono::ChArchiveIn & marchive)"""
        return _fea.ChLinkPointFrame_ArchiveIN(self, marchive)

# Register ChLinkPointFrame in _fea:
_fea.ChLinkPointFrame_swigregister(ChLinkPointFrame)

class ChLinkPointFrameGeneric(pychrono.core.ChLinkBase):
    r"""Proxy of C++ chrono::fea::ChLinkPointFrameGeneric class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkPointFrameGeneric self, bool mc_x=True, bool mc_y=True, bool mc_z=True) -> ChLinkPointFrameGeneric
        __init__(ChLinkPointFrameGeneric self, ChLinkPointFrameGeneric other) -> ChLinkPointFrameGeneric
        """
        _fea.ChLinkPointFrameGeneric_swiginit(self, _fea.new_ChLinkPointFrameGeneric(*args))
    __swig_destroy__ = _fea.delete_ChLinkPointFrameGeneric

    def Clone(self):
        r"""Clone(ChLinkPointFrameGeneric self) -> ChLinkPointFrameGeneric"""
        return _fea.ChLinkPointFrameGeneric_Clone(self)

    def GetNumCoords(self):
        r"""GetNumCoords(ChLinkPointFrameGeneric self) -> int"""
        return _fea.ChLinkPointFrameGeneric_GetNumCoords(self)

    def GetDOC_c(self):
        r"""GetDOC_c(ChLinkPointFrameGeneric self) -> int"""
        return _fea.ChLinkPointFrameGeneric_GetDOC_c(self)

    def Get_react_force(self):
        r"""Get_react_force(ChLinkPointFrameGeneric self) -> ChVectorD"""
        return _fea.ChLinkPointFrameGeneric_Get_react_force(self)

    def IsConstrainedX(self):
        r"""IsConstrainedX(ChLinkPointFrameGeneric self) -> bool"""
        return _fea.ChLinkPointFrameGeneric_IsConstrainedX(self)

    def IsConstrainedY(self):
        r"""IsConstrainedY(ChLinkPointFrameGeneric self) -> bool"""
        return _fea.ChLinkPointFrameGeneric_IsConstrainedY(self)

    def IsConstrainedZ(self):
        r"""IsConstrainedZ(ChLinkPointFrameGeneric self) -> bool"""
        return _fea.ChLinkPointFrameGeneric_IsConstrainedZ(self)

    def SetConstrainedCoords(self, mc_x, mc_y, mc_z):
        r"""SetConstrainedCoords(ChLinkPointFrameGeneric self, bool mc_x, bool mc_y, bool mc_z)"""
        return _fea.ChLinkPointFrameGeneric_SetConstrainedCoords(self, mc_x, mc_y, mc_z)

    def IntStateGatherReactions(self, off_L, L):
        r"""IntStateGatherReactions(ChLinkPointFrameGeneric self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _fea.ChLinkPointFrameGeneric_IntStateGatherReactions(self, off_L, L)

    def IntStateScatterReactions(self, off_L, L):
        r"""IntStateScatterReactions(ChLinkPointFrameGeneric self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _fea.ChLinkPointFrameGeneric_IntStateScatterReactions(self, off_L, L)

    def IntLoadResidual_CqL(self, off_L, R, L, c):
        r"""IntLoadResidual_CqL(ChLinkPointFrameGeneric self, unsigned int const off_L, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _fea.ChLinkPointFrameGeneric_IntLoadResidual_CqL(self, off_L, R, L, c)

    def IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp):
        r"""IntLoadConstraint_C(ChLinkPointFrameGeneric self, unsigned int const off, ChVectorDynamicD Qc, double const c, bool do_clamp, double recovery_clamp)"""
        return _fea.ChLinkPointFrameGeneric_IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChLinkPointFrameGeneric self, unsigned int const off_v, chrono::ChStateDelta const & v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _fea.ChLinkPointFrameGeneric_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChLinkPointFrameGeneric self, unsigned int const off_v, chrono::ChStateDelta & v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _fea.ChLinkPointFrameGeneric_IntFromDescriptor(self, off_v, v, off_L, L)

    def InjectConstraints(self, mdescriptor):
        r"""InjectConstraints(ChLinkPointFrameGeneric self, ChSystemDescriptor & mdescriptor)"""
        return _fea.ChLinkPointFrameGeneric_InjectConstraints(self, mdescriptor)

    def ConstraintsBiReset(self):
        r"""ConstraintsBiReset(ChLinkPointFrameGeneric self)"""
        return _fea.ChLinkPointFrameGeneric_ConstraintsBiReset(self)

    def ConstraintsBiLoad_C(self, factor=1, recovery_clamp=0.1, do_clamp=False):
        r"""ConstraintsBiLoad_C(ChLinkPointFrameGeneric self, double factor=1, double recovery_clamp=0.1, bool do_clamp=False)"""
        return _fea.ChLinkPointFrameGeneric_ConstraintsBiLoad_C(self, factor, recovery_clamp, do_clamp)

    def ConstraintsBiLoad_Ct(self, factor=1):
        r"""ConstraintsBiLoad_Ct(ChLinkPointFrameGeneric self, double factor=1)"""
        return _fea.ChLinkPointFrameGeneric_ConstraintsBiLoad_Ct(self, factor)

    def ConstraintsLoadJacobians(self):
        r"""ConstraintsLoadJacobians(ChLinkPointFrameGeneric self)"""
        return _fea.ChLinkPointFrameGeneric_ConstraintsLoadJacobians(self)

    def ConstraintsFetch_react(self, factor=1):
        r"""ConstraintsFetch_react(ChLinkPointFrameGeneric self, double factor=1)"""
        return _fea.ChLinkPointFrameGeneric_ConstraintsFetch_react(self, factor)

    def GetLinkAbsoluteCoords(self):
        r"""GetLinkAbsoluteCoords(ChLinkPointFrameGeneric self) -> ChCoordsysD"""
        return _fea.ChLinkPointFrameGeneric_GetLinkAbsoluteCoords(self)

    def Initialize(self, *args):
        r"""
        Initialize(ChLinkPointFrameGeneric self, std::shared_ptr< chrono::fea::ChNodeFEAxyz > node, std::shared_ptr< chrono::ChBodyFrame > body, ChVectorD pos=None) -> int
        Initialize(ChLinkPointFrameGeneric self, std::shared_ptr< chrono::fea::ChNodeFEAxyz > node, std::shared_ptr< chrono::ChBodyFrame > body, ChCoordsysD csys_abs) -> int
        """
        return _fea.ChLinkPointFrameGeneric_Initialize(self, *args)

    def GetConstrainedNode(self):
        r"""GetConstrainedNode(ChLinkPointFrameGeneric self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChLinkPointFrameGeneric_GetConstrainedNode(self)

    def GetConstrainedBodyFrame(self):
        r"""GetConstrainedBodyFrame(ChLinkPointFrameGeneric self) -> std::shared_ptr< chrono::ChBodyFrame >"""
        return _fea.ChLinkPointFrameGeneric_GetConstrainedBodyFrame(self)

    def GetAttachPosition(self):
        r"""GetAttachPosition(ChLinkPointFrameGeneric self) -> ChVectorD"""
        return _fea.ChLinkPointFrameGeneric_GetAttachPosition(self)

    def GetAttachReference(self):
        r"""GetAttachReference(ChLinkPointFrameGeneric self) -> ChCoordsysD"""
        return _fea.ChLinkPointFrameGeneric_GetAttachReference(self)

    def SetAttachPositionInBodyCoords(self, pos_loc):
        r"""SetAttachPositionInBodyCoords(ChLinkPointFrameGeneric self, ChVectorD pos_loc)"""
        return _fea.ChLinkPointFrameGeneric_SetAttachPositionInBodyCoords(self, pos_loc)

    def SetAttachPositionInAbsoluteCoords(self, pos_abs):
        r"""SetAttachPositionInAbsoluteCoords(ChLinkPointFrameGeneric self, ChVectorD pos_abs)"""
        return _fea.ChLinkPointFrameGeneric_SetAttachPositionInAbsoluteCoords(self, pos_abs)

    def SetAttachReferenceInBodyCoords(self, csys_loc):
        r"""SetAttachReferenceInBodyCoords(ChLinkPointFrameGeneric self, ChCoordsysD csys_loc)"""
        return _fea.ChLinkPointFrameGeneric_SetAttachReferenceInBodyCoords(self, csys_loc)

    def SetAttachReferenceInAbsoluteCoords(self, csys_abs):
        r"""SetAttachReferenceInAbsoluteCoords(ChLinkPointFrameGeneric self, ChCoordsysD csys_abs)"""
        return _fea.ChLinkPointFrameGeneric_SetAttachReferenceInAbsoluteCoords(self, csys_abs)

    def GetReactionOnNode(self):
        r"""GetReactionOnNode(ChLinkPointFrameGeneric self) -> ChVectorD"""
        return _fea.ChLinkPointFrameGeneric_GetReactionOnNode(self)

    def GetReactionOnBody(self):
        r"""GetReactionOnBody(ChLinkPointFrameGeneric self) -> ChVectorD"""
        return _fea.ChLinkPointFrameGeneric_GetReactionOnBody(self)

    def Update(self, mytime, update_assets=True):
        r"""Update(ChLinkPointFrameGeneric self, double mytime, bool update_assets=True)"""
        return _fea.ChLinkPointFrameGeneric_Update(self, mytime, update_assets)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkPointFrameGeneric self, ChArchiveOut & marchive)"""
        return _fea.ChLinkPointFrameGeneric_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkPointFrameGeneric self, chrono::ChArchiveIn & marchive)"""
        return _fea.ChLinkPointFrameGeneric_ArchiveIN(self, marchive)

# Register ChLinkPointFrameGeneric in _fea:
_fea.ChLinkPointFrameGeneric_swigregister(ChLinkPointFrameGeneric)

class ChLinkPointPoint(pychrono.core.ChLinkBase):
    r"""Proxy of C++ chrono::fea::ChLinkPointPoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkPointPoint self) -> ChLinkPointPoint
        __init__(ChLinkPointPoint self, ChLinkPointPoint other) -> ChLinkPointPoint
        """
        _fea.ChLinkPointPoint_swiginit(self, _fea.new_ChLinkPointPoint(*args))
    __swig_destroy__ = _fea.delete_ChLinkPointPoint

    def Clone(self):
        r"""Clone(ChLinkPointPoint self) -> ChLinkPointPoint"""
        return _fea.ChLinkPointPoint_Clone(self)

    def GetNumCoords(self):
        r"""GetNumCoords(ChLinkPointPoint self) -> int"""
        return _fea.ChLinkPointPoint_GetNumCoords(self)

    def GetDOC_c(self):
        r"""GetDOC_c(ChLinkPointPoint self) -> int"""
        return _fea.ChLinkPointPoint_GetDOC_c(self)

    def Get_react_force(self):
        r"""Get_react_force(ChLinkPointPoint self) -> ChVectorD"""
        return _fea.ChLinkPointPoint_Get_react_force(self)

    def GetC(self):
        r"""GetC(ChLinkPointPoint self) -> chrono::ChVectorN< double,3 >"""
        return _fea.ChLinkPointPoint_GetC(self)

    def IntStateGatherReactions(self, off_L, L):
        r"""IntStateGatherReactions(ChLinkPointPoint self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _fea.ChLinkPointPoint_IntStateGatherReactions(self, off_L, L)

    def IntStateScatterReactions(self, off_L, L):
        r"""IntStateScatterReactions(ChLinkPointPoint self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _fea.ChLinkPointPoint_IntStateScatterReactions(self, off_L, L)

    def IntLoadResidual_CqL(self, off_L, R, L, c):
        r"""IntLoadResidual_CqL(ChLinkPointPoint self, unsigned int const off_L, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _fea.ChLinkPointPoint_IntLoadResidual_CqL(self, off_L, R, L, c)

    def IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp):
        r"""IntLoadConstraint_C(ChLinkPointPoint self, unsigned int const off, ChVectorDynamicD Qc, double const c, bool do_clamp, double recovery_clamp)"""
        return _fea.ChLinkPointPoint_IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChLinkPointPoint self, unsigned int const off_v, chrono::ChStateDelta const & v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _fea.ChLinkPointPoint_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChLinkPointPoint self, unsigned int const off_v, chrono::ChStateDelta & v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _fea.ChLinkPointPoint_IntFromDescriptor(self, off_v, v, off_L, L)

    def InjectConstraints(self, mdescriptor):
        r"""InjectConstraints(ChLinkPointPoint self, ChSystemDescriptor & mdescriptor)"""
        return _fea.ChLinkPointPoint_InjectConstraints(self, mdescriptor)

    def ConstraintsBiReset(self):
        r"""ConstraintsBiReset(ChLinkPointPoint self)"""
        return _fea.ChLinkPointPoint_ConstraintsBiReset(self)

    def ConstraintsBiLoad_C(self, factor=1, recovery_clamp=0.1, do_clamp=False):
        r"""ConstraintsBiLoad_C(ChLinkPointPoint self, double factor=1, double recovery_clamp=0.1, bool do_clamp=False)"""
        return _fea.ChLinkPointPoint_ConstraintsBiLoad_C(self, factor, recovery_clamp, do_clamp)

    def ConstraintsBiLoad_Ct(self, factor=1):
        r"""ConstraintsBiLoad_Ct(ChLinkPointPoint self, double factor=1)"""
        return _fea.ChLinkPointPoint_ConstraintsBiLoad_Ct(self, factor)

    def ConstraintsLoadJacobians(self):
        r"""ConstraintsLoadJacobians(ChLinkPointPoint self)"""
        return _fea.ChLinkPointPoint_ConstraintsLoadJacobians(self)

    def ConstraintsFetch_react(self, factor=1):
        r"""ConstraintsFetch_react(ChLinkPointPoint self, double factor=1)"""
        return _fea.ChLinkPointPoint_ConstraintsFetch_react(self, factor)

    def GetLinkAbsoluteCoords(self):
        r"""GetLinkAbsoluteCoords(ChLinkPointPoint self) -> ChCoordsysD"""
        return _fea.ChLinkPointPoint_GetLinkAbsoluteCoords(self)

    def Initialize(self, anodeA, anodeB):
        r"""Initialize(ChLinkPointPoint self, std::shared_ptr< chrono::fea::ChNodeFEAxyz > anodeA, std::shared_ptr< chrono::fea::ChNodeFEAxyz > anodeB) -> int"""
        return _fea.ChLinkPointPoint_Initialize(self, anodeA, anodeB)

    def GetConstrainedNodeA(self):
        r"""GetConstrainedNodeA(ChLinkPointPoint self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChLinkPointPoint_GetConstrainedNodeA(self)

    def GetConstrainedNodeB(self):
        r"""GetConstrainedNodeB(ChLinkPointPoint self) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
        return _fea.ChLinkPointPoint_GetConstrainedNodeB(self)

    def GetReactionOnNode(self):
        r"""GetReactionOnNode(ChLinkPointPoint self) -> ChVectorD"""
        return _fea.ChLinkPointPoint_GetReactionOnNode(self)

    def Update(self, mytime, update_assets=True):
        r"""Update(ChLinkPointPoint self, double mytime, bool update_assets=True)"""
        return _fea.ChLinkPointPoint_Update(self, mytime, update_assets)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkPointPoint self, ChArchiveOut & marchive)"""
        return _fea.ChLinkPointPoint_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkPointPoint self, chrono::ChArchiveIn & marchive)"""
        return _fea.ChLinkPointPoint_ArchiveIN(self, marchive)

# Register ChLinkPointPoint in _fea:
_fea.ChLinkPointPoint_swigregister(ChLinkPointPoint)

class ChLoaderBeamWrench(pychrono.core.ChLoaderUatomic):
    r"""Proxy of C++ chrono::fea::ChLoaderBeamWrench class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mloadable):
        r"""__init__(ChLoaderBeamWrench self, std::shared_ptr< chrono::ChLoadableU > mloadable) -> ChLoaderBeamWrench"""
        _fea.ChLoaderBeamWrench_swiginit(self, _fea.new_ChLoaderBeamWrench(mloadable))

    def ComputeF(self, U, F, state_x, state_w):
        r"""ComputeF(ChLoaderBeamWrench self, double const U, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _fea.ChLoaderBeamWrench_ComputeF(self, U, F, state_x, state_w)

    def SetForce(self, mf):
        r"""SetForce(ChLoaderBeamWrench self, ChVectorD mf)"""
        return _fea.ChLoaderBeamWrench_SetForce(self, mf)

    def GetForce(self):
        r"""GetForce(ChLoaderBeamWrench self) -> ChVectorD"""
        return _fea.ChLoaderBeamWrench_GetForce(self)

    def SetTorque(self, mt):
        r"""SetTorque(ChLoaderBeamWrench self, ChVectorD mt)"""
        return _fea.ChLoaderBeamWrench_SetTorque(self, mt)

    def GetTorque(self):
        r"""GetTorque(ChLoaderBeamWrench self) -> ChVectorD"""
        return _fea.ChLoaderBeamWrench_GetTorque(self)
    __swig_destroy__ = _fea.delete_ChLoaderBeamWrench

# Register ChLoaderBeamWrench in _fea:
_fea.ChLoaderBeamWrench_swigregister(ChLoaderBeamWrench)

class ChLoadBeamWrench(LoadLoaderBeamWrench):
    r"""Proxy of C++ chrono::fea::ChLoadBeamWrench class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mloadable):
        r"""__init__(ChLoadBeamWrench self, std::shared_ptr< chrono::ChLoadableU > mloadable) -> ChLoadBeamWrench"""
        _fea.ChLoadBeamWrench_swiginit(self, _fea.new_ChLoadBeamWrench(mloadable))
    __swig_destroy__ = _fea.delete_ChLoadBeamWrench

# Register ChLoadBeamWrench in _fea:
_fea.ChLoadBeamWrench_swigregister(ChLoadBeamWrench)

class ChLoaderBeamWrenchDistributed(pychrono.core.ChLoaderUdistributed):
    r"""Proxy of C++ chrono::fea::ChLoaderBeamWrenchDistributed class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mloadable):
        r"""__init__(ChLoaderBeamWrenchDistributed self, std::shared_ptr< chrono::ChLoadableU > mloadable) -> ChLoaderBeamWrenchDistributed"""
        _fea.ChLoaderBeamWrenchDistributed_swiginit(self, _fea.new_ChLoaderBeamWrenchDistributed(mloadable))

    def ComputeF(self, U, F, state_x, state_w):
        r"""ComputeF(ChLoaderBeamWrenchDistributed self, double const U, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _fea.ChLoaderBeamWrenchDistributed_ComputeF(self, U, F, state_x, state_w)

    def GetIntegrationPointsU(self):
        r"""GetIntegrationPointsU(ChLoaderBeamWrenchDistributed self) -> int"""
        return _fea.ChLoaderBeamWrenchDistributed_GetIntegrationPointsU(self)

    def SetForcePerUnit(self, mf):
        r"""SetForcePerUnit(ChLoaderBeamWrenchDistributed self, ChVectorD mf)"""
        return _fea.ChLoaderBeamWrenchDistributed_SetForcePerUnit(self, mf)

    def GetForcePerUnit(self):
        r"""GetForcePerUnit(ChLoaderBeamWrenchDistributed self) -> ChVectorD"""
        return _fea.ChLoaderBeamWrenchDistributed_GetForcePerUnit(self)

    def SetTorquePerUnit(self, mt):
        r"""SetTorquePerUnit(ChLoaderBeamWrenchDistributed self, ChVectorD mt)"""
        return _fea.ChLoaderBeamWrenchDistributed_SetTorquePerUnit(self, mt)

    def GetTorquePerUnit(self):
        r"""GetTorquePerUnit(ChLoaderBeamWrenchDistributed self) -> ChVectorD"""
        return _fea.ChLoaderBeamWrenchDistributed_GetTorquePerUnit(self)
    __swig_destroy__ = _fea.delete_ChLoaderBeamWrenchDistributed

# Register ChLoaderBeamWrenchDistributed in _fea:
_fea.ChLoaderBeamWrenchDistributed_swigregister(ChLoaderBeamWrenchDistributed)

class ChLoadBeamWrenchDistributed(LoadLoaderBeamWrenchDistributed):
    r"""Proxy of C++ chrono::fea::ChLoadBeamWrenchDistributed class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mloadable):
        r"""__init__(ChLoadBeamWrenchDistributed self, std::shared_ptr< chrono::ChLoadableU > mloadable) -> ChLoadBeamWrenchDistributed"""
        _fea.ChLoadBeamWrenchDistributed_swiginit(self, _fea.new_ChLoadBeamWrenchDistributed(mloadable))
    __swig_destroy__ = _fea.delete_ChLoadBeamWrenchDistributed

# Register ChLoadBeamWrenchDistributed in _fea:
_fea.ChLoadBeamWrenchDistributed_swigregister(ChLoadBeamWrenchDistributed)

class ChBuilderBeamEuler(object):
    r"""Proxy of C++ chrono::fea::ChBuilderBeamEuler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def BuildBeam(self, *args):
        r"""
        BuildBeam(ChBuilderBeamEuler self, std::shared_ptr< chrono::fea::ChMesh > mesh, std::shared_ptr< chrono::fea::ChBeamSectionAdvanced > sect, int const N, ChVectorD A, ChVectorD B, ChVectorD Ydir)
        BuildBeam(ChBuilderBeamEuler self, std::shared_ptr< chrono::fea::ChMesh > mesh, std::shared_ptr< chrono::fea::ChBeamSectionAdvanced > sect, int const N, std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > nodeA, std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > nodeB, ChVectorD Ydir)
        BuildBeam(ChBuilderBeamEuler self, std::shared_ptr< chrono::fea::ChMesh > mesh, std::shared_ptr< chrono::fea::ChBeamSectionAdvanced > sect, int const N, std::shared_ptr< chrono::fea::ChNodeFEAxyzrot > nodeA, ChVectorD B, ChVectorD Ydir)
        """
        return _fea.ChBuilderBeamEuler_BuildBeam(self, *args)

    def GetLastBeamElements(self):
        r"""GetLastBeamElements(ChBuilderBeamEuler self) -> std::vector< std::shared_ptr< chrono::fea::ChElementBeamEuler >,std::allocator< std::shared_ptr< chrono::fea::ChElementBeamEuler > > > &"""
        return _fea.ChBuilderBeamEuler_GetLastBeamElements(self)

    def GetLastBeamNodes(self):
        r"""GetLastBeamNodes(ChBuilderBeamEuler self) -> vector_ChNodeFEAxyzrot"""
        return _fea.ChBuilderBeamEuler_GetLastBeamNodes(self)

    def __init__(self):
        r"""__init__(ChBuilderBeamEuler self) -> ChBuilderBeamEuler"""
        _fea.ChBuilderBeamEuler_swiginit(self, _fea.new_ChBuilderBeamEuler())
    __swig_destroy__ = _fea.delete_ChBuilderBeamEuler

# Register ChBuilderBeamEuler in _fea:
_fea.ChBuilderBeamEuler_swigregister(ChBuilderBeamEuler)

class ChBuilderCableANCF(object):
    r"""Proxy of C++ chrono::fea::ChBuilderCableANCF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def BuildBeam(self, mesh, sect, N, A, B):
        r"""BuildBeam(ChBuilderCableANCF self, std::shared_ptr< chrono::fea::ChMesh > mesh, std::shared_ptr< chrono::fea::ChBeamSectionCable > sect, int const N, ChVectorD A, ChVectorD B)"""
        return _fea.ChBuilderCableANCF_BuildBeam(self, mesh, sect, N, A, B)

    def BuildBeam_FSI(self, mesh, sect, N, A, B, nodes, node_nbrs):
        r"""BuildBeam_FSI(ChBuilderCableANCF self, std::shared_ptr< chrono::fea::ChMesh > mesh, std::shared_ptr< chrono::fea::ChBeamSectionCable > sect, int const N, ChVectorD A, ChVectorD B, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > & nodes, std::vector< std::vector< int,std::allocator< int > >,std::allocator< std::vector< int,std::allocator< int > > > > & node_nbrs)"""
        return _fea.ChBuilderCableANCF_BuildBeam_FSI(self, mesh, sect, N, A, B, nodes, node_nbrs)

    def GetLastBeamElements(self):
        r"""GetLastBeamElements(ChBuilderCableANCF self) -> std::vector< std::shared_ptr< chrono::fea::ChElementCableANCF >,std::allocator< std::shared_ptr< chrono::fea::ChElementCableANCF > > > &"""
        return _fea.ChBuilderCableANCF_GetLastBeamElements(self)

    def GetLastBeamNodes(self):
        r"""GetLastBeamNodes(ChBuilderCableANCF self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzD >,std::allocator< std::shared_ptr< chrono::fea::ChNodeFEAxyzD > > > &"""
        return _fea.ChBuilderCableANCF_GetLastBeamNodes(self)

    def __init__(self):
        r"""__init__(ChBuilderCableANCF self) -> ChBuilderCableANCF"""
        _fea.ChBuilderCableANCF_swiginit(self, _fea.new_ChBuilderCableANCF())
    __swig_destroy__ = _fea.delete_ChBuilderCableANCF

# Register ChBuilderCableANCF in _fea:
_fea.ChBuilderCableANCF_swigregister(ChBuilderCableANCF)

class ChBuilderBeamANCF(object):
    r"""Proxy of C++ chrono::fea::ChBuilderBeamANCF class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def BuildBeam(self, mesh, mat, N, A, B, h, w, DIR, CUR, Poisson_effect=False, grav=False, damp=0):
        r"""BuildBeam(ChBuilderBeamANCF self, std::shared_ptr< chrono::fea::ChMesh > mesh, std::shared_ptr< chrono::fea::ChMaterialBeamANCF > mat, int const N, ChVectorD A, ChVectorD B, double const h, double const w, ChVectorD DIR, ChVectorD CUR, bool const Poisson_effect=False, bool const grav=False, double const damp=0)"""
        return _fea.ChBuilderBeamANCF_BuildBeam(self, mesh, mat, N, A, B, h, w, DIR, CUR, Poisson_effect, grav, damp)

    def GetLastBeamElements(self):
        r"""GetLastBeamElements(ChBuilderBeamANCF self) -> std::vector< std::shared_ptr< chrono::fea::ChElementBeamANCF >,std::allocator< std::shared_ptr< chrono::fea::ChElementBeamANCF > > > &"""
        return _fea.ChBuilderBeamANCF_GetLastBeamElements(self)

    def GetLastBeamNodes(self):
        r"""GetLastBeamNodes(ChBuilderBeamANCF self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAxyzDD >,std::allocator< std::shared_ptr< chrono::fea::ChNodeFEAxyzDD > > > &"""
        return _fea.ChBuilderBeamANCF_GetLastBeamNodes(self)

    def __init__(self):
        r"""__init__(ChBuilderBeamANCF self) -> ChBuilderBeamANCF"""
        _fea.ChBuilderBeamANCF_swiginit(self, _fea.new_ChBuilderBeamANCF())
    __swig_destroy__ = _fea.delete_ChBuilderBeamANCF

# Register ChBuilderBeamANCF in _fea:
_fea.ChBuilderBeamANCF_swigregister(ChBuilderBeamANCF)

class ChBuilderBeamIGA(object):
    r"""Proxy of C++ chrono::fea::ChBuilderBeamIGA class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def BuildBeam(self, *args):
        r"""
        BuildBeam(ChBuilderBeamIGA self, std::shared_ptr< chrono::fea::ChMesh > mesh, std::shared_ptr< chrono::fea::ChBeamSectionCosserat > sect, int const N, ChVectorD A, ChVectorD B, ChVectorD Ydir, int const order=3)
        BuildBeam(ChBuilderBeamIGA self, std::shared_ptr< chrono::fea::ChMesh > mesh, std::shared_ptr< chrono::fea::ChBeamSectionCosserat > sect, geometry::ChLineBspline & spline, ChVectorD Ydirn)
        """
        return _fea.ChBuilderBeamIGA_BuildBeam(self, *args)

    def GetLastBeamElements(self):
        r"""GetLastBeamElements(ChBuilderBeamIGA self) -> std::vector< std::shared_ptr< chrono::fea::ChElementBeamIGA >,std::allocator< std::shared_ptr< chrono::fea::ChElementBeamIGA > > > &"""
        return _fea.ChBuilderBeamIGA_GetLastBeamElements(self)

    def GetLastBeamNodes(self):
        r"""GetLastBeamNodes(ChBuilderBeamIGA self) -> vector_ChNodeFEAxyzrot"""
        return _fea.ChBuilderBeamIGA_GetLastBeamNodes(self)

    def __init__(self):
        r"""__init__(ChBuilderBeamIGA self) -> ChBuilderBeamIGA"""
        _fea.ChBuilderBeamIGA_swiginit(self, _fea.new_ChBuilderBeamIGA())
    __swig_destroy__ = _fea.delete_ChBuilderBeamIGA

# Register ChBuilderBeamIGA in _fea:
_fea.ChBuilderBeamIGA_swigregister(ChBuilderBeamIGA)

class ChExtruderBeamEuler(object):
    r"""Proxy of C++ chrono::fea::ChExtruderBeamEuler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msystem, mmesh, sect, mh, moutlet, mspeed):
        r"""__init__(ChExtruderBeamEuler self, chrono::ChSystem * msystem, std::shared_ptr< chrono::fea::ChMesh > mmesh, std::shared_ptr< chrono::fea::ChBeamSectionAdvanced > sect, double mh, ChCoordsysD moutlet, double mspeed) -> ChExtruderBeamEuler"""
        _fea.ChExtruderBeamEuler_swiginit(self, _fea.new_ChExtruderBeamEuler(msystem, mmesh, sect, mh, moutlet, mspeed))
    __swig_destroy__ = _fea.delete_ChExtruderBeamEuler

    def SetContact(self, mcontact_material, mcontact_radius):
        r"""SetContact(ChExtruderBeamEuler self, std::shared_ptr< chrono::ChMaterialSurfaceSMC > mcontact_material, double mcontact_radius)"""
        return _fea.ChExtruderBeamEuler_SetContact(self, mcontact_material, mcontact_radius)

    def Update(self):
        r"""Update(ChExtruderBeamEuler self)"""
        return _fea.ChExtruderBeamEuler_Update(self)

    def GetLastBeamElements(self):
        r"""GetLastBeamElements(ChExtruderBeamEuler self) -> std::vector< std::shared_ptr< chrono::fea::ChElementBeamEuler >,std::allocator< std::shared_ptr< chrono::fea::ChElementBeamEuler > > > &"""
        return _fea.ChExtruderBeamEuler_GetLastBeamElements(self)

    def GetLastBeamNodes(self):
        r"""GetLastBeamNodes(ChExtruderBeamEuler self) -> vector_ChNodeFEAxyzrot"""
        return _fea.ChExtruderBeamEuler_GetLastBeamNodes(self)

# Register ChExtruderBeamEuler in _fea:
_fea.ChExtruderBeamEuler_swigregister(ChExtruderBeamEuler)

class ChExtruderBeamIGA(object):
    r"""Proxy of C++ chrono::fea::ChExtruderBeamIGA class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msystem, mmesh, sect, mh, moutlet, mspeed, morder):
        r"""__init__(ChExtruderBeamIGA self, chrono::ChSystem * msystem, std::shared_ptr< chrono::fea::ChMesh > mmesh, std::shared_ptr< chrono::fea::ChBeamSectionCosserat > sect, double mh, ChCoordsysD moutlet, double mspeed, int morder) -> ChExtruderBeamIGA"""
        _fea.ChExtruderBeamIGA_swiginit(self, _fea.new_ChExtruderBeamIGA(msystem, mmesh, sect, mh, moutlet, mspeed, morder))
    __swig_destroy__ = _fea.delete_ChExtruderBeamIGA

    def SetContact(self, mcontact_material, mcontact_radius):
        r"""SetContact(ChExtruderBeamIGA self, std::shared_ptr< chrono::ChMaterialSurfaceSMC > mcontact_material, double mcontact_radius)"""
        return _fea.ChExtruderBeamIGA_SetContact(self, mcontact_material, mcontact_radius)

    def Update(self):
        r"""Update(ChExtruderBeamIGA self) -> bool"""
        return _fea.ChExtruderBeamIGA_Update(self)

    def GetLastBeamElements(self):
        r"""GetLastBeamElements(ChExtruderBeamIGA self) -> std::vector< std::shared_ptr< chrono::fea::ChElementBeamIGA >,std::allocator< std::shared_ptr< chrono::fea::ChElementBeamIGA > > > &"""
        return _fea.ChExtruderBeamIGA_GetLastBeamElements(self)

    def GetLastBeamNodes(self):
        r"""GetLastBeamNodes(ChExtruderBeamIGA self) -> vector_ChNodeFEAxyzrot"""
        return _fea.ChExtruderBeamIGA_GetLastBeamNodes(self)

# Register ChExtruderBeamIGA in _fea:
_fea.ChExtruderBeamIGA_swigregister(ChExtruderBeamIGA)

class ChMeshFileLoader(object):
    r"""Proxy of C++ chrono::fea::ChMeshFileLoader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def FromTetGenFile(*args):
        r"""FromTetGenFile(std::shared_ptr< chrono::fea::ChMesh > mesh, char const * filename_node, char const * filename_ele, std::shared_ptr< chrono::fea::ChContinuumMaterial > my_material, ChVectorD pos_transform=VNULL, ChMatrix33D rot_transform=chrono::ChMatrix33< double >(1))"""
        return _fea.ChMeshFileLoader_FromTetGenFile(*args)

    @staticmethod
    def FromAbaqusFile(*args):
        r"""FromAbaqusFile(std::shared_ptr< chrono::fea::ChMesh > mesh, char const * filename, std::shared_ptr< chrono::fea::ChContinuumMaterial > my_material, std::map< std::string,std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase >,std::allocator< std::shared_ptr< chrono::fea::ChNodeFEAbase > > > > & node_sets, ChVectorD pos_transform=VNULL, ChMatrix33D rot_transform=chrono::ChMatrix33< double >(1), bool discard_unused_nodes=True)"""
        return _fea.ChMeshFileLoader_FromAbaqusFile(*args)

    @staticmethod
    def ANCFShellFromGMFFile(*args):
        r"""ANCFShellFromGMFFile(std::shared_ptr< chrono::fea::ChMesh > mesh, char const * filename, std::shared_ptr< chrono::fea::ChMaterialShellANCF > my_material, std::vector< double,std::allocator< double > > & node_ave_area, std::vector< int,std::allocator< int > > & BC_nodes, ChVectorD pos_transform=VNULL, ChMatrix33D rot_transform=chrono::ChMatrix33< double >(1), double scaleFactor=1, bool printNodes=False, bool printElements=False)"""
        return _fea.ChMeshFileLoader_ANCFShellFromGMFFile(*args)

    @staticmethod
    def BSTShellFromObjFile(*args):
        r"""BSTShellFromObjFile(std::shared_ptr< chrono::fea::ChMesh > mesh, char const * filename, std::shared_ptr< chrono::fea::ChMaterialShellKirchhoff > my_material, double my_thickness, ChVectorD pos_transform=VNULL, ChMatrix33D rot_transform=chrono::ChMatrix33< double >(1))"""
        return _fea.ChMeshFileLoader_BSTShellFromObjFile(*args)

    def __init__(self):
        r"""__init__(ChMeshFileLoader self) -> ChMeshFileLoader"""
        _fea.ChMeshFileLoader_swiginit(self, _fea.new_ChMeshFileLoader())
    __swig_destroy__ = _fea.delete_ChMeshFileLoader

# Register ChMeshFileLoader in _fea:
_fea.ChMeshFileLoader_swigregister(ChMeshFileLoader)

def ChMeshFileLoader_FromTetGenFile(*args):
    r"""ChMeshFileLoader_FromTetGenFile(std::shared_ptr< chrono::fea::ChMesh > mesh, char const * filename_node, char const * filename_ele, std::shared_ptr< chrono::fea::ChContinuumMaterial > my_material, ChVectorD pos_transform=VNULL, ChMatrix33D rot_transform=chrono::ChMatrix33< double >(1))"""
    return _fea.ChMeshFileLoader_FromTetGenFile(*args)

def ChMeshFileLoader_FromAbaqusFile(*args):
    r"""ChMeshFileLoader_FromAbaqusFile(std::shared_ptr< chrono::fea::ChMesh > mesh, char const * filename, std::shared_ptr< chrono::fea::ChContinuumMaterial > my_material, std::map< std::string,std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase >,std::allocator< std::shared_ptr< chrono::fea::ChNodeFEAbase > > > > & node_sets, ChVectorD pos_transform=VNULL, ChMatrix33D rot_transform=chrono::ChMatrix33< double >(1), bool discard_unused_nodes=True)"""
    return _fea.ChMeshFileLoader_FromAbaqusFile(*args)

def ChMeshFileLoader_ANCFShellFromGMFFile(*args):
    r"""ChMeshFileLoader_ANCFShellFromGMFFile(std::shared_ptr< chrono::fea::ChMesh > mesh, char const * filename, std::shared_ptr< chrono::fea::ChMaterialShellANCF > my_material, std::vector< double,std::allocator< double > > & node_ave_area, std::vector< int,std::allocator< int > > & BC_nodes, ChVectorD pos_transform=VNULL, ChMatrix33D rot_transform=chrono::ChMatrix33< double >(1), double scaleFactor=1, bool printNodes=False, bool printElements=False)"""
    return _fea.ChMeshFileLoader_ANCFShellFromGMFFile(*args)

def ChMeshFileLoader_BSTShellFromObjFile(*args):
    r"""ChMeshFileLoader_BSTShellFromObjFile(std::shared_ptr< chrono::fea::ChMesh > mesh, char const * filename, std::shared_ptr< chrono::fea::ChMaterialShellKirchhoff > my_material, double my_thickness, ChVectorD pos_transform=VNULL, ChMatrix33D rot_transform=chrono::ChMatrix33< double >(1))"""
    return _fea.ChMeshFileLoader_BSTShellFromObjFile(*args)


def CastToChMesh(in_obj):
    r"""CastToChMesh(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::fea::ChMesh >"""
    return _fea.CastToChMesh(in_obj)

def CastToChElasticityCosseratSimple(in_obj):
    r"""CastToChElasticityCosseratSimple(std::shared_ptr< chrono::fea::ChElasticityCosserat > in_obj) -> std::shared_ptr< chrono::fea::ChElasticityCosseratSimple >"""
    return _fea.CastToChElasticityCosseratSimple(in_obj)

def CastToChElasticityCosseratGeneric(in_obj):
    r"""CastToChElasticityCosseratGeneric(std::shared_ptr< chrono::fea::ChElasticityCosserat > in_obj) -> std::shared_ptr< chrono::fea::ChElasticityCosseratGeneric >"""
    return _fea.CastToChElasticityCosseratGeneric(in_obj)

def CastToChElasticityCosseratAdvanced(in_obj):
    r"""CastToChElasticityCosseratAdvanced(std::shared_ptr< chrono::fea::ChElasticityCosserat > in_obj) -> std::shared_ptr< chrono::fea::ChElasticityCosseratAdvanced >"""
    return _fea.CastToChElasticityCosseratAdvanced(in_obj)

def CastToChElasticityCosseratMesh(in_obj):
    r"""CastToChElasticityCosseratMesh(std::shared_ptr< chrono::fea::ChElasticityCosserat > in_obj) -> std::shared_ptr< chrono::fea::ChElasticityCosseratMesh >"""
    return _fea.CastToChElasticityCosseratMesh(in_obj)

def CastToChPlasticityCosseratLumped(in_obj):
    r"""CastToChPlasticityCosseratLumped(std::shared_ptr< chrono::fea::ChPlasticityCosserat > in_obj) -> std::shared_ptr< chrono::fea::ChPlasticityCosseratLumped >"""
    return _fea.CastToChPlasticityCosseratLumped(in_obj)

def CastToChElasticityReissnerIsothropic(in_obj):
    r"""CastToChElasticityReissnerIsothropic(std::shared_ptr< chrono::fea::ChElasticityReissner > in_obj) -> std::shared_ptr< chrono::fea::ChElasticityReissnerIsothropic >"""
    return _fea.CastToChElasticityReissnerIsothropic(in_obj)

def CastToChElasticityReissnerOrthotropic(in_obj):
    r"""CastToChElasticityReissnerOrthotropic(std::shared_ptr< chrono::fea::ChElasticityReissner > in_obj) -> std::shared_ptr< chrono::fea::ChElasticityReissnerOrthotropic >"""
    return _fea.CastToChElasticityReissnerOrthotropic(in_obj)

def CastToChElasticityReissnerGeneric(in_obj):
    r"""CastToChElasticityReissnerGeneric(std::shared_ptr< chrono::fea::ChElasticityReissner > in_obj) -> std::shared_ptr< chrono::fea::ChElasticityReissnerGeneric >"""
    return _fea.CastToChElasticityReissnerGeneric(in_obj)

def CastToChElasticityKirchhoffIsothropic(in_obj):
    r"""CastToChElasticityKirchhoffIsothropic(std::shared_ptr< chrono::fea::ChElasticityKirchhoff > in_obj) -> std::shared_ptr< chrono::fea::ChElasticityKirchhoffIsothropic >"""
    return _fea.CastToChElasticityKirchhoffIsothropic(in_obj)

def CastToChElasticityKirchhoffOrthotropic(in_obj):
    r"""CastToChElasticityKirchhoffOrthotropic(std::shared_ptr< chrono::fea::ChElasticityKirchhoff > in_obj) -> std::shared_ptr< chrono::fea::ChElasticityKirchhoffOrthotropic >"""
    return _fea.CastToChElasticityKirchhoffOrthotropic(in_obj)

def CastToChElasticityKirchhoffGeneric(in_obj):
    r"""CastToChElasticityKirchhoffGeneric(std::shared_ptr< chrono::fea::ChElasticityKirchhoff > in_obj) -> std::shared_ptr< chrono::fea::ChElasticityKirchhoffGeneric >"""
    return _fea.CastToChElasticityKirchhoffGeneric(in_obj)

def CastToChElementBar(in_obj):
    r"""CastToChElementBar(std::shared_ptr< chrono::fea::ChElementBase > in_obj) -> std::shared_ptr< chrono::fea::ChElementBar >"""
    return _fea.CastToChElementBar(in_obj)

def CastToChElementSpring(in_obj):
    r"""CastToChElementSpring(std::shared_ptr< chrono::fea::ChElementBase > in_obj) -> std::shared_ptr< chrono::fea::ChElementSpring >"""
    return _fea.CastToChElementSpring(in_obj)

def CastToChElementTetra_4(in_obj):
    r"""CastToChElementTetra_4(std::shared_ptr< chrono::fea::ChElementBase > in_obj) -> std::shared_ptr< chrono::fea::ChElementTetra_4 >"""
    return _fea.CastToChElementTetra_4(in_obj)

def CastToChElementTetra_10(in_obj):
    r"""CastToChElementTetra_10(std::shared_ptr< chrono::fea::ChElementBase > in_obj) -> std::shared_ptr< chrono::fea::ChElementTetra_10 >"""
    return _fea.CastToChElementTetra_10(in_obj)

def CastToChElementHexa_8(in_obj):
    r"""CastToChElementHexa_8(std::shared_ptr< chrono::fea::ChElementBase > in_obj) -> std::shared_ptr< chrono::fea::ChElementHexa_8 >"""
    return _fea.CastToChElementHexa_8(in_obj)

def CastToChElementHexa_20(in_obj):
    r"""CastToChElementHexa_20(std::shared_ptr< chrono::fea::ChElementBase > in_obj) -> std::shared_ptr< chrono::fea::ChElementHexa_20 >"""
    return _fea.CastToChElementHexa_20(in_obj)

def CastToChElementBeamEuler(in_obj):
    r"""CastToChElementBeamEuler(std::shared_ptr< chrono::fea::ChElementBase > in_obj) -> std::shared_ptr< chrono::fea::ChElementBeamEuler >"""
    return _fea.CastToChElementBeamEuler(in_obj)

def CastToChElementBeamANCF(in_obj):
    r"""CastToChElementBeamANCF(std::shared_ptr< chrono::fea::ChElementBase > in_obj) -> std::shared_ptr< chrono::fea::ChElementBeamANCF >"""
    return _fea.CastToChElementBeamANCF(in_obj)

def CastToChElementBeamIGA(in_obj):
    r"""CastToChElementBeamIGA(std::shared_ptr< chrono::fea::ChElementBase > in_obj) -> std::shared_ptr< chrono::fea::ChElementBeamIGA >"""
    return _fea.CastToChElementBeamIGA(in_obj)

def CastToChElementCableANCF(in_obj):
    r"""CastToChElementCableANCF(std::shared_ptr< chrono::fea::ChElementBase > in_obj) -> std::shared_ptr< chrono::fea::ChElementCableANCF >"""
    return _fea.CastToChElementCableANCF(in_obj)

def CastToChElementShellReissner4(in_obj):
    r"""CastToChElementShellReissner4(std::shared_ptr< chrono::fea::ChElementBase > in_obj) -> std::shared_ptr< chrono::fea::ChElementShellReissner4 >"""
    return _fea.CastToChElementShellReissner4(in_obj)

def CastToChElementShellANCF(in_obj):
    r"""CastToChElementShellANCF(std::shared_ptr< chrono::fea::ChElementBase > in_obj) -> std::shared_ptr< chrono::fea::ChElementShellANCF >"""
    return _fea.CastToChElementShellANCF(in_obj)

def CastToChElementShellANCF_8(in_obj):
    r"""CastToChElementShellANCF_8(std::shared_ptr< chrono::fea::ChElementBase > in_obj) -> std::shared_ptr< chrono::fea::ChElementShellANCF_8 >"""
    return _fea.CastToChElementShellANCF_8(in_obj)

def CastToChElementBrick(in_obj):
    r"""CastToChElementBrick(std::shared_ptr< chrono::fea::ChElementBase > in_obj) -> std::shared_ptr< chrono::fea::ChElementBrick >"""
    return _fea.CastToChElementBrick(in_obj)

def CastToChElementBrick_9(in_obj):
    r"""CastToChElementBrick_9(std::shared_ptr< chrono::fea::ChElementBase > in_obj) -> std::shared_ptr< chrono::fea::ChElementBrick_9 >"""
    return _fea.CastToChElementBrick_9(in_obj)

def CastToChNodeFEAbase(in_obj):
    r"""CastToChNodeFEAbase(std::shared_ptr< chrono::ChNodeBase > in_obj) -> std::shared_ptr< chrono::fea::ChNodeFEAbase >"""
    return _fea.CastToChNodeFEAbase(in_obj)

def CastToChNodeFEAxyz(in_obj):
    r"""CastToChNodeFEAxyz(std::shared_ptr< chrono::fea::ChNodeFEAbase > in_obj) -> std::shared_ptr< chrono::fea::ChNodeFEAxyz >"""
    return _fea.CastToChNodeFEAxyz(in_obj)

def CastToChNodeFEAxyzP(in_obj):
    r"""CastToChNodeFEAxyzP(std::shared_ptr< chrono::fea::ChNodeFEAbase > in_obj) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzP >"""
    return _fea.CastToChNodeFEAxyzP(in_obj)

def CastToChNodeFEAxyzD(in_obj):
    r"""CastToChNodeFEAxyzD(std::shared_ptr< chrono::fea::ChNodeFEAbase > in_obj) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzD >"""
    return _fea.CastToChNodeFEAxyzD(in_obj)

def CastToChNodeFEAxyzDD(in_obj):
    r"""CastToChNodeFEAxyzDD(std::shared_ptr< chrono::fea::ChNodeFEAbase > in_obj) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzDD >"""
    return _fea.CastToChNodeFEAxyzDD(in_obj)

def CastToChNodeFEAxyzrot(in_obj):
    r"""CastToChNodeFEAxyzrot(std::shared_ptr< chrono::fea::ChNodeFEAbase > in_obj) -> std::shared_ptr< chrono::fea::ChNodeFEAxyzrot >"""
    return _fea.CastToChNodeFEAxyzrot(in_obj)

def CastToChVisualizationFEAmesh(in_obj):
    r"""CastToChVisualizationFEAmesh(std::shared_ptr< chrono::ChAsset > in_obj) -> std::shared_ptr< chrono::fea::ChVisualizationFEAmesh >"""
    return _fea.CastToChVisualizationFEAmesh(in_obj)

def CastContactableToChContactNodeXYZROT(base):
    r"""CastContactableToChContactNodeXYZROT(ChContactable base) -> ChContactNodeXYZROT"""
    return _fea.CastContactableToChContactNodeXYZROT(base)

def CastContactableToChContactNodeXYZ(base):
    r"""CastContactableToChContactNodeXYZ(ChContactable base) -> ChContactNodeXYZ"""
    return _fea.CastContactableToChContactNodeXYZ(base)

def CastContactableToChContactTriangleXYZROT(base):
    r"""CastContactableToChContactTriangleXYZROT(ChContactable base) -> ChContactTriangleXYZROT"""
    return _fea.CastContactableToChContactTriangleXYZROT(base)

def CastContactableToChContactTriangleXYZ(base):
    r"""CastContactableToChContactTriangleXYZ(ChContactable base) -> ChContactTriangleXYZ"""
    return _fea.CastContactableToChContactTriangleXYZ(base)


