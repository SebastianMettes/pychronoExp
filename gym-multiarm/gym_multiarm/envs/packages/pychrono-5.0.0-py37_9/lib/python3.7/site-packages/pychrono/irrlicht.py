# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _irrlicht
else:
    import _irrlicht

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _irrlicht.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _irrlicht.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _irrlicht.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _irrlicht.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _irrlicht.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _irrlicht.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _irrlicht.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _irrlicht.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _irrlicht.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _irrlicht.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _irrlicht.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _irrlicht.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _irrlicht.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _irrlicht.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _irrlicht.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _irrlicht.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _irrlicht.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _irrlicht.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _irrlicht:
_irrlicht.SwigPyIterator_swigregister(SwigPyIterator)

import pychrono.core
class IReferenceCounted(object):
    r"""Proxy of C++ irr::IReferenceCounted class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(IReferenceCounted self) -> IReferenceCounted"""
        _irrlicht.IReferenceCounted_swiginit(self, _irrlicht.new_IReferenceCounted())
    __swig_destroy__ = _irrlicht.delete_IReferenceCounted

    def grab(self):
        r"""grab(IReferenceCounted self)"""
        return _irrlicht.IReferenceCounted_grab(self)

    def drop(self):
        r"""drop(IReferenceCounted self) -> bool"""
        return _irrlicht.IReferenceCounted_drop(self)

    def getReferenceCount(self):
        r"""getReferenceCount(IReferenceCounted self) -> s32"""
        return _irrlicht.IReferenceCounted_getReferenceCount(self)

    def getDebugName(self):
        r"""getDebugName(IReferenceCounted self) -> c8 const *"""
        return _irrlicht.IReferenceCounted_getDebugName(self)

# Register IReferenceCounted in _irrlicht:
_irrlicht.IReferenceCounted_swigregister(IReferenceCounted)

class IImage(IReferenceCounted):
    r"""Proxy of C++ irr::video::IImage class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def lock(self):
        r"""lock(IImage self) -> void *"""
        return _irrlicht.IImage_lock(self)

    def unlock(self):
        r"""unlock(IImage self)"""
        return _irrlicht.IImage_unlock(self)

    def getDimension(self):
        r"""getDimension(IImage self) -> core::dimension2d< irr::u32 > const &"""
        return _irrlicht.IImage_getDimension(self)

    def getBitsPerPixel(self):
        r"""getBitsPerPixel(IImage self) -> u32"""
        return _irrlicht.IImage_getBitsPerPixel(self)

    def getBytesPerPixel(self):
        r"""getBytesPerPixel(IImage self) -> u32"""
        return _irrlicht.IImage_getBytesPerPixel(self)

    def getImageDataSizeInBytes(self):
        r"""getImageDataSizeInBytes(IImage self) -> u32"""
        return _irrlicht.IImage_getImageDataSizeInBytes(self)

    def getImageDataSizeInPixels(self):
        r"""getImageDataSizeInPixels(IImage self) -> u32"""
        return _irrlicht.IImage_getImageDataSizeInPixels(self)

    def getPixel(self, x, y):
        r"""getPixel(IImage self, u32 x, u32 y) -> SColor"""
        return _irrlicht.IImage_getPixel(self, x, y)

    def setPixel(self, x, y, color, blend=False):
        r"""setPixel(IImage self, u32 x, u32 y, SColor const & color, bool blend=False)"""
        return _irrlicht.IImage_setPixel(self, x, y, color, blend)

    def getColorFormat(self):
        r"""getColorFormat(IImage self) -> ECOLOR_FORMAT"""
        return _irrlicht.IImage_getColorFormat(self)

    def getRedMask(self):
        r"""getRedMask(IImage self) -> u32"""
        return _irrlicht.IImage_getRedMask(self)

    def getGreenMask(self):
        r"""getGreenMask(IImage self) -> u32"""
        return _irrlicht.IImage_getGreenMask(self)

    def getBlueMask(self):
        r"""getBlueMask(IImage self) -> u32"""
        return _irrlicht.IImage_getBlueMask(self)

    def getAlphaMask(self):
        r"""getAlphaMask(IImage self) -> u32"""
        return _irrlicht.IImage_getAlphaMask(self)

    def getPitch(self):
        r"""getPitch(IImage self) -> u32"""
        return _irrlicht.IImage_getPitch(self)

    def copyToScaling(self, *args):
        r"""
        copyToScaling(IImage self, void * target, u32 width, u32 height, ECOLOR_FORMAT format=ECF_A8R8G8B8, u32 pitch=0)
        copyToScaling(IImage self, IImage target)
        """
        return _irrlicht.IImage_copyToScaling(self, *args)

    def copyTo(self, *args):
        r"""
        copyTo(IImage self, IImage target, core::position2d< s32 > const & pos=core::position2d< s32 >(0,0))
        copyTo(IImage self, IImage target, core::position2d< s32 > const & pos, core::rect< s32 > const & sourceRect, core::rect< s32 > const * clipRect=None)
        """
        return _irrlicht.IImage_copyTo(self, *args)

    def copyToWithAlpha(self, target, pos, sourceRect, color, clipRect=None):
        r"""copyToWithAlpha(IImage self, IImage target, core::position2d< s32 > const & pos, core::rect< s32 > const & sourceRect, SColor const & color, core::rect< s32 > const * clipRect=None)"""
        return _irrlicht.IImage_copyToWithAlpha(self, target, pos, sourceRect, color, clipRect)

    def copyToScalingBoxFilter(self, target, bias=0, blend=False):
        r"""copyToScalingBoxFilter(IImage self, IImage target, s32 bias=0, bool blend=False)"""
        return _irrlicht.IImage_copyToScalingBoxFilter(self, target, bias, blend)

    def fill(self, color):
        r"""fill(IImage self, SColor const & color)"""
        return _irrlicht.IImage_fill(self, color)

    @staticmethod
    def getBitsPerPixelFromFormat(format):
        r"""getBitsPerPixelFromFormat(ECOLOR_FORMAT const format) -> u32"""
        return _irrlicht.IImage_getBitsPerPixelFromFormat(format)

    @staticmethod
    def isRenderTargetOnlyFormat(format):
        r"""isRenderTargetOnlyFormat(ECOLOR_FORMAT const format) -> bool"""
        return _irrlicht.IImage_isRenderTargetOnlyFormat(format)

    def get_img_bytes(self):
        r"""get_img_bytes(IImage self)"""
        return _irrlicht.IImage_get_img_bytes(self)
    __swig_destroy__ = _irrlicht.delete_IImage

# Register IImage in _irrlicht:
_irrlicht.IImage_swigregister(IImage)

def IImage_getBitsPerPixelFromFormat(format):
    r"""IImage_getBitsPerPixelFromFormat(ECOLOR_FORMAT const format) -> u32"""
    return _irrlicht.IImage_getBitsPerPixelFromFormat(format)

def IImage_isRenderTargetOnlyFormat(format):
    r"""IImage_isRenderTargetOnlyFormat(ECOLOR_FORMAT const format) -> bool"""
    return _irrlicht.IImage_isRenderTargetOnlyFormat(format)

class IImageWriter(IReferenceCounted):
    r"""Proxy of C++ irr::video::IImageWriter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def isAWriteableFileExtension(self, filename):
        r"""isAWriteableFileExtension(IImageWriter self, irr::io::path const & filename) -> bool"""
        return _irrlicht.IImageWriter_isAWriteableFileExtension(self, filename)

    def writeImage(self, file, image, param=0):
        r"""writeImage(IImageWriter self, IWriteFile file, IImage image, u32 param=0) -> bool"""
        return _irrlicht.IImageWriter_writeImage(self, file, image, param)
    __swig_destroy__ = _irrlicht.delete_IImageWriter

# Register IImageWriter in _irrlicht:
_irrlicht.IImageWriter_swigregister(IImageWriter)

class IWriteFile(IReferenceCounted):
    r"""Proxy of C++ irr::io::IWriteFile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def write(self, buffer, sizeToWrite):
        r"""write(IWriteFile self, void const * buffer, u32 sizeToWrite) -> s32"""
        return _irrlicht.IWriteFile_write(self, buffer, sizeToWrite)

    def seek(self, finalPos, relativeMovement=False):
        r"""seek(IWriteFile self, long finalPos, bool relativeMovement=False) -> bool"""
        return _irrlicht.IWriteFile_seek(self, finalPos, relativeMovement)

    def getPos(self):
        r"""getPos(IWriteFile self) -> long"""
        return _irrlicht.IWriteFile_getPos(self)

    def getFileName(self):
        r"""getFileName(IWriteFile self) -> path const &"""
        return _irrlicht.IWriteFile_getFileName(self)
    __swig_destroy__ = _irrlicht.delete_IWriteFile

# Register IWriteFile in _irrlicht:
_irrlicht.IWriteFile_swigregister(IWriteFile)

class vector2df(object):
    r"""Proxy of C++ irr::core::vector2d< irr::f32 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vector2df self) -> vector2df
        __init__(vector2df self, float nx, float ny) -> vector2df
        __init__(vector2df self, float n) -> vector2df
        __init__(vector2df self, vector2df other) -> vector2df
        __init__(vector2df self, dimension2d< float > const & other) -> vector2df
        """
        _irrlicht.vector2df_swiginit(self, _irrlicht.new_vector2df(*args))

    def __neg__(self):
        r"""__neg__(vector2df self) -> vector2df"""
        return _irrlicht.vector2df___neg__(self)

    def __add__(self, *args):
        r"""
        __add__(vector2df self, vector2df other) -> vector2df
        __add__(vector2df self, dimension2d< float > const & other) -> vector2df
        __add__(vector2df self, float const v) -> vector2df
        """
        return _irrlicht.vector2df___add__(self, *args)

    def __iadd__(self, *args):
        r"""
        __iadd__(vector2df self, vector2df other) -> vector2df
        __iadd__(vector2df self, float const v) -> vector2df
        __iadd__(vector2df self, dimension2d< float > const & other) -> vector2df
        """
        return _irrlicht.vector2df___iadd__(self, *args)

    def __sub__(self, *args):
        r"""
        __sub__(vector2df self, vector2df other) -> vector2df
        __sub__(vector2df self, dimension2d< float > const & other) -> vector2df
        __sub__(vector2df self, float const v) -> vector2df
        """
        return _irrlicht.vector2df___sub__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(vector2df self, vector2df other) -> vector2df
        __isub__(vector2df self, float const v) -> vector2df
        __isub__(vector2df self, dimension2d< float > const & other) -> vector2df
        """
        return _irrlicht.vector2df___isub__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(vector2df self, vector2df other) -> vector2df
        __mul__(vector2df self, float const v) -> vector2df
        """
        return _irrlicht.vector2df___mul__(self, *args)

    def __imul__(self, *args):
        r"""
        __imul__(vector2df self, vector2df other) -> vector2df
        __imul__(vector2df self, float const v) -> vector2df
        """
        return _irrlicht.vector2df___imul__(self, *args)

    def __truediv__(self, *args):
        return _irrlicht.vector2df___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _irrlicht.vector2df___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __le__(self, other):
        r"""__le__(vector2df self, vector2df other) -> bool"""
        return _irrlicht.vector2df___le__(self, other)

    def __ge__(self, other):
        r"""__ge__(vector2df self, vector2df other) -> bool"""
        return _irrlicht.vector2df___ge__(self, other)

    def __lt__(self, other):
        r"""__lt__(vector2df self, vector2df other) -> bool"""
        return _irrlicht.vector2df___lt__(self, other)

    def __gt__(self, other):
        r"""__gt__(vector2df self, vector2df other) -> bool"""
        return _irrlicht.vector2df___gt__(self, other)

    def __eq__(self, other):
        r"""__eq__(vector2df self, vector2df other) -> bool"""
        return _irrlicht.vector2df___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(vector2df self, vector2df other) -> bool"""
        return _irrlicht.vector2df___ne__(self, other)

    def equals(self, other):
        r"""equals(vector2df self, vector2df other) -> bool"""
        return _irrlicht.vector2df_equals(self, other)

    def set(self, *args):
        r"""
        set(vector2df self, float nx, float ny) -> vector2df
        set(vector2df self, vector2df p) -> vector2df
        """
        return _irrlicht.vector2df_set(self, *args)

    def getLength(self):
        r"""getLength(vector2df self) -> float"""
        return _irrlicht.vector2df_getLength(self)

    def getLengthSQ(self):
        r"""getLengthSQ(vector2df self) -> float"""
        return _irrlicht.vector2df_getLengthSQ(self)

    def dotProduct(self, other):
        r"""dotProduct(vector2df self, vector2df other) -> float"""
        return _irrlicht.vector2df_dotProduct(self, other)

    def getDistanceFrom(self, other):
        r"""getDistanceFrom(vector2df self, vector2df other) -> float"""
        return _irrlicht.vector2df_getDistanceFrom(self, other)

    def getDistanceFromSQ(self, other):
        r"""getDistanceFromSQ(vector2df self, vector2df other) -> float"""
        return _irrlicht.vector2df_getDistanceFromSQ(self, other)

    def rotateBy(self, *args):
        r"""rotateBy(vector2df self, irr::f64 degrees, vector2df center=vector2d< float >()) -> vector2df"""
        return _irrlicht.vector2df_rotateBy(self, *args)

    def normalize(self):
        r"""normalize(vector2df self) -> vector2df"""
        return _irrlicht.vector2df_normalize(self)

    def getAngleTrig(self):
        r"""getAngleTrig(vector2df self) -> irr::f64"""
        return _irrlicht.vector2df_getAngleTrig(self)

    def getAngle(self):
        r"""getAngle(vector2df self) -> irr::f64"""
        return _irrlicht.vector2df_getAngle(self)

    def getAngleWith(self, b):
        r"""getAngleWith(vector2df self, vector2df b) -> irr::f64"""
        return _irrlicht.vector2df_getAngleWith(self, b)

    def isBetweenPoints(self, begin, end):
        r"""isBetweenPoints(vector2df self, vector2df begin, vector2df end) -> bool"""
        return _irrlicht.vector2df_isBetweenPoints(self, begin, end)

    def getInterpolated(self, other, d):
        r"""getInterpolated(vector2df self, vector2df other, irr::f64 d) -> vector2df"""
        return _irrlicht.vector2df_getInterpolated(self, other, d)

    def getInterpolated_quadratic(self, v2, v3, d):
        r"""getInterpolated_quadratic(vector2df self, vector2df v2, vector2df v3, irr::f64 d) -> vector2df"""
        return _irrlicht.vector2df_getInterpolated_quadratic(self, v2, v3, d)

    def interpolate(self, a, b, d):
        r"""interpolate(vector2df self, vector2df a, vector2df b, irr::f64 d) -> vector2df"""
        return _irrlicht.vector2df_interpolate(self, a, b, d)
    X = property(_irrlicht.vector2df_X_get, _irrlicht.vector2df_X_set, doc=r"""X : float""")
    Y = property(_irrlicht.vector2df_Y_get, _irrlicht.vector2df_Y_set, doc=r"""Y : float""")
    __swig_destroy__ = _irrlicht.delete_vector2df

# Register vector2df in _irrlicht:
_irrlicht.vector2df_swigregister(vector2df)

class vector2di(object):
    r"""Proxy of C++ irr::core::vector2d< irr::s32 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vector2di self) -> vector2di
        __init__(vector2di self, int nx, int ny) -> vector2di
        __init__(vector2di self, int n) -> vector2di
        __init__(vector2di self, vector2di other) -> vector2di
        __init__(vector2di self, dimension2d< int > const & other) -> vector2di
        """
        _irrlicht.vector2di_swiginit(self, _irrlicht.new_vector2di(*args))

    def __neg__(self):
        r"""__neg__(vector2di self) -> vector2di"""
        return _irrlicht.vector2di___neg__(self)

    def __add__(self, *args):
        r"""
        __add__(vector2di self, vector2di other) -> vector2di
        __add__(vector2di self, dimension2d< int > const & other) -> vector2di
        __add__(vector2di self, int const v) -> vector2di
        """
        return _irrlicht.vector2di___add__(self, *args)

    def __iadd__(self, *args):
        r"""
        __iadd__(vector2di self, vector2di other) -> vector2di
        __iadd__(vector2di self, int const v) -> vector2di
        __iadd__(vector2di self, dimension2d< int > const & other) -> vector2di
        """
        return _irrlicht.vector2di___iadd__(self, *args)

    def __sub__(self, *args):
        r"""
        __sub__(vector2di self, vector2di other) -> vector2di
        __sub__(vector2di self, dimension2d< int > const & other) -> vector2di
        __sub__(vector2di self, int const v) -> vector2di
        """
        return _irrlicht.vector2di___sub__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(vector2di self, vector2di other) -> vector2di
        __isub__(vector2di self, int const v) -> vector2di
        __isub__(vector2di self, dimension2d< int > const & other) -> vector2di
        """
        return _irrlicht.vector2di___isub__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(vector2di self, vector2di other) -> vector2di
        __mul__(vector2di self, int const v) -> vector2di
        """
        return _irrlicht.vector2di___mul__(self, *args)

    def __imul__(self, *args):
        r"""
        __imul__(vector2di self, vector2di other) -> vector2di
        __imul__(vector2di self, int const v) -> vector2di
        """
        return _irrlicht.vector2di___imul__(self, *args)

    def __truediv__(self, *args):
        return _irrlicht.vector2di___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _irrlicht.vector2di___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __le__(self, other):
        r"""__le__(vector2di self, vector2di other) -> bool"""
        return _irrlicht.vector2di___le__(self, other)

    def __ge__(self, other):
        r"""__ge__(vector2di self, vector2di other) -> bool"""
        return _irrlicht.vector2di___ge__(self, other)

    def __lt__(self, other):
        r"""__lt__(vector2di self, vector2di other) -> bool"""
        return _irrlicht.vector2di___lt__(self, other)

    def __gt__(self, other):
        r"""__gt__(vector2di self, vector2di other) -> bool"""
        return _irrlicht.vector2di___gt__(self, other)

    def __eq__(self, other):
        r"""__eq__(vector2di self, vector2di other) -> bool"""
        return _irrlicht.vector2di___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(vector2di self, vector2di other) -> bool"""
        return _irrlicht.vector2di___ne__(self, other)

    def equals(self, other):
        r"""equals(vector2di self, vector2di other) -> bool"""
        return _irrlicht.vector2di_equals(self, other)

    def set(self, *args):
        r"""
        set(vector2di self, int nx, int ny) -> vector2di
        set(vector2di self, vector2di p) -> vector2di
        """
        return _irrlicht.vector2di_set(self, *args)

    def getLength(self):
        r"""getLength(vector2di self) -> int"""
        return _irrlicht.vector2di_getLength(self)

    def getLengthSQ(self):
        r"""getLengthSQ(vector2di self) -> int"""
        return _irrlicht.vector2di_getLengthSQ(self)

    def dotProduct(self, other):
        r"""dotProduct(vector2di self, vector2di other) -> int"""
        return _irrlicht.vector2di_dotProduct(self, other)

    def getDistanceFrom(self, other):
        r"""getDistanceFrom(vector2di self, vector2di other) -> int"""
        return _irrlicht.vector2di_getDistanceFrom(self, other)

    def getDistanceFromSQ(self, other):
        r"""getDistanceFromSQ(vector2di self, vector2di other) -> int"""
        return _irrlicht.vector2di_getDistanceFromSQ(self, other)

    def rotateBy(self, *args):
        r"""rotateBy(vector2di self, irr::f64 degrees, vector2di center=vector2d< int >()) -> vector2di"""
        return _irrlicht.vector2di_rotateBy(self, *args)

    def normalize(self):
        r"""normalize(vector2di self) -> vector2di"""
        return _irrlicht.vector2di_normalize(self)

    def getAngleTrig(self):
        r"""getAngleTrig(vector2di self) -> irr::f64"""
        return _irrlicht.vector2di_getAngleTrig(self)

    def getAngle(self):
        r"""getAngle(vector2di self) -> irr::f64"""
        return _irrlicht.vector2di_getAngle(self)

    def getAngleWith(self, b):
        r"""getAngleWith(vector2di self, vector2di b) -> irr::f64"""
        return _irrlicht.vector2di_getAngleWith(self, b)

    def isBetweenPoints(self, begin, end):
        r"""isBetweenPoints(vector2di self, vector2di begin, vector2di end) -> bool"""
        return _irrlicht.vector2di_isBetweenPoints(self, begin, end)

    def getInterpolated(self, other, d):
        r"""getInterpolated(vector2di self, vector2di other, irr::f64 d) -> vector2di"""
        return _irrlicht.vector2di_getInterpolated(self, other, d)

    def getInterpolated_quadratic(self, v2, v3, d):
        r"""getInterpolated_quadratic(vector2di self, vector2di v2, vector2di v3, irr::f64 d) -> vector2di"""
        return _irrlicht.vector2di_getInterpolated_quadratic(self, v2, v3, d)

    def interpolate(self, a, b, d):
        r"""interpolate(vector2di self, vector2di a, vector2di b, irr::f64 d) -> vector2di"""
        return _irrlicht.vector2di_interpolate(self, a, b, d)
    X = property(_irrlicht.vector2di_X_get, _irrlicht.vector2di_X_set, doc=r"""X : int""")
    Y = property(_irrlicht.vector2di_Y_get, _irrlicht.vector2di_Y_set, doc=r"""Y : int""")
    __swig_destroy__ = _irrlicht.delete_vector2di

# Register vector2di in _irrlicht:
_irrlicht.vector2di_swigregister(vector2di)

class vector3df(object):
    r"""Proxy of C++ irr::core::vector3d< irr::f32 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vector3df self) -> vector3df
        __init__(vector3df self, float nx, float ny, float nz) -> vector3df
        __init__(vector3df self, float n) -> vector3df
        __init__(vector3df self, vector3df other) -> vector3df
        """
        _irrlicht.vector3df_swiginit(self, _irrlicht.new_vector3df(*args))

    def __neg__(self):
        r"""__neg__(vector3df self) -> vector3df"""
        return _irrlicht.vector3df___neg__(self)

    def __add__(self, *args):
        r"""
        __add__(vector3df self, vector3df other) -> vector3df
        __add__(vector3df self, float const val) -> vector3df
        """
        return _irrlicht.vector3df___add__(self, *args)

    def __iadd__(self, *args):
        r"""
        __iadd__(vector3df self, vector3df other) -> vector3df
        __iadd__(vector3df self, float const val) -> vector3df
        """
        return _irrlicht.vector3df___iadd__(self, *args)

    def __sub__(self, *args):
        r"""
        __sub__(vector3df self, vector3df other) -> vector3df
        __sub__(vector3df self, float const val) -> vector3df
        """
        return _irrlicht.vector3df___sub__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(vector3df self, vector3df other) -> vector3df
        __isub__(vector3df self, float const val) -> vector3df
        """
        return _irrlicht.vector3df___isub__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(vector3df self, vector3df other) -> vector3df
        __mul__(vector3df self, float const v) -> vector3df
        """
        return _irrlicht.vector3df___mul__(self, *args)

    def __imul__(self, *args):
        r"""
        __imul__(vector3df self, vector3df other) -> vector3df
        __imul__(vector3df self, float const v) -> vector3df
        """
        return _irrlicht.vector3df___imul__(self, *args)

    def __truediv__(self, *args):
        return _irrlicht.vector3df___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _irrlicht.vector3df___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __le__(self, other):
        r"""__le__(vector3df self, vector3df other) -> bool"""
        return _irrlicht.vector3df___le__(self, other)

    def __ge__(self, other):
        r"""__ge__(vector3df self, vector3df other) -> bool"""
        return _irrlicht.vector3df___ge__(self, other)

    def __lt__(self, other):
        r"""__lt__(vector3df self, vector3df other) -> bool"""
        return _irrlicht.vector3df___lt__(self, other)

    def __gt__(self, other):
        r"""__gt__(vector3df self, vector3df other) -> bool"""
        return _irrlicht.vector3df___gt__(self, other)

    def __eq__(self, other):
        r"""__eq__(vector3df self, vector3df other) -> bool"""
        return _irrlicht.vector3df___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(vector3df self, vector3df other) -> bool"""
        return _irrlicht.vector3df___ne__(self, other)

    def equals(self, *args):
        r"""equals(vector3df self, vector3df other, float const tolerance=(float) ROUNDING_ERROR_f32) -> bool"""
        return _irrlicht.vector3df_equals(self, *args)

    def set(self, *args):
        r"""
        set(vector3df self, float const nx, float const ny, float const nz) -> vector3df
        set(vector3df self, vector3df p) -> vector3df
        """
        return _irrlicht.vector3df_set(self, *args)

    def getLength(self):
        r"""getLength(vector3df self) -> float"""
        return _irrlicht.vector3df_getLength(self)

    def getLengthSQ(self):
        r"""getLengthSQ(vector3df self) -> float"""
        return _irrlicht.vector3df_getLengthSQ(self)

    def dotProduct(self, other):
        r"""dotProduct(vector3df self, vector3df other) -> float"""
        return _irrlicht.vector3df_dotProduct(self, other)

    def getDistanceFrom(self, other):
        r"""getDistanceFrom(vector3df self, vector3df other) -> float"""
        return _irrlicht.vector3df_getDistanceFrom(self, other)

    def getDistanceFromSQ(self, other):
        r"""getDistanceFromSQ(vector3df self, vector3df other) -> float"""
        return _irrlicht.vector3df_getDistanceFromSQ(self, other)

    def crossProduct(self, p):
        r"""crossProduct(vector3df self, vector3df p) -> vector3df"""
        return _irrlicht.vector3df_crossProduct(self, p)

    def isBetweenPoints(self, begin, end):
        r"""isBetweenPoints(vector3df self, vector3df begin, vector3df end) -> bool"""
        return _irrlicht.vector3df_isBetweenPoints(self, begin, end)

    def normalize(self):
        r"""normalize(vector3df self) -> vector3df"""
        return _irrlicht.vector3df_normalize(self)

    def setLength(self, newlength):
        r"""setLength(vector3df self, float newlength) -> vector3df"""
        return _irrlicht.vector3df_setLength(self, newlength)

    def invert(self):
        r"""invert(vector3df self) -> vector3df"""
        return _irrlicht.vector3df_invert(self)

    def rotateXZBy(self, *args):
        r"""rotateXZBy(vector3df self, irr::f64 degrees, vector3df center=vector3d< float >())"""
        return _irrlicht.vector3df_rotateXZBy(self, *args)

    def rotateXYBy(self, *args):
        r"""rotateXYBy(vector3df self, irr::f64 degrees, vector3df center=vector3d< float >())"""
        return _irrlicht.vector3df_rotateXYBy(self, *args)

    def rotateYZBy(self, *args):
        r"""rotateYZBy(vector3df self, irr::f64 degrees, vector3df center=vector3d< float >())"""
        return _irrlicht.vector3df_rotateYZBy(self, *args)

    def getInterpolated(self, other, d):
        r"""getInterpolated(vector3df self, vector3df other, irr::f64 d) -> vector3df"""
        return _irrlicht.vector3df_getInterpolated(self, other, d)

    def getInterpolated_quadratic(self, v2, v3, d):
        r"""getInterpolated_quadratic(vector3df self, vector3df v2, vector3df v3, irr::f64 d) -> vector3df"""
        return _irrlicht.vector3df_getInterpolated_quadratic(self, v2, v3, d)

    def interpolate(self, a, b, d):
        r"""interpolate(vector3df self, vector3df a, vector3df b, irr::f64 d) -> vector3df"""
        return _irrlicht.vector3df_interpolate(self, a, b, d)

    def getHorizontalAngle(self):
        r"""getHorizontalAngle(vector3df self) -> vector3df"""
        return _irrlicht.vector3df_getHorizontalAngle(self)

    def getSphericalCoordinateAngles(self):
        r"""getSphericalCoordinateAngles(vector3df self) -> vector3df"""
        return _irrlicht.vector3df_getSphericalCoordinateAngles(self)

    def rotationToDirection(self, *args):
        r"""rotationToDirection(vector3df self, vector3df forwards=vector3d< float >(0, 0, 1)) -> vector3df"""
        return _irrlicht.vector3df_rotationToDirection(self, *args)

    def getAs4Values(self, array):
        r"""getAs4Values(vector3df self, float * array)"""
        return _irrlicht.vector3df_getAs4Values(self, array)

    def getAs3Values(self, array):
        r"""getAs3Values(vector3df self, float * array)"""
        return _irrlicht.vector3df_getAs3Values(self, array)
    X = property(_irrlicht.vector3df_X_get, _irrlicht.vector3df_X_set, doc=r"""X : float""")
    Y = property(_irrlicht.vector3df_Y_get, _irrlicht.vector3df_Y_set, doc=r"""Y : float""")
    Z = property(_irrlicht.vector3df_Z_get, _irrlicht.vector3df_Z_set, doc=r"""Z : float""")
    __swig_destroy__ = _irrlicht.delete_vector3df

# Register vector3df in _irrlicht:
_irrlicht.vector3df_swigregister(vector3df)

class vector3di(object):
    r"""Proxy of C++ irr::core::vector3d< irr::s32 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vector3di self) -> vector3di
        __init__(vector3di self, int nx, int ny, int nz) -> vector3di
        __init__(vector3di self, int n) -> vector3di
        __init__(vector3di self, vector3di other) -> vector3di
        """
        _irrlicht.vector3di_swiginit(self, _irrlicht.new_vector3di(*args))

    def __neg__(self):
        r"""__neg__(vector3di self) -> vector3di"""
        return _irrlicht.vector3di___neg__(self)

    def __add__(self, *args):
        r"""
        __add__(vector3di self, vector3di other) -> vector3di
        __add__(vector3di self, int const val) -> vector3di
        """
        return _irrlicht.vector3di___add__(self, *args)

    def __iadd__(self, *args):
        r"""
        __iadd__(vector3di self, vector3di other) -> vector3di
        __iadd__(vector3di self, int const val) -> vector3di
        """
        return _irrlicht.vector3di___iadd__(self, *args)

    def __sub__(self, *args):
        r"""
        __sub__(vector3di self, vector3di other) -> vector3di
        __sub__(vector3di self, int const val) -> vector3di
        """
        return _irrlicht.vector3di___sub__(self, *args)

    def __isub__(self, *args):
        r"""
        __isub__(vector3di self, vector3di other) -> vector3di
        __isub__(vector3di self, int const val) -> vector3di
        """
        return _irrlicht.vector3di___isub__(self, *args)

    def __mul__(self, *args):
        r"""
        __mul__(vector3di self, vector3di other) -> vector3di
        __mul__(vector3di self, int const v) -> vector3di
        """
        return _irrlicht.vector3di___mul__(self, *args)

    def __imul__(self, *args):
        r"""
        __imul__(vector3di self, vector3di other) -> vector3di
        __imul__(vector3di self, int const v) -> vector3di
        """
        return _irrlicht.vector3di___imul__(self, *args)

    def __truediv__(self, *args):
        return _irrlicht.vector3di___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _irrlicht.vector3di___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __le__(self, other):
        r"""__le__(vector3di self, vector3di other) -> bool"""
        return _irrlicht.vector3di___le__(self, other)

    def __ge__(self, other):
        r"""__ge__(vector3di self, vector3di other) -> bool"""
        return _irrlicht.vector3di___ge__(self, other)

    def __lt__(self, other):
        r"""__lt__(vector3di self, vector3di other) -> bool"""
        return _irrlicht.vector3di___lt__(self, other)

    def __gt__(self, other):
        r"""__gt__(vector3di self, vector3di other) -> bool"""
        return _irrlicht.vector3di___gt__(self, other)

    def __eq__(self, other):
        r"""__eq__(vector3di self, vector3di other) -> bool"""
        return _irrlicht.vector3di___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(vector3di self, vector3di other) -> bool"""
        return _irrlicht.vector3di___ne__(self, other)

    def equals(self, *args):
        r"""equals(vector3di self, vector3di other, int const tolerance=(int) ROUNDING_ERROR_f32) -> bool"""
        return _irrlicht.vector3di_equals(self, *args)

    def set(self, *args):
        r"""
        set(vector3di self, int const nx, int const ny, int const nz) -> vector3di
        set(vector3di self, vector3di p) -> vector3di
        """
        return _irrlicht.vector3di_set(self, *args)

    def getLength(self):
        r"""getLength(vector3di self) -> int"""
        return _irrlicht.vector3di_getLength(self)

    def getLengthSQ(self):
        r"""getLengthSQ(vector3di self) -> int"""
        return _irrlicht.vector3di_getLengthSQ(self)

    def dotProduct(self, other):
        r"""dotProduct(vector3di self, vector3di other) -> int"""
        return _irrlicht.vector3di_dotProduct(self, other)

    def getDistanceFrom(self, other):
        r"""getDistanceFrom(vector3di self, vector3di other) -> int"""
        return _irrlicht.vector3di_getDistanceFrom(self, other)

    def getDistanceFromSQ(self, other):
        r"""getDistanceFromSQ(vector3di self, vector3di other) -> int"""
        return _irrlicht.vector3di_getDistanceFromSQ(self, other)

    def crossProduct(self, p):
        r"""crossProduct(vector3di self, vector3di p) -> vector3di"""
        return _irrlicht.vector3di_crossProduct(self, p)

    def isBetweenPoints(self, begin, end):
        r"""isBetweenPoints(vector3di self, vector3di begin, vector3di end) -> bool"""
        return _irrlicht.vector3di_isBetweenPoints(self, begin, end)

    def normalize(self):
        r"""normalize(vector3di self) -> vector3di"""
        return _irrlicht.vector3di_normalize(self)

    def setLength(self, newlength):
        r"""setLength(vector3di self, int newlength) -> vector3di"""
        return _irrlicht.vector3di_setLength(self, newlength)

    def invert(self):
        r"""invert(vector3di self) -> vector3di"""
        return _irrlicht.vector3di_invert(self)

    def rotateXZBy(self, *args):
        r"""rotateXZBy(vector3di self, irr::f64 degrees, vector3di center=vector3d< int >())"""
        return _irrlicht.vector3di_rotateXZBy(self, *args)

    def rotateXYBy(self, *args):
        r"""rotateXYBy(vector3di self, irr::f64 degrees, vector3di center=vector3d< int >())"""
        return _irrlicht.vector3di_rotateXYBy(self, *args)

    def rotateYZBy(self, *args):
        r"""rotateYZBy(vector3di self, irr::f64 degrees, vector3di center=vector3d< int >())"""
        return _irrlicht.vector3di_rotateYZBy(self, *args)

    def getInterpolated(self, other, d):
        r"""getInterpolated(vector3di self, vector3di other, irr::f64 d) -> vector3di"""
        return _irrlicht.vector3di_getInterpolated(self, other, d)

    def getInterpolated_quadratic(self, v2, v3, d):
        r"""getInterpolated_quadratic(vector3di self, vector3di v2, vector3di v3, irr::f64 d) -> vector3di"""
        return _irrlicht.vector3di_getInterpolated_quadratic(self, v2, v3, d)

    def interpolate(self, a, b, d):
        r"""interpolate(vector3di self, vector3di a, vector3di b, irr::f64 d) -> vector3di"""
        return _irrlicht.vector3di_interpolate(self, a, b, d)

    def getHorizontalAngle(self):
        r"""getHorizontalAngle(vector3di self) -> vector3di"""
        return _irrlicht.vector3di_getHorizontalAngle(self)

    def getSphericalCoordinateAngles(self):
        r"""getSphericalCoordinateAngles(vector3di self) -> vector3di"""
        return _irrlicht.vector3di_getSphericalCoordinateAngles(self)

    def rotationToDirection(self, *args):
        r"""rotationToDirection(vector3di self, vector3di forwards=vector3d< int >(0, 0, 1)) -> vector3di"""
        return _irrlicht.vector3di_rotationToDirection(self, *args)

    def getAs4Values(self, array):
        r"""getAs4Values(vector3di self, int * array)"""
        return _irrlicht.vector3di_getAs4Values(self, array)

    def getAs3Values(self, array):
        r"""getAs3Values(vector3di self, int * array)"""
        return _irrlicht.vector3di_getAs3Values(self, array)
    X = property(_irrlicht.vector3di_X_get, _irrlicht.vector3di_X_set, doc=r"""X : int""")
    Y = property(_irrlicht.vector3di_Y_get, _irrlicht.vector3di_Y_set, doc=r"""Y : int""")
    Z = property(_irrlicht.vector3di_Z_get, _irrlicht.vector3di_Z_set, doc=r"""Z : int""")
    __swig_destroy__ = _irrlicht.delete_vector3di

# Register vector3di in _irrlicht:
_irrlicht.vector3di_swigregister(vector3di)

ECF_A1R5G5B5 = _irrlicht.ECF_A1R5G5B5

ECF_R5G6B5 = _irrlicht.ECF_R5G6B5

ECF_R8G8B8 = _irrlicht.ECF_R8G8B8

ECF_A8R8G8B8 = _irrlicht.ECF_A8R8G8B8

ECF_R16F = _irrlicht.ECF_R16F

ECF_G16R16F = _irrlicht.ECF_G16R16F

ECF_A16B16G16R16F = _irrlicht.ECF_A16B16G16R16F

ECF_R32F = _irrlicht.ECF_R32F

ECF_G32R32F = _irrlicht.ECF_G32R32F

ECF_A32B32G32R32F = _irrlicht.ECF_A32B32G32R32F

ECF_UNKNOWN = _irrlicht.ECF_UNKNOWN


def RGBA16(r, g, b, a=0xFF):
    r"""RGBA16(irr::u32 r, irr::u32 g, irr::u32 b, irr::u32 a=0xFF) -> irr::u16"""
    return _irrlicht.RGBA16(r, g, b, a)

def RGB16(r, g, b):
    r"""RGB16(irr::u32 r, irr::u32 g, irr::u32 b) -> irr::u16"""
    return _irrlicht.RGB16(r, g, b)

def RGB16from16(r, g, b):
    r"""RGB16from16(irr::u16 r, irr::u16 g, irr::u16 b) -> irr::u16"""
    return _irrlicht.RGB16from16(r, g, b)

def X8R8G8B8toA1R5G5B5(color):
    r"""X8R8G8B8toA1R5G5B5(irr::u32 color) -> irr::u16"""
    return _irrlicht.X8R8G8B8toA1R5G5B5(color)

def A8R8G8B8toA1R5G5B5(color):
    r"""A8R8G8B8toA1R5G5B5(irr::u32 color) -> irr::u16"""
    return _irrlicht.A8R8G8B8toA1R5G5B5(color)

def A8R8G8B8toR5G6B5(color):
    r"""A8R8G8B8toR5G6B5(irr::u32 color) -> irr::u16"""
    return _irrlicht.A8R8G8B8toR5G6B5(color)

def A1R5G5B5toA8R8G8B8(color):
    r"""A1R5G5B5toA8R8G8B8(irr::u16 color) -> irr::u32"""
    return _irrlicht.A1R5G5B5toA8R8G8B8(color)

def R5G6B5toA8R8G8B8(color):
    r"""R5G6B5toA8R8G8B8(irr::u16 color) -> irr::u32"""
    return _irrlicht.R5G6B5toA8R8G8B8(color)

def R5G6B5toA1R5G5B5(color):
    r"""R5G6B5toA1R5G5B5(irr::u16 color) -> irr::u16"""
    return _irrlicht.R5G6B5toA1R5G5B5(color)

def A1R5G5B5toR5G6B5(color):
    r"""A1R5G5B5toR5G6B5(irr::u16 color) -> irr::u16"""
    return _irrlicht.A1R5G5B5toR5G6B5(color)

def getAlpha(color):
    r"""getAlpha(irr::u16 color) -> irr::u32"""
    return _irrlicht.getAlpha(color)

def getRed(color):
    r"""getRed(irr::u16 color) -> irr::u32"""
    return _irrlicht.getRed(color)

def getGreen(color):
    r"""getGreen(irr::u16 color) -> irr::u32"""
    return _irrlicht.getGreen(color)

def getBlue(color):
    r"""getBlue(irr::u16 color) -> irr::u32"""
    return _irrlicht.getBlue(color)

def getAverage(color):
    r"""getAverage(irr::s16 color) -> irr::s32"""
    return _irrlicht.getAverage(color)
class SColor(object):
    r"""Proxy of C++ irr::video::SColor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SColor self) -> SColor
        __init__(SColor self, irr::u32 a, irr::u32 r, irr::u32 g, irr::u32 b) -> SColor
        __init__(SColor self, irr::u32 clr) -> SColor
        """
        _irrlicht.SColor_swiginit(self, _irrlicht.new_SColor(*args))

    def getAlpha(self):
        r"""getAlpha(SColor self) -> irr::u32"""
        return _irrlicht.SColor_getAlpha(self)

    def getRed(self):
        r"""getRed(SColor self) -> irr::u32"""
        return _irrlicht.SColor_getRed(self)

    def getGreen(self):
        r"""getGreen(SColor self) -> irr::u32"""
        return _irrlicht.SColor_getGreen(self)

    def getBlue(self):
        r"""getBlue(SColor self) -> irr::u32"""
        return _irrlicht.SColor_getBlue(self)

    def getLightness(self):
        r"""getLightness(SColor self) -> irr::f32"""
        return _irrlicht.SColor_getLightness(self)

    def getLuminance(self):
        r"""getLuminance(SColor self) -> irr::f32"""
        return _irrlicht.SColor_getLuminance(self)

    def getAverage(self):
        r"""getAverage(SColor self) -> irr::u32"""
        return _irrlicht.SColor_getAverage(self)

    def setAlpha(self, a):
        r"""setAlpha(SColor self, irr::u32 a)"""
        return _irrlicht.SColor_setAlpha(self, a)

    def setRed(self, r):
        r"""setRed(SColor self, irr::u32 r)"""
        return _irrlicht.SColor_setRed(self, r)

    def setGreen(self, g):
        r"""setGreen(SColor self, irr::u32 g)"""
        return _irrlicht.SColor_setGreen(self, g)

    def setBlue(self, b):
        r"""setBlue(SColor self, irr::u32 b)"""
        return _irrlicht.SColor_setBlue(self, b)

    def toA1R5G5B5(self):
        r"""toA1R5G5B5(SColor self) -> irr::u16"""
        return _irrlicht.SColor_toA1R5G5B5(self)

    def toOpenGLColor(self, dest):
        r"""toOpenGLColor(SColor self, irr::u8 * dest)"""
        return _irrlicht.SColor_toOpenGLColor(self, dest)

    def set(self, *args):
        r"""
        set(SColor self, irr::u32 a, irr::u32 r, irr::u32 g, irr::u32 b)
        set(SColor self, irr::u32 col)
        """
        return _irrlicht.SColor_set(self, *args)

    def __eq__(self, other):
        r"""__eq__(SColor self, SColor other) -> bool"""
        return _irrlicht.SColor___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(SColor self, SColor other) -> bool"""
        return _irrlicht.SColor___ne__(self, other)

    def __lt__(self, other):
        r"""__lt__(SColor self, SColor other) -> bool"""
        return _irrlicht.SColor___lt__(self, other)

    def __add__(self, other):
        r"""__add__(SColor self, SColor other) -> SColor"""
        return _irrlicht.SColor___add__(self, other)

    def getInterpolated(self, other, d):
        r"""getInterpolated(SColor self, SColor other, irr::f32 d) -> SColor"""
        return _irrlicht.SColor_getInterpolated(self, other, d)

    def getInterpolated_quadratic(self, c1, c2, d):
        r"""getInterpolated_quadratic(SColor self, SColor c1, SColor c2, irr::f32 d) -> SColor"""
        return _irrlicht.SColor_getInterpolated_quadratic(self, c1, c2, d)

    def setData(self, data, format):
        r"""setData(SColor self, void const * data, irr::video::ECOLOR_FORMAT format)"""
        return _irrlicht.SColor_setData(self, data, format)

    def getData(self, data, format):
        r"""getData(SColor self, void * data, irr::video::ECOLOR_FORMAT format)"""
        return _irrlicht.SColor_getData(self, data, format)
    color = property(_irrlicht.SColor_color_get, _irrlicht.SColor_color_set, doc=r"""color : irr::u32""")
    __swig_destroy__ = _irrlicht.delete_SColor

# Register SColor in _irrlicht:
_irrlicht.SColor_swigregister(SColor)

class SColorf(object):
    r"""Proxy of C++ irr::video::SColorf class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SColorf self) -> SColorf
        __init__(SColorf self, irr::f32 r, irr::f32 g, irr::f32 b, irr::f32 a=1.0) -> SColorf
        __init__(SColorf self, SColor c) -> SColorf
        """
        _irrlicht.SColorf_swiginit(self, _irrlicht.new_SColorf(*args))

    def toSColor(self):
        r"""toSColor(SColorf self) -> SColor"""
        return _irrlicht.SColorf_toSColor(self)

    def set(self, *args):
        r"""
        set(SColorf self, irr::f32 rr, irr::f32 gg, irr::f32 bb)
        set(SColorf self, irr::f32 aa, irr::f32 rr, irr::f32 gg, irr::f32 bb)
        """
        return _irrlicht.SColorf_set(self, *args)

    def getInterpolated(self, other, d):
        r"""getInterpolated(SColorf self, SColorf other, irr::f32 d) -> SColorf"""
        return _irrlicht.SColorf_getInterpolated(self, other, d)

    def getInterpolated_quadratic(self, c1, c2, d):
        r"""getInterpolated_quadratic(SColorf self, SColorf c1, SColorf c2, irr::f32 d) -> SColorf"""
        return _irrlicht.SColorf_getInterpolated_quadratic(self, c1, c2, d)

    def setColorComponentValue(self, index, value):
        r"""setColorComponentValue(SColorf self, irr::s32 index, irr::f32 value)"""
        return _irrlicht.SColorf_setColorComponentValue(self, index, value)

    def getAlpha(self):
        r"""getAlpha(SColorf self) -> irr::f32"""
        return _irrlicht.SColorf_getAlpha(self)

    def getRed(self):
        r"""getRed(SColorf self) -> irr::f32"""
        return _irrlicht.SColorf_getRed(self)

    def getGreen(self):
        r"""getGreen(SColorf self) -> irr::f32"""
        return _irrlicht.SColorf_getGreen(self)

    def getBlue(self):
        r"""getBlue(SColorf self) -> irr::f32"""
        return _irrlicht.SColorf_getBlue(self)
    r = property(_irrlicht.SColorf_r_get, _irrlicht.SColorf_r_set, doc=r"""r : irr::f32""")
    g = property(_irrlicht.SColorf_g_get, _irrlicht.SColorf_g_set, doc=r"""g : irr::f32""")
    b = property(_irrlicht.SColorf_b_get, _irrlicht.SColorf_b_set, doc=r"""b : irr::f32""")
    a = property(_irrlicht.SColorf_a_get, _irrlicht.SColorf_a_set, doc=r"""a : irr::f32""")
    __swig_destroy__ = _irrlicht.delete_SColorf

# Register SColorf in _irrlicht:
_irrlicht.SColorf_swigregister(SColorf)

class SColorHSL(object):
    r"""Proxy of C++ irr::video::SColorHSL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, h=0., s=0., l=0.):
        r"""__init__(SColorHSL self, irr::f32 h=0., irr::f32 s=0., irr::f32 l=0.) -> SColorHSL"""
        _irrlicht.SColorHSL_swiginit(self, _irrlicht.new_SColorHSL(h, s, l))

    def fromRGB(self, color):
        r"""fromRGB(SColorHSL self, SColorf color)"""
        return _irrlicht.SColorHSL_fromRGB(self, color)

    def toRGB(self, color):
        r"""toRGB(SColorHSL self, SColorf color)"""
        return _irrlicht.SColorHSL_toRGB(self, color)
    Hue = property(_irrlicht.SColorHSL_Hue_get, _irrlicht.SColorHSL_Hue_set, doc=r"""Hue : irr::f32""")
    Saturation = property(_irrlicht.SColorHSL_Saturation_get, _irrlicht.SColorHSL_Saturation_set, doc=r"""Saturation : irr::f32""")
    Luminance = property(_irrlicht.SColorHSL_Luminance_get, _irrlicht.SColorHSL_Luminance_set, doc=r"""Luminance : irr::f32""")
    __swig_destroy__ = _irrlicht.delete_SColorHSL

# Register SColorHSL in _irrlicht:
_irrlicht.SColorHSL_swigregister(SColorHSL)

ETS_VIEW = _irrlicht.ETS_VIEW

ETS_WORLD = _irrlicht.ETS_WORLD

ETS_PROJECTION = _irrlicht.ETS_PROJECTION

ETS_TEXTURE_0 = _irrlicht.ETS_TEXTURE_0

ETS_TEXTURE_1 = _irrlicht.ETS_TEXTURE_1

ETS_TEXTURE_2 = _irrlicht.ETS_TEXTURE_2

ETS_TEXTURE_3 = _irrlicht.ETS_TEXTURE_3

ETS_COUNT = _irrlicht.ETS_COUNT

ELR_DEVICE = _irrlicht.ELR_DEVICE

ELR_TEXTURES = _irrlicht.ELR_TEXTURES

ELR_RTTS = _irrlicht.ELR_RTTS

ELR_HW_BUFFERS = _irrlicht.ELR_HW_BUFFERS

ERT_FRAME_BUFFER = _irrlicht.ERT_FRAME_BUFFER

ERT_RENDER_TEXTURE = _irrlicht.ERT_RENDER_TEXTURE

ERT_MULTI_RENDER_TEXTURES = _irrlicht.ERT_MULTI_RENDER_TEXTURES

ERT_STEREO_LEFT_BUFFER = _irrlicht.ERT_STEREO_LEFT_BUFFER

ERT_STEREO_RIGHT_BUFFER = _irrlicht.ERT_STEREO_RIGHT_BUFFER

ERT_STEREO_BOTH_BUFFERS = _irrlicht.ERT_STEREO_BOTH_BUFFERS

ERT_AUX_BUFFER0 = _irrlicht.ERT_AUX_BUFFER0

ERT_AUX_BUFFER1 = _irrlicht.ERT_AUX_BUFFER1

ERT_AUX_BUFFER2 = _irrlicht.ERT_AUX_BUFFER2

ERT_AUX_BUFFER3 = _irrlicht.ERT_AUX_BUFFER3

ERT_AUX_BUFFER4 = _irrlicht.ERT_AUX_BUFFER4

EFT_FOG_EXP = _irrlicht.EFT_FOG_EXP

EFT_FOG_LINEAR = _irrlicht.EFT_FOG_LINEAR

EFT_FOG_EXP2 = _irrlicht.EFT_FOG_EXP2

class SOverrideMaterial(object):
    r"""Proxy of C++ irr::video::SOverrideMaterial class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Material = property(_irrlicht.SOverrideMaterial_Material_get, _irrlicht.SOverrideMaterial_Material_set, doc=r"""Material : SMaterial""")
    EnableFlags = property(_irrlicht.SOverrideMaterial_EnableFlags_get, _irrlicht.SOverrideMaterial_EnableFlags_set, doc=r"""EnableFlags : irr::u32""")
    EnablePasses = property(_irrlicht.SOverrideMaterial_EnablePasses_get, _irrlicht.SOverrideMaterial_EnablePasses_set, doc=r"""EnablePasses : irr::u16""")
    Enabled = property(_irrlicht.SOverrideMaterial_Enabled_get, _irrlicht.SOverrideMaterial_Enabled_set, doc=r"""Enabled : bool""")

    def __init__(self):
        r"""__init__(SOverrideMaterial self) -> SOverrideMaterial"""
        _irrlicht.SOverrideMaterial_swiginit(self, _irrlicht.new_SOverrideMaterial())

    def apply(self, material):
        r"""apply(SOverrideMaterial self, SMaterial & material)"""
        return _irrlicht.SOverrideMaterial_apply(self, material)
    __swig_destroy__ = _irrlicht.delete_SOverrideMaterial

# Register SOverrideMaterial in _irrlicht:
_irrlicht.SOverrideMaterial_swigregister(SOverrideMaterial)
cvar = _irrlicht.cvar
FogTypeNames = cvar.FogTypeNames

class IRenderTarget(object):
    r"""Proxy of C++ irr::video::IRenderTarget class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(IRenderTarget self, ITexture * texture, E_COLOR_PLANE colorMask=ECP_ALL, E_BLEND_FACTOR blendFuncSrc=EBF_ONE, E_BLEND_FACTOR blendFuncDst=EBF_ONE_MINUS_SRC_ALPHA, E_BLEND_OPERATION blendOp=EBO_NONE) -> IRenderTarget
        __init__(IRenderTarget self, irr::video::E_RENDER_TARGET target, E_COLOR_PLANE colorMask=ECP_ALL, E_BLEND_FACTOR blendFuncSrc=EBF_ONE, E_BLEND_FACTOR blendFuncDst=EBF_ONE_MINUS_SRC_ALPHA, E_BLEND_OPERATION blendOp=EBO_NONE) -> IRenderTarget
        """
        _irrlicht.IRenderTarget_swiginit(self, _irrlicht.new_IRenderTarget(*args))

    def __ne__(self, other):
        r"""__ne__(IRenderTarget self, IRenderTarget other) -> bool"""
        return _irrlicht.IRenderTarget___ne__(self, other)
    RenderTexture = property(_irrlicht.IRenderTarget_RenderTexture_get, _irrlicht.IRenderTarget_RenderTexture_set, doc=r"""RenderTexture : p.ITexture""")
    TargetType = property(_irrlicht.IRenderTarget_TargetType_get, _irrlicht.IRenderTarget_TargetType_set, doc=r"""TargetType : irr::video::E_RENDER_TARGET""")
    ColorMask = property(_irrlicht.IRenderTarget_ColorMask_get, _irrlicht.IRenderTarget_ColorMask_set, doc=r"""ColorMask : E_COLOR_PLANE""")
    BlendFuncSrc = property(_irrlicht.IRenderTarget_BlendFuncSrc_get, _irrlicht.IRenderTarget_BlendFuncSrc_set, doc=r"""BlendFuncSrc : E_BLEND_FACTOR""")
    BlendFuncDst = property(_irrlicht.IRenderTarget_BlendFuncDst_get, _irrlicht.IRenderTarget_BlendFuncDst_set, doc=r"""BlendFuncDst : E_BLEND_FACTOR""")
    BlendOp = property(_irrlicht.IRenderTarget_BlendOp_get, _irrlicht.IRenderTarget_BlendOp_set, doc=r"""BlendOp : E_BLEND_OPERATION""")
    __swig_destroy__ = _irrlicht.delete_IRenderTarget

# Register IRenderTarget in _irrlicht:
_irrlicht.IRenderTarget_swigregister(IRenderTarget)

class IVideoDriver(IReferenceCounted):
    r"""Proxy of C++ irr::video::IVideoDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def beginScene(self, *args):
        r"""beginScene(IVideoDriver self, bool backBuffer=True, bool zBuffer=True, SColor color=irr::video::SColor(255,0,0,0), SExposedVideoData const & videoData=SExposedVideoData(), irr::core::rect< irr::s32 > * sourceRect=None) -> bool"""
        return _irrlicht.IVideoDriver_beginScene(self, *args)

    def endScene(self):
        r"""endScene(IVideoDriver self) -> bool"""
        return _irrlicht.IVideoDriver_endScene(self)

    def queryFeature(self, feature):
        r"""queryFeature(IVideoDriver self, E_VIDEO_DRIVER_FEATURE feature) -> bool"""
        return _irrlicht.IVideoDriver_queryFeature(self, feature)

    def disableFeature(self, feature, flag=True):
        r"""disableFeature(IVideoDriver self, E_VIDEO_DRIVER_FEATURE feature, bool flag=True)"""
        return _irrlicht.IVideoDriver_disableFeature(self, feature, flag)

    def getDriverAttributes(self):
        r"""getDriverAttributes(IVideoDriver self) -> irr::io::IAttributes const &"""
        return _irrlicht.IVideoDriver_getDriverAttributes(self)

    def checkDriverReset(self):
        r"""checkDriverReset(IVideoDriver self) -> bool"""
        return _irrlicht.IVideoDriver_checkDriverReset(self)

    def setTransform(self, state, mat):
        r"""setTransform(IVideoDriver self, irr::video::E_TRANSFORMATION_STATE state, irr::core::matrix4 const & mat)"""
        return _irrlicht.IVideoDriver_setTransform(self, state, mat)

    def getTransform(self, state):
        r"""getTransform(IVideoDriver self, irr::video::E_TRANSFORMATION_STATE state) -> irr::core::matrix4 const &"""
        return _irrlicht.IVideoDriver_getTransform(self, state)

    def getImageLoaderCount(self):
        r"""getImageLoaderCount(IVideoDriver self) -> irr::u32"""
        return _irrlicht.IVideoDriver_getImageLoaderCount(self)

    def getImageLoader(self, n):
        r"""getImageLoader(IVideoDriver self, irr::u32 n) -> irr::video::IImageLoader *"""
        return _irrlicht.IVideoDriver_getImageLoader(self, n)

    def getImageWriterCount(self):
        r"""getImageWriterCount(IVideoDriver self) -> irr::u32"""
        return _irrlicht.IVideoDriver_getImageWriterCount(self)

    def getImageWriter(self, n):
        r"""getImageWriter(IVideoDriver self, irr::u32 n) -> IImageWriter"""
        return _irrlicht.IVideoDriver_getImageWriter(self, n)

    def setMaterial(self, material):
        r"""setMaterial(IVideoDriver self, SMaterial const & material)"""
        return _irrlicht.IVideoDriver_setMaterial(self, material)

    def getTexture(self, *args):
        r"""
        getTexture(IVideoDriver self, irr::io::path const & filename) -> ITexture
        getTexture(IVideoDriver self, irr::io::IReadFile * file) -> ITexture *
        """
        return _irrlicht.IVideoDriver_getTexture(self, *args)

    def getTextureByIndex(self, index):
        r"""getTextureByIndex(IVideoDriver self, irr::u32 index) -> ITexture *"""
        return _irrlicht.IVideoDriver_getTextureByIndex(self, index)

    def getTextureCount(self):
        r"""getTextureCount(IVideoDriver self) -> irr::u32"""
        return _irrlicht.IVideoDriver_getTextureCount(self)

    def renameTexture(self, texture, newName):
        r"""renameTexture(IVideoDriver self, ITexture * texture, irr::io::path const & newName)"""
        return _irrlicht.IVideoDriver_renameTexture(self, texture, newName)

    def addTexture(self, *args):
        r"""
        addTexture(IVideoDriver self, dimension2du size, irr::io::path const & name, irr::video::ECOLOR_FORMAT format=ECF_A8R8G8B8) -> ITexture
        addTexture(IVideoDriver self, irr::io::path const & name, IImage image, void * mipmapData=None) -> ITexture
        """
        return _irrlicht.IVideoDriver_addTexture(self, *args)

    def addRenderTargetTexture(self, *args):
        r"""addRenderTargetTexture(IVideoDriver self, dimension2du size, irr::io::path const & name="rt", irr::video::ECOLOR_FORMAT const format=ECF_UNKNOWN) -> ITexture"""
        return _irrlicht.IVideoDriver_addRenderTargetTexture(self, *args)

    def removeTexture(self, texture):
        r"""removeTexture(IVideoDriver self, ITexture * texture)"""
        return _irrlicht.IVideoDriver_removeTexture(self, texture)

    def removeAllTextures(self):
        r"""removeAllTextures(IVideoDriver self)"""
        return _irrlicht.IVideoDriver_removeAllTextures(self)

    def removeHardwareBuffer(self, mb):
        r"""removeHardwareBuffer(IVideoDriver self, irr::scene::IMeshBuffer const * mb)"""
        return _irrlicht.IVideoDriver_removeHardwareBuffer(self, mb)

    def removeAllHardwareBuffers(self):
        r"""removeAllHardwareBuffers(IVideoDriver self)"""
        return _irrlicht.IVideoDriver_removeAllHardwareBuffers(self)

    def addOcclusionQuery(self, node, mesh=None):
        r"""addOcclusionQuery(IVideoDriver self, ISceneNode node, irr::scene::IMesh const * mesh=None)"""
        return _irrlicht.IVideoDriver_addOcclusionQuery(self, node, mesh)

    def removeOcclusionQuery(self, node):
        r"""removeOcclusionQuery(IVideoDriver self, ISceneNode node)"""
        return _irrlicht.IVideoDriver_removeOcclusionQuery(self, node)

    def removeAllOcclusionQueries(self):
        r"""removeAllOcclusionQueries(IVideoDriver self)"""
        return _irrlicht.IVideoDriver_removeAllOcclusionQueries(self)

    def runOcclusionQuery(self, node, visible=False):
        r"""runOcclusionQuery(IVideoDriver self, ISceneNode node, bool visible=False)"""
        return _irrlicht.IVideoDriver_runOcclusionQuery(self, node, visible)

    def runAllOcclusionQueries(self, visible=False):
        r"""runAllOcclusionQueries(IVideoDriver self, bool visible=False)"""
        return _irrlicht.IVideoDriver_runAllOcclusionQueries(self, visible)

    def updateOcclusionQuery(self, node, block=True):
        r"""updateOcclusionQuery(IVideoDriver self, ISceneNode node, bool block=True)"""
        return _irrlicht.IVideoDriver_updateOcclusionQuery(self, node, block)

    def updateAllOcclusionQueries(self, block=True):
        r"""updateAllOcclusionQueries(IVideoDriver self, bool block=True)"""
        return _irrlicht.IVideoDriver_updateAllOcclusionQueries(self, block)

    def getOcclusionQueryResult(self, node):
        r"""getOcclusionQueryResult(IVideoDriver self, ISceneNode node) -> irr::u32"""
        return _irrlicht.IVideoDriver_getOcclusionQueryResult(self, node)

    def makeColorKeyTexture(self, *args):
        r"""
        makeColorKeyTexture(IVideoDriver self, irr::video::ITexture * texture, SColor color, bool zeroTexels=False)
        makeColorKeyTexture(IVideoDriver self, irr::video::ITexture * texture, irr::core::position2d< irr::s32 > colorKeyPixelPos, bool zeroTexels=False)
        """
        return _irrlicht.IVideoDriver_makeColorKeyTexture(self, *args)

    def makeNormalMapTexture(self, texture, amplitude=1.0):
        r"""makeNormalMapTexture(IVideoDriver self, irr::video::ITexture * texture, irr::f32 amplitude=1.0)"""
        return _irrlicht.IVideoDriver_makeNormalMapTexture(self, texture, amplitude)

    def setRenderTarget(self, *args):
        r"""
        setRenderTarget(IVideoDriver self, irr::video::ITexture * texture, bool clearBackBuffer=True, bool clearZBuffer=True, SColor color=irr::video::SColor(0,0,0,0)) -> bool
        setRenderTarget(IVideoDriver self, irr::video::E_RENDER_TARGET target, bool clearTarget=True, bool clearZBuffer=True, SColor color=irr::video::SColor(0,0,0,0)) -> bool
        setRenderTarget(IVideoDriver self, irr::core::array< irr::video::IRenderTarget > const & texture, bool clearBackBuffer=True, bool clearZBuffer=True, SColor color=irr::video::SColor(0,0,0,0)) -> bool
        """
        return _irrlicht.IVideoDriver_setRenderTarget(self, *args)

    def setViewPort(self, area):
        r"""setViewPort(IVideoDriver self, irr::core::rect< irr::s32 > const & area)"""
        return _irrlicht.IVideoDriver_setViewPort(self, area)

    def getViewPort(self):
        r"""getViewPort(IVideoDriver self) -> irr::core::rect< irr::s32 > const &"""
        return _irrlicht.IVideoDriver_getViewPort(self)

    def drawVertexPrimitiveList(self, *args):
        r"""drawVertexPrimitiveList(IVideoDriver self, void const * vertices, irr::u32 vertexCount, void const * indexList, irr::u32 primCount, E_VERTEX_TYPE vType=EVT_STANDARD, irr::scene::E_PRIMITIVE_TYPE pType=scene::EPT_TRIANGLES, E_INDEX_TYPE iType=EIT_16BIT)"""
        return _irrlicht.IVideoDriver_drawVertexPrimitiveList(self, *args)

    def draw2DVertexPrimitiveList(self, *args):
        r"""draw2DVertexPrimitiveList(IVideoDriver self, void const * vertices, irr::u32 vertexCount, void const * indexList, irr::u32 primCount, E_VERTEX_TYPE vType=EVT_STANDARD, irr::scene::E_PRIMITIVE_TYPE pType=scene::EPT_TRIANGLES, E_INDEX_TYPE iType=EIT_16BIT)"""
        return _irrlicht.IVideoDriver_draw2DVertexPrimitiveList(self, *args)

    def drawIndexedTriangleList(self, *args):
        r"""
        drawIndexedTriangleList(IVideoDriver self, irr::video::S3DVertex const * vertices, irr::u32 vertexCount, irr::u16 const * indexList, irr::u32 triangleCount)
        drawIndexedTriangleList(IVideoDriver self, irr::video::S3DVertex2TCoords const * vertices, irr::u32 vertexCount, irr::u16 const * indexList, irr::u32 triangleCount)
        drawIndexedTriangleList(IVideoDriver self, irr::video::S3DVertexTangents const * vertices, irr::u32 vertexCount, irr::u16 const * indexList, irr::u32 triangleCount)
        """
        return _irrlicht.IVideoDriver_drawIndexedTriangleList(self, *args)

    def drawIndexedTriangleFan(self, *args):
        r"""
        drawIndexedTriangleFan(IVideoDriver self, irr::video::S3DVertex const * vertices, irr::u32 vertexCount, irr::u16 const * indexList, irr::u32 triangleCount)
        drawIndexedTriangleFan(IVideoDriver self, irr::video::S3DVertex2TCoords const * vertices, irr::u32 vertexCount, irr::u16 const * indexList, irr::u32 triangleCount)
        drawIndexedTriangleFan(IVideoDriver self, irr::video::S3DVertexTangents const * vertices, irr::u32 vertexCount, irr::u16 const * indexList, irr::u32 triangleCount)
        """
        return _irrlicht.IVideoDriver_drawIndexedTriangleFan(self, *args)

    def draw3DLine(self, *args):
        r"""draw3DLine(IVideoDriver self, vector3df start, vector3df end, SColor color=irr::video::SColor(255,255,255,255))"""
        return _irrlicht.IVideoDriver_draw3DLine(self, *args)

    def draw3DTriangle(self, *args):
        r"""draw3DTriangle(IVideoDriver self, irr::core::triangle3df const & triangle, SColor color=irr::video::SColor(255,255,255,255))"""
        return _irrlicht.IVideoDriver_draw3DTriangle(self, *args)

    def draw3DBox(self, *args):
        r"""draw3DBox(IVideoDriver self, irr::core::aabbox3d< irr::f32 > const & box, SColor color=irr::video::SColor(255,255,255,255))"""
        return _irrlicht.IVideoDriver_draw3DBox(self, *args)

    def draw2DImageBatch(self, *args):
        r"""
        draw2DImageBatch(IVideoDriver self, irr::video::ITexture const * texture, irr::core::position2d< irr::s32 > const & pos, irr::core::array< irr::core::rect< irr::s32 > > const & sourceRects, irr::core::array< irr::s32 > const & indices, irr::s32 kerningWidth=0, irr::core::rect< irr::s32 > const * clipRect=None, SColor color=irr::video::SColor(255,255,255,255), bool useAlphaChannelOfTexture=False)
        draw2DImageBatch(IVideoDriver self, irr::video::ITexture const * texture, irr::core::array< irr::core::position2d< irr::s32 > > const & positions, irr::core::array< irr::core::rect< irr::s32 > > const & sourceRects, irr::core::rect< irr::s32 > const * clipRect=None, SColor color=irr::video::SColor(255,255,255,255), bool useAlphaChannelOfTexture=False)
        """
        return _irrlicht.IVideoDriver_draw2DImageBatch(self, *args)

    def draw2DImage(self, *args):
        r"""
        draw2DImage(IVideoDriver self, irr::video::ITexture const * texture, irr::core::position2d< irr::s32 > const & destPos)
        draw2DImage(IVideoDriver self, irr::video::ITexture const * texture, irr::core::position2d< irr::s32 > const & destPos, irr::core::rect< irr::s32 > const & sourceRect, irr::core::rect< irr::s32 > const * clipRect=None, SColor color=irr::video::SColor(255,255,255,255), bool useAlphaChannelOfTexture=False)
        draw2DImage(IVideoDriver self, irr::video::ITexture const * texture, irr::core::rect< irr::s32 > const & destRect, irr::core::rect< irr::s32 > const & sourceRect, irr::core::rect< irr::s32 > const * clipRect=None, SColor colors=None, bool useAlphaChannelOfTexture=False)
        """
        return _irrlicht.IVideoDriver_draw2DImage(self, *args)

    def draw2DRectangle(self, *args):
        r"""
        draw2DRectangle(IVideoDriver self, SColor color, irr::core::rect< irr::s32 > const & pos, irr::core::rect< irr::s32 > const * clip=None)
        draw2DRectangle(IVideoDriver self, irr::core::rect< irr::s32 > const & pos, SColor colorLeftUp, SColor colorRightUp, SColor colorLeftDown, SColor colorRightDown, irr::core::rect< irr::s32 > const * clip=None)
        """
        return _irrlicht.IVideoDriver_draw2DRectangle(self, *args)

    def draw2DRectangleOutline(self, *args):
        r"""draw2DRectangleOutline(IVideoDriver self, irr::core::recti const & pos, SColor color=irr::video::SColor(255,255,255,255))"""
        return _irrlicht.IVideoDriver_draw2DRectangleOutline(self, *args)

    def draw2DLine(self, *args):
        r"""draw2DLine(IVideoDriver self, irr::core::position2d< irr::s32 > const & start, irr::core::position2d< irr::s32 > const & end, SColor color=irr::video::SColor(255,255,255,255))"""
        return _irrlicht.IVideoDriver_draw2DLine(self, *args)

    def drawPixel(self, x, y, color):
        r"""drawPixel(IVideoDriver self, irr::u32 x, irr::u32 y, SColor color)"""
        return _irrlicht.IVideoDriver_drawPixel(self, x, y, color)

    def draw2DPolygon(self, *args):
        r"""draw2DPolygon(IVideoDriver self, irr::core::position2d< irr::s32 > center, irr::f32 radius, SColor color=irr::video::SColor(100,255,255,255), irr::s32 vertexCount=10)"""
        return _irrlicht.IVideoDriver_draw2DPolygon(self, *args)

    def drawStencilShadowVolume(self, triangles, zfail=True, debugDataVisible=0):
        r"""drawStencilShadowVolume(IVideoDriver self, irr::core::array< irr::core::vector3df > const & triangles, bool zfail=True, irr::u32 debugDataVisible=0)"""
        return _irrlicht.IVideoDriver_drawStencilShadowVolume(self, triangles, zfail, debugDataVisible)

    def drawStencilShadow(self, *args):
        r"""drawStencilShadow(IVideoDriver self, bool clearStencilBuffer=False, SColor leftUpEdge=irr::video::SColor(255,0,0,0), SColor rightUpEdge=irr::video::SColor(255,0,0,0), SColor leftDownEdge=irr::video::SColor(255,0,0,0), SColor rightDownEdge=irr::video::SColor(255,0,0,0))"""
        return _irrlicht.IVideoDriver_drawStencilShadow(self, *args)

    def drawMeshBuffer(self, mb):
        r"""drawMeshBuffer(IVideoDriver self, irr::scene::IMeshBuffer const * mb)"""
        return _irrlicht.IVideoDriver_drawMeshBuffer(self, mb)

    def drawMeshBufferNormals(self, *args):
        r"""drawMeshBufferNormals(IVideoDriver self, irr::scene::IMeshBuffer const * mb, irr::f32 length=10., SColor color=0xffffffff)"""
        return _irrlicht.IVideoDriver_drawMeshBufferNormals(self, *args)

    def setFog(self, *args):
        r"""setFog(IVideoDriver self, SColor color=irr::video::SColor(0,255,255,255), irr::video::E_FOG_TYPE fogType=EFT_FOG_LINEAR, irr::f32 start=50.0, irr::f32 end=100.0, irr::f32 density=0.01, bool pixelFog=False, bool rangeFog=False)"""
        return _irrlicht.IVideoDriver_setFog(self, *args)

    def getFog(self, color, fogType, start, end, density, pixelFog, rangeFog):
        r"""getFog(IVideoDriver self, SColor color, irr::video::E_FOG_TYPE & fogType, irr::f32 & start, irr::f32 & end, irr::f32 & density, bool & pixelFog, bool & rangeFog)"""
        return _irrlicht.IVideoDriver_getFog(self, color, fogType, start, end, density, pixelFog, rangeFog)

    def getColorFormat(self):
        r"""getColorFormat(IVideoDriver self) -> irr::video::ECOLOR_FORMAT"""
        return _irrlicht.IVideoDriver_getColorFormat(self)

    def getScreenSize(self):
        r"""getScreenSize(IVideoDriver self) -> dimension2du"""
        return _irrlicht.IVideoDriver_getScreenSize(self)

    def getCurrentRenderTargetSize(self):
        r"""getCurrentRenderTargetSize(IVideoDriver self) -> dimension2du"""
        return _irrlicht.IVideoDriver_getCurrentRenderTargetSize(self)

    def getFPS(self):
        r"""getFPS(IVideoDriver self) -> irr::s32"""
        return _irrlicht.IVideoDriver_getFPS(self)

    def getPrimitiveCountDrawn(self, mode=0):
        r"""getPrimitiveCountDrawn(IVideoDriver self, irr::u32 mode=0) -> irr::u32"""
        return _irrlicht.IVideoDriver_getPrimitiveCountDrawn(self, mode)

    def deleteAllDynamicLights(self):
        r"""deleteAllDynamicLights(IVideoDriver self)"""
        return _irrlicht.IVideoDriver_deleteAllDynamicLights(self)

    def addDynamicLight(self, light):
        r"""addDynamicLight(IVideoDriver self, irr::video::SLight const & light) -> irr::s32"""
        return _irrlicht.IVideoDriver_addDynamicLight(self, light)

    def getMaximalDynamicLightAmount(self):
        r"""getMaximalDynamicLightAmount(IVideoDriver self) -> irr::u32"""
        return _irrlicht.IVideoDriver_getMaximalDynamicLightAmount(self)

    def getDynamicLightCount(self):
        r"""getDynamicLightCount(IVideoDriver self) -> irr::u32"""
        return _irrlicht.IVideoDriver_getDynamicLightCount(self)

    def getDynamicLight(self, idx):
        r"""getDynamicLight(IVideoDriver self, irr::u32 idx) -> irr::video::SLight const &"""
        return _irrlicht.IVideoDriver_getDynamicLight(self, idx)

    def turnLightOn(self, lightIndex, turnOn):
        r"""turnLightOn(IVideoDriver self, irr::s32 lightIndex, bool turnOn)"""
        return _irrlicht.IVideoDriver_turnLightOn(self, lightIndex, turnOn)

    def getName(self):
        r"""getName(IVideoDriver self) -> wchar_t const *"""
        return _irrlicht.IVideoDriver_getName(self)

    def addExternalImageLoader(self, loader):
        r"""addExternalImageLoader(IVideoDriver self, irr::video::IImageLoader * loader)"""
        return _irrlicht.IVideoDriver_addExternalImageLoader(self, loader)

    def addExternalImageWriter(self, writer):
        r"""addExternalImageWriter(IVideoDriver self, IImageWriter writer)"""
        return _irrlicht.IVideoDriver_addExternalImageWriter(self, writer)

    def getMaximalPrimitiveCount(self):
        r"""getMaximalPrimitiveCount(IVideoDriver self) -> irr::u32"""
        return _irrlicht.IVideoDriver_getMaximalPrimitiveCount(self)

    def setTextureCreationFlag(self, flag, enabled=True):
        r"""setTextureCreationFlag(IVideoDriver self, E_TEXTURE_CREATION_FLAG flag, bool enabled=True)"""
        return _irrlicht.IVideoDriver_setTextureCreationFlag(self, flag, enabled)

    def getTextureCreationFlag(self, flag):
        r"""getTextureCreationFlag(IVideoDriver self, E_TEXTURE_CREATION_FLAG flag) -> bool"""
        return _irrlicht.IVideoDriver_getTextureCreationFlag(self, flag)

    def createImageFromFile(self, *args):
        r"""
        createImageFromFile(IVideoDriver self, irr::io::path const & filename) -> IImage
        createImageFromFile(IVideoDriver self, irr::io::IReadFile * file) -> IImage
        """
        return _irrlicht.IVideoDriver_createImageFromFile(self, *args)

    def writeImageToFile(self, *args):
        r"""
        writeImageToFile(IVideoDriver self, IImage image, irr::io::path const & filename, irr::u32 param=0) -> bool
        writeImageToFile(IVideoDriver self, IImage image, IWriteFile file, irr::u32 param=0) -> bool
        """
        return _irrlicht.IVideoDriver_writeImageToFile(self, *args)

    def createImageFromData(self, format, size, data, ownForeignMemory=False, deleteMemory=True):
        r"""createImageFromData(IVideoDriver self, irr::video::ECOLOR_FORMAT format, dimension2du size, void * data, bool ownForeignMemory=False, bool deleteMemory=True) -> IImage"""
        return _irrlicht.IVideoDriver_createImageFromData(self, format, size, data, ownForeignMemory, deleteMemory)

    def createImage(self, *args):
        r"""
        createImage(IVideoDriver self, irr::video::ECOLOR_FORMAT format, dimension2du size) -> IImage
        createImage(IVideoDriver self, irr::video::ECOLOR_FORMAT format, IImage imageToCopy) -> IImage
        createImage(IVideoDriver self, IImage imageToCopy, irr::core::position2d< irr::s32 > const & pos, dimension2du size) -> IImage
        createImage(IVideoDriver self, ITexture * texture, irr::core::position2d< irr::s32 > const & pos, dimension2du size) -> IImage
        """
        return _irrlicht.IVideoDriver_createImage(self, *args)

    def OnResize(self, size):
        r"""OnResize(IVideoDriver self, dimension2du size)"""
        return _irrlicht.IVideoDriver_OnResize(self, size)

    def addMaterialRenderer(self, renderer, name=None):
        r"""addMaterialRenderer(IVideoDriver self, irr::video::IMaterialRenderer * renderer, irr::c8 const * name=None) -> irr::s32"""
        return _irrlicht.IVideoDriver_addMaterialRenderer(self, renderer, name)

    def getMaterialRenderer(self, idx):
        r"""getMaterialRenderer(IVideoDriver self, irr::u32 idx) -> irr::video::IMaterialRenderer *"""
        return _irrlicht.IVideoDriver_getMaterialRenderer(self, idx)

    def getMaterialRendererCount(self):
        r"""getMaterialRendererCount(IVideoDriver self) -> irr::u32"""
        return _irrlicht.IVideoDriver_getMaterialRendererCount(self)

    def getMaterialRendererName(self, idx):
        r"""getMaterialRendererName(IVideoDriver self, irr::u32 idx) -> irr::c8 const *"""
        return _irrlicht.IVideoDriver_getMaterialRendererName(self, idx)

    def setMaterialRendererName(self, idx, name):
        r"""setMaterialRendererName(IVideoDriver self, irr::s32 idx, irr::c8 const * name)"""
        return _irrlicht.IVideoDriver_setMaterialRendererName(self, idx, name)

    def createAttributesFromMaterial(self, material, options=None):
        r"""createAttributesFromMaterial(IVideoDriver self, irr::video::SMaterial const & material, irr::io::SAttributeReadWriteOptions * options=None) -> irr::io::IAttributes"""
        return _irrlicht.IVideoDriver_createAttributesFromMaterial(self, material, options)

    def fillMaterialStructureFromAttributes(self, outMaterial, attributes):
        r"""fillMaterialStructureFromAttributes(IVideoDriver self, irr::video::SMaterial & outMaterial, irr::io::IAttributes * attributes)"""
        return _irrlicht.IVideoDriver_fillMaterialStructureFromAttributes(self, outMaterial, attributes)

    def getExposedVideoData(self):
        r"""getExposedVideoData(IVideoDriver self) -> SExposedVideoData const &"""
        return _irrlicht.IVideoDriver_getExposedVideoData(self)

    def getDriverType(self):
        r"""getDriverType(IVideoDriver self) -> E_DRIVER_TYPE"""
        return _irrlicht.IVideoDriver_getDriverType(self)

    def getGPUProgrammingServices(self):
        r"""getGPUProgrammingServices(IVideoDriver self) -> irr::video::IGPUProgrammingServices *"""
        return _irrlicht.IVideoDriver_getGPUProgrammingServices(self)

    def getMeshManipulator(self):
        r"""getMeshManipulator(IVideoDriver self) -> irr::scene::IMeshManipulator *"""
        return _irrlicht.IVideoDriver_getMeshManipulator(self)

    def clearZBuffer(self):
        r"""clearZBuffer(IVideoDriver self)"""
        return _irrlicht.IVideoDriver_clearZBuffer(self)

    def createScreenShot(self, *args):
        r"""createScreenShot(IVideoDriver self, irr::video::ECOLOR_FORMAT format=ECF_UNKNOWN, irr::video::E_RENDER_TARGET target=ERT_FRAME_BUFFER) -> IImage"""
        return _irrlicht.IVideoDriver_createScreenShot(self, *args)

    def findTexture(self, filename):
        r"""findTexture(IVideoDriver self, irr::io::path const & filename) -> irr::video::ITexture *"""
        return _irrlicht.IVideoDriver_findTexture(self, filename)

    def setClipPlane(self, index, plane, enable=False):
        r"""setClipPlane(IVideoDriver self, irr::u32 index, irr::core::plane3df const & plane, bool enable=False) -> bool"""
        return _irrlicht.IVideoDriver_setClipPlane(self, index, plane, enable)

    def enableClipPlane(self, index, enable):
        r"""enableClipPlane(IVideoDriver self, irr::u32 index, bool enable)"""
        return _irrlicht.IVideoDriver_enableClipPlane(self, index, enable)

    def setMinHardwareBufferVertexCount(self, count):
        r"""setMinHardwareBufferVertexCount(IVideoDriver self, irr::u32 count)"""
        return _irrlicht.IVideoDriver_setMinHardwareBufferVertexCount(self, count)

    def getOverrideMaterial(self):
        r"""getOverrideMaterial(IVideoDriver self) -> SOverrideMaterial"""
        return _irrlicht.IVideoDriver_getOverrideMaterial(self)

    def getMaterial2D(self):
        r"""getMaterial2D(IVideoDriver self) -> SMaterial &"""
        return _irrlicht.IVideoDriver_getMaterial2D(self)

    def enableMaterial2D(self, enable=True):
        r"""enableMaterial2D(IVideoDriver self, bool enable=True)"""
        return _irrlicht.IVideoDriver_enableMaterial2D(self, enable)

    def getVendorInfo(self):
        r"""getVendorInfo(IVideoDriver self) -> irr::core::stringc"""
        return _irrlicht.IVideoDriver_getVendorInfo(self)

    def setAmbientLight(self, color):
        r"""setAmbientLight(IVideoDriver self, SColorf color)"""
        return _irrlicht.IVideoDriver_setAmbientLight(self, color)

    def setAllowZWriteOnTransparent(self, flag):
        r"""setAllowZWriteOnTransparent(IVideoDriver self, bool flag)"""
        return _irrlicht.IVideoDriver_setAllowZWriteOnTransparent(self, flag)

    def getMaxTextureSize(self):
        r"""getMaxTextureSize(IVideoDriver self) -> dimension2du"""
        return _irrlicht.IVideoDriver_getMaxTextureSize(self)

    def convertColor(self, sP, sF, sN, dP, dF):
        r"""convertColor(IVideoDriver self, void const * sP, irr::video::ECOLOR_FORMAT sF, irr::s32 sN, void * dP, irr::video::ECOLOR_FORMAT dF)"""
        return _irrlicht.IVideoDriver_convertColor(self, sP, sF, sN, dP, dF)
    __swig_destroy__ = _irrlicht.delete_IVideoDriver

# Register IVideoDriver in _irrlicht:
_irrlicht.IVideoDriver_swigregister(IVideoDriver)

class ISceneNode(object):
    r"""Proxy of C++ irr::scene::ISceneNode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _irrlicht.delete_ISceneNode

    def OnRegisterSceneNode(self):
        r"""OnRegisterSceneNode(ISceneNode self)"""
        return _irrlicht.ISceneNode_OnRegisterSceneNode(self)

    def OnAnimate(self, timeMs):
        r"""OnAnimate(ISceneNode self, irr::u32 timeMs)"""
        return _irrlicht.ISceneNode_OnAnimate(self, timeMs)

    def render(self):
        r"""render(ISceneNode self)"""
        return _irrlicht.ISceneNode_render(self)

    def getName(self):
        r"""getName(ISceneNode self) -> irr::c8 const *"""
        return _irrlicht.ISceneNode_getName(self)

    def setName(self, *args):
        r"""
        setName(ISceneNode self, irr::c8 const * name)
        setName(ISceneNode self, irr::core::stringc const & name)
        """
        return _irrlicht.ISceneNode_setName(self, *args)

    def getBoundingBox(self):
        r"""getBoundingBox(ISceneNode self) -> irr::core::aabbox3d< irr::f32 > const &"""
        return _irrlicht.ISceneNode_getBoundingBox(self)

    def getTransformedBoundingBox(self):
        r"""getTransformedBoundingBox(ISceneNode self) -> irr::core::aabbox3d< irr::f32 > const"""
        return _irrlicht.ISceneNode_getTransformedBoundingBox(self)

    def getAbsoluteTransformation(self):
        r"""getAbsoluteTransformation(ISceneNode self) -> irr::core::matrix4 const &"""
        return _irrlicht.ISceneNode_getAbsoluteTransformation(self)

    def getRelativeTransformation(self):
        r"""getRelativeTransformation(ISceneNode self) -> irr::core::matrix4"""
        return _irrlicht.ISceneNode_getRelativeTransformation(self)

    def isVisible(self):
        r"""isVisible(ISceneNode self) -> bool"""
        return _irrlicht.ISceneNode_isVisible(self)

    def isTrulyVisible(self):
        r"""isTrulyVisible(ISceneNode self) -> bool"""
        return _irrlicht.ISceneNode_isTrulyVisible(self)

    def setVisible(self, isVisible):
        r"""setVisible(ISceneNode self, bool isVisible)"""
        return _irrlicht.ISceneNode_setVisible(self, isVisible)

    def getID(self):
        r"""getID(ISceneNode self) -> irr::s32"""
        return _irrlicht.ISceneNode_getID(self)

    def setID(self, id):
        r"""setID(ISceneNode self, irr::s32 id)"""
        return _irrlicht.ISceneNode_setID(self, id)

    def addChild(self, child):
        r"""addChild(ISceneNode self, ISceneNode child)"""
        return _irrlicht.ISceneNode_addChild(self, child)

    def removeChild(self, child):
        r"""removeChild(ISceneNode self, ISceneNode child) -> bool"""
        return _irrlicht.ISceneNode_removeChild(self, child)

    def removeAll(self):
        r"""removeAll(ISceneNode self)"""
        return _irrlicht.ISceneNode_removeAll(self)

    def remove(self):
        r"""remove(ISceneNode self)"""
        return _irrlicht.ISceneNode_remove(self)

    def addAnimator(self, animator):
        r"""addAnimator(ISceneNode self, ISceneNodeAnimator * animator)"""
        return _irrlicht.ISceneNode_addAnimator(self, animator)

    def getAnimators(self):
        r"""getAnimators(ISceneNode self) -> irr::core::list< ISceneNodeAnimator * > const &"""
        return _irrlicht.ISceneNode_getAnimators(self)

    def removeAnimator(self, animator):
        r"""removeAnimator(ISceneNode self, ISceneNodeAnimator * animator)"""
        return _irrlicht.ISceneNode_removeAnimator(self, animator)

    def removeAnimators(self):
        r"""removeAnimators(ISceneNode self)"""
        return _irrlicht.ISceneNode_removeAnimators(self)

    def getMaterial(self, num):
        r"""getMaterial(ISceneNode self, irr::u32 num) -> irr::video::SMaterial &"""
        return _irrlicht.ISceneNode_getMaterial(self, num)

    def getMaterialCount(self):
        r"""getMaterialCount(ISceneNode self) -> irr::u32"""
        return _irrlicht.ISceneNode_getMaterialCount(self)

    def setMaterialFlag(self, flag, newvalue):
        r"""setMaterialFlag(ISceneNode self, irr::video::E_MATERIAL_FLAG flag, bool newvalue)"""
        return _irrlicht.ISceneNode_setMaterialFlag(self, flag, newvalue)

    def setMaterialTexture(self, textureLayer, texture):
        r"""setMaterialTexture(ISceneNode self, irr::u32 textureLayer, irr::video::ITexture * texture)"""
        return _irrlicht.ISceneNode_setMaterialTexture(self, textureLayer, texture)

    def setMaterialType(self, newType):
        r"""setMaterialType(ISceneNode self, irr::video::E_MATERIAL_TYPE newType)"""
        return _irrlicht.ISceneNode_setMaterialType(self, newType)

    def getScale(self):
        r"""getScale(ISceneNode self) -> vector3df"""
        return _irrlicht.ISceneNode_getScale(self)

    def setScale(self, scale):
        r"""setScale(ISceneNode self, vector3df scale)"""
        return _irrlicht.ISceneNode_setScale(self, scale)

    def getRotation(self):
        r"""getRotation(ISceneNode self) -> vector3df"""
        return _irrlicht.ISceneNode_getRotation(self)

    def setRotation(self, rotation):
        r"""setRotation(ISceneNode self, vector3df rotation)"""
        return _irrlicht.ISceneNode_setRotation(self, rotation)

    def getPosition(self):
        r"""getPosition(ISceneNode self) -> vector3df"""
        return _irrlicht.ISceneNode_getPosition(self)

    def setPosition(self, newpos):
        r"""setPosition(ISceneNode self, vector3df newpos)"""
        return _irrlicht.ISceneNode_setPosition(self, newpos)

    def getAbsolutePosition(self):
        r"""getAbsolutePosition(ISceneNode self) -> vector3df"""
        return _irrlicht.ISceneNode_getAbsolutePosition(self)

    def setAutomaticCulling(self, state):
        r"""setAutomaticCulling(ISceneNode self, irr::u32 state)"""
        return _irrlicht.ISceneNode_setAutomaticCulling(self, state)

    def getAutomaticCulling(self):
        r"""getAutomaticCulling(ISceneNode self) -> irr::u32"""
        return _irrlicht.ISceneNode_getAutomaticCulling(self)

    def setDebugDataVisible(self, state):
        r"""setDebugDataVisible(ISceneNode self, irr::u32 state)"""
        return _irrlicht.ISceneNode_setDebugDataVisible(self, state)

    def isDebugDataVisible(self):
        r"""isDebugDataVisible(ISceneNode self) -> irr::u32"""
        return _irrlicht.ISceneNode_isDebugDataVisible(self)

    def setIsDebugObject(self, debugObject):
        r"""setIsDebugObject(ISceneNode self, bool debugObject)"""
        return _irrlicht.ISceneNode_setIsDebugObject(self, debugObject)

    def isDebugObject(self):
        r"""isDebugObject(ISceneNode self) -> bool"""
        return _irrlicht.ISceneNode_isDebugObject(self)

    def getChildren(self):
        r"""getChildren(ISceneNode self) -> irr::core::list< irr::scene::ISceneNode * > const &"""
        return _irrlicht.ISceneNode_getChildren(self)

    def setParent(self, newParent):
        r"""setParent(ISceneNode self, ISceneNode newParent)"""
        return _irrlicht.ISceneNode_setParent(self, newParent)

    def getTriangleSelector(self):
        r"""getTriangleSelector(ISceneNode self) -> ITriangleSelector *"""
        return _irrlicht.ISceneNode_getTriangleSelector(self)

    def setTriangleSelector(self, selector):
        r"""setTriangleSelector(ISceneNode self, ITriangleSelector * selector)"""
        return _irrlicht.ISceneNode_setTriangleSelector(self, selector)

    def updateAbsolutePosition(self):
        r"""updateAbsolutePosition(ISceneNode self)"""
        return _irrlicht.ISceneNode_updateAbsolutePosition(self)

    def getParent(self):
        r"""getParent(ISceneNode self) -> ISceneNode"""
        return _irrlicht.ISceneNode_getParent(self)

    def getType(self):
        r"""getType(ISceneNode self) -> ESCENE_NODE_TYPE"""
        return _irrlicht.ISceneNode_getType(self)

    def serializeAttributes(self, out, options=None):
        r"""serializeAttributes(ISceneNode self, irr::io::IAttributes * out, irr::io::SAttributeReadWriteOptions * options=None)"""
        return _irrlicht.ISceneNode_serializeAttributes(self, out, options)

    def deserializeAttributes(self, _in, options=None):
        r"""deserializeAttributes(ISceneNode self, irr::io::IAttributes * _in, irr::io::SAttributeReadWriteOptions * options=None)"""
        return _irrlicht.ISceneNode_deserializeAttributes(self, _in, options)

    def clone(self, newParent=None, newManager=None):
        r"""clone(ISceneNode self, ISceneNode newParent=None, ISceneManager newManager=None) -> ISceneNode"""
        return _irrlicht.ISceneNode_clone(self, newParent, newManager)

    def getSceneManager(self):
        r"""getSceneManager(ISceneNode self) -> ISceneManager"""
        return _irrlicht.ISceneNode_getSceneManager(self)

# Register ISceneNode in _irrlicht:
_irrlicht.ISceneNode_swigregister(ISceneNode)

class ICameraSceneNode(ISceneNode):
    r"""Proxy of C++ irr::scene::ICameraSceneNode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def setProjectionMatrix(self, projection, isOrthogonal=False):
        r"""setProjectionMatrix(ICameraSceneNode self, irr::core::matrix4 const & projection, bool isOrthogonal=False)"""
        return _irrlicht.ICameraSceneNode_setProjectionMatrix(self, projection, isOrthogonal)

    def getProjectionMatrix(self):
        r"""getProjectionMatrix(ICameraSceneNode self) -> irr::core::matrix4 const &"""
        return _irrlicht.ICameraSceneNode_getProjectionMatrix(self)

    def getViewMatrix(self):
        r"""getViewMatrix(ICameraSceneNode self) -> irr::core::matrix4 const &"""
        return _irrlicht.ICameraSceneNode_getViewMatrix(self)

    def setViewMatrixAffector(self, affector):
        r"""setViewMatrixAffector(ICameraSceneNode self, irr::core::matrix4 const & affector)"""
        return _irrlicht.ICameraSceneNode_setViewMatrixAffector(self, affector)

    def getViewMatrixAffector(self):
        r"""getViewMatrixAffector(ICameraSceneNode self) -> irr::core::matrix4 const &"""
        return _irrlicht.ICameraSceneNode_getViewMatrixAffector(self)

    def OnEvent(self, event):
        r"""OnEvent(ICameraSceneNode self, SEvent const & event) -> bool"""
        return _irrlicht.ICameraSceneNode_OnEvent(self, event)

    def setTarget(self, pos):
        r"""setTarget(ICameraSceneNode self, vector3df pos)"""
        return _irrlicht.ICameraSceneNode_setTarget(self, pos)

    def setRotation(self, rotation):
        r"""setRotation(ICameraSceneNode self, vector3df rotation)"""
        return _irrlicht.ICameraSceneNode_setRotation(self, rotation)

    def getTarget(self):
        r"""getTarget(ICameraSceneNode self) -> vector3df"""
        return _irrlicht.ICameraSceneNode_getTarget(self)

    def setUpVector(self, pos):
        r"""setUpVector(ICameraSceneNode self, vector3df pos)"""
        return _irrlicht.ICameraSceneNode_setUpVector(self, pos)

    def getUpVector(self):
        r"""getUpVector(ICameraSceneNode self) -> vector3df"""
        return _irrlicht.ICameraSceneNode_getUpVector(self)

    def getNearValue(self):
        r"""getNearValue(ICameraSceneNode self) -> irr::f32"""
        return _irrlicht.ICameraSceneNode_getNearValue(self)

    def getFarValue(self):
        r"""getFarValue(ICameraSceneNode self) -> irr::f32"""
        return _irrlicht.ICameraSceneNode_getFarValue(self)

    def getAspectRatio(self):
        r"""getAspectRatio(ICameraSceneNode self) -> irr::f32"""
        return _irrlicht.ICameraSceneNode_getAspectRatio(self)

    def getFOV(self):
        r"""getFOV(ICameraSceneNode self) -> irr::f32"""
        return _irrlicht.ICameraSceneNode_getFOV(self)

    def setNearValue(self, zn):
        r"""setNearValue(ICameraSceneNode self, irr::f32 zn)"""
        return _irrlicht.ICameraSceneNode_setNearValue(self, zn)

    def setFarValue(self, zf):
        r"""setFarValue(ICameraSceneNode self, irr::f32 zf)"""
        return _irrlicht.ICameraSceneNode_setFarValue(self, zf)

    def setAspectRatio(self, aspect):
        r"""setAspectRatio(ICameraSceneNode self, irr::f32 aspect)"""
        return _irrlicht.ICameraSceneNode_setAspectRatio(self, aspect)

    def setFOV(self, fovy):
        r"""setFOV(ICameraSceneNode self, irr::f32 fovy)"""
        return _irrlicht.ICameraSceneNode_setFOV(self, fovy)

    def getViewFrustum(self):
        r"""getViewFrustum(ICameraSceneNode self) -> irr::scene::SViewFrustum const *"""
        return _irrlicht.ICameraSceneNode_getViewFrustum(self)

    def setInputReceiverEnabled(self, enabled):
        r"""setInputReceiverEnabled(ICameraSceneNode self, bool enabled)"""
        return _irrlicht.ICameraSceneNode_setInputReceiverEnabled(self, enabled)

    def isInputReceiverEnabled(self):
        r"""isInputReceiverEnabled(ICameraSceneNode self) -> bool"""
        return _irrlicht.ICameraSceneNode_isInputReceiverEnabled(self)

    def isOrthogonal(self):
        r"""isOrthogonal(ICameraSceneNode self) -> bool"""
        return _irrlicht.ICameraSceneNode_isOrthogonal(self)

    def bindTargetAndRotation(self, bound):
        r"""bindTargetAndRotation(ICameraSceneNode self, bool bound)"""
        return _irrlicht.ICameraSceneNode_bindTargetAndRotation(self, bound)

    def getTargetAndRotationBinding(self):
        r"""getTargetAndRotationBinding(ICameraSceneNode self) -> bool"""
        return _irrlicht.ICameraSceneNode_getTargetAndRotationBinding(self)

    def serializeAttributes(self, out, options=None):
        r"""serializeAttributes(ICameraSceneNode self, irr::io::IAttributes * out, irr::io::SAttributeReadWriteOptions * options=None)"""
        return _irrlicht.ICameraSceneNode_serializeAttributes(self, out, options)

    def deserializeAttributes(self, _in, options=None):
        r"""deserializeAttributes(ICameraSceneNode self, irr::io::IAttributes * _in, irr::io::SAttributeReadWriteOptions * options=None)"""
        return _irrlicht.ICameraSceneNode_deserializeAttributes(self, _in, options)
    __swig_destroy__ = _irrlicht.delete_ICameraSceneNode

# Register ICameraSceneNode in _irrlicht:
_irrlicht.ICameraSceneNode_swigregister(ICameraSceneNode)

class IrrlichtDevice(IReferenceCounted):
    r"""Proxy of C++ irr::IrrlichtDevice class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def run(self):
        r"""run(IrrlichtDevice self) -> bool"""
        return _irrlicht.IrrlichtDevice_run(self)

    def _yield(self):
        r"""_yield(IrrlichtDevice self)"""
        return _irrlicht.IrrlichtDevice__yield(self)

    def sleep(self, timeMs, pauseTimer=False):
        r"""sleep(IrrlichtDevice self, irr::u32 timeMs, bool pauseTimer=False)"""
        return _irrlicht.IrrlichtDevice_sleep(self, timeMs, pauseTimer)

    def getVideoDriver(self):
        r"""getVideoDriver(IrrlichtDevice self) -> IVideoDriver"""
        return _irrlicht.IrrlichtDevice_getVideoDriver(self)

    def getFileSystem(self):
        r"""getFileSystem(IrrlichtDevice self) -> irr::io::IFileSystem *"""
        return _irrlicht.IrrlichtDevice_getFileSystem(self)

    def getGUIEnvironment(self):
        r"""getGUIEnvironment(IrrlichtDevice self) -> IGUIEnvironment"""
        return _irrlicht.IrrlichtDevice_getGUIEnvironment(self)

    def getSceneManager(self):
        r"""getSceneManager(IrrlichtDevice self) -> ISceneManager"""
        return _irrlicht.IrrlichtDevice_getSceneManager(self)

    def getCursorControl(self):
        r"""getCursorControl(IrrlichtDevice self) -> irr::gui::ICursorControl *"""
        return _irrlicht.IrrlichtDevice_getCursorControl(self)

    def getLogger(self):
        r"""getLogger(IrrlichtDevice self) -> irr::ILogger *"""
        return _irrlicht.IrrlichtDevice_getLogger(self)

    def getVideoModeList(self):
        r"""getVideoModeList(IrrlichtDevice self) -> irr::video::IVideoModeList *"""
        return _irrlicht.IrrlichtDevice_getVideoModeList(self)

    def getOSOperator(self):
        r"""getOSOperator(IrrlichtDevice self) -> IOSOperator *"""
        return _irrlicht.IrrlichtDevice_getOSOperator(self)

    def getTimer(self):
        r"""getTimer(IrrlichtDevice self) -> ITimer *"""
        return _irrlicht.IrrlichtDevice_getTimer(self)

    def getRandomizer(self):
        r"""getRandomizer(IrrlichtDevice self) -> irr::IRandomizer *"""
        return _irrlicht.IrrlichtDevice_getRandomizer(self)

    def setRandomizer(self, r):
        r"""setRandomizer(IrrlichtDevice self, irr::IRandomizer * r)"""
        return _irrlicht.IrrlichtDevice_setRandomizer(self, r)

    def createDefaultRandomizer(self):
        r"""createDefaultRandomizer(IrrlichtDevice self) -> irr::IRandomizer *"""
        return _irrlicht.IrrlichtDevice_createDefaultRandomizer(self)

    def setWindowCaption(self, text):
        r"""setWindowCaption(IrrlichtDevice self, wchar_t const * text)"""
        return _irrlicht.IrrlichtDevice_setWindowCaption(self, text)

    def isWindowActive(self):
        r"""isWindowActive(IrrlichtDevice self) -> bool"""
        return _irrlicht.IrrlichtDevice_isWindowActive(self)

    def isWindowFocused(self):
        r"""isWindowFocused(IrrlichtDevice self) -> bool"""
        return _irrlicht.IrrlichtDevice_isWindowFocused(self)

    def isWindowMinimized(self):
        r"""isWindowMinimized(IrrlichtDevice self) -> bool"""
        return _irrlicht.IrrlichtDevice_isWindowMinimized(self)

    def isFullscreen(self):
        r"""isFullscreen(IrrlichtDevice self) -> bool"""
        return _irrlicht.IrrlichtDevice_isFullscreen(self)

    def getColorFormat(self):
        r"""getColorFormat(IrrlichtDevice self) -> irr::video::ECOLOR_FORMAT"""
        return _irrlicht.IrrlichtDevice_getColorFormat(self)

    def closeDevice(self):
        r"""closeDevice(IrrlichtDevice self)"""
        return _irrlicht.IrrlichtDevice_closeDevice(self)

    def getVersion(self):
        r"""getVersion(IrrlichtDevice self) -> irr::c8 const *"""
        return _irrlicht.IrrlichtDevice_getVersion(self)

    def setEventReceiver(self, receiver):
        r"""setEventReceiver(IrrlichtDevice self, irr::IEventReceiver * receiver)"""
        return _irrlicht.IrrlichtDevice_setEventReceiver(self, receiver)

    def getEventReceiver(self):
        r"""getEventReceiver(IrrlichtDevice self) -> irr::IEventReceiver *"""
        return _irrlicht.IrrlichtDevice_getEventReceiver(self)

    def postEventFromUser(self, event):
        r"""postEventFromUser(IrrlichtDevice self, SEvent const & event) -> bool"""
        return _irrlicht.IrrlichtDevice_postEventFromUser(self, event)

    def setInputReceivingSceneManager(self, sceneManager):
        r"""setInputReceivingSceneManager(IrrlichtDevice self, ISceneManager sceneManager)"""
        return _irrlicht.IrrlichtDevice_setInputReceivingSceneManager(self, sceneManager)

    def setResizable(self, resize=False):
        r"""setResizable(IrrlichtDevice self, bool resize=False)"""
        return _irrlicht.IrrlichtDevice_setResizable(self, resize)

    def minimizeWindow(self):
        r"""minimizeWindow(IrrlichtDevice self)"""
        return _irrlicht.IrrlichtDevice_minimizeWindow(self)

    def maximizeWindow(self):
        r"""maximizeWindow(IrrlichtDevice self)"""
        return _irrlicht.IrrlichtDevice_maximizeWindow(self)

    def restoreWindow(self):
        r"""restoreWindow(IrrlichtDevice self)"""
        return _irrlicht.IrrlichtDevice_restoreWindow(self)

    def activateJoysticks(self, joystickInfo):
        r"""activateJoysticks(IrrlichtDevice self, irr::core::array< SJoystickInfo > & joystickInfo) -> bool"""
        return _irrlicht.IrrlichtDevice_activateJoysticks(self, joystickInfo)

    def setGammaRamp(self, red, green, blue, relativebrightness, relativecontrast):
        r"""setGammaRamp(IrrlichtDevice self, irr::f32 red, irr::f32 green, irr::f32 blue, irr::f32 relativebrightness, irr::f32 relativecontrast) -> bool"""
        return _irrlicht.IrrlichtDevice_setGammaRamp(self, red, green, blue, relativebrightness, relativecontrast)

    def getGammaRamp(self, red, green, blue, brightness, contrast):
        r"""getGammaRamp(IrrlichtDevice self, irr::f32 & red, irr::f32 & green, irr::f32 & blue, irr::f32 & brightness, irr::f32 & contrast) -> bool"""
        return _irrlicht.IrrlichtDevice_getGammaRamp(self, red, green, blue, brightness, contrast)

    def clearSystemMessages(self):
        r"""clearSystemMessages(IrrlichtDevice self)"""
        return _irrlicht.IrrlichtDevice_clearSystemMessages(self)

    def getType(self):
        r"""getType(IrrlichtDevice self) -> E_DEVICE_TYPE"""
        return _irrlicht.IrrlichtDevice_getType(self)

    @staticmethod
    def isDriverSupported(driver):
        r"""isDriverSupported(irr::video::E_DRIVER_TYPE driver) -> bool"""
        return _irrlicht.IrrlichtDevice_isDriverSupported(driver)
    __swig_destroy__ = _irrlicht.delete_IrrlichtDevice

# Register IrrlichtDevice in _irrlicht:
_irrlicht.IrrlichtDevice_swigregister(IrrlichtDevice)

def IrrlichtDevice_isDriverSupported(driver):
    r"""IrrlichtDevice_isDriverSupported(irr::video::E_DRIVER_TYPE driver) -> bool"""
    return _irrlicht.IrrlichtDevice_isDriverSupported(driver)

ESNRP_NONE = _irrlicht.ESNRP_NONE

ESNRP_CAMERA = _irrlicht.ESNRP_CAMERA

ESNRP_LIGHT = _irrlicht.ESNRP_LIGHT

ESNRP_SKY_BOX = _irrlicht.ESNRP_SKY_BOX

ESNRP_AUTOMATIC = _irrlicht.ESNRP_AUTOMATIC

ESNRP_SOLID = _irrlicht.ESNRP_SOLID

ESNRP_TRANSPARENT = _irrlicht.ESNRP_TRANSPARENT

ESNRP_TRANSPARENT_EFFECT = _irrlicht.ESNRP_TRANSPARENT_EFFECT

ESNRP_SHADOW = _irrlicht.ESNRP_SHADOW

class ISceneManager(IReferenceCounted):
    r"""Proxy of C++ irr::scene::ISceneManager class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getMesh(self, *args):
        r"""
        getMesh(ISceneManager self, irr::io::path const & filename) -> irr::scene::IAnimatedMesh
        getMesh(ISceneManager self, irr::io::IReadFile * file) -> irr::scene::IAnimatedMesh *
        """
        return _irrlicht.ISceneManager_getMesh(self, *args)

    def getMeshCache(self):
        r"""getMeshCache(ISceneManager self) -> irr::scene::IMeshCache *"""
        return _irrlicht.ISceneManager_getMeshCache(self)

    def getVideoDriver(self):
        r"""getVideoDriver(ISceneManager self) -> IVideoDriver"""
        return _irrlicht.ISceneManager_getVideoDriver(self)

    def getGUIEnvironment(self):
        r"""getGUIEnvironment(ISceneManager self) -> IGUIEnvironment"""
        return _irrlicht.ISceneManager_getGUIEnvironment(self)

    def getFileSystem(self):
        r"""getFileSystem(ISceneManager self) -> irr::io::IFileSystem *"""
        return _irrlicht.ISceneManager_getFileSystem(self)

    def addVolumeLightSceneNode(self, *args):
        r"""addVolumeLightSceneNode(ISceneManager self, ISceneNode parent=None, irr::s32 id=-1, irr::u32 const subdivU=32, irr::u32 const subdivV=32, SColor foot=irr::video::SColor(51, 0, 230, 180), SColor tail=irr::video::SColor(0, 0, 0, 0), vector3df position=irr::core::vector3df(0,0,0), vector3df rotation=irr::core::vector3df(0,0,0), vector3df scale=irr::core::vector3df(1.0f, 1.0f, 1.0f)) -> irr::scene::IVolumeLightSceneNode"""
        return _irrlicht.ISceneManager_addVolumeLightSceneNode(self, *args)

    def addCubeSceneNode(self, *args):
        r"""addCubeSceneNode(ISceneManager self, irr::f32 size=10.0, ISceneNode parent=None, irr::s32 id=-1, vector3df position=irr::core::vector3df(0,0,0), vector3df rotation=irr::core::vector3df(0,0,0), vector3df scale=irr::core::vector3df(1.0f, 1.0f, 1.0f)) -> irr::scene::IMeshSceneNode"""
        return _irrlicht.ISceneManager_addCubeSceneNode(self, *args)

    def addSphereSceneNode(self, *args):
        r"""addSphereSceneNode(ISceneManager self, irr::f32 radius=5.0, irr::s32 polyCount=16, ISceneNode parent=None, irr::s32 id=-1, vector3df position=irr::core::vector3df(0,0,0), vector3df rotation=irr::core::vector3df(0,0,0), vector3df scale=irr::core::vector3df(1.0f, 1.0f, 1.0f)) -> irr::scene::IMeshSceneNode"""
        return _irrlicht.ISceneManager_addSphereSceneNode(self, *args)

    def addAnimatedMeshSceneNode(self, *args):
        r"""addAnimatedMeshSceneNode(ISceneManager self, irr::scene::IAnimatedMesh * mesh, ISceneNode parent=None, irr::s32 id=-1, vector3df position=irr::core::vector3df(0,0,0), vector3df rotation=irr::core::vector3df(0,0,0), vector3df scale=irr::core::vector3df(1.0f, 1.0f, 1.0f), bool alsoAddIfMeshPointerZero=False) -> irr::scene::IAnimatedMeshSceneNode"""
        return _irrlicht.ISceneManager_addAnimatedMeshSceneNode(self, *args)

    def addMeshSceneNode(self, *args):
        r"""addMeshSceneNode(ISceneManager self, irr::scene::IMesh * mesh, ISceneNode parent=None, irr::s32 id=-1, vector3df position=irr::core::vector3df(0,0,0), vector3df rotation=irr::core::vector3df(0,0,0), vector3df scale=irr::core::vector3df(1.0f, 1.0f, 1.0f), bool alsoAddIfMeshPointerZero=False) -> irr::scene::IMeshSceneNode"""
        return _irrlicht.ISceneManager_addMeshSceneNode(self, *args)

    def addWaterSurfaceSceneNode(self, *args):
        r"""addWaterSurfaceSceneNode(ISceneManager self, irr::scene::IMesh * mesh, irr::f32 waveHeight=2.0, irr::f32 waveSpeed=300.0, irr::f32 waveLength=10.0, ISceneNode parent=None, irr::s32 id=-1, vector3df position=irr::core::vector3df(0,0,0), vector3df rotation=irr::core::vector3df(0,0,0), vector3df scale=irr::core::vector3df(1.0f, 1.0f, 1.0f)) -> ISceneNode"""
        return _irrlicht.ISceneManager_addWaterSurfaceSceneNode(self, *args)

    def addOctreeSceneNode(self, *args):
        r"""
        addOctreeSceneNode(ISceneManager self, irr::scene::IAnimatedMesh * mesh, ISceneNode parent=None, irr::s32 id=-1, irr::s32 minimalPolysPerNode=512, bool alsoAddIfMeshPointerZero=False) -> irr::scene::IMeshSceneNode
        addOctreeSceneNode(ISceneManager self, irr::scene::IMesh * mesh, ISceneNode parent=None, irr::s32 id=-1, irr::s32 minimalPolysPerNode=256, bool alsoAddIfMeshPointerZero=False) -> irr::scene::IMeshSceneNode
        """
        return _irrlicht.ISceneManager_addOctreeSceneNode(self, *args)

    def addOctTreeSceneNode(self, *args):
        r"""
        addOctTreeSceneNode(ISceneManager self, irr::scene::IAnimatedMesh * mesh, ISceneNode parent=None, irr::s32 id=-1, irr::s32 minimalPolysPerNode=512, bool alsoAddIfMeshPointerZero=False) -> irr::scene::IMeshSceneNode
        addOctTreeSceneNode(ISceneManager self, irr::scene::IMesh * mesh, ISceneNode parent=None, irr::s32 id=-1, irr::s32 minimalPolysPerNode=256, bool alsoAddIfMeshPointerZero=False) -> irr::scene::IMeshSceneNode
        """
        return _irrlicht.ISceneManager_addOctTreeSceneNode(self, *args)

    def addCameraSceneNode(self, *args):
        r"""addCameraSceneNode(ISceneManager self, ISceneNode parent=None, vector3df position=irr::core::vector3df(0,0,0), vector3df lookat=irr::core::vector3df(0,0,100), irr::s32 id=-1, bool makeActive=True) -> ICameraSceneNode"""
        return _irrlicht.ISceneManager_addCameraSceneNode(self, *args)

    def addCameraSceneNodeMaya(self, parent=None, rotateSpeed=-1500., zoomSpeed=200., translationSpeed=1500., id=-1, distance=70., makeActive=True):
        r"""addCameraSceneNodeMaya(ISceneManager self, ISceneNode parent=None, irr::f32 rotateSpeed=-1500., irr::f32 zoomSpeed=200., irr::f32 translationSpeed=1500., irr::s32 id=-1, irr::f32 distance=70., bool makeActive=True) -> ICameraSceneNode"""
        return _irrlicht.ISceneManager_addCameraSceneNodeMaya(self, parent, rotateSpeed, zoomSpeed, translationSpeed, id, distance, makeActive)

    def addCameraSceneNodeFPS(self, parent=None, rotateSpeed=100.0, moveSpeed=0.5, id=-1, keyMapArray=None, keyMapSize=0, noVerticalMovement=False, jumpSpeed=0., invertMouse=False, makeActive=True):
        r"""addCameraSceneNodeFPS(ISceneManager self, ISceneNode parent=None, irr::f32 rotateSpeed=100.0, irr::f32 moveSpeed=0.5, irr::s32 id=-1, irr::SKeyMap * keyMapArray=None, irr::s32 keyMapSize=0, bool noVerticalMovement=False, irr::f32 jumpSpeed=0., bool invertMouse=False, bool makeActive=True) -> ICameraSceneNode"""
        return _irrlicht.ISceneManager_addCameraSceneNodeFPS(self, parent, rotateSpeed, moveSpeed, id, keyMapArray, keyMapSize, noVerticalMovement, jumpSpeed, invertMouse, makeActive)

    def addLightSceneNode(self, *args):
        r"""addLightSceneNode(ISceneManager self, ISceneNode parent=None, vector3df position=irr::core::vector3df(0,0,0), SColorf color=irr::video::SColorf(1.0f, 1.0f, 1.0f), irr::f32 radius=100.0, irr::s32 id=-1) -> irr::scene::ILightSceneNode"""
        return _irrlicht.ISceneManager_addLightSceneNode(self, *args)

    def addBillboardSceneNode(self, *args):
        r"""addBillboardSceneNode(ISceneManager self, ISceneNode parent=None, irr::core::dimension2d< irr::f32 > const & size=core::dimension2d< irr::f32 >(10.0f, 10.0f), vector3df position=irr::core::vector3df(0,0,0), irr::s32 id=-1, SColor colorTop=0xFFFFFFFF, SColor colorBottom=0xFFFFFFFF) -> irr::scene::IBillboardSceneNode"""
        return _irrlicht.ISceneManager_addBillboardSceneNode(self, *args)

    def addSkyBoxSceneNode(self, top, bottom, left, right, front, back, parent=None, id=-1):
        r"""addSkyBoxSceneNode(ISceneManager self, irr::video::ITexture * top, irr::video::ITexture * bottom, irr::video::ITexture * left, irr::video::ITexture * right, irr::video::ITexture * front, irr::video::ITexture * back, ISceneNode parent=None, irr::s32 id=-1) -> ISceneNode"""
        return _irrlicht.ISceneManager_addSkyBoxSceneNode(self, top, bottom, left, right, front, back, parent, id)

    def addSkyDomeSceneNode(self, texture, horiRes=16, vertRes=8, texturePercentage=0.9, spherePercentage=2.0, radius=1000., parent=None, id=-1):
        r"""addSkyDomeSceneNode(ISceneManager self, irr::video::ITexture * texture, irr::u32 horiRes=16, irr::u32 vertRes=8, irr::f32 texturePercentage=0.9, irr::f32 spherePercentage=2.0, irr::f32 radius=1000., ISceneNode parent=None, irr::s32 id=-1) -> ISceneNode"""
        return _irrlicht.ISceneManager_addSkyDomeSceneNode(self, texture, horiRes, vertRes, texturePercentage, spherePercentage, radius, parent, id)

    def addParticleSystemSceneNode(self, *args):
        r"""addParticleSystemSceneNode(ISceneManager self, bool withDefaultEmitter=True, ISceneNode parent=None, irr::s32 id=-1, vector3df position=irr::core::vector3df(0,0,0), vector3df rotation=irr::core::vector3df(0,0,0), vector3df scale=irr::core::vector3df(1.0f, 1.0f, 1.0f)) -> irr::scene::IParticleSystemSceneNode"""
        return _irrlicht.ISceneManager_addParticleSystemSceneNode(self, *args)

    def addTerrainSceneNode(self, *args):
        r"""
        addTerrainSceneNode(ISceneManager self, irr::io::path const & heightMapFileName, ISceneNode parent=None, irr::s32 id=-1, vector3df position=irr::core::vector3df(0.0f,0.0f,0.0f), vector3df rotation=irr::core::vector3df(0.0f,0.0f,0.0f), vector3df scale=irr::core::vector3df(1.0f,1.0f,1.0f), SColor vertexColor=irr::video::SColor(255,255,255,255), irr::s32 maxLOD=5, E_TERRAIN_PATCH_SIZE patchSize=ETPS_17, irr::s32 smoothFactor=0, bool addAlsoIfHeightmapEmpty=False) -> irr::scene::ITerrainSceneNode
        addTerrainSceneNode(ISceneManager self, irr::io::IReadFile * heightMapFile, ISceneNode parent=None, irr::s32 id=-1, vector3df position=irr::core::vector3df(0.0f,0.0f,0.0f), vector3df rotation=irr::core::vector3df(0.0f,0.0f,0.0f), vector3df scale=irr::core::vector3df(1.0f,1.0f,1.0f), SColor vertexColor=irr::video::SColor(255,255,255,255), irr::s32 maxLOD=5, E_TERRAIN_PATCH_SIZE patchSize=ETPS_17, irr::s32 smoothFactor=0, bool addAlsoIfHeightmapEmpty=False) -> irr::scene::ITerrainSceneNode
        """
        return _irrlicht.ISceneManager_addTerrainSceneNode(self, *args)

    def addQuake3SceneNode(self, meshBuffer, shader, parent=None, id=-1):
        r"""addQuake3SceneNode(ISceneManager self, irr::scene::IMeshBuffer const * meshBuffer, irr::scene::quake3::IShader const * shader, ISceneNode parent=None, irr::s32 id=-1) -> irr::scene::IMeshSceneNode"""
        return _irrlicht.ISceneManager_addQuake3SceneNode(self, meshBuffer, shader, parent, id)

    def addEmptySceneNode(self, parent=None, id=-1):
        r"""addEmptySceneNode(ISceneManager self, ISceneNode parent=None, irr::s32 id=-1) -> ISceneNode"""
        return _irrlicht.ISceneManager_addEmptySceneNode(self, parent, id)

    def addDummyTransformationSceneNode(self, parent=None, id=-1):
        r"""addDummyTransformationSceneNode(ISceneManager self, ISceneNode parent=None, irr::s32 id=-1) -> irr::scene::IDummyTransformationSceneNode"""
        return _irrlicht.ISceneManager_addDummyTransformationSceneNode(self, parent, id)

    def addTextSceneNode(self, *args):
        r"""addTextSceneNode(ISceneManager self, irr::gui::IGUIFont * font, wchar_t const * text, SColor color=irr::video::SColor(100,255,255,255), ISceneNode parent=None, vector3df position=irr::core::vector3df(0,0,0), irr::s32 id=-1) -> irr::scene::ITextSceneNode"""
        return _irrlicht.ISceneManager_addTextSceneNode(self, *args)

    def addBillboardTextSceneNode(self, *args):
        r"""addBillboardTextSceneNode(ISceneManager self, irr::gui::IGUIFont * font, wchar_t const * text, ISceneNode parent=None, irr::core::dimension2d< irr::f32 > const & size=core::dimension2d< irr::f32 >(10.0f, 10.0f), vector3df position=irr::core::vector3df(0,0,0), irr::s32 id=-1, SColor colorTop=0xFFFFFFFF, SColor colorBottom=0xFFFFFFFF) -> irr::scene::IBillboardTextSceneNode"""
        return _irrlicht.ISceneManager_addBillboardTextSceneNode(self, *args)

    def addHillPlaneMesh(self, *args):
        r"""addHillPlaneMesh(ISceneManager self, irr::io::path const & name, irr::core::dimension2d< irr::f32 > const & tileSize, dimension2du tileCount, irr::video::SMaterial * material=None, irr::f32 hillHeight=0.0, irr::core::dimension2d< irr::f32 > const & countHills=core::dimension2d< irr::f32 >(0.0f, 0.0f), irr::core::dimension2d< irr::f32 > const & textureRepeatCount=core::dimension2d< irr::f32 >(1.0f, 1.0f)) -> irr::scene::IAnimatedMesh"""
        return _irrlicht.ISceneManager_addHillPlaneMesh(self, *args)

    def addTerrainMesh(self, *args):
        r"""addTerrainMesh(ISceneManager self, irr::io::path const & meshname, IImage texture, IImage heightmap, irr::core::dimension2d< irr::f32 > const & stretchSize=core::dimension2d< irr::f32 >(10.0f,10.0f), irr::f32 maxHeight=200.0, dimension2du defaultVertexBlockSize=core::dimension2d< irr::u32 >(64,64)) -> irr::scene::IAnimatedMesh"""
        return _irrlicht.ISceneManager_addTerrainMesh(self, *args)

    def addArrowMesh(self, *args):
        r"""addArrowMesh(ISceneManager self, irr::io::path const & name, SColor vtxColorCylinder=0xFFFFFFFF, SColor vtxColorCone=0xFFFFFFFF, irr::u32 tesselationCylinder=4, irr::u32 tesselationCone=8, irr::f32 height=1., irr::f32 cylinderHeight=0.6, irr::f32 widthCylinder=0.05, irr::f32 widthCone=0.3) -> irr::scene::IAnimatedMesh"""
        return _irrlicht.ISceneManager_addArrowMesh(self, *args)

    def addSphereMesh(self, name, radius=5., polyCountX=16, polyCountY=16):
        r"""addSphereMesh(ISceneManager self, irr::io::path const & name, irr::f32 radius=5., irr::u32 polyCountX=16, irr::u32 polyCountY=16) -> irr::scene::IAnimatedMesh"""
        return _irrlicht.ISceneManager_addSphereMesh(self, name, radius, polyCountX, polyCountY)

    def addVolumeLightMesh(self, *args):
        r"""addVolumeLightMesh(ISceneManager self, irr::io::path const & name, irr::u32 const SubdivideU=32, irr::u32 const SubdivideV=32, SColor FootColor=irr::video::SColor(51, 0, 230, 180), SColor TailColor=irr::video::SColor(0, 0, 0, 0)) -> irr::scene::IAnimatedMesh"""
        return _irrlicht.ISceneManager_addVolumeLightMesh(self, *args)

    def getRootSceneNode(self):
        r"""getRootSceneNode(ISceneManager self) -> ISceneNode"""
        return _irrlicht.ISceneManager_getRootSceneNode(self)

    def getSceneNodeFromId(self, id, start=None):
        r"""getSceneNodeFromId(ISceneManager self, irr::s32 id, ISceneNode start=None) -> ISceneNode"""
        return _irrlicht.ISceneManager_getSceneNodeFromId(self, id, start)

    def getSceneNodeFromName(self, name, start=None):
        r"""getSceneNodeFromName(ISceneManager self, irr::c8 const * name, ISceneNode start=None) -> ISceneNode"""
        return _irrlicht.ISceneManager_getSceneNodeFromName(self, name, start)

    def getSceneNodeFromType(self, type, start=None):
        r"""getSceneNodeFromType(ISceneManager self, irr::scene::ESCENE_NODE_TYPE type, ISceneNode start=None) -> ISceneNode"""
        return _irrlicht.ISceneManager_getSceneNodeFromType(self, type, start)

    def getSceneNodesFromType(self, type, outNodes, start=None):
        r"""getSceneNodesFromType(ISceneManager self, ESCENE_NODE_TYPE type, irr::core::array< irr::scene::ISceneNode * > & outNodes, ISceneNode start=None)"""
        return _irrlicht.ISceneManager_getSceneNodesFromType(self, type, outNodes, start)

    def getActiveCamera(self):
        r"""getActiveCamera(ISceneManager self) -> ICameraSceneNode"""
        return _irrlicht.ISceneManager_getActiveCamera(self)

    def setActiveCamera(self, camera):
        r"""setActiveCamera(ISceneManager self, ICameraSceneNode camera)"""
        return _irrlicht.ISceneManager_setActiveCamera(self, camera)

    def setShadowColor(self, *args):
        r"""setShadowColor(ISceneManager self, SColor color=irr::video::SColor(150,0,0,0))"""
        return _irrlicht.ISceneManager_setShadowColor(self, *args)

    def getShadowColor(self):
        r"""getShadowColor(ISceneManager self) -> SColor"""
        return _irrlicht.ISceneManager_getShadowColor(self)

    def registerNodeForRendering(self, *args):
        r"""registerNodeForRendering(ISceneManager self, ISceneNode node, irr::scene::E_SCENE_NODE_RENDER_PASS _pass=ESNRP_AUTOMATIC) -> irr::u32"""
        return _irrlicht.ISceneManager_registerNodeForRendering(self, *args)

    def drawAll(self):
        r"""drawAll(ISceneManager self)"""
        return _irrlicht.ISceneManager_drawAll(self)

    def createRotationAnimator(self, rotationSpeed):
        r"""createRotationAnimator(ISceneManager self, vector3df rotationSpeed) -> irr::scene::ISceneNodeAnimator *"""
        return _irrlicht.ISceneManager_createRotationAnimator(self, rotationSpeed)

    def createFlyCircleAnimator(self, *args):
        r"""createFlyCircleAnimator(ISceneManager self, vector3df center=irr::core::vector3df(0.f,0.f,0.f), irr::f32 radius=100., irr::f32 speed=0.001, vector3df direction=irr::core::vector3df(0.f, 1.f, 0.f), irr::f32 startPosition=0., irr::f32 radiusEllipsoid=0.) -> irr::scene::ISceneNodeAnimator"""
        return _irrlicht.ISceneManager_createFlyCircleAnimator(self, *args)

    def createFlyStraightAnimator(self, startPoint, endPoint, timeForWay, loop=False, pingpong=False):
        r"""createFlyStraightAnimator(ISceneManager self, vector3df startPoint, vector3df endPoint, irr::u32 timeForWay, bool loop=False, bool pingpong=False) -> irr::scene::ISceneNodeAnimator"""
        return _irrlicht.ISceneManager_createFlyStraightAnimator(self, startPoint, endPoint, timeForWay, loop, pingpong)

    def createTextureAnimator(self, textures, timePerFrame, loop=True):
        r"""createTextureAnimator(ISceneManager self, irr::core::array< irr::video::ITexture * > const & textures, irr::s32 timePerFrame, bool loop=True) -> irr::scene::ISceneNodeAnimator"""
        return _irrlicht.ISceneManager_createTextureAnimator(self, textures, timePerFrame, loop)

    def createDeleteAnimator(self, timeMs):
        r"""createDeleteAnimator(ISceneManager self, irr::u32 timeMs) -> irr::scene::ISceneNodeAnimator *"""
        return _irrlicht.ISceneManager_createDeleteAnimator(self, timeMs)

    def createCollisionResponseAnimator(self, *args):
        r"""createCollisionResponseAnimator(ISceneManager self, irr::scene::ITriangleSelector * world, ISceneNode sceneNode, vector3df ellipsoidRadius=irr::core::vector3df(30,60,30), vector3df gravityPerSecond=irr::core::vector3df(0,-10.0f,0), vector3df ellipsoidTranslation=irr::core::vector3df(0,0,0), irr::f32 slidingValue=0.0005) -> irr::scene::ISceneNodeAnimatorCollisionResponse"""
        return _irrlicht.ISceneManager_createCollisionResponseAnimator(self, *args)

    def createFollowSplineAnimator(self, startTime, points, speed=1.0, tightness=0.5, loop=True, pingpong=False):
        r"""createFollowSplineAnimator(ISceneManager self, irr::s32 startTime, irr::core::array< irr::core::vector3df > const & points, irr::f32 speed=1.0, irr::f32 tightness=0.5, bool loop=True, bool pingpong=False) -> irr::scene::ISceneNodeAnimator"""
        return _irrlicht.ISceneManager_createFollowSplineAnimator(self, startTime, points, speed, tightness, loop, pingpong)

    def createTriangleSelector(self, *args):
        r"""
        createTriangleSelector(ISceneManager self, irr::scene::IMesh * mesh, ISceneNode node) -> irr::scene::ITriangleSelector
        createTriangleSelector(ISceneManager self, irr::scene::IAnimatedMeshSceneNode * node) -> irr::scene::ITriangleSelector *
        """
        return _irrlicht.ISceneManager_createTriangleSelector(self, *args)

    def createTriangleSelectorFromBoundingBox(self, node):
        r"""createTriangleSelectorFromBoundingBox(ISceneManager self, ISceneNode node) -> irr::scene::ITriangleSelector *"""
        return _irrlicht.ISceneManager_createTriangleSelectorFromBoundingBox(self, node)

    def createOctreeTriangleSelector(self, mesh, node, minimalPolysPerNode=32):
        r"""createOctreeTriangleSelector(ISceneManager self, irr::scene::IMesh * mesh, ISceneNode node, irr::s32 minimalPolysPerNode=32) -> irr::scene::ITriangleSelector"""
        return _irrlicht.ISceneManager_createOctreeTriangleSelector(self, mesh, node, minimalPolysPerNode)

    def createOctTreeTriangleSelector(self, mesh, node, minimalPolysPerNode=32):
        r"""createOctTreeTriangleSelector(ISceneManager self, irr::scene::IMesh * mesh, ISceneNode node, irr::s32 minimalPolysPerNode=32) -> irr::scene::ITriangleSelector"""
        return _irrlicht.ISceneManager_createOctTreeTriangleSelector(self, mesh, node, minimalPolysPerNode)

    def createMetaTriangleSelector(self):
        r"""createMetaTriangleSelector(ISceneManager self) -> irr::scene::IMetaTriangleSelector *"""
        return _irrlicht.ISceneManager_createMetaTriangleSelector(self)

    def createTerrainTriangleSelector(self, node, LOD=0):
        r"""createTerrainTriangleSelector(ISceneManager self, irr::scene::ITerrainSceneNode * node, irr::s32 LOD=0) -> irr::scene::ITriangleSelector"""
        return _irrlicht.ISceneManager_createTerrainTriangleSelector(self, node, LOD)

    def addExternalMeshLoader(self, externalLoader):
        r"""addExternalMeshLoader(ISceneManager self, irr::scene::IMeshLoader * externalLoader)"""
        return _irrlicht.ISceneManager_addExternalMeshLoader(self, externalLoader)

    def getMeshLoaderCount(self):
        r"""getMeshLoaderCount(ISceneManager self) -> irr::u32"""
        return _irrlicht.ISceneManager_getMeshLoaderCount(self)

    def getMeshLoader(self, index):
        r"""getMeshLoader(ISceneManager self, irr::u32 index) -> irr::scene::IMeshLoader *"""
        return _irrlicht.ISceneManager_getMeshLoader(self, index)

    def addExternalSceneLoader(self, externalLoader):
        r"""addExternalSceneLoader(ISceneManager self, irr::scene::ISceneLoader * externalLoader)"""
        return _irrlicht.ISceneManager_addExternalSceneLoader(self, externalLoader)

    def getSceneLoaderCount(self):
        r"""getSceneLoaderCount(ISceneManager self) -> irr::u32"""
        return _irrlicht.ISceneManager_getSceneLoaderCount(self)

    def getSceneLoader(self, index):
        r"""getSceneLoader(ISceneManager self, irr::u32 index) -> irr::scene::ISceneLoader *"""
        return _irrlicht.ISceneManager_getSceneLoader(self, index)

    def getSceneCollisionManager(self):
        r"""getSceneCollisionManager(ISceneManager self) -> irr::scene::ISceneCollisionManager *"""
        return _irrlicht.ISceneManager_getSceneCollisionManager(self)

    def getMeshManipulator(self):
        r"""getMeshManipulator(ISceneManager self) -> irr::scene::IMeshManipulator *"""
        return _irrlicht.ISceneManager_getMeshManipulator(self)

    def addToDeletionQueue(self, node):
        r"""addToDeletionQueue(ISceneManager self, ISceneNode node)"""
        return _irrlicht.ISceneManager_addToDeletionQueue(self, node)

    def postEventFromUser(self, event):
        r"""postEventFromUser(ISceneManager self, irr::SEvent const & event) -> bool"""
        return _irrlicht.ISceneManager_postEventFromUser(self, event)

    def clear(self):
        r"""clear(ISceneManager self)"""
        return _irrlicht.ISceneManager_clear(self)

    def getParameters(self):
        r"""getParameters(ISceneManager self) -> irr::io::IAttributes *"""
        return _irrlicht.ISceneManager_getParameters(self)

    def getSceneNodeRenderPass(self):
        r"""getSceneNodeRenderPass(ISceneManager self) -> irr::scene::E_SCENE_NODE_RENDER_PASS"""
        return _irrlicht.ISceneManager_getSceneNodeRenderPass(self)

    def getDefaultSceneNodeFactory(self):
        r"""getDefaultSceneNodeFactory(ISceneManager self) -> irr::scene::ISceneNodeFactory *"""
        return _irrlicht.ISceneManager_getDefaultSceneNodeFactory(self)

    def registerSceneNodeFactory(self, factoryToAdd):
        r"""registerSceneNodeFactory(ISceneManager self, irr::scene::ISceneNodeFactory * factoryToAdd)"""
        return _irrlicht.ISceneManager_registerSceneNodeFactory(self, factoryToAdd)

    def getRegisteredSceneNodeFactoryCount(self):
        r"""getRegisteredSceneNodeFactoryCount(ISceneManager self) -> irr::u32"""
        return _irrlicht.ISceneManager_getRegisteredSceneNodeFactoryCount(self)

    def getSceneNodeFactory(self, index):
        r"""getSceneNodeFactory(ISceneManager self, irr::u32 index) -> irr::scene::ISceneNodeFactory *"""
        return _irrlicht.ISceneManager_getSceneNodeFactory(self, index)

    def getDefaultSceneNodeAnimatorFactory(self):
        r"""getDefaultSceneNodeAnimatorFactory(ISceneManager self) -> irr::scene::ISceneNodeAnimatorFactory *"""
        return _irrlicht.ISceneManager_getDefaultSceneNodeAnimatorFactory(self)

    def registerSceneNodeAnimatorFactory(self, factoryToAdd):
        r"""registerSceneNodeAnimatorFactory(ISceneManager self, irr::scene::ISceneNodeAnimatorFactory * factoryToAdd)"""
        return _irrlicht.ISceneManager_registerSceneNodeAnimatorFactory(self, factoryToAdd)

    def getRegisteredSceneNodeAnimatorFactoryCount(self):
        r"""getRegisteredSceneNodeAnimatorFactoryCount(ISceneManager self) -> irr::u32"""
        return _irrlicht.ISceneManager_getRegisteredSceneNodeAnimatorFactoryCount(self)

    def getSceneNodeAnimatorFactory(self, index):
        r"""getSceneNodeAnimatorFactory(ISceneManager self, irr::u32 index) -> irr::scene::ISceneNodeAnimatorFactory *"""
        return _irrlicht.ISceneManager_getSceneNodeAnimatorFactory(self, index)

    def getSceneNodeTypeName(self, type):
        r"""getSceneNodeTypeName(ISceneManager self, ESCENE_NODE_TYPE type) -> irr::c8 const *"""
        return _irrlicht.ISceneManager_getSceneNodeTypeName(self, type)

    def getAnimatorTypeName(self, type):
        r"""getAnimatorTypeName(ISceneManager self, ESCENE_NODE_ANIMATOR_TYPE type) -> irr::c8 const *"""
        return _irrlicht.ISceneManager_getAnimatorTypeName(self, type)

    def addSceneNode(self, sceneNodeTypeName, parent=None):
        r"""addSceneNode(ISceneManager self, char const * sceneNodeTypeName, ISceneNode parent=None) -> ISceneNode"""
        return _irrlicht.ISceneManager_addSceneNode(self, sceneNodeTypeName, parent)

    def createSceneNodeAnimator(self, typeName, target=None):
        r"""createSceneNodeAnimator(ISceneManager self, char const * typeName, ISceneNode target=None) -> irr::scene::ISceneNodeAnimator"""
        return _irrlicht.ISceneManager_createSceneNodeAnimator(self, typeName, target)

    def createNewSceneManager(self, cloneContent=False):
        r"""createNewSceneManager(ISceneManager self, bool cloneContent=False) -> ISceneManager"""
        return _irrlicht.ISceneManager_createNewSceneManager(self, cloneContent)

    def saveScene(self, *args):
        r"""
        saveScene(ISceneManager self, irr::io::path const & filename, irr::scene::ISceneUserDataSerializer * userDataSerializer=None, ISceneNode node=None) -> bool
        saveScene(ISceneManager self, IWriteFile file, irr::scene::ISceneUserDataSerializer * userDataSerializer=None, ISceneNode node=None) -> bool
        saveScene(ISceneManager self, irr::io::IXMLWriter * writer, irr::io::path const & currentPath, irr::scene::ISceneUserDataSerializer * userDataSerializer=None, ISceneNode node=None) -> bool
        """
        return _irrlicht.ISceneManager_saveScene(self, *args)

    def loadScene(self, *args):
        r"""
        loadScene(ISceneManager self, irr::io::path const & filename, irr::scene::ISceneUserDataSerializer * userDataSerializer=None, ISceneNode rootNode=None) -> bool
        loadScene(ISceneManager self, irr::io::IReadFile * file, irr::scene::ISceneUserDataSerializer * userDataSerializer=None, ISceneNode rootNode=None) -> bool
        """
        return _irrlicht.ISceneManager_loadScene(self, *args)

    def createMeshWriter(self, type):
        r"""createMeshWriter(ISceneManager self, EMESH_WRITER_TYPE type) -> irr::scene::IMeshWriter *"""
        return _irrlicht.ISceneManager_createMeshWriter(self, type)

    def createSkinnedMesh(self):
        r"""createSkinnedMesh(ISceneManager self) -> ISkinnedMesh *"""
        return _irrlicht.ISceneManager_createSkinnedMesh(self)

    def setAmbientLight(self, ambientColor):
        r"""setAmbientLight(ISceneManager self, SColorf ambientColor)"""
        return _irrlicht.ISceneManager_setAmbientLight(self, ambientColor)

    def getAmbientLight(self):
        r"""getAmbientLight(ISceneManager self) -> SColorf"""
        return _irrlicht.ISceneManager_getAmbientLight(self)

    def setLightManager(self, lightManager):
        r"""setLightManager(ISceneManager self, irr::scene::ILightManager * lightManager)"""
        return _irrlicht.ISceneManager_setLightManager(self, lightManager)

    def getGeometryCreator(self):
        r"""getGeometryCreator(ISceneManager self) -> IGeometryCreator const *"""
        return _irrlicht.ISceneManager_getGeometryCreator(self)

    def isCulled(self, node):
        r"""isCulled(ISceneManager self, ISceneNode node) -> bool"""
        return _irrlicht.ISceneManager_isCulled(self, node)
    __swig_destroy__ = _irrlicht.delete_ISceneManager

# Register ISceneManager in _irrlicht:
_irrlicht.ISceneManager_swigregister(ISceneManager)

class IGUIEnvironment(IReferenceCounted):
    r"""Proxy of C++ irr::gui::IGUIEnvironment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def drawAll(self):
        r"""drawAll(IGUIEnvironment self)"""
        return _irrlicht.IGUIEnvironment_drawAll(self)

    def setFocus(self, element):
        r"""setFocus(IGUIEnvironment self, irr::gui::IGUIElement * element) -> bool"""
        return _irrlicht.IGUIEnvironment_setFocus(self, element)

    def getFocus(self):
        r"""getFocus(IGUIEnvironment self) -> irr::gui::IGUIElement *"""
        return _irrlicht.IGUIEnvironment_getFocus(self)

    def getHovered(self):
        r"""getHovered(IGUIEnvironment self) -> irr::gui::IGUIElement *"""
        return _irrlicht.IGUIEnvironment_getHovered(self)

    def removeFocus(self, element):
        r"""removeFocus(IGUIEnvironment self, irr::gui::IGUIElement * element) -> bool"""
        return _irrlicht.IGUIEnvironment_removeFocus(self, element)

    def hasFocus(self, element):
        r"""hasFocus(IGUIEnvironment self, irr::gui::IGUIElement * element) -> bool"""
        return _irrlicht.IGUIEnvironment_hasFocus(self, element)

    def getVideoDriver(self):
        r"""getVideoDriver(IGUIEnvironment self) -> IVideoDriver"""
        return _irrlicht.IGUIEnvironment_getVideoDriver(self)

    def getFileSystem(self):
        r"""getFileSystem(IGUIEnvironment self) -> irr::io::IFileSystem *"""
        return _irrlicht.IGUIEnvironment_getFileSystem(self)

    def getOSOperator(self):
        r"""getOSOperator(IGUIEnvironment self) -> irr::IOSOperator *"""
        return _irrlicht.IGUIEnvironment_getOSOperator(self)

    def clear(self):
        r"""clear(IGUIEnvironment self)"""
        return _irrlicht.IGUIEnvironment_clear(self)

    def postEventFromUser(self, event):
        r"""postEventFromUser(IGUIEnvironment self, irr::SEvent const & event) -> bool"""
        return _irrlicht.IGUIEnvironment_postEventFromUser(self, event)

    def setUserEventReceiver(self, evr):
        r"""setUserEventReceiver(IGUIEnvironment self, irr::IEventReceiver * evr)"""
        return _irrlicht.IGUIEnvironment_setUserEventReceiver(self, evr)

    def getSkin(self):
        r"""getSkin(IGUIEnvironment self) -> IGUISkin *"""
        return _irrlicht.IGUIEnvironment_getSkin(self)

    def setSkin(self, skin):
        r"""setSkin(IGUIEnvironment self, IGUISkin * skin)"""
        return _irrlicht.IGUIEnvironment_setSkin(self, skin)

    def createSkin(self, type):
        r"""createSkin(IGUIEnvironment self, EGUI_SKIN_TYPE type) -> IGUISkin *"""
        return _irrlicht.IGUIEnvironment_createSkin(self, type)

    def createImageList(self, texture, imageSize, useAlphaChannel):
        r"""createImageList(IGUIEnvironment self, irr::video::ITexture * texture, irr::core::dimension2d< irr::s32 > imageSize, bool useAlphaChannel) -> irr::gui::IGUIImageList *"""
        return _irrlicht.IGUIEnvironment_createImageList(self, texture, imageSize, useAlphaChannel)

    def getFont(self, filename):
        r"""getFont(IGUIEnvironment self, irr::io::path const & filename) -> irr::gui::IGUIFont *"""
        return _irrlicht.IGUIEnvironment_getFont(self, filename)

    def addFont(self, name, font):
        r"""addFont(IGUIEnvironment self, irr::io::path const & name, irr::gui::IGUIFont * font) -> irr::gui::IGUIFont *"""
        return _irrlicht.IGUIEnvironment_addFont(self, name, font)

    def removeFont(self, font):
        r"""removeFont(IGUIEnvironment self, irr::gui::IGUIFont * font)"""
        return _irrlicht.IGUIEnvironment_removeFont(self, font)

    def getBuiltInFont(self):
        r"""getBuiltInFont(IGUIEnvironment self) -> irr::gui::IGUIFont *"""
        return _irrlicht.IGUIEnvironment_getBuiltInFont(self)

    def getSpriteBank(self, filename):
        r"""getSpriteBank(IGUIEnvironment self, irr::io::path const & filename) -> irr::gui::IGUISpriteBank *"""
        return _irrlicht.IGUIEnvironment_getSpriteBank(self, filename)

    def addEmptySpriteBank(self, name):
        r"""addEmptySpriteBank(IGUIEnvironment self, irr::io::path const & name) -> irr::gui::IGUISpriteBank *"""
        return _irrlicht.IGUIEnvironment_addEmptySpriteBank(self, name)

    def getRootGUIElement(self):
        r"""getRootGUIElement(IGUIEnvironment self) -> irr::gui::IGUIElement *"""
        return _irrlicht.IGUIEnvironment_getRootGUIElement(self)

    def addButton(self, rectangle, parent=None, id=-1, text=None, tooltiptext=None):
        r"""addButton(IGUIEnvironment self, irr::core::rect< irr::s32 > const & rectangle, irr::gui::IGUIElement * parent=None, irr::s32 id=-1, wchar_t const * text=None, wchar_t const * tooltiptext=None) -> irr::gui::IGUIButton"""
        return _irrlicht.IGUIEnvironment_addButton(self, rectangle, parent, id, text, tooltiptext)

    def addWindow(self, rectangle, modal=False, text=None, parent=None, id=-1):
        r"""addWindow(IGUIEnvironment self, irr::core::rect< irr::s32 > const & rectangle, bool modal=False, wchar_t const * text=None, irr::gui::IGUIElement * parent=None, irr::s32 id=-1) -> irr::gui::IGUIWindow"""
        return _irrlicht.IGUIEnvironment_addWindow(self, rectangle, modal, text, parent, id)

    def addModalScreen(self, parent):
        r"""addModalScreen(IGUIEnvironment self, irr::gui::IGUIElement * parent) -> irr::gui::IGUIElement *"""
        return _irrlicht.IGUIEnvironment_addModalScreen(self, parent)

    def addMessageBox(self, *args):
        r"""addMessageBox(IGUIEnvironment self, wchar_t const * caption, wchar_t const * text=None, bool modal=True, irr::s32 flags=EMBF_OK, irr::gui::IGUIElement * parent=None, irr::s32 id=-1, irr::video::ITexture * image=None) -> irr::gui::IGUIWindow"""
        return _irrlicht.IGUIEnvironment_addMessageBox(self, *args)

    def addScrollBar(self, horizontal, rectangle, parent=None, id=-1):
        r"""addScrollBar(IGUIEnvironment self, bool horizontal, irr::core::rect< irr::s32 > const & rectangle, irr::gui::IGUIElement * parent=None, irr::s32 id=-1) -> irr::gui::IGUIScrollBar"""
        return _irrlicht.IGUIEnvironment_addScrollBar(self, horizontal, rectangle, parent, id)

    def addImage(self, *args):
        r"""
        addImage(IGUIEnvironment self, irr::video::ITexture * image, irr::core::position2d< irr::s32 > pos, bool useAlphaChannel=True, irr::gui::IGUIElement * parent=None, irr::s32 id=-1, wchar_t const * text=None) -> irr::gui::IGUIImage
        addImage(IGUIEnvironment self, irr::core::rect< irr::s32 > const & rectangle, irr::gui::IGUIElement * parent=None, irr::s32 id=-1, wchar_t const * text=None, bool useAlphaChannel=True) -> irr::gui::IGUIImage
        """
        return _irrlicht.IGUIEnvironment_addImage(self, *args)

    def addCheckBox(self, checked, rectangle, parent=None, id=-1, text=None):
        r"""addCheckBox(IGUIEnvironment self, bool checked, irr::core::rect< irr::s32 > const & rectangle, irr::gui::IGUIElement * parent=None, irr::s32 id=-1, wchar_t const * text=None) -> irr::gui::IGUICheckBox"""
        return _irrlicht.IGUIEnvironment_addCheckBox(self, checked, rectangle, parent, id, text)

    def addListBox(self, rectangle, parent=None, id=-1, drawBackground=False):
        r"""addListBox(IGUIEnvironment self, irr::core::rect< irr::s32 > const & rectangle, irr::gui::IGUIElement * parent=None, irr::s32 id=-1, bool drawBackground=False) -> irr::gui::IGUIListBox"""
        return _irrlicht.IGUIEnvironment_addListBox(self, rectangle, parent, id, drawBackground)

    def addTreeView(self, rectangle, parent=None, id=-1, drawBackground=False, scrollBarVertical=True, scrollBarHorizontal=False):
        r"""addTreeView(IGUIEnvironment self, irr::core::rect< irr::s32 > const & rectangle, irr::gui::IGUIElement * parent=None, irr::s32 id=-1, bool drawBackground=False, bool scrollBarVertical=True, bool scrollBarHorizontal=False) -> irr::gui::IGUITreeView"""
        return _irrlicht.IGUIEnvironment_addTreeView(self, rectangle, parent, id, drawBackground, scrollBarVertical, scrollBarHorizontal)

    def addMeshViewer(self, rectangle, parent=None, id=-1, text=None):
        r"""addMeshViewer(IGUIEnvironment self, irr::core::rect< irr::s32 > const & rectangle, irr::gui::IGUIElement * parent=None, irr::s32 id=-1, wchar_t const * text=None) -> irr::gui::IGUIMeshViewer"""
        return _irrlicht.IGUIEnvironment_addMeshViewer(self, rectangle, parent, id, text)

    def addFileOpenDialog(self, title=None, modal=True, parent=None, id=-1, restoreCWD=False, startDir=None):
        r"""addFileOpenDialog(IGUIEnvironment self, wchar_t const * title=None, bool modal=True, irr::gui::IGUIElement * parent=None, irr::s32 id=-1, bool restoreCWD=False, irr::io::path::char_type * startDir=None) -> irr::gui::IGUIFileOpenDialog"""
        return _irrlicht.IGUIEnvironment_addFileOpenDialog(self, title, modal, parent, id, restoreCWD, startDir)

    def addColorSelectDialog(self, title=None, modal=True, parent=None, id=-1):
        r"""addColorSelectDialog(IGUIEnvironment self, wchar_t const * title=None, bool modal=True, irr::gui::IGUIElement * parent=None, irr::s32 id=-1) -> irr::gui::IGUIColorSelectDialog"""
        return _irrlicht.IGUIEnvironment_addColorSelectDialog(self, title, modal, parent, id)

    def addStaticText(self, text, rectangle, border=False, wordWrap=True, parent=None, id=-1, fillBackground=False):
        r"""addStaticText(IGUIEnvironment self, wchar_t const * text, irr::core::rect< irr::s32 > const & rectangle, bool border=False, bool wordWrap=True, irr::gui::IGUIElement * parent=None, irr::s32 id=-1, bool fillBackground=False) -> irr::gui::IGUIStaticText"""
        return _irrlicht.IGUIEnvironment_addStaticText(self, text, rectangle, border, wordWrap, parent, id, fillBackground)

    def addEditBox(self, text, rectangle, border=True, parent=None, id=-1):
        r"""addEditBox(IGUIEnvironment self, wchar_t const * text, irr::core::rect< irr::s32 > const & rectangle, bool border=True, irr::gui::IGUIElement * parent=None, irr::s32 id=-1) -> irr::gui::IGUIEditBox"""
        return _irrlicht.IGUIEnvironment_addEditBox(self, text, rectangle, border, parent, id)

    def addSpinBox(self, text, rectangle, border=True, parent=None, id=-1):
        r"""addSpinBox(IGUIEnvironment self, wchar_t const * text, irr::core::rect< irr::s32 > const & rectangle, bool border=True, irr::gui::IGUIElement * parent=None, irr::s32 id=-1) -> irr::gui::IGUISpinBox"""
        return _irrlicht.IGUIEnvironment_addSpinBox(self, text, rectangle, border, parent, id)

    def addInOutFader(self, rectangle=None, parent=None, id=-1):
        r"""addInOutFader(IGUIEnvironment self, irr::core::rect< irr::s32 > const * rectangle=None, irr::gui::IGUIElement * parent=None, irr::s32 id=-1) -> irr::gui::IGUIInOutFader"""
        return _irrlicht.IGUIEnvironment_addInOutFader(self, rectangle, parent, id)

    def addTabControl(self, rectangle, parent=None, fillbackground=False, border=True, id=-1):
        r"""addTabControl(IGUIEnvironment self, irr::core::rect< irr::s32 > const & rectangle, irr::gui::IGUIElement * parent=None, bool fillbackground=False, bool border=True, irr::s32 id=-1) -> irr::gui::IGUITabControl"""
        return _irrlicht.IGUIEnvironment_addTabControl(self, rectangle, parent, fillbackground, border, id)

    def addTab(self, rectangle, parent=None, id=-1):
        r"""addTab(IGUIEnvironment self, irr::core::rect< irr::s32 > const & rectangle, irr::gui::IGUIElement * parent=None, irr::s32 id=-1) -> irr::gui::IGUITab"""
        return _irrlicht.IGUIEnvironment_addTab(self, rectangle, parent, id)

    def addContextMenu(self, rectangle, parent=None, id=-1):
        r"""addContextMenu(IGUIEnvironment self, irr::core::rect< irr::s32 > const & rectangle, irr::gui::IGUIElement * parent=None, irr::s32 id=-1) -> irr::gui::IGUIContextMenu"""
        return _irrlicht.IGUIEnvironment_addContextMenu(self, rectangle, parent, id)

    def addMenu(self, parent=None, id=-1):
        r"""addMenu(IGUIEnvironment self, irr::gui::IGUIElement * parent=None, irr::s32 id=-1) -> irr::gui::IGUIContextMenu"""
        return _irrlicht.IGUIEnvironment_addMenu(self, parent, id)

    def addToolBar(self, parent=None, id=-1):
        r"""addToolBar(IGUIEnvironment self, irr::gui::IGUIElement * parent=None, irr::s32 id=-1) -> irr::gui::IGUIToolBar"""
        return _irrlicht.IGUIEnvironment_addToolBar(self, parent, id)

    def addComboBox(self, rectangle, parent=None, id=-1):
        r"""addComboBox(IGUIEnvironment self, irr::core::rect< irr::s32 > const & rectangle, irr::gui::IGUIElement * parent=None, irr::s32 id=-1) -> irr::gui::IGUIComboBox"""
        return _irrlicht.IGUIEnvironment_addComboBox(self, rectangle, parent, id)

    def addTable(self, rectangle, parent=None, id=-1, drawBackground=False):
        r"""addTable(IGUIEnvironment self, irr::core::rect< irr::s32 > const & rectangle, irr::gui::IGUIElement * parent=None, irr::s32 id=-1, bool drawBackground=False) -> irr::gui::IGUITable"""
        return _irrlicht.IGUIEnvironment_addTable(self, rectangle, parent, id, drawBackground)

    def getDefaultGUIElementFactory(self):
        r"""getDefaultGUIElementFactory(IGUIEnvironment self) -> irr::gui::IGUIElementFactory *"""
        return _irrlicht.IGUIEnvironment_getDefaultGUIElementFactory(self)

    def registerGUIElementFactory(self, factoryToAdd):
        r"""registerGUIElementFactory(IGUIEnvironment self, irr::gui::IGUIElementFactory * factoryToAdd)"""
        return _irrlicht.IGUIEnvironment_registerGUIElementFactory(self, factoryToAdd)

    def getRegisteredGUIElementFactoryCount(self):
        r"""getRegisteredGUIElementFactoryCount(IGUIEnvironment self) -> irr::u32"""
        return _irrlicht.IGUIEnvironment_getRegisteredGUIElementFactoryCount(self)

    def getGUIElementFactory(self, index):
        r"""getGUIElementFactory(IGUIEnvironment self, irr::u32 index) -> irr::gui::IGUIElementFactory *"""
        return _irrlicht.IGUIEnvironment_getGUIElementFactory(self, index)

    def addGUIElement(self, elementName, parent=None):
        r"""addGUIElement(IGUIEnvironment self, irr::c8 const * elementName, irr::gui::IGUIElement * parent=None) -> irr::gui::IGUIElement"""
        return _irrlicht.IGUIEnvironment_addGUIElement(self, elementName, parent)

    def saveGUI(self, *args):
        r"""
        saveGUI(IGUIEnvironment self, irr::io::path const & filename, irr::gui::IGUIElement * start=None) -> bool
        saveGUI(IGUIEnvironment self, IWriteFile file, irr::gui::IGUIElement * start=None) -> bool
        """
        return _irrlicht.IGUIEnvironment_saveGUI(self, *args)

    def loadGUI(self, *args):
        r"""
        loadGUI(IGUIEnvironment self, irr::io::path const & filename, irr::gui::IGUIElement * parent=None) -> bool
        loadGUI(IGUIEnvironment self, irr::io::IReadFile * file, irr::gui::IGUIElement * parent=None) -> bool
        """
        return _irrlicht.IGUIEnvironment_loadGUI(self, *args)

    def serializeAttributes(self, out, options=None):
        r"""serializeAttributes(IGUIEnvironment self, irr::io::IAttributes * out, irr::io::SAttributeReadWriteOptions * options=None)"""
        return _irrlicht.IGUIEnvironment_serializeAttributes(self, out, options)

    def deserializeAttributes(self, _in, options=None):
        r"""deserializeAttributes(IGUIEnvironment self, irr::io::IAttributes * _in, irr::io::SAttributeReadWriteOptions * options=None)"""
        return _irrlicht.IGUIEnvironment_deserializeAttributes(self, _in, options)

    def writeGUIElement(self, writer, node):
        r"""writeGUIElement(IGUIEnvironment self, irr::io::IXMLWriter * writer, irr::gui::IGUIElement * node)"""
        return _irrlicht.IGUIEnvironment_writeGUIElement(self, writer, node)

    def readGUIElement(self, reader, node):
        r"""readGUIElement(IGUIEnvironment self, irr::io::IXMLReader * reader, irr::gui::IGUIElement * node)"""
        return _irrlicht.IGUIEnvironment_readGUIElement(self, reader, node)
    __swig_destroy__ = _irrlicht.delete_IGUIEnvironment

# Register IGUIEnvironment in _irrlicht:
_irrlicht.IGUIEnvironment_swigregister(IGUIEnvironment)

class dimension2du(object):
    r"""Proxy of C++ irr::core::dimension2d< irr::u32 > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(dimension2du self) -> dimension2du
        __init__(dimension2du self, unsigned int const & width, unsigned int const & height) -> dimension2du
        __init__(dimension2du self, irr::core::vector2d< unsigned int > const & other) -> dimension2du
        """
        _irrlicht.dimension2du_swiginit(self, _irrlicht.new_dimension2du(*args))

    def __eq__(self, *args):
        r"""
        __eq__(dimension2du self, dimension2du other) -> bool
        __eq__(dimension2du self, irr::core::vector2d< unsigned int > const & other) -> bool
        """
        return _irrlicht.dimension2du___eq__(self, *args)

    def __ne__(self, *args):
        r"""
        __ne__(dimension2du self, dimension2du other) -> bool
        __ne__(dimension2du self, irr::core::vector2d< unsigned int > const & other) -> bool
        """
        return _irrlicht.dimension2du___ne__(self, *args)

    def set(self, width, height):
        r"""set(dimension2du self, unsigned int const & width, unsigned int const & height) -> dimension2du"""
        return _irrlicht.dimension2du_set(self, width, height)

    def __itruediv__(self, *args):
        return _irrlicht.dimension2du___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __truediv__(self, *args):
        return _irrlicht.dimension2du___truediv__(self, *args)
    __div__ = __truediv__



    def __imul__(self, scale):
        r"""__imul__(dimension2du self, unsigned int const & scale) -> dimension2du"""
        return _irrlicht.dimension2du___imul__(self, scale)

    def __mul__(self, scale):
        r"""__mul__(dimension2du self, unsigned int const & scale) -> dimension2du"""
        return _irrlicht.dimension2du___mul__(self, scale)

    def __iadd__(self, other):
        r"""__iadd__(dimension2du self, dimension2du other) -> dimension2du"""
        return _irrlicht.dimension2du___iadd__(self, other)

    def __add__(self, other):
        r"""__add__(dimension2du self, dimension2du other) -> dimension2du"""
        return _irrlicht.dimension2du___add__(self, other)

    def __isub__(self, other):
        r"""__isub__(dimension2du self, dimension2du other) -> dimension2du"""
        return _irrlicht.dimension2du___isub__(self, other)

    def __sub__(self, other):
        r"""__sub__(dimension2du self, dimension2du other) -> dimension2du"""
        return _irrlicht.dimension2du___sub__(self, other)

    def getArea(self):
        r"""getArea(dimension2du self) -> unsigned int"""
        return _irrlicht.dimension2du_getArea(self)

    def getOptimalSize(self, requirePowerOfTwo=True, requireSquare=False, larger=True, maxValue=0):
        r"""getOptimalSize(dimension2du self, bool requirePowerOfTwo=True, bool requireSquare=False, bool larger=True, irr::u32 maxValue=0) -> dimension2du"""
        return _irrlicht.dimension2du_getOptimalSize(self, requirePowerOfTwo, requireSquare, larger, maxValue)

    def getInterpolated(self, other, d):
        r"""getInterpolated(dimension2du self, dimension2du other, irr::f32 d) -> dimension2du"""
        return _irrlicht.dimension2du_getInterpolated(self, other, d)
    Width = property(_irrlicht.dimension2du_Width_get, _irrlicht.dimension2du_Width_set, doc=r"""Width : unsigned int""")
    Height = property(_irrlicht.dimension2du_Height_get, _irrlicht.dimension2du_Height_set, doc=r"""Height : unsigned int""")
    __swig_destroy__ = _irrlicht.delete_dimension2du

# Register dimension2du in _irrlicht:
_irrlicht.dimension2du_swigregister(dimension2du)

class CShaderPreprocessor(object):
    r"""Proxy of C++ chrono::irrlicht::CShaderPreprocessor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, driverIn):
        r"""__init__(CShaderPreprocessor self, IVideoDriver driverIn) -> CShaderPreprocessor"""
        _irrlicht.CShaderPreprocessor_swiginit(self, _irrlicht.new_CShaderPreprocessor(driverIn))

    def ppShader(self, shaderProgram):
        r"""ppShader(CShaderPreprocessor self, irr::core::stringc shaderProgram) -> irr::core::stringc"""
        return _irrlicht.CShaderPreprocessor_ppShader(self, shaderProgram)

    def ppShaderFF(self, shaderProgram):
        r"""ppShaderFF(CShaderPreprocessor self, irr::core::stringc shaderProgram) -> irr::core::stringc"""
        return _irrlicht.CShaderPreprocessor_ppShaderFF(self, shaderProgram)

    def addShaderDefine(self, *args):
        r"""addShaderDefine(CShaderPreprocessor self, irr::core::stringc const name, irr::core::stringc const value="")"""
        return _irrlicht.CShaderPreprocessor_addShaderDefine(self, *args)

    def removeShaderDefine(self, name):
        r"""removeShaderDefine(CShaderPreprocessor self, irr::core::stringc const name)"""
        return _irrlicht.CShaderPreprocessor_removeShaderDefine(self, name)
    __swig_destroy__ = _irrlicht.delete_CShaderPreprocessor

# Register CShaderPreprocessor in _irrlicht:
_irrlicht.CShaderPreprocessor_swigregister(CShaderPreprocessor)

class DepthShaderCB(object):
    r"""Proxy of C++ chrono::irrlicht::DepthShaderCB class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, effectIn):
        r"""__init__(DepthShaderCB self, EffectHandler effectIn) -> DepthShaderCB"""
        _irrlicht.DepthShaderCB_swiginit(self, _irrlicht.new_DepthShaderCB(effectIn))

    def OnSetConstants(self, services, userData):
        r"""OnSetConstants(DepthShaderCB self, irr::video::IMaterialRendererServices * services, irr::s32 userData)"""
        return _irrlicht.DepthShaderCB_OnSetConstants(self, services, userData)
    effect = property(_irrlicht.DepthShaderCB_effect_get, _irrlicht.DepthShaderCB_effect_set, doc=r"""effect : p.chrono::irrlicht::EffectHandler""")
    FarLink = property(_irrlicht.DepthShaderCB_FarLink_get, _irrlicht.DepthShaderCB_FarLink_set, doc=r"""FarLink : irr::f32""")
    worldViewProj = property(_irrlicht.DepthShaderCB_worldViewProj_get, _irrlicht.DepthShaderCB_worldViewProj_set, doc=r"""worldViewProj : irr::core::matrix4""")
    __swig_destroy__ = _irrlicht.delete_DepthShaderCB

# Register DepthShaderCB in _irrlicht:
_irrlicht.DepthShaderCB_swigregister(DepthShaderCB)

class ShadowShaderCB(object):
    r"""Proxy of C++ chrono::irrlicht::ShadowShaderCB class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, effectIn):
        r"""__init__(ShadowShaderCB self, EffectHandler effectIn) -> ShadowShaderCB"""
        _irrlicht.ShadowShaderCB_swiginit(self, _irrlicht.new_ShadowShaderCB(effectIn))

    def OnSetMaterial(self, material):
        r"""OnSetMaterial(ShadowShaderCB self, irr::video::SMaterial const & material)"""
        return _irrlicht.ShadowShaderCB_OnSetMaterial(self, material)

    def OnSetConstants(self, services, userData):
        r"""OnSetConstants(ShadowShaderCB self, irr::video::IMaterialRendererServices * services, irr::s32 userData)"""
        return _irrlicht.ShadowShaderCB_OnSetConstants(self, services, userData)
    effect = property(_irrlicht.ShadowShaderCB_effect_get, _irrlicht.ShadowShaderCB_effect_set, doc=r"""effect : p.chrono::irrlicht::EffectHandler""")
    invWorld = property(_irrlicht.ShadowShaderCB_invWorld_get, _irrlicht.ShadowShaderCB_invWorld_set, doc=r"""invWorld : irr::core::matrix4""")
    LightColour = property(_irrlicht.ShadowShaderCB_LightColour_get, _irrlicht.ShadowShaderCB_LightColour_set, doc=r"""LightColour : irr::video::SColorf""")
    ProjLink = property(_irrlicht.ShadowShaderCB_ProjLink_get, _irrlicht.ShadowShaderCB_ProjLink_set, doc=r"""ProjLink : irr::core::matrix4""")
    ViewLink = property(_irrlicht.ShadowShaderCB_ViewLink_get, _irrlicht.ShadowShaderCB_ViewLink_set, doc=r"""ViewLink : irr::core::matrix4""")
    LightLink = property(_irrlicht.ShadowShaderCB_LightLink_get, _irrlicht.ShadowShaderCB_LightLink_set, doc=r"""LightLink : irr::core::vector3df""")
    FarLink = property(_irrlicht.ShadowShaderCB_FarLink_get, _irrlicht.ShadowShaderCB_FarLink_set, doc=r"""FarLink : irr::f32""")
    MapRes = property(_irrlicht.ShadowShaderCB_MapRes_get, _irrlicht.ShadowShaderCB_MapRes_set, doc=r"""MapRes : irr::f32""")
    clipborder = property(_irrlicht.ShadowShaderCB_clipborder_get, _irrlicht.ShadowShaderCB_clipborder_set, doc=r"""clipborder : bool""")
    __swig_destroy__ = _irrlicht.delete_ShadowShaderCB

# Register ShadowShaderCB in _irrlicht:
_irrlicht.ShadowShaderCB_swigregister(ShadowShaderCB)

class SUniformDescriptor(object):
    r"""Proxy of C++ chrono::irrlicht::ScreenQuadCB::SUniformDescriptor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SUniformDescriptor self) -> SUniformDescriptor
        __init__(SUniformDescriptor self, irr::f32 const * fPointerIn, irr::u32 paramCountIn) -> SUniformDescriptor
        """
        _irrlicht.SUniformDescriptor_swiginit(self, _irrlicht.new_SUniformDescriptor(*args))
    fPointer = property(_irrlicht.SUniformDescriptor_fPointer_get, _irrlicht.SUniformDescriptor_fPointer_set, doc=r"""fPointer : p.q(const).irr::f32""")
    paramCount = property(_irrlicht.SUniformDescriptor_paramCount_get, _irrlicht.SUniformDescriptor_paramCount_set, doc=r"""paramCount : irr::u32""")
    __swig_destroy__ = _irrlicht.delete_SUniformDescriptor

# Register SUniformDescriptor in _irrlicht:
_irrlicht.SUniformDescriptor_swigregister(SUniformDescriptor)

class SDefineExp(object):
    r"""Proxy of C++ chrono::irrlicht::SDefineExp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(SDefineExp self) -> SDefineExp"""
        _irrlicht.SDefineExp_swiginit(self, _irrlicht.new_SDefineExp())
    IfPos = property(_irrlicht.SDefineExp_IfPos_get, _irrlicht.SDefineExp_IfPos_set, doc=r"""IfPos : irr::s32""")
    ElsePos = property(_irrlicht.SDefineExp_ElsePos_get, _irrlicht.SDefineExp_ElsePos_set, doc=r"""ElsePos : irr::s32""")
    EndPos = property(_irrlicht.SDefineExp_EndPos_get, _irrlicht.SDefineExp_EndPos_set, doc=r"""EndPos : irr::s32""")
    IfExp = property(_irrlicht.SDefineExp_IfExp_get, _irrlicht.SDefineExp_IfExp_set, doc=r"""IfExp : irr::core::stringc""")
    Inverse = property(_irrlicht.SDefineExp_Inverse_get, _irrlicht.SDefineExp_Inverse_set, doc=r"""Inverse : bool""")
    __swig_destroy__ = _irrlicht.delete_SDefineExp

# Register SDefineExp in _irrlicht:
_irrlicht.SDefineExp_swigregister(SDefineExp)


def grabDefineExpressions(shaderProgram):
    r"""grabDefineExpressions(irr::core::stringc & shaderProgram) -> irr::core::array< chrono::irrlicht::SDefineExp >"""
    return _irrlicht.grabDefineExpressions(shaderProgram)

def getFileContent(pFile):
    r"""getFileContent(std::string const pFile) -> std::string"""
    return _irrlicht.getFileContent(pFile)
class CScreenQuad(object):
    r"""Proxy of C++ chrono::irrlicht::CScreenQuad class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(CScreenQuad self) -> CScreenQuad"""
        _irrlicht.CScreenQuad_swiginit(self, _irrlicht.new_CScreenQuad())
    __swig_destroy__ = _irrlicht.delete_CScreenQuad

    def render(self, driver):
        r"""render(CScreenQuad self, IVideoDriver driver)"""
        return _irrlicht.CScreenQuad_render(self, driver)

    def getMaterial(self):
        r"""getMaterial(CScreenQuad self) -> irr::video::SMaterial &"""
        return _irrlicht.CScreenQuad_getMaterial(self)
    rt = property(_irrlicht.CScreenQuad_rt_get, _irrlicht.CScreenQuad_rt_set, doc=r"""rt : a(2).p.irr::video::ITexture""")

# Register CScreenQuad in _irrlicht:
_irrlicht.CScreenQuad_swigregister(CScreenQuad)

ESE_GLSL = _irrlicht.ESE_GLSL

ESE_HLSL = _irrlicht.ESE_HLSL

ESE_COUNT = _irrlicht.ESE_COUNT

ESM_RECEIVE = _irrlicht.ESM_RECEIVE

ESM_CAST = _irrlicht.ESM_CAST

ESM_BOTH = _irrlicht.ESM_BOTH

ESM_EXCLUDE = _irrlicht.ESM_EXCLUDE

ESM_COUNT = _irrlicht.ESM_COUNT

EFT_NONE = _irrlicht.EFT_NONE

EFT_4PCF = _irrlicht.EFT_4PCF

EFT_8PCF = _irrlicht.EFT_8PCF

EFT_12PCF = _irrlicht.EFT_12PCF

EFT_16PCF = _irrlicht.EFT_16PCF

EFT_COUNT = _irrlicht.EFT_COUNT

class SShadowLight(object):
    r"""Proxy of C++ chrono::irrlicht::SShadowLight class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(SShadowLight self, irr::u32 const shadowMapResolution, vector3df position, vector3df target, SColorf lightColour=irr::video::SColor(0xffffffff), irr::f32 nearValue=10.0, irr::f32 farValue=100.0, irr::f32 fov=90.0*irr::core::DEGTORAD64, bool directional=False) -> SShadowLight"""
        _irrlicht.SShadowLight_swiginit(self, _irrlicht.new_SShadowLight(*args))

    def setPosition(self, position):
        r"""setPosition(SShadowLight self, vector3df position)"""
        return _irrlicht.SShadowLight_setPosition(self, position)

    def setTarget(self, target):
        r"""setTarget(SShadowLight self, vector3df target)"""
        return _irrlicht.SShadowLight_setTarget(self, target)

    def getPosition(self):
        r"""getPosition(SShadowLight self) -> vector3df"""
        return _irrlicht.SShadowLight_getPosition(self)

    def getTarget(self):
        r"""getTarget(SShadowLight self) -> vector3df"""
        return _irrlicht.SShadowLight_getTarget(self)

    def setViewMatrix(self, matrix):
        r"""setViewMatrix(SShadowLight self, irr::core::matrix4 const & matrix)"""
        return _irrlicht.SShadowLight_setViewMatrix(self, matrix)

    def setProjectionMatrix(self, matrix):
        r"""setProjectionMatrix(SShadowLight self, irr::core::matrix4 const & matrix)"""
        return _irrlicht.SShadowLight_setProjectionMatrix(self, matrix)

    def getViewMatrix(self):
        r"""getViewMatrix(SShadowLight self) -> irr::core::matrix4 &"""
        return _irrlicht.SShadowLight_getViewMatrix(self)

    def getProjectionMatrix(self):
        r"""getProjectionMatrix(SShadowLight self) -> irr::core::matrix4 &"""
        return _irrlicht.SShadowLight_getProjectionMatrix(self)

    def getFarValue(self):
        r"""getFarValue(SShadowLight self) -> irr::f32"""
        return _irrlicht.SShadowLight_getFarValue(self)

    def getLightColor(self):
        r"""getLightColor(SShadowLight self) -> SColorf"""
        return _irrlicht.SShadowLight_getLightColor(self)

    def setLightColor(self, lightColour):
        r"""setLightColor(SShadowLight self, SColorf lightColour)"""
        return _irrlicht.SShadowLight_setLightColor(self, lightColour)

    def setShadowMapResolution(self, shadowMapResolution):
        r"""setShadowMapResolution(SShadowLight self, irr::u32 const shadowMapResolution)"""
        return _irrlicht.SShadowLight_setShadowMapResolution(self, shadowMapResolution)

    def getShadowMapResolution(self):
        r"""getShadowMapResolution(SShadowLight self) -> irr::u32"""
        return _irrlicht.SShadowLight_getShadowMapResolution(self)

    def setClipBorder(self, mb):
        r"""setClipBorder(SShadowLight self, bool mb)"""
        return _irrlicht.SShadowLight_setClipBorder(self, mb)

    def getClipBorder(self):
        r"""getClipBorder(SShadowLight self) -> bool"""
        return _irrlicht.SShadowLight_getClipBorder(self)
    __swig_destroy__ = _irrlicht.delete_SShadowLight

# Register SShadowLight in _irrlicht:
_irrlicht.SShadowLight_swigregister(SShadowLight)
LIGHT_MODULATE_P = cvar.LIGHT_MODULATE_P
SHADOW_PASS_1P = cvar.SHADOW_PASS_1P
SHADOW_PASS_1PT = cvar.SHADOW_PASS_1PT
SHADOW_PASS_1V = cvar.SHADOW_PASS_1V
SHADOW_PASS_2P = cvar.SHADOW_PASS_2P
SHADOW_PASS_2V = cvar.SHADOW_PASS_2V
SIMPLE_P = cvar.SIMPLE_P
WHITE_WASH_P = cvar.WHITE_WASH_P
WHITE_WASH_P_ADD = cvar.WHITE_WASH_P_ADD
SCREEN_QUAD_V = cvar.SCREEN_QUAD_V
VSM_BLUR_P = cvar.VSM_BLUR_P

class IPostProcessingRenderCallback(object):
    r"""Proxy of C++ chrono::irrlicht::IPostProcessingRenderCallback class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def OnPreRender(self, effect):
        r"""OnPreRender(IPostProcessingRenderCallback self, EffectHandler effect)"""
        return _irrlicht.IPostProcessingRenderCallback_OnPreRender(self, effect)

    def OnPostRender(self, effect):
        r"""OnPostRender(IPostProcessingRenderCallback self, EffectHandler effect)"""
        return _irrlicht.IPostProcessingRenderCallback_OnPostRender(self, effect)
    __swig_destroy__ = _irrlicht.delete_IPostProcessingRenderCallback

# Register IPostProcessingRenderCallback in _irrlicht:
_irrlicht.IPostProcessingRenderCallback_swigregister(IPostProcessingRenderCallback)

class EffectHandler(object):
    r"""Proxy of C++ chrono::irrlicht::EffectHandler class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(EffectHandler self, IrrlichtDevice irrlichtDevice, dimension2du screenRTTSize=irr::core::dimension2du(0, 0), bool const useVSMShadows=False, bool const useRoundSpotLights=False, bool const use32BitDepthBuffers=False) -> EffectHandler"""
        _irrlicht.EffectHandler_swiginit(self, _irrlicht.new_EffectHandler(*args))
    __swig_destroy__ = _irrlicht.delete_EffectHandler

    def addShadowLight(self, shadowLight):
        r"""addShadowLight(EffectHandler self, SShadowLight shadowLight)"""
        return _irrlicht.EffectHandler_addShadowLight(self, shadowLight)

    def getShadowLight(self, index):
        r"""getShadowLight(EffectHandler self, irr::u32 index) -> SShadowLight"""
        return _irrlicht.EffectHandler_getShadowLight(self, index)

    def getShadowLightCount(self):
        r"""getShadowLightCount(EffectHandler self) -> irr::u32"""
        return _irrlicht.EffectHandler_getShadowLightCount(self)

    def getShadowMapTexture(self, resolution, secondary=False):
        r"""getShadowMapTexture(EffectHandler self, irr::u32 const resolution, bool const secondary=False) -> irr::video::ITexture"""
        return _irrlicht.EffectHandler_getShadowMapTexture(self, resolution, secondary)

    def getDepthMapTexture(self):
        r"""getDepthMapTexture(EffectHandler self) -> irr::video::ITexture *"""
        return _irrlicht.EffectHandler_getDepthMapTexture(self)

    def addNodeToDepthPass(self, node):
        r"""addNodeToDepthPass(EffectHandler self, ISceneNode node)"""
        return _irrlicht.EffectHandler_addNodeToDepthPass(self, node)

    def removeNodeFromDepthPass(self, node):
        r"""removeNodeFromDepthPass(EffectHandler self, ISceneNode node)"""
        return _irrlicht.EffectHandler_removeNodeFromDepthPass(self, node)

    def enableDepthPass(self, enableDepthPass):
        r"""enableDepthPass(EffectHandler self, bool enableDepthPass)"""
        return _irrlicht.EffectHandler_enableDepthPass(self, enableDepthPass)

    def removeShadowFromNode(self, node):
        r"""removeShadowFromNode(EffectHandler self, ISceneNode node)"""
        return _irrlicht.EffectHandler_removeShadowFromNode(self, node)

    def excludeNodeFromLightingCalculations(self, node):
        r"""excludeNodeFromLightingCalculations(EffectHandler self, ISceneNode node)"""
        return _irrlicht.EffectHandler_excludeNodeFromLightingCalculations(self, node)

    def update(self, outputTarget=None):
        r"""update(EffectHandler self, irr::video::ITexture * outputTarget=None)"""
        return _irrlicht.EffectHandler_update(self, outputTarget)

    def addShadowToNode(self, *args):
        r"""addShadowToNode(EffectHandler self, ISceneNode node, chrono::irrlicht::E_FILTER_TYPE filterType=EFT_NONE, chrono::irrlicht::E_SHADOW_MODE shadowMode=ESM_BOTH)"""
        return _irrlicht.EffectHandler_addShadowToNode(self, *args)

    def getTime(self):
        r"""getTime(EffectHandler self) -> irr::f32"""
        return _irrlicht.EffectHandler_getTime(self)

    def setClearColour(self, ClearCol):
        r"""setClearColour(EffectHandler self, SColor ClearCol)"""
        return _irrlicht.EffectHandler_setClearColour(self, ClearCol)

    def addPostProcessingEffect(self, MaterialType, callback=None):
        r"""addPostProcessingEffect(EffectHandler self, irr::s32 MaterialType, IPostProcessingRenderCallback callback=None)"""
        return _irrlicht.EffectHandler_addPostProcessingEffect(self, MaterialType, callback)

    def setPostProcessingRenderCallback(self, MaterialType, callback=None):
        r"""setPostProcessingRenderCallback(EffectHandler self, irr::s32 MaterialType, IPostProcessingRenderCallback callback=None)"""
        return _irrlicht.EffectHandler_setPostProcessingRenderCallback(self, MaterialType, callback)

    def removePostProcessingEffect(self, MaterialType):
        r"""removePostProcessingEffect(EffectHandler self, irr::s32 MaterialType)"""
        return _irrlicht.EffectHandler_removePostProcessingEffect(self, MaterialType)

    def addPostProcessingEffectFromFile(self, filename, callback=None):
        r"""addPostProcessingEffectFromFile(EffectHandler self, irr::core::stringc const & filename, IPostProcessingRenderCallback callback=None) -> irr::s32"""
        return _irrlicht.EffectHandler_addPostProcessingEffectFromFile(self, filename, callback)

    def setPostProcessingEffectConstant(self, materialType, name, data, count):
        r"""setPostProcessingEffectConstant(EffectHandler self, irr::s32 const materialType, irr::core::stringc const & name, irr::f32 const * data, irr::u32 const count)"""
        return _irrlicht.EffectHandler_setPostProcessingEffectConstant(self, materialType, name, data, count)

    def getScreenQuad(self):
        r"""getScreenQuad(EffectHandler self) -> CScreenQuad"""
        return _irrlicht.EffectHandler_getScreenQuad(self)

    def setActiveSceneManager(self, smgrIn):
        r"""setActiveSceneManager(EffectHandler self, ISceneManager smgrIn)"""
        return _irrlicht.EffectHandler_setActiveSceneManager(self, smgrIn)

    def getActiveSceneManager(self):
        r"""getActiveSceneManager(EffectHandler self) -> ISceneManager"""
        return _irrlicht.EffectHandler_getActiveSceneManager(self)

    def setPostProcessingUserTexture(self, userTexture):
        r"""setPostProcessingUserTexture(EffectHandler self, irr::video::ITexture * userTexture)"""
        return _irrlicht.EffectHandler_setPostProcessingUserTexture(self, userTexture)

    def setAmbientColor(self, ambientColour):
        r"""setAmbientColor(EffectHandler self, SColor ambientColour)"""
        return _irrlicht.EffectHandler_setAmbientColor(self, ambientColour)

    def getAmbientColor(self):
        r"""getAmbientColor(EffectHandler self) -> SColor"""
        return _irrlicht.EffectHandler_getAmbientColor(self)

    def generateRandomVectorTexture(self, *args):
        r"""generateRandomVectorTexture(EffectHandler self, dimension2du dimensions, irr::core::stringc const & name="randVec") -> irr::video::ITexture"""
        return _irrlicht.EffectHandler_generateRandomVectorTexture(self, *args)

    def setScreenRenderTargetResolution(self, resolution):
        r"""setScreenRenderTargetResolution(EffectHandler self, dimension2du resolution)"""
        return _irrlicht.EffectHandler_setScreenRenderTargetResolution(self, resolution)

    def getIrrlichtDevice(self):
        r"""getIrrlichtDevice(EffectHandler self) -> IrrlichtDevice"""
        return _irrlicht.EffectHandler_getIrrlichtDevice(self)

# Register EffectHandler in _irrlicht:
_irrlicht.EffectHandler_swigregister(EffectHandler)

class vector3dfCH(vector3df):
    r"""Proxy of C++ irr::core::vector3dfCH class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vector3dfCH self, ChVectorD mch) -> vector3dfCH
        __init__(vector3dfCH self, ChVectorD mch) -> vector3dfCH
        """
        _irrlicht.vector3dfCH_swiginit(self, _irrlicht.new_vector3dfCH(*args))
    __swig_destroy__ = _irrlicht.delete_vector3dfCH

# Register vector3dfCH in _irrlicht:
_irrlicht.vector3dfCH_swigregister(vector3dfCH)

class ChIrrTools(object):
    r"""Proxy of C++ chrono::irrlicht::ChIrrTools class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CONTACT_NORMALS = _irrlicht.ChIrrTools_CONTACT_NORMALS
    
    CONTACT_DISTANCES = _irrlicht.ChIrrTools_CONTACT_DISTANCES
    
    CONTACT_FORCES_N = _irrlicht.ChIrrTools_CONTACT_FORCES_N
    
    CONTACT_FORCES = _irrlicht.ChIrrTools_CONTACT_FORCES
    
    CONTACT_NONE = _irrlicht.ChIrrTools_CONTACT_NONE
    
    CONTACT_DISTANCES_VAL = _irrlicht.ChIrrTools_CONTACT_DISTANCES_VAL
    
    CONTACT_FORCES_VAL = _irrlicht.ChIrrTools_CONTACT_FORCES_VAL
    
    CONTACT_FORCES_N_VAL = _irrlicht.ChIrrTools_CONTACT_FORCES_N_VAL
    
    CONTACT_FORCES_T_VAL = _irrlicht.ChIrrTools_CONTACT_FORCES_T_VAL
    
    CONTACT_TORQUES_VAL = _irrlicht.ChIrrTools_CONTACT_TORQUES_VAL
    
    CONTACT_TORQUES_S_VAL = _irrlicht.ChIrrTools_CONTACT_TORQUES_S_VAL
    
    CONTACT_TORQUES_R_VAL = _irrlicht.ChIrrTools_CONTACT_TORQUES_R_VAL
    
    CONTACT_NONE_VAL = _irrlicht.ChIrrTools_CONTACT_NONE_VAL
    
    LINK_REACT_FORCE = _irrlicht.ChIrrTools_LINK_REACT_FORCE
    
    LINK_REACT_TORQUE = _irrlicht.ChIrrTools_LINK_REACT_TORQUE
    
    LINK_NONE = _irrlicht.ChIrrTools_LINK_NONE
    
    LINK_REACT_FORCE_VAL = _irrlicht.ChIrrTools_LINK_REACT_FORCE_VAL
    
    LINK_REACT_FORCE_X = _irrlicht.ChIrrTools_LINK_REACT_FORCE_X
    
    LINK_REACT_FORCE_Y = _irrlicht.ChIrrTools_LINK_REACT_FORCE_Y
    
    LINK_REACT_FORCE_Z = _irrlicht.ChIrrTools_LINK_REACT_FORCE_Z
    
    LINK_REACT_TORQUE_VAL = _irrlicht.ChIrrTools_LINK_REACT_TORQUE_VAL
    
    LINK_REACT_TORQUE_X = _irrlicht.ChIrrTools_LINK_REACT_TORQUE_X
    
    LINK_REACT_TORQUE_Y = _irrlicht.ChIrrTools_LINK_REACT_TORQUE_Y
    
    LINK_REACT_TORQUE_Z = _irrlicht.ChIrrTools_LINK_REACT_TORQUE_Z
    
    LINK_NONE_VAL = _irrlicht.ChIrrTools_LINK_NONE_VAL
    

    @staticmethod
    def alignIrrlichtNodeToChronoCsys(mnode, mcoords):
        r"""alignIrrlichtNodeToChronoCsys(ISceneNode mnode, ChCoordsysD mcoords)"""
        return _irrlicht.ChIrrTools_alignIrrlichtNodeToChronoCsys(mnode, mcoords)

    @staticmethod
    def drawAllContactPoints(*args):
        r"""drawAllContactPoints(std::shared_ptr< ChContactContainer > mcontactcontainer, IVideoDriver driver, double mlen=1.0, chrono::irrlicht::ChIrrTools::eCh_ContactsDrawMode drawtype=CONTACT_NORMALS) -> int"""
        return _irrlicht.ChIrrTools_drawAllContactPoints(*args)

    @staticmethod
    def drawAllContactLabels(*args):
        r"""drawAllContactLabels(std::shared_ptr< ChContactContainer > mcontactcontainer, IrrlichtDevice device, chrono::irrlicht::ChIrrTools::eCh_ContactsLabelMode labeltype=CONTACT_FORCES_N_VAL, SColor mcol=irr::video::SColor(255, 255, 255, 255)) -> int"""
        return _irrlicht.ChIrrTools_drawAllContactLabels(*args)

    @staticmethod
    def drawAllLinks(*args):
        r"""drawAllLinks(ChSystem mphysicalSystem, IVideoDriver driver, double mlen=1.0, chrono::irrlicht::ChIrrTools::eCh_LinkDrawMode drawtype=LINK_REACT_FORCE) -> int"""
        return _irrlicht.ChIrrTools_drawAllLinks(*args)

    @staticmethod
    def drawAllLinkLabels(*args):
        r"""drawAllLinkLabels(ChSystem mphysicalSystem, IrrlichtDevice device, chrono::irrlicht::ChIrrTools::eCh_LinkLabelMode labeltype=LINK_REACT_FORCE_X, SColor mcol=irr::video::SColor(255, 255, 255, 255)) -> int"""
        return _irrlicht.ChIrrTools_drawAllLinkLabels(*args)

    @staticmethod
    def drawAllBoundingBoxes(mphysicalSystem, driver):
        r"""drawAllBoundingBoxes(ChSystem mphysicalSystem, IVideoDriver driver) -> int"""
        return _irrlicht.ChIrrTools_drawAllBoundingBoxes(mphysicalSystem, driver)

    @staticmethod
    def drawAllCOGs(mphysicalSystem, driver, scale=0.01):
        r"""drawAllCOGs(ChSystem mphysicalSystem, IVideoDriver driver, double scale=0.01) -> int"""
        return _irrlicht.ChIrrTools_drawAllCOGs(mphysicalSystem, driver, scale)

    @staticmethod
    def drawAllLinkframes(mphysicalSystem, driver, scale=0.01):
        r"""drawAllLinkframes(ChSystem mphysicalSystem, IVideoDriver driver, double scale=0.01) -> int"""
        return _irrlicht.ChIrrTools_drawAllLinkframes(mphysicalSystem, driver, scale)

    @staticmethod
    def drawHUDviolation(driver, mdevice, asystem, mx=10, my=290, sx=300, sy=100, spfact=100.0):
        r"""drawHUDviolation(IVideoDriver driver, IrrlichtDevice mdevice, ChSystem asystem, int mx=10, int my=290, int sx=300, int sy=100, double spfact=100.0)"""
        return _irrlicht.ChIrrTools_drawHUDviolation(driver, mdevice, asystem, mx, my, sx, sy, spfact)

    @staticmethod
    def drawChFunction(mdevice, fx, xmin=0, xmax=1, ymin=-1, ymax=1, mx=10, my=290, sx=300, sy=100):
        r"""drawChFunction(IrrlichtDevice mdevice, ChFunction * fx, double xmin=0, double xmax=1, double ymin=-1, double ymax=1, int mx=10, int my=290, int sx=300, int sy=100)"""
        return _irrlicht.ChIrrTools_drawChFunction(mdevice, fx, xmin, xmax, ymin, ymax, mx, my, sx, sy)

    @staticmethod
    def drawSegment(*args):
        r"""drawSegment(IVideoDriver driver, chrono::ChVector< > mstart, chrono::ChVector< > mend, SColor mcol=irr::video::SColor(255, 0, 0, 0), bool use_Zbuffer=False)"""
        return _irrlicht.ChIrrTools_drawSegment(*args)

    @staticmethod
    def drawPolyline(*args):
        r"""drawPolyline(IVideoDriver driver, vector_ChVectorD mpoints, SColor mcol=irr::video::SColor(255, 0, 0, 0), bool use_Zbuffer=False)"""
        return _irrlicht.ChIrrTools_drawPolyline(*args)

    @staticmethod
    def drawCircle(*args):
        r"""drawCircle(IVideoDriver driver, double radius, ChCoordsysD mpos=CSYSNORM, SColor mcol=irr::video::SColor(255, 0, 0, 0), int mresolution=36, bool use_Zbuffer=False)"""
        return _irrlicht.ChIrrTools_drawCircle(*args)

    @staticmethod
    def drawSpring(*args):
        r"""drawSpring(IVideoDriver driver, double radius, chrono::ChVector< > start, chrono::ChVector< > end, SColor mcol=irr::video::SColor(255, 0, 0, 0), int mresolution=65, double turns=5, bool use_Zbuffer=False)"""
        return _irrlicht.ChIrrTools_drawSpring(*args)

    @staticmethod
    def drawGrid(*args):
        r"""drawGrid(IVideoDriver driver, double ustep=0.1, double vstep=0.1, int nu=20, int nv=20, ChCoordsysD mpos=CSYSNORM, SColor mcol=irr::video::SColor(50, 80, 110, 110), bool use_Zbuffer=False)"""
        return _irrlicht.ChIrrTools_drawGrid(*args)

    @staticmethod
    def drawColorbar(vmin, vmax, label, mdevice, mx=740, my=20, sx=30, sy=300):
        r"""drawColorbar(double vmin, double vmax, std::string const & label, IrrlichtDevice mdevice, int mx=740, int my=20, int sx=30, int sy=300)"""
        return _irrlicht.ChIrrTools_drawColorbar(vmin, vmax, label, mdevice, mx, my, sx, sy)

    @staticmethod
    def drawCollisionShapes(*args):
        r"""drawCollisionShapes(ChSystem asystem, IrrlichtDevice mdevice, SColor mcol=irr::video::SColor(50, 0, 0, 110))"""
        return _irrlicht.ChIrrTools_drawCollisionShapes(*args)

    @staticmethod
    def drawPlot3D(*args):
        r"""drawPlot3D(IVideoDriver driver, chrono::ChMatrixConstRef X, chrono::ChMatrixConstRef Y, chrono::ChMatrixConstRef Z, ChCoordsysD mpos=CSYSNORM, SColor mcol=irr::video::SColor(50, 80, 110, 110), bool use_Zbuffer=False)"""
        return _irrlicht.ChIrrTools_drawPlot3D(*args)

    @staticmethod
    def drawProfiler(device):
        r"""drawProfiler(IrrlichtDevice device)"""
        return _irrlicht.ChIrrTools_drawProfiler(device)

    def __init__(self):
        r"""__init__(ChIrrTools self) -> ChIrrTools"""
        _irrlicht.ChIrrTools_swiginit(self, _irrlicht.new_ChIrrTools())
    __swig_destroy__ = _irrlicht.delete_ChIrrTools

# Register ChIrrTools in _irrlicht:
_irrlicht.ChIrrTools_swigregister(ChIrrTools)

def ChIrrTools_alignIrrlichtNodeToChronoCsys(mnode, mcoords):
    r"""ChIrrTools_alignIrrlichtNodeToChronoCsys(ISceneNode mnode, ChCoordsysD mcoords)"""
    return _irrlicht.ChIrrTools_alignIrrlichtNodeToChronoCsys(mnode, mcoords)

def ChIrrTools_drawAllContactPoints(*args):
    r"""ChIrrTools_drawAllContactPoints(std::shared_ptr< ChContactContainer > mcontactcontainer, IVideoDriver driver, double mlen=1.0, chrono::irrlicht::ChIrrTools::eCh_ContactsDrawMode drawtype=CONTACT_NORMALS) -> int"""
    return _irrlicht.ChIrrTools_drawAllContactPoints(*args)

def ChIrrTools_drawAllContactLabels(*args):
    r"""ChIrrTools_drawAllContactLabels(std::shared_ptr< ChContactContainer > mcontactcontainer, IrrlichtDevice device, chrono::irrlicht::ChIrrTools::eCh_ContactsLabelMode labeltype=CONTACT_FORCES_N_VAL, SColor mcol=irr::video::SColor(255, 255, 255, 255)) -> int"""
    return _irrlicht.ChIrrTools_drawAllContactLabels(*args)

def ChIrrTools_drawAllLinks(*args):
    r"""ChIrrTools_drawAllLinks(ChSystem mphysicalSystem, IVideoDriver driver, double mlen=1.0, chrono::irrlicht::ChIrrTools::eCh_LinkDrawMode drawtype=LINK_REACT_FORCE) -> int"""
    return _irrlicht.ChIrrTools_drawAllLinks(*args)

def ChIrrTools_drawAllLinkLabels(*args):
    r"""ChIrrTools_drawAllLinkLabels(ChSystem mphysicalSystem, IrrlichtDevice device, chrono::irrlicht::ChIrrTools::eCh_LinkLabelMode labeltype=LINK_REACT_FORCE_X, SColor mcol=irr::video::SColor(255, 255, 255, 255)) -> int"""
    return _irrlicht.ChIrrTools_drawAllLinkLabels(*args)

def ChIrrTools_drawAllBoundingBoxes(mphysicalSystem, driver):
    r"""ChIrrTools_drawAllBoundingBoxes(ChSystem mphysicalSystem, IVideoDriver driver) -> int"""
    return _irrlicht.ChIrrTools_drawAllBoundingBoxes(mphysicalSystem, driver)

def ChIrrTools_drawAllCOGs(mphysicalSystem, driver, scale=0.01):
    r"""ChIrrTools_drawAllCOGs(ChSystem mphysicalSystem, IVideoDriver driver, double scale=0.01) -> int"""
    return _irrlicht.ChIrrTools_drawAllCOGs(mphysicalSystem, driver, scale)

def ChIrrTools_drawAllLinkframes(mphysicalSystem, driver, scale=0.01):
    r"""ChIrrTools_drawAllLinkframes(ChSystem mphysicalSystem, IVideoDriver driver, double scale=0.01) -> int"""
    return _irrlicht.ChIrrTools_drawAllLinkframes(mphysicalSystem, driver, scale)

def ChIrrTools_drawHUDviolation(driver, mdevice, asystem, mx=10, my=290, sx=300, sy=100, spfact=100.0):
    r"""ChIrrTools_drawHUDviolation(IVideoDriver driver, IrrlichtDevice mdevice, ChSystem asystem, int mx=10, int my=290, int sx=300, int sy=100, double spfact=100.0)"""
    return _irrlicht.ChIrrTools_drawHUDviolation(driver, mdevice, asystem, mx, my, sx, sy, spfact)

def ChIrrTools_drawChFunction(mdevice, fx, xmin=0, xmax=1, ymin=-1, ymax=1, mx=10, my=290, sx=300, sy=100):
    r"""ChIrrTools_drawChFunction(IrrlichtDevice mdevice, ChFunction * fx, double xmin=0, double xmax=1, double ymin=-1, double ymax=1, int mx=10, int my=290, int sx=300, int sy=100)"""
    return _irrlicht.ChIrrTools_drawChFunction(mdevice, fx, xmin, xmax, ymin, ymax, mx, my, sx, sy)

def ChIrrTools_drawSegment(*args):
    r"""ChIrrTools_drawSegment(IVideoDriver driver, chrono::ChVector< > mstart, chrono::ChVector< > mend, SColor mcol=irr::video::SColor(255, 0, 0, 0), bool use_Zbuffer=False)"""
    return _irrlicht.ChIrrTools_drawSegment(*args)

def ChIrrTools_drawPolyline(*args):
    r"""ChIrrTools_drawPolyline(IVideoDriver driver, vector_ChVectorD mpoints, SColor mcol=irr::video::SColor(255, 0, 0, 0), bool use_Zbuffer=False)"""
    return _irrlicht.ChIrrTools_drawPolyline(*args)

def ChIrrTools_drawCircle(*args):
    r"""ChIrrTools_drawCircle(IVideoDriver driver, double radius, ChCoordsysD mpos=CSYSNORM, SColor mcol=irr::video::SColor(255, 0, 0, 0), int mresolution=36, bool use_Zbuffer=False)"""
    return _irrlicht.ChIrrTools_drawCircle(*args)

def ChIrrTools_drawSpring(*args):
    r"""ChIrrTools_drawSpring(IVideoDriver driver, double radius, chrono::ChVector< > start, chrono::ChVector< > end, SColor mcol=irr::video::SColor(255, 0, 0, 0), int mresolution=65, double turns=5, bool use_Zbuffer=False)"""
    return _irrlicht.ChIrrTools_drawSpring(*args)

def ChIrrTools_drawGrid(*args):
    r"""ChIrrTools_drawGrid(IVideoDriver driver, double ustep=0.1, double vstep=0.1, int nu=20, int nv=20, ChCoordsysD mpos=CSYSNORM, SColor mcol=irr::video::SColor(50, 80, 110, 110), bool use_Zbuffer=False)"""
    return _irrlicht.ChIrrTools_drawGrid(*args)

def ChIrrTools_drawColorbar(vmin, vmax, label, mdevice, mx=740, my=20, sx=30, sy=300):
    r"""ChIrrTools_drawColorbar(double vmin, double vmax, std::string const & label, IrrlichtDevice mdevice, int mx=740, int my=20, int sx=30, int sy=300)"""
    return _irrlicht.ChIrrTools_drawColorbar(vmin, vmax, label, mdevice, mx, my, sx, sy)

def ChIrrTools_drawCollisionShapes(*args):
    r"""ChIrrTools_drawCollisionShapes(ChSystem asystem, IrrlichtDevice mdevice, SColor mcol=irr::video::SColor(50, 0, 0, 110))"""
    return _irrlicht.ChIrrTools_drawCollisionShapes(*args)

def ChIrrTools_drawPlot3D(*args):
    r"""ChIrrTools_drawPlot3D(IVideoDriver driver, chrono::ChMatrixConstRef X, chrono::ChMatrixConstRef Y, chrono::ChMatrixConstRef Z, ChCoordsysD mpos=CSYSNORM, SColor mcol=irr::video::SColor(50, 80, 110, 110), bool use_Zbuffer=False)"""
    return _irrlicht.ChIrrTools_drawPlot3D(*args)

def ChIrrTools_drawProfiler(device):
    r"""ChIrrTools_drawProfiler(IrrlichtDevice device)"""
    return _irrlicht.ChIrrTools_drawProfiler(device)

class RTSCamera(ICameraSceneNode):
    r"""Proxy of C++ chrono::irrlicht::RTSCamera class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _irrlicht.delete_RTSCamera

    def render(self):
        r"""render(RTSCamera self)"""
        return _irrlicht.RTSCamera_render(self)

    def OnEvent(self, event):
        r"""OnEvent(RTSCamera self, irr::SEvent const & event) -> bool"""
        return _irrlicht.RTSCamera_OnEvent(self, event)

    def OnRegisterSceneNode(self):
        r"""OnRegisterSceneNode(RTSCamera self)"""
        return _irrlicht.RTSCamera_OnRegisterSceneNode(self)

    def OnAnimate(self, timeMs):
        r"""OnAnimate(RTSCamera self, irr::u32 timeMs)"""
        return _irrlicht.RTSCamera_OnAnimate(self, timeMs)

    def setInputReceiverEnabled(self, enabled):
        r"""setInputReceiverEnabled(RTSCamera self, bool enabled)"""
        return _irrlicht.RTSCamera_setInputReceiverEnabled(self, enabled)

    def isInputReceiverEnabled(self):
        r"""isInputReceiverEnabled(RTSCamera self) -> bool"""
        return _irrlicht.RTSCamera_isInputReceiverEnabled(self)

    def getBoundingBox(self):
        r"""getBoundingBox(RTSCamera self) -> irr::core::aabbox3d< irr::f32 > const &"""
        return _irrlicht.RTSCamera_getBoundingBox(self)

    def getProjectionMatrix(self):
        r"""getProjectionMatrix(RTSCamera self) -> irr::core::matrix4 const &"""
        return _irrlicht.RTSCamera_getProjectionMatrix(self)

    def getViewFrustum(self):
        r"""getViewFrustum(RTSCamera self) -> irr::scene::SViewFrustum const *"""
        return _irrlicht.RTSCamera_getViewFrustum(self)

    def getViewMatrix(self):
        r"""getViewMatrix(RTSCamera self) -> irr::core::matrix4 const &"""
        return _irrlicht.RTSCamera_getViewMatrix(self)

    def getViewMatrixAffector(self):
        r"""getViewMatrixAffector(RTSCamera self) -> irr::core::matrix4 const &"""
        return _irrlicht.RTSCamera_getViewMatrixAffector(self)

    def getUpVector(self):
        r"""getUpVector(RTSCamera self) -> vector3df"""
        return _irrlicht.RTSCamera_getUpVector(self)

    def getTarget(self):
        r"""getTarget(RTSCamera self) -> vector3df"""
        return _irrlicht.RTSCamera_getTarget(self)

    def getNearValue(self):
        r"""getNearValue(RTSCamera self) -> irr::f32"""
        return _irrlicht.RTSCamera_getNearValue(self)

    def getFarValue(self):
        r"""getFarValue(RTSCamera self) -> irr::f32"""
        return _irrlicht.RTSCamera_getFarValue(self)

    def getAspectRatio(self):
        r"""getAspectRatio(RTSCamera self) -> irr::f32"""
        return _irrlicht.RTSCamera_getAspectRatio(self)

    def getFOV(self):
        r"""getFOV(RTSCamera self) -> irr::f32"""
        return _irrlicht.RTSCamera_getFOV(self)

    def setNearValue(self, zn):
        r"""setNearValue(RTSCamera self, irr::f32 zn)"""
        return _irrlicht.RTSCamera_setNearValue(self, zn)

    def setFarValue(self, zf):
        r"""setFarValue(RTSCamera self, irr::f32 zf)"""
        return _irrlicht.RTSCamera_setFarValue(self, zf)

    def setAspectRatio(self, aspect):
        r"""setAspectRatio(RTSCamera self, irr::f32 aspect)"""
        return _irrlicht.RTSCamera_setAspectRatio(self, aspect)

    def setFOV(self, fovy):
        r"""setFOV(RTSCamera self, irr::f32 fovy)"""
        return _irrlicht.RTSCamera_setFOV(self, fovy)

    def setViewMatrixAffector(self, affector):
        r"""setViewMatrixAffector(RTSCamera self, irr::core::matrix4 const & affector)"""
        return _irrlicht.RTSCamera_setViewMatrixAffector(self, affector)

    def setUpVector(self, pos):
        r"""setUpVector(RTSCamera self, vector3df pos)"""
        return _irrlicht.RTSCamera_setUpVector(self, pos)

    def setProjectionMatrix(self, projection, isOrthogonal=False):
        r"""setProjectionMatrix(RTSCamera self, irr::core::matrix4 const & projection, bool isOrthogonal=False)"""
        return _irrlicht.RTSCamera_setProjectionMatrix(self, projection, isOrthogonal)

    def setPosition(self, newpos):
        r"""setPosition(RTSCamera self, vector3df newpos)"""
        return _irrlicht.RTSCamera_setPosition(self, newpos)

    def setTarget(self, newpos):
        r"""setTarget(RTSCamera self, vector3df newpos)"""
        return _irrlicht.RTSCamera_setTarget(self, newpos)

    def setRotation(self, rotation):
        r"""setRotation(RTSCamera self, vector3df rotation)"""
        return _irrlicht.RTSCamera_setRotation(self, rotation)

    def setZoomSpeed(self, value):
        r"""setZoomSpeed(RTSCamera self, irr::f32 value)"""
        return _irrlicht.RTSCamera_setZoomSpeed(self, value)

    def setTranslateSpeed(self, value):
        r"""setTranslateSpeed(RTSCamera self, irr::f32 value)"""
        return _irrlicht.RTSCamera_setTranslateSpeed(self, value)

    def setRotationSpeed(self, value):
        r"""setRotationSpeed(RTSCamera self, irr::f32 value)"""
        return _irrlicht.RTSCamera_setRotationSpeed(self, value)

    def bindTargetAndRotation(self, bound):
        r"""bindTargetAndRotation(RTSCamera self, bool bound)"""
        return _irrlicht.RTSCamera_bindTargetAndRotation(self, bound)

    def getTargetAndRotationBinding(self):
        r"""getTargetAndRotationBinding(RTSCamera self) -> bool"""
        return _irrlicht.RTSCamera_getTargetAndRotationBinding(self)

    def pointCameraAtNode(self, selectednode):
        r"""pointCameraAtNode(RTSCamera self, ISceneNode * selectednode)"""
        return _irrlicht.RTSCamera_pointCameraAtNode(self, selectednode)

    def setMinZoom(self, amount):
        r"""setMinZoom(RTSCamera self, irr::f32 amount)"""
        return _irrlicht.RTSCamera_setMinZoom(self, amount)

    def setMaxZoom(self, amount):
        r"""setMaxZoom(RTSCamera self, irr::f32 amount)"""
        return _irrlicht.RTSCamera_setMaxZoom(self, amount)

    def getType(self):
        r"""getType(RTSCamera self) -> irr::scene::ESCENE_NODE_TYPE"""
        return _irrlicht.RTSCamera_getType(self)
    atMinDistance = property(_irrlicht.RTSCamera_atMinDistance_get, _irrlicht.RTSCamera_atMinDistance_set, doc=r"""atMinDistance : bool""")
    atMaxDistance = property(_irrlicht.RTSCamera_atMaxDistance_get, _irrlicht.RTSCamera_atMaxDistance_set, doc=r"""atMaxDistance : bool""")
    selectednode = property(_irrlicht.RTSCamera_selectednode_get, _irrlicht.RTSCamera_selectednode_set, doc=r"""selectednode : p.ISceneNode""")

# Register RTSCamera in _irrlicht:
_irrlicht.RTSCamera_swigregister(RTSCamera)

class ChIrrWizard(object):
    r"""Proxy of C++ chrono::irrlicht::ChIrrWizard class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def add_typical_Logo(*args):
        r"""add_typical_Logo(IrrlichtDevice device, std::string const & mlogofilename=GetChronoDataFile("logo_chronoengine_alpha.png"))"""
        return _irrlicht.ChIrrWizard_add_typical_Logo(*args)

    @staticmethod
    def add_typical_Lights(*args):
        r"""add_typical_Lights(IrrlichtDevice device, vector3df pos1=irr::core::vector3df(30.f, 100.f, 30.f), vector3df pos2=irr::core::vector3df(30.f, 80.f, -30.f), double rad1=290, double rad2=190, SColorf col1=irr::video::SColorf(0.7f, 0.7f, 0.7f, 1.0f), SColorf col2=irr::video::SColorf(0.7f, 0.8f, 0.8f, 1.0f))"""
        return _irrlicht.ChIrrWizard_add_typical_Lights(*args)

    @staticmethod
    def add_typical_Sky(*args):
        r"""add_typical_Sky(IrrlichtDevice device, std::string const & mtexturedir=GetChronoDataFile("skybox/"))"""
        return _irrlicht.ChIrrWizard_add_typical_Sky(*args)

    @staticmethod
    def add_typical_Camera(*args):
        r"""add_typical_Camera(IrrlichtDevice device, vector3df mpos=irr::core::vector3df(0, 0, -8), vector3df mtarg=irr::core::vector3df(0, 0, 0))"""
        return _irrlicht.ChIrrWizard_add_typical_Camera(*args)

    def __init__(self):
        r"""__init__(ChIrrWizard self) -> ChIrrWizard"""
        _irrlicht.ChIrrWizard_swiginit(self, _irrlicht.new_ChIrrWizard())
    __swig_destroy__ = _irrlicht.delete_ChIrrWizard

# Register ChIrrWizard in _irrlicht:
_irrlicht.ChIrrWizard_swigregister(ChIrrWizard)

def ChIrrWizard_add_typical_Logo(*args):
    r"""ChIrrWizard_add_typical_Logo(IrrlichtDevice device, std::string const & mlogofilename=GetChronoDataFile("logo_chronoengine_alpha.png"))"""
    return _irrlicht.ChIrrWizard_add_typical_Logo(*args)

def ChIrrWizard_add_typical_Lights(*args):
    r"""ChIrrWizard_add_typical_Lights(IrrlichtDevice device, vector3df pos1=irr::core::vector3df(30.f, 100.f, 30.f), vector3df pos2=irr::core::vector3df(30.f, 80.f, -30.f), double rad1=290, double rad2=190, SColorf col1=irr::video::SColorf(0.7f, 0.7f, 0.7f, 1.0f), SColorf col2=irr::video::SColorf(0.7f, 0.8f, 0.8f, 1.0f))"""
    return _irrlicht.ChIrrWizard_add_typical_Lights(*args)

def ChIrrWizard_add_typical_Sky(*args):
    r"""ChIrrWizard_add_typical_Sky(IrrlichtDevice device, std::string const & mtexturedir=GetChronoDataFile("skybox/"))"""
    return _irrlicht.ChIrrWizard_add_typical_Sky(*args)

def ChIrrWizard_add_typical_Camera(*args):
    r"""ChIrrWizard_add_typical_Camera(IrrlichtDevice device, vector3df mpos=irr::core::vector3df(0, 0, -8), vector3df mtarg=irr::core::vector3df(0, 0, 0))"""
    return _irrlicht.ChIrrWizard_add_typical_Camera(*args)

class ChIrrAppInterface(object):
    r"""Proxy of C++ chrono::irrlicht::ChIrrAppInterface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChIrrAppInterface self, ChSystem psystem, wchar_t const * title=None, dimension2du dimens=irr::core::dimension2d< irr::u32 >(640, 480), bool do_fullscreen=False, bool do_shadows=False, bool do_antialias=True, irr::video::E_DRIVER_TYPE mydriver=irr::video::EDT_DIRECT3D9, irr::ELOG_LEVEL log_level=irr::ELL_INFORMATION) -> ChIrrAppInterface"""
        _irrlicht.ChIrrAppInterface_swiginit(self, _irrlicht.new_ChIrrAppInterface(*args))
    __swig_destroy__ = _irrlicht.delete_ChIrrAppInterface

    def GetDevice(self):
        r"""GetDevice(ChIrrAppInterface self) -> IrrlichtDevice"""
        return _irrlicht.ChIrrAppInterface_GetDevice(self)

    def GetVideoDriver(self):
        r"""GetVideoDriver(ChIrrAppInterface self) -> IVideoDriver"""
        return _irrlicht.ChIrrAppInterface_GetVideoDriver(self)

    def GetSceneManager(self):
        r"""GetSceneManager(ChIrrAppInterface self) -> ISceneManager"""
        return _irrlicht.ChIrrAppInterface_GetSceneManager(self)

    def GetIGUIEnvironment(self):
        r"""GetIGUIEnvironment(ChIrrAppInterface self) -> IGUIEnvironment"""
        return _irrlicht.ChIrrAppInterface_GetIGUIEnvironment(self)

    def GetEffects(self):
        r"""GetEffects(ChIrrAppInterface self) -> EffectHandler"""
        return _irrlicht.ChIrrAppInterface_GetEffects(self)

    def GetContainer(self):
        r"""GetContainer(ChIrrAppInterface self) -> ISceneNode"""
        return _irrlicht.ChIrrAppInterface_GetContainer(self)

    def GetSystem(self):
        r"""GetSystem(ChIrrAppInterface self) -> ChSystem"""
        return _irrlicht.ChIrrAppInterface_GetSystem(self)

    def SetShowInfos(self, val):
        r"""SetShowInfos(ChIrrAppInterface self, bool val)"""
        return _irrlicht.ChIrrAppInterface_SetShowInfos(self, val)

    def GetShowInfos(self):
        r"""GetShowInfos(ChIrrAppInterface self) -> bool"""
        return _irrlicht.ChIrrAppInterface_GetShowInfos(self)

    def SetShowProfiler(self, val):
        r"""SetShowProfiler(ChIrrAppInterface self, bool val)"""
        return _irrlicht.ChIrrAppInterface_SetShowProfiler(self, val)

    def GetShowProfiler(self):
        r"""GetShowProfiler(ChIrrAppInterface self) -> bool"""
        return _irrlicht.ChIrrAppInterface_GetShowProfiler(self)

    def SetShowExplorer(self, val):
        r"""SetShowExplorer(ChIrrAppInterface self, bool val)"""
        return _irrlicht.ChIrrAppInterface_SetShowExplorer(self, val)

    def GetShowExplorer(self):
        r"""GetShowExplorer(ChIrrAppInterface self) -> bool"""
        return _irrlicht.ChIrrAppInterface_GetShowExplorer(self)

    def SetTimestep(self, val):
        r"""SetTimestep(ChIrrAppInterface self, double val)"""
        return _irrlicht.ChIrrAppInterface_SetTimestep(self, val)

    def GetTimestep(self):
        r"""GetTimestep(ChIrrAppInterface self) -> double"""
        return _irrlicht.ChIrrAppInterface_GetTimestep(self)

    def SetStepManage(self, val):
        r"""SetStepManage(ChIrrAppInterface self, bool val)"""
        return _irrlicht.ChIrrAppInterface_SetStepManage(self, val)

    def GetStepManage(self):
        r"""GetStepManage(ChIrrAppInterface self) -> bool"""
        return _irrlicht.ChIrrAppInterface_GetStepManage(self)

    def SetTryRealtime(self, val):
        r"""SetTryRealtime(ChIrrAppInterface self, bool val)"""
        return _irrlicht.ChIrrAppInterface_SetTryRealtime(self, val)

    def GetTryRealtime(self):
        r"""GetTryRealtime(ChIrrAppInterface self) -> bool"""
        return _irrlicht.ChIrrAppInterface_GetTryRealtime(self)

    def SetPaused(self, val):
        r"""SetPaused(ChIrrAppInterface self, bool val)"""
        return _irrlicht.ChIrrAppInterface_SetPaused(self, val)

    def GetPaused(self):
        r"""GetPaused(ChIrrAppInterface self) -> bool"""
        return _irrlicht.ChIrrAppInterface_GetPaused(self)

    def SetVideoframeSave(self, val):
        r"""SetVideoframeSave(ChIrrAppInterface self, bool val)"""
        return _irrlicht.ChIrrAppInterface_SetVideoframeSave(self, val)

    def GetVideoframeSave(self):
        r"""GetVideoframeSave(ChIrrAppInterface self) -> bool"""
        return _irrlicht.ChIrrAppInterface_GetVideoframeSave(self)

    def SetVideoframeSaveInterval(self, val):
        r"""SetVideoframeSaveInterval(ChIrrAppInterface self, int val)"""
        return _irrlicht.ChIrrAppInterface_SetVideoframeSaveInterval(self, val)

    def GetVideoframeSaveInterval(self):
        r"""GetVideoframeSaveInterval(ChIrrAppInterface self) -> int"""
        return _irrlicht.ChIrrAppInterface_GetVideoframeSaveInterval(self)

    def SetContactsLabelMode(self, mm):
        r"""SetContactsLabelMode(ChIrrAppInterface self, chrono::irrlicht::ChIrrTools::eCh_ContactsLabelMode mm)"""
        return _irrlicht.ChIrrAppInterface_SetContactsLabelMode(self, mm)

    def SetContactsDrawMode(self, mm):
        r"""SetContactsDrawMode(ChIrrAppInterface self, chrono::irrlicht::ChIrrTools::eCh_ContactsDrawMode mm)"""
        return _irrlicht.ChIrrAppInterface_SetContactsDrawMode(self, mm)

    def SetLinksLabelMode(self, mm):
        r"""SetLinksLabelMode(ChIrrAppInterface self, chrono::irrlicht::ChIrrTools::eCh_LinkLabelMode mm)"""
        return _irrlicht.ChIrrAppInterface_SetLinksLabelMode(self, mm)

    def SetLinksDrawMode(self, mm):
        r"""SetLinksDrawMode(ChIrrAppInterface self, chrono::irrlicht::ChIrrTools::eCh_LinkDrawMode mm)"""
        return _irrlicht.ChIrrAppInterface_SetLinksDrawMode(self, mm)

    def SetPlotAABB(self, val):
        r"""SetPlotAABB(ChIrrAppInterface self, bool val)"""
        return _irrlicht.ChIrrAppInterface_SetPlotAABB(self, val)

    def SetPlotCOGFrames(self, val):
        r"""SetPlotCOGFrames(ChIrrAppInterface self, bool val)"""
        return _irrlicht.ChIrrAppInterface_SetPlotCOGFrames(self, val)

    def SetPlotCollisionShapes(self, val):
        r"""SetPlotCollisionShapes(ChIrrAppInterface self, bool val)"""
        return _irrlicht.ChIrrAppInterface_SetPlotCollisionShapes(self, val)

    def SetPlotLinkFrames(self, val):
        r"""SetPlotLinkFrames(ChIrrAppInterface self, bool val)"""
        return _irrlicht.ChIrrAppInterface_SetPlotLinkFrames(self, val)

    def SetPlotConvergence(self, val):
        r"""SetPlotConvergence(ChIrrAppInterface self, bool val)"""
        return _irrlicht.ChIrrAppInterface_SetPlotConvergence(self, val)

    def SetSymbolscale(self, val):
        r"""SetSymbolscale(ChIrrAppInterface self, double val)"""
        return _irrlicht.ChIrrAppInterface_SetSymbolscale(self, val)

    def GetSymbolscale(self):
        r"""GetSymbolscale(ChIrrAppInterface self) -> double"""
        return _irrlicht.ChIrrAppInterface_GetSymbolscale(self)

    def SetUserEventReceiver(self, mreceiver):
        r"""SetUserEventReceiver(ChIrrAppInterface self, irr::IEventReceiver * mreceiver)"""
        return _irrlicht.ChIrrAppInterface_SetUserEventReceiver(self, mreceiver)

    def SetFonts(self, *args):
        r"""SetFonts(ChIrrAppInterface self, std::string const & mfontdir=GetChronoDataFile("fonts/arial8.xml"))"""
        return _irrlicht.ChIrrAppInterface_SetFonts(self, *args)

    def BeginScene(self, *args):
        r"""BeginScene(ChIrrAppInterface self, bool backBuffer=True, bool zBuffer=True, SColor color=irr::video::SColor(255, 0, 0, 0))"""
        return _irrlicht.ChIrrAppInterface_BeginScene(self, *args)

    def DoStep(self):
        r"""DoStep(ChIrrAppInterface self)"""
        return _irrlicht.ChIrrAppInterface_DoStep(self)

    def DrawAll(self):
        r"""DrawAll(ChIrrAppInterface self)"""
        return _irrlicht.ChIrrAppInterface_DrawAll(self)

    def EndScene(self):
        r"""EndScene(ChIrrAppInterface self)"""
        return _irrlicht.ChIrrAppInterface_EndScene(self)

    def DumpSystemMatrices(self):
        r"""DumpSystemMatrices(ChIrrAppInterface self)"""
        return _irrlicht.ChIrrAppInterface_DumpSystemMatrices(self)

    def AddTypicalLogo(self, *args):
        r"""AddTypicalLogo(ChIrrAppInterface self, std::string const & mlogofilename=GetChronoDataFile("logo_chronoengine_alpha.png"))"""
        return _irrlicht.ChIrrAppInterface_AddTypicalLogo(self, *args)

    def AddTypicalCamera(self, *args):
        r"""AddTypicalCamera(ChIrrAppInterface self, vector3df mpos=irr::core::vector3df(0, 0, -8), vector3df mtarg=irr::core::vector3df(0, 0, 0))"""
        return _irrlicht.ChIrrAppInterface_AddTypicalCamera(self, *args)

    def AddTypicalLights(self, *args):
        r"""AddTypicalLights(ChIrrAppInterface self, vector3df pos1=irr::core::vector3df(30.f, 100.f, 30.f), vector3df pos2=irr::core::vector3df(30.f, 80.f, -30.f), double rad1=290, double rad2=190, SColorf col1=irr::video::SColorf(0.7f, 0.7f, 0.7f, 1.0f), SColorf col2=irr::video::SColorf(0.7f, 0.8f, 0.8f, 1.0f))"""
        return _irrlicht.ChIrrAppInterface_AddTypicalLights(self, *args)

    def AddTypicalSky(self, *args):
        r"""AddTypicalSky(ChIrrAppInterface self, std::string const & mtexturedir=GetChronoDataFile("skybox/"))"""
        return _irrlicht.ChIrrAppInterface_AddTypicalSky(self, *args)

    def AddLight(self, *args):
        r"""AddLight(ChIrrAppInterface self, vector3df pos, double radius, SColorf color=irr::video::SColorf(0.7f, 0.7f, 0.7f, 1.0f)) -> irr::scene::ILightSceneNode"""
        return _irrlicht.ChIrrAppInterface_AddLight(self, *args)

    def AddLightWithShadow(self, *args):
        r"""AddLightWithShadow(ChIrrAppInterface self, vector3df pos, vector3df aim, double radius, double mnear, double mfar, double angle, irr::u32 resolution=512, SColorf color=irr::video::SColorf(1.f, 1.f, 1.f, 1.f), bool directional=False, bool clipborder=True) -> irr::scene::ILightSceneNode"""
        return _irrlicht.ChIrrAppInterface_AddLightWithShadow(self, *args)

# Register ChIrrAppInterface in _irrlicht:
_irrlicht.ChIrrAppInterface_swigregister(ChIrrAppInterface)

class ChIrrAssetConverter(object):
    r"""Proxy of C++ chrono::irrlicht::ChIrrAssetConverter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sphereMesh = property(_irrlicht.ChIrrAssetConverter_sphereMesh_get, _irrlicht.ChIrrAssetConverter_sphereMesh_set, doc=r"""sphereMesh : p.irr::scene::IAnimatedMesh""")
    cubeMesh = property(_irrlicht.ChIrrAssetConverter_cubeMesh_get, _irrlicht.ChIrrAssetConverter_cubeMesh_set, doc=r"""cubeMesh : p.irr::scene::IMesh""")
    cylinderMesh = property(_irrlicht.ChIrrAssetConverter_cylinderMesh_get, _irrlicht.ChIrrAssetConverter_cylinderMesh_set, doc=r"""cylinderMesh : p.irr::scene::IMesh""")
    scenemanager = property(_irrlicht.ChIrrAssetConverter_scenemanager_get, _irrlicht.ChIrrAssetConverter_scenemanager_set, doc=r"""scenemanager : p.irr::scene::ISceneManager""")
    mdevice = property(_irrlicht.ChIrrAssetConverter_mdevice_get, _irrlicht.ChIrrAssetConverter_mdevice_set, doc=r"""mdevice : p.irr::IrrlichtDevice""")
    minterface = property(_irrlicht.ChIrrAssetConverter_minterface_get, _irrlicht.ChIrrAssetConverter_minterface_set, doc=r"""minterface : p.chrono::irrlicht::ChIrrAppInterface""")
    mcamera = property(_irrlicht.ChIrrAssetConverter_mcamera_get, _irrlicht.ChIrrAssetConverter_mcamera_set, doc=r"""mcamera : p.ChCamera""")
    camera_found_in_assets = property(_irrlicht.ChIrrAssetConverter_camera_found_in_assets_get, _irrlicht.ChIrrAssetConverter_camera_found_in_assets_set, doc=r"""camera_found_in_assets : bool""")

    def __init__(self, ainterface):
        r"""__init__(ChIrrAssetConverter self, ChIrrAppInterface ainterface) -> ChIrrAssetConverter"""
        _irrlicht.ChIrrAssetConverter_swiginit(self, _irrlicht.new_ChIrrAssetConverter(ainterface))
    __swig_destroy__ = _irrlicht.delete_ChIrrAssetConverter

    def GetIrrNodeAsset(self, mitem):
        r"""GetIrrNodeAsset(ChIrrAssetConverter self, std::shared_ptr< chrono::ChPhysicsItem > mitem) -> std::shared_ptr< ChIrrNodeAsset >"""
        return _irrlicht.ChIrrAssetConverter_GetIrrNodeAsset(self, mitem)

    def Bind(self, mitem):
        r"""Bind(ChIrrAssetConverter self, std::shared_ptr< chrono::ChPhysicsItem > mitem)"""
        return _irrlicht.ChIrrAssetConverter_Bind(self, mitem)

    def BindAll(self):
        r"""BindAll(ChIrrAssetConverter self)"""
        return _irrlicht.ChIrrAssetConverter_BindAll(self)

    def Update(self, mitem):
        r"""Update(ChIrrAssetConverter self, std::shared_ptr< chrono::ChPhysicsItem > mitem)"""
        return _irrlicht.ChIrrAssetConverter_Update(self, mitem)

    def UpdateAll(self):
        r"""UpdateAll(ChIrrAssetConverter self)"""
        return _irrlicht.ChIrrAssetConverter_UpdateAll(self)

    def CleanIrrlicht(self, mitem):
        r"""CleanIrrlicht(ChIrrAssetConverter self, std::shared_ptr< chrono::ChPhysicsItem > mitem)"""
        return _irrlicht.ChIrrAssetConverter_CleanIrrlicht(self, mitem)

# Register ChIrrAssetConverter in _irrlicht:
_irrlicht.ChIrrAssetConverter_swigregister(ChIrrAssetConverter)

class ChIrrApp(ChIrrAppInterface):
    r"""Proxy of C++ chrono::irrlicht::ChIrrApp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChIrrApp self, ChSystem psystem, wchar_t const * title=None, dimension2du dimens=irr::core::dimension2d< irr::u32 >(640, 480), bool do_fullscreen=False, bool do_shadows=False, bool do_antialias=True, irr::video::E_DRIVER_TYPE mydriver=irr::video::EDT_DIRECT3D9, irr::ELOG_LEVEL log_level=irr::ELL_INFORMATION) -> ChIrrApp"""
        _irrlicht.ChIrrApp_swiginit(self, _irrlicht.new_ChIrrApp(*args))
    __swig_destroy__ = _irrlicht.delete_ChIrrApp

    def GetAssetConverter(self):
        r"""GetAssetConverter(ChIrrApp self) -> ChIrrAssetConverter"""
        return _irrlicht.ChIrrApp_GetAssetConverter(self)

    def AssetBind(self, mitem):
        r"""AssetBind(ChIrrApp self, std::shared_ptr< chrono::ChPhysicsItem > mitem)"""
        return _irrlicht.ChIrrApp_AssetBind(self, mitem)

    def AssetBindAll(self):
        r"""AssetBindAll(ChIrrApp self)"""
        return _irrlicht.ChIrrApp_AssetBindAll(self)

    def AssetUpdate(self, mitem):
        r"""AssetUpdate(ChIrrApp self, std::shared_ptr< chrono::ChPhysicsItem > mitem)"""
        return _irrlicht.ChIrrApp_AssetUpdate(self, mitem)

    def AssetUpdateAll(self):
        r"""AssetUpdateAll(ChIrrApp self)"""
        return _irrlicht.ChIrrApp_AssetUpdateAll(self)

    def AddShadow(self, mitem):
        r"""AddShadow(ChIrrApp self, std::shared_ptr< chrono::ChPhysicsItem > mitem)"""
        return _irrlicht.ChIrrApp_AddShadow(self, mitem)

    def AddShadowAll(self):
        r"""AddShadowAll(ChIrrApp self)"""
        return _irrlicht.ChIrrApp_AddShadowAll(self)

# Register ChIrrApp in _irrlicht:
_irrlicht.ChIrrApp_swigregister(ChIrrApp)

ESNT_CHIRRNODE = _irrlicht.ESNT_CHIRRNODE

class ChIrrNode(ISceneNode):
    r"""Proxy of C++ chrono::irrlicht::ChIrrNode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mphysicsitem, parent, mgr, id):
        r"""__init__(ChIrrNode self, std::weak_ptr< chrono::ChPhysicsItem > mphysicsitem, ISceneNode parent, ISceneManager mgr, irr::s32 id) -> ChIrrNode"""
        _irrlicht.ChIrrNode_swiginit(self, _irrlicht.new_ChIrrNode(mphysicsitem, parent, mgr, id))
    __swig_destroy__ = _irrlicht.delete_ChIrrNode

    def OnRegisterSceneNode(self):
        r"""OnRegisterSceneNode(ChIrrNode self)"""
        return _irrlicht.ChIrrNode_OnRegisterSceneNode(self)

    def render(self):
        r"""render(ChIrrNode self)"""
        return _irrlicht.ChIrrNode_render(self)

    def getBoundingBox(self):
        r"""getBoundingBox(ChIrrNode self) -> irr::core::aabbox3d< irr::f32 > const &"""
        return _irrlicht.ChIrrNode_getBoundingBox(self)

    def setMaterialTexture(self, textureLayer, texture):
        r"""setMaterialTexture(ChIrrNode self, irr::s32 textureLayer, irr::video::ITexture * texture)"""
        return _irrlicht.ChIrrNode_setMaterialTexture(self, textureLayer, texture)

    def clone(self, newParent, newManager):
        r"""clone(ChIrrNode self, ISceneNode * newParent, ISceneManager newManager) -> ISceneNode *"""
        return _irrlicht.ChIrrNode_clone(self, newParent, newManager)

    def SetupClones(self):
        r"""SetupClones(ChIrrNode self) -> bool"""
        return _irrlicht.ChIrrNode_SetupClones(self)

    def OnAnimate(self, timeMs):
        r"""OnAnimate(ChIrrNode self, irr::u32 timeMs)"""
        return _irrlicht.ChIrrNode_OnAnimate(self, timeMs)

    def GetPhysicsItem(self):
        r"""GetPhysicsItem(ChIrrNode self) -> std::weak_ptr< chrono::ChPhysicsItem >"""
        return _irrlicht.ChIrrNode_GetPhysicsItem(self)

    def IsChronoControlled(self):
        r"""IsChronoControlled(ChIrrNode self) -> bool"""
        return _irrlicht.ChIrrNode_IsChronoControlled(self)

    def SetChronoControlled(self, controlled):
        r"""SetChronoControlled(ChIrrNode self, bool const & controlled)"""
        return _irrlicht.ChIrrNode_SetChronoControlled(self, controlled)

    def UpdateAssetsProxies(self):
        r"""UpdateAssetsProxies(ChIrrNode self)"""
        return _irrlicht.ChIrrNode_UpdateAssetsProxies(self)

    def getType(self):
        r"""getType(ChIrrNode self) -> irr::scene::ESCENE_NODE_TYPE"""
        return _irrlicht.ChIrrNode_getType(self)

# Register ChIrrNode in _irrlicht:
_irrlicht.ChIrrNode_swigregister(ChIrrNode)

class ChIrrNodeAsset(pychrono.core.ChAsset):
    r"""Proxy of C++ chrono::irrlicht::ChIrrNodeAsset class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChIrrNodeAsset self) -> ChIrrNodeAsset"""
        _irrlicht.ChIrrNodeAsset_swiginit(self, _irrlicht.new_ChIrrNodeAsset())
    __swig_destroy__ = _irrlicht.delete_ChIrrNodeAsset

    def GetIrrlichtNode(self):
        r"""GetIrrlichtNode(ChIrrNodeAsset self) -> ISceneNode"""
        return _irrlicht.ChIrrNodeAsset_GetIrrlichtNode(self)

    def Bind(self, aitem, aapp):
        r"""Bind(ChIrrNodeAsset self, std::shared_ptr< chrono::ChPhysicsItem > aitem, ChIrrAppInterface aapp)"""
        return _irrlicht.ChIrrNodeAsset_Bind(self, aitem, aapp)

    def UnBind(self):
        r"""UnBind(ChIrrNodeAsset self)"""
        return _irrlicht.ChIrrNodeAsset_UnBind(self)

    def Update(self, updater, coords):
        r"""Update(ChIrrNodeAsset self, chrono::ChPhysicsItem * updater, ChCoordsysD coords)"""
        return _irrlicht.ChIrrNodeAsset_Update(self, updater, coords)

# Register ChIrrNodeAsset in _irrlicht:
_irrlicht.ChIrrNodeAsset_swigregister(ChIrrNodeAsset)


def CastToChIrrNodeAsset(in_obj):
    r"""CastToChIrrNodeAsset(std::shared_ptr< chrono::ChAsset > in_obj) -> std::shared_ptr< chrono::irrlicht::ChIrrNodeAsset >"""
    return _irrlicht.CastToChIrrNodeAsset(in_obj)


