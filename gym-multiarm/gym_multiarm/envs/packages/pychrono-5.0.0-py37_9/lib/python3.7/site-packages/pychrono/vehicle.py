# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _vehicle
else:
    import _vehicle

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _vehicle.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _vehicle.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _vehicle.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _vehicle.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _vehicle.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _vehicle.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _vehicle.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _vehicle.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _vehicle.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _vehicle.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _vehicle.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _vehicle.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _vehicle.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _vehicle.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _vehicle.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _vehicle.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _vehicle.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _vehicle:
_vehicle.SwigPyIterator_swigregister(SwigPyIterator)

class vector_int(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_int self) -> SwigPyIterator"""
        return _vehicle.vector_int_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_int self) -> bool"""
        return _vehicle.vector_int___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_int self) -> bool"""
        return _vehicle.vector_int___bool__(self)

    def __len__(self):
        r"""__len__(vector_int self) -> std::vector< int >::size_type"""
        return _vehicle.vector_int___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> vector_int"""
        return _vehicle.vector_int___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, vector_int v)
        """
        return _vehicle.vector_int___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _vehicle.vector_int___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_int self, std::vector< int >::difference_type i)
        __delitem__(vector_int self, PySliceObject * slice)
        """
        return _vehicle.vector_int___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_int self, PySliceObject * slice) -> vector_int
        __getitem__(vector_int self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _vehicle.vector_int___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_int self, PySliceObject * slice, vector_int v)
        __setitem__(vector_int self, PySliceObject * slice)
        __setitem__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _vehicle.vector_int___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_int self) -> std::vector< int >::value_type"""
        return _vehicle.vector_int_pop(self)

    def append(self, x):
        r"""append(vector_int self, std::vector< int >::value_type const & x)"""
        return _vehicle.vector_int_append(self, x)

    def empty(self):
        r"""empty(vector_int self) -> bool"""
        return _vehicle.vector_int_empty(self)

    def size(self):
        r"""size(vector_int self) -> std::vector< int >::size_type"""
        return _vehicle.vector_int_size(self)

    def swap(self, v):
        r"""swap(vector_int self, vector_int v)"""
        return _vehicle.vector_int_swap(self, v)

    def begin(self):
        r"""begin(vector_int self) -> std::vector< int >::iterator"""
        return _vehicle.vector_int_begin(self)

    def end(self):
        r"""end(vector_int self) -> std::vector< int >::iterator"""
        return _vehicle.vector_int_end(self)

    def rbegin(self):
        r"""rbegin(vector_int self) -> std::vector< int >::reverse_iterator"""
        return _vehicle.vector_int_rbegin(self)

    def rend(self):
        r"""rend(vector_int self) -> std::vector< int >::reverse_iterator"""
        return _vehicle.vector_int_rend(self)

    def clear(self):
        r"""clear(vector_int self)"""
        return _vehicle.vector_int_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_int self) -> std::vector< int >::allocator_type"""
        return _vehicle.vector_int_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_int self)"""
        return _vehicle.vector_int_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_int self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(vector_int self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _vehicle.vector_int_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_int self) -> vector_int
        __init__(vector_int self, vector_int other) -> vector_int
        __init__(vector_int self, std::vector< int >::size_type size) -> vector_int
        __init__(vector_int self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> vector_int
        """
        _vehicle.vector_int_swiginit(self, _vehicle.new_vector_int(*args))

    def push_back(self, x):
        r"""push_back(vector_int self, std::vector< int >::value_type const & x)"""
        return _vehicle.vector_int_push_back(self, x)

    def front(self):
        r"""front(vector_int self) -> std::vector< int >::value_type const &"""
        return _vehicle.vector_int_front(self)

    def back(self):
        r"""back(vector_int self) -> std::vector< int >::value_type const &"""
        return _vehicle.vector_int_back(self)

    def assign(self, n, x):
        r"""assign(vector_int self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _vehicle.vector_int_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_int self, std::vector< int >::size_type new_size)
        resize(vector_int self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _vehicle.vector_int_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_int self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(vector_int self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _vehicle.vector_int_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_int self, std::vector< int >::size_type n)"""
        return _vehicle.vector_int_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_int self) -> std::vector< int >::size_type"""
        return _vehicle.vector_int_capacity(self)
    __swig_destroy__ = _vehicle.delete_vector_int

# Register vector_int in _vehicle:
_vehicle.vector_int_swigregister(vector_int)

class TerrainForces(object):
    r"""Proxy of C++ std::vector< chrono::vehicle::TerrainForce > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(TerrainForces self) -> SwigPyIterator"""
        return _vehicle.TerrainForces_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(TerrainForces self) -> bool"""
        return _vehicle.TerrainForces___nonzero__(self)

    def __bool__(self):
        r"""__bool__(TerrainForces self) -> bool"""
        return _vehicle.TerrainForces___bool__(self)

    def __len__(self):
        r"""__len__(TerrainForces self) -> std::vector< chrono::vehicle::TerrainForce >::size_type"""
        return _vehicle.TerrainForces___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::difference_type i, std::vector< chrono::vehicle::TerrainForce >::difference_type j) -> TerrainForces"""
        return _vehicle.TerrainForces___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::difference_type i, std::vector< chrono::vehicle::TerrainForce >::difference_type j)
        __setslice__(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::difference_type i, std::vector< chrono::vehicle::TerrainForce >::difference_type j, TerrainForces v)
        """
        return _vehicle.TerrainForces___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::difference_type i, std::vector< chrono::vehicle::TerrainForce >::difference_type j)"""
        return _vehicle.TerrainForces___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::difference_type i)
        __delitem__(TerrainForces self, PySliceObject * slice)
        """
        return _vehicle.TerrainForces___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(TerrainForces self, PySliceObject * slice) -> TerrainForces
        __getitem__(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::difference_type i) -> TerrainForce
        """
        return _vehicle.TerrainForces___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(TerrainForces self, PySliceObject * slice, TerrainForces v)
        __setitem__(TerrainForces self, PySliceObject * slice)
        __setitem__(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::difference_type i, TerrainForce x)
        """
        return _vehicle.TerrainForces___setitem__(self, *args)

    def pop(self):
        r"""pop(TerrainForces self) -> TerrainForce"""
        return _vehicle.TerrainForces_pop(self)

    def append(self, x):
        r"""append(TerrainForces self, TerrainForce x)"""
        return _vehicle.TerrainForces_append(self, x)

    def empty(self):
        r"""empty(TerrainForces self) -> bool"""
        return _vehicle.TerrainForces_empty(self)

    def size(self):
        r"""size(TerrainForces self) -> std::vector< chrono::vehicle::TerrainForce >::size_type"""
        return _vehicle.TerrainForces_size(self)

    def swap(self, v):
        r"""swap(TerrainForces self, TerrainForces v)"""
        return _vehicle.TerrainForces_swap(self, v)

    def begin(self):
        r"""begin(TerrainForces self) -> std::vector< chrono::vehicle::TerrainForce >::iterator"""
        return _vehicle.TerrainForces_begin(self)

    def end(self):
        r"""end(TerrainForces self) -> std::vector< chrono::vehicle::TerrainForce >::iterator"""
        return _vehicle.TerrainForces_end(self)

    def rbegin(self):
        r"""rbegin(TerrainForces self) -> std::vector< chrono::vehicle::TerrainForce >::reverse_iterator"""
        return _vehicle.TerrainForces_rbegin(self)

    def rend(self):
        r"""rend(TerrainForces self) -> std::vector< chrono::vehicle::TerrainForce >::reverse_iterator"""
        return _vehicle.TerrainForces_rend(self)

    def clear(self):
        r"""clear(TerrainForces self)"""
        return _vehicle.TerrainForces_clear(self)

    def get_allocator(self):
        r"""get_allocator(TerrainForces self) -> std::vector< chrono::vehicle::TerrainForce >::allocator_type"""
        return _vehicle.TerrainForces_get_allocator(self)

    def pop_back(self):
        r"""pop_back(TerrainForces self)"""
        return _vehicle.TerrainForces_pop_back(self)

    def erase(self, *args):
        r"""
        erase(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::iterator pos) -> std::vector< chrono::vehicle::TerrainForce >::iterator
        erase(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::iterator first, std::vector< chrono::vehicle::TerrainForce >::iterator last) -> std::vector< chrono::vehicle::TerrainForce >::iterator
        """
        return _vehicle.TerrainForces_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(TerrainForces self) -> TerrainForces
        __init__(TerrainForces self, TerrainForces other) -> TerrainForces
        __init__(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::size_type size) -> TerrainForces
        __init__(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::size_type size, TerrainForce value) -> TerrainForces
        """
        _vehicle.TerrainForces_swiginit(self, _vehicle.new_TerrainForces(*args))

    def push_back(self, x):
        r"""push_back(TerrainForces self, TerrainForce x)"""
        return _vehicle.TerrainForces_push_back(self, x)

    def front(self):
        r"""front(TerrainForces self) -> TerrainForce"""
        return _vehicle.TerrainForces_front(self)

    def back(self):
        r"""back(TerrainForces self) -> TerrainForce"""
        return _vehicle.TerrainForces_back(self)

    def assign(self, n, x):
        r"""assign(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::size_type n, TerrainForce x)"""
        return _vehicle.TerrainForces_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::size_type new_size)
        resize(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::size_type new_size, TerrainForce x)
        """
        return _vehicle.TerrainForces_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::iterator pos, TerrainForce x) -> std::vector< chrono::vehicle::TerrainForce >::iterator
        insert(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::iterator pos, std::vector< chrono::vehicle::TerrainForce >::size_type n, TerrainForce x)
        """
        return _vehicle.TerrainForces_insert(self, *args)

    def reserve(self, n):
        r"""reserve(TerrainForces self, std::vector< chrono::vehicle::TerrainForce >::size_type n)"""
        return _vehicle.TerrainForces_reserve(self, n)

    def capacity(self):
        r"""capacity(TerrainForces self) -> std::vector< chrono::vehicle::TerrainForce >::size_type"""
        return _vehicle.TerrainForces_capacity(self)
    __swig_destroy__ = _vehicle.delete_TerrainForces

# Register TerrainForces in _vehicle:
_vehicle.TerrainForces_swigregister(TerrainForces)

class WheelStates(object):
    r"""Proxy of C++ std::vector< chrono::vehicle::WheelState > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(WheelStates self) -> SwigPyIterator"""
        return _vehicle.WheelStates_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(WheelStates self) -> bool"""
        return _vehicle.WheelStates___nonzero__(self)

    def __bool__(self):
        r"""__bool__(WheelStates self) -> bool"""
        return _vehicle.WheelStates___bool__(self)

    def __len__(self):
        r"""__len__(WheelStates self) -> std::vector< chrono::vehicle::WheelState >::size_type"""
        return _vehicle.WheelStates___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(WheelStates self, std::vector< chrono::vehicle::WheelState >::difference_type i, std::vector< chrono::vehicle::WheelState >::difference_type j) -> WheelStates"""
        return _vehicle.WheelStates___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(WheelStates self, std::vector< chrono::vehicle::WheelState >::difference_type i, std::vector< chrono::vehicle::WheelState >::difference_type j)
        __setslice__(WheelStates self, std::vector< chrono::vehicle::WheelState >::difference_type i, std::vector< chrono::vehicle::WheelState >::difference_type j, WheelStates v)
        """
        return _vehicle.WheelStates___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(WheelStates self, std::vector< chrono::vehicle::WheelState >::difference_type i, std::vector< chrono::vehicle::WheelState >::difference_type j)"""
        return _vehicle.WheelStates___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(WheelStates self, std::vector< chrono::vehicle::WheelState >::difference_type i)
        __delitem__(WheelStates self, PySliceObject * slice)
        """
        return _vehicle.WheelStates___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(WheelStates self, PySliceObject * slice) -> WheelStates
        __getitem__(WheelStates self, std::vector< chrono::vehicle::WheelState >::difference_type i) -> WheelState
        """
        return _vehicle.WheelStates___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(WheelStates self, PySliceObject * slice, WheelStates v)
        __setitem__(WheelStates self, PySliceObject * slice)
        __setitem__(WheelStates self, std::vector< chrono::vehicle::WheelState >::difference_type i, WheelState x)
        """
        return _vehicle.WheelStates___setitem__(self, *args)

    def pop(self):
        r"""pop(WheelStates self) -> WheelState"""
        return _vehicle.WheelStates_pop(self)

    def append(self, x):
        r"""append(WheelStates self, WheelState x)"""
        return _vehicle.WheelStates_append(self, x)

    def empty(self):
        r"""empty(WheelStates self) -> bool"""
        return _vehicle.WheelStates_empty(self)

    def size(self):
        r"""size(WheelStates self) -> std::vector< chrono::vehicle::WheelState >::size_type"""
        return _vehicle.WheelStates_size(self)

    def swap(self, v):
        r"""swap(WheelStates self, WheelStates v)"""
        return _vehicle.WheelStates_swap(self, v)

    def begin(self):
        r"""begin(WheelStates self) -> std::vector< chrono::vehicle::WheelState >::iterator"""
        return _vehicle.WheelStates_begin(self)

    def end(self):
        r"""end(WheelStates self) -> std::vector< chrono::vehicle::WheelState >::iterator"""
        return _vehicle.WheelStates_end(self)

    def rbegin(self):
        r"""rbegin(WheelStates self) -> std::vector< chrono::vehicle::WheelState >::reverse_iterator"""
        return _vehicle.WheelStates_rbegin(self)

    def rend(self):
        r"""rend(WheelStates self) -> std::vector< chrono::vehicle::WheelState >::reverse_iterator"""
        return _vehicle.WheelStates_rend(self)

    def clear(self):
        r"""clear(WheelStates self)"""
        return _vehicle.WheelStates_clear(self)

    def get_allocator(self):
        r"""get_allocator(WheelStates self) -> std::vector< chrono::vehicle::WheelState >::allocator_type"""
        return _vehicle.WheelStates_get_allocator(self)

    def pop_back(self):
        r"""pop_back(WheelStates self)"""
        return _vehicle.WheelStates_pop_back(self)

    def erase(self, *args):
        r"""
        erase(WheelStates self, std::vector< chrono::vehicle::WheelState >::iterator pos) -> std::vector< chrono::vehicle::WheelState >::iterator
        erase(WheelStates self, std::vector< chrono::vehicle::WheelState >::iterator first, std::vector< chrono::vehicle::WheelState >::iterator last) -> std::vector< chrono::vehicle::WheelState >::iterator
        """
        return _vehicle.WheelStates_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(WheelStates self) -> WheelStates
        __init__(WheelStates self, WheelStates other) -> WheelStates
        __init__(WheelStates self, std::vector< chrono::vehicle::WheelState >::size_type size) -> WheelStates
        __init__(WheelStates self, std::vector< chrono::vehicle::WheelState >::size_type size, WheelState value) -> WheelStates
        """
        _vehicle.WheelStates_swiginit(self, _vehicle.new_WheelStates(*args))

    def push_back(self, x):
        r"""push_back(WheelStates self, WheelState x)"""
        return _vehicle.WheelStates_push_back(self, x)

    def front(self):
        r"""front(WheelStates self) -> WheelState"""
        return _vehicle.WheelStates_front(self)

    def back(self):
        r"""back(WheelStates self) -> WheelState"""
        return _vehicle.WheelStates_back(self)

    def assign(self, n, x):
        r"""assign(WheelStates self, std::vector< chrono::vehicle::WheelState >::size_type n, WheelState x)"""
        return _vehicle.WheelStates_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(WheelStates self, std::vector< chrono::vehicle::WheelState >::size_type new_size)
        resize(WheelStates self, std::vector< chrono::vehicle::WheelState >::size_type new_size, WheelState x)
        """
        return _vehicle.WheelStates_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(WheelStates self, std::vector< chrono::vehicle::WheelState >::iterator pos, WheelState x) -> std::vector< chrono::vehicle::WheelState >::iterator
        insert(WheelStates self, std::vector< chrono::vehicle::WheelState >::iterator pos, std::vector< chrono::vehicle::WheelState >::size_type n, WheelState x)
        """
        return _vehicle.WheelStates_insert(self, *args)

    def reserve(self, n):
        r"""reserve(WheelStates self, std::vector< chrono::vehicle::WheelState >::size_type n)"""
        return _vehicle.WheelStates_reserve(self, n)

    def capacity(self):
        r"""capacity(WheelStates self) -> std::vector< chrono::vehicle::WheelState >::size_type"""
        return _vehicle.WheelStates_capacity(self)
    __swig_destroy__ = _vehicle.delete_WheelStates

# Register WheelStates in _vehicle:
_vehicle.WheelStates_swigregister(WheelStates)

class ChWheelList(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< chrono::vehicle::ChWheel > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ChWheelList self) -> SwigPyIterator"""
        return _vehicle.ChWheelList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ChWheelList self) -> bool"""
        return _vehicle.ChWheelList___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ChWheelList self) -> bool"""
        return _vehicle.ChWheelList___bool__(self)

    def __len__(self):
        r"""__len__(ChWheelList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type"""
        return _vehicle.ChWheelList___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::difference_type j) -> ChWheelList"""
        return _vehicle.ChWheelList___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::difference_type j)
        __setslice__(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::difference_type j, ChWheelList v)
        """
        return _vehicle.ChWheelList___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::difference_type j)"""
        return _vehicle.ChWheelList___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::difference_type i)
        __delitem__(ChWheelList self, PySliceObject * slice)
        """
        return _vehicle.ChWheelList___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(ChWheelList self, PySliceObject * slice) -> ChWheelList
        __getitem__(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::difference_type i) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type const &
        """
        return _vehicle.ChWheelList___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(ChWheelList self, PySliceObject * slice, ChWheelList v)
        __setitem__(ChWheelList self, PySliceObject * slice)
        __setitem__(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type const & x)
        """
        return _vehicle.ChWheelList___setitem__(self, *args)

    def pop(self):
        r"""pop(ChWheelList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type"""
        return _vehicle.ChWheelList_pop(self)

    def append(self, x):
        r"""append(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type const & x)"""
        return _vehicle.ChWheelList_append(self, x)

    def empty(self):
        r"""empty(ChWheelList self) -> bool"""
        return _vehicle.ChWheelList_empty(self)

    def size(self):
        r"""size(ChWheelList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type"""
        return _vehicle.ChWheelList_size(self)

    def swap(self, v):
        r"""swap(ChWheelList self, ChWheelList v)"""
        return _vehicle.ChWheelList_swap(self, v)

    def begin(self):
        r"""begin(ChWheelList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::iterator"""
        return _vehicle.ChWheelList_begin(self)

    def end(self):
        r"""end(ChWheelList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::iterator"""
        return _vehicle.ChWheelList_end(self)

    def rbegin(self):
        r"""rbegin(ChWheelList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::reverse_iterator"""
        return _vehicle.ChWheelList_rbegin(self)

    def rend(self):
        r"""rend(ChWheelList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::reverse_iterator"""
        return _vehicle.ChWheelList_rend(self)

    def clear(self):
        r"""clear(ChWheelList self)"""
        return _vehicle.ChWheelList_clear(self)

    def get_allocator(self):
        r"""get_allocator(ChWheelList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::allocator_type"""
        return _vehicle.ChWheelList_get_allocator(self)

    def pop_back(self):
        r"""pop_back(ChWheelList self)"""
        return _vehicle.ChWheelList_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::iterator pos) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::iterator
        erase(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::iterator first, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::iterator last) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::iterator
        """
        return _vehicle.ChWheelList_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ChWheelList self) -> ChWheelList
        __init__(ChWheelList self, ChWheelList other) -> ChWheelList
        __init__(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type size) -> ChWheelList
        __init__(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type size, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type const & value) -> ChWheelList
        """
        _vehicle.ChWheelList_swiginit(self, _vehicle.new_ChWheelList(*args))

    def push_back(self, x):
        r"""push_back(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type const & x)"""
        return _vehicle.ChWheelList_push_back(self, x)

    def front(self):
        r"""front(ChWheelList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type const &"""
        return _vehicle.ChWheelList_front(self)

    def back(self):
        r"""back(ChWheelList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type const &"""
        return _vehicle.ChWheelList_back(self)

    def assign(self, n, x):
        r"""assign(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type n, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type const & x)"""
        return _vehicle.ChWheelList_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type new_size)
        resize(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type new_size, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type const & x)
        """
        return _vehicle.ChWheelList_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::iterator pos, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type const & x) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::iterator
        insert(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::iterator pos, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type n, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::value_type const & x)
        """
        return _vehicle.ChWheelList_insert(self, *args)

    def reserve(self, n):
        r"""reserve(ChWheelList self, std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type n)"""
        return _vehicle.ChWheelList_reserve(self, n)

    def capacity(self):
        r"""capacity(ChWheelList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChWheel > >::size_type"""
        return _vehicle.ChWheelList_capacity(self)
    __swig_destroy__ = _vehicle.delete_ChWheelList

# Register ChWheelList in _vehicle:
_vehicle.ChWheelList_swigregister(ChWheelList)

class ChAxleList(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< chrono::vehicle::ChAxle > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(ChAxleList self) -> SwigPyIterator"""
        return _vehicle.ChAxleList_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(ChAxleList self) -> bool"""
        return _vehicle.ChAxleList___nonzero__(self)

    def __bool__(self):
        r"""__bool__(ChAxleList self) -> bool"""
        return _vehicle.ChAxleList___bool__(self)

    def __len__(self):
        r"""__len__(ChAxleList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type"""
        return _vehicle.ChAxleList___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::difference_type j) -> ChAxleList"""
        return _vehicle.ChAxleList___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::difference_type j)
        __setslice__(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::difference_type j, ChAxleList v)
        """
        return _vehicle.ChAxleList___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::difference_type j)"""
        return _vehicle.ChAxleList___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::difference_type i)
        __delitem__(ChAxleList self, PySliceObject * slice)
        """
        return _vehicle.ChAxleList___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(ChAxleList self, PySliceObject * slice) -> ChAxleList
        __getitem__(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::difference_type i) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type const &
        """
        return _vehicle.ChAxleList___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(ChAxleList self, PySliceObject * slice, ChAxleList v)
        __setitem__(ChAxleList self, PySliceObject * slice)
        __setitem__(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::difference_type i, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type const & x)
        """
        return _vehicle.ChAxleList___setitem__(self, *args)

    def pop(self):
        r"""pop(ChAxleList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type"""
        return _vehicle.ChAxleList_pop(self)

    def append(self, x):
        r"""append(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type const & x)"""
        return _vehicle.ChAxleList_append(self, x)

    def empty(self):
        r"""empty(ChAxleList self) -> bool"""
        return _vehicle.ChAxleList_empty(self)

    def size(self):
        r"""size(ChAxleList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type"""
        return _vehicle.ChAxleList_size(self)

    def swap(self, v):
        r"""swap(ChAxleList self, ChAxleList v)"""
        return _vehicle.ChAxleList_swap(self, v)

    def begin(self):
        r"""begin(ChAxleList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::iterator"""
        return _vehicle.ChAxleList_begin(self)

    def end(self):
        r"""end(ChAxleList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::iterator"""
        return _vehicle.ChAxleList_end(self)

    def rbegin(self):
        r"""rbegin(ChAxleList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::reverse_iterator"""
        return _vehicle.ChAxleList_rbegin(self)

    def rend(self):
        r"""rend(ChAxleList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::reverse_iterator"""
        return _vehicle.ChAxleList_rend(self)

    def clear(self):
        r"""clear(ChAxleList self)"""
        return _vehicle.ChAxleList_clear(self)

    def get_allocator(self):
        r"""get_allocator(ChAxleList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::allocator_type"""
        return _vehicle.ChAxleList_get_allocator(self)

    def pop_back(self):
        r"""pop_back(ChAxleList self)"""
        return _vehicle.ChAxleList_pop_back(self)

    def erase(self, *args):
        r"""
        erase(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::iterator pos) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::iterator
        erase(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::iterator first, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::iterator last) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::iterator
        """
        return _vehicle.ChAxleList_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(ChAxleList self) -> ChAxleList
        __init__(ChAxleList self, ChAxleList other) -> ChAxleList
        __init__(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type size) -> ChAxleList
        __init__(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type size, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type const & value) -> ChAxleList
        """
        _vehicle.ChAxleList_swiginit(self, _vehicle.new_ChAxleList(*args))

    def push_back(self, x):
        r"""push_back(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type const & x)"""
        return _vehicle.ChAxleList_push_back(self, x)

    def front(self):
        r"""front(ChAxleList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type const &"""
        return _vehicle.ChAxleList_front(self)

    def back(self):
        r"""back(ChAxleList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type const &"""
        return _vehicle.ChAxleList_back(self)

    def assign(self, n, x):
        r"""assign(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type n, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type const & x)"""
        return _vehicle.ChAxleList_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type new_size)
        resize(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type new_size, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type const & x)
        """
        return _vehicle.ChAxleList_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::iterator pos, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type const & x) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::iterator
        insert(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::iterator pos, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type n, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::value_type const & x)
        """
        return _vehicle.ChAxleList_insert(self, *args)

    def reserve(self, n):
        r"""reserve(ChAxleList self, std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type n)"""
        return _vehicle.ChAxleList_reserve(self, n)

    def capacity(self):
        r"""capacity(ChAxleList self) -> std::vector< std::shared_ptr< chrono::vehicle::ChAxle > >::size_type"""
        return _vehicle.ChAxleList_capacity(self)
    __swig_destroy__ = _vehicle.delete_ChAxleList

# Register ChAxleList in _vehicle:
_vehicle.ChAxleList_swigregister(ChAxleList)

import pychrono.core
LEFT = _vehicle.LEFT

RIGHT = _vehicle.RIGHT

SINGLE = _vehicle.SINGLE

INNER = _vehicle.INNER

OUTER = _vehicle.OUTER

class BodyState(object):
    r"""Proxy of C++ chrono::vehicle::BodyState class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pos = property(_vehicle.BodyState_pos_get, _vehicle.BodyState_pos_set, doc=r"""pos : chrono::ChVector<()>""")
    rot = property(_vehicle.BodyState_rot_get, _vehicle.BodyState_rot_set, doc=r"""rot : chrono::ChQuaternion<()>""")
    lin_vel = property(_vehicle.BodyState_lin_vel_get, _vehicle.BodyState_lin_vel_set, doc=r"""lin_vel : chrono::ChVector<()>""")
    ang_vel = property(_vehicle.BodyState_ang_vel_get, _vehicle.BodyState_ang_vel_set, doc=r"""ang_vel : chrono::ChVector<()>""")

    def __init__(self):
        r"""__init__(BodyState self) -> BodyState"""
        _vehicle.BodyState_swiginit(self, _vehicle.new_BodyState())
    __swig_destroy__ = _vehicle.delete_BodyState

# Register BodyState in _vehicle:
_vehicle.BodyState_swigregister(BodyState)

class WheelState(object):
    r"""Proxy of C++ chrono::vehicle::WheelState class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pos = property(_vehicle.WheelState_pos_get, _vehicle.WheelState_pos_set, doc=r"""pos : chrono::ChVector<()>""")
    rot = property(_vehicle.WheelState_rot_get, _vehicle.WheelState_rot_set, doc=r"""rot : chrono::ChQuaternion<()>""")
    lin_vel = property(_vehicle.WheelState_lin_vel_get, _vehicle.WheelState_lin_vel_set, doc=r"""lin_vel : chrono::ChVector<()>""")
    ang_vel = property(_vehicle.WheelState_ang_vel_get, _vehicle.WheelState_ang_vel_set, doc=r"""ang_vel : chrono::ChVector<()>""")
    omega = property(_vehicle.WheelState_omega_get, _vehicle.WheelState_omega_set, doc=r"""omega : double""")

    def __init__(self):
        r"""__init__(WheelState self) -> WheelState"""
        _vehicle.WheelState_swiginit(self, _vehicle.new_WheelState())
    __swig_destroy__ = _vehicle.delete_WheelState

# Register WheelState in _vehicle:
_vehicle.WheelState_swigregister(WheelState)

class TerrainForce(object):
    r"""Proxy of C++ chrono::vehicle::TerrainForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    force = property(_vehicle.TerrainForce_force_get, _vehicle.TerrainForce_force_set, doc=r"""force : chrono::ChVector<()>""")
    point = property(_vehicle.TerrainForce_point_get, _vehicle.TerrainForce_point_set, doc=r"""point : chrono::ChVector<()>""")
    moment = property(_vehicle.TerrainForce_moment_get, _vehicle.TerrainForce_moment_set, doc=r"""moment : chrono::ChVector<()>""")

    def __init__(self):
        r"""__init__(TerrainForce self) -> TerrainForce"""
        _vehicle.TerrainForce_swiginit(self, _vehicle.new_TerrainForce())
    __swig_destroy__ = _vehicle.delete_TerrainForce

# Register TerrainForce in _vehicle:
_vehicle.TerrainForce_swigregister(TerrainForce)

class LinearSpringForce(pychrono.core.ForceFunctor):
    r"""Proxy of C++ chrono::vehicle::LinearSpringForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, k):
        r"""__init__(LinearSpringForce self, double k) -> LinearSpringForce"""
        _vehicle.LinearSpringForce_swiginit(self, _vehicle.new_LinearSpringForce(k))

    def __call__(self, time, rest_length, length, vel, link):
        r"""__call__(LinearSpringForce self, double time, double rest_length, double length, double vel, ChLinkTSDA link) -> double"""
        return _vehicle.LinearSpringForce___call__(self, time, rest_length, length, vel, link)
    __swig_destroy__ = _vehicle.delete_LinearSpringForce

# Register LinearSpringForce in _vehicle:
_vehicle.LinearSpringForce_swigregister(LinearSpringForce)

class LinearDamperForce(pychrono.core.ForceFunctor):
    r"""Proxy of C++ chrono::vehicle::LinearDamperForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, c):
        r"""__init__(LinearDamperForce self, double c) -> LinearDamperForce"""
        _vehicle.LinearDamperForce_swiginit(self, _vehicle.new_LinearDamperForce(c))

    def __call__(self, time, rest_length, length, vel, link):
        r"""__call__(LinearDamperForce self, double time, double rest_length, double length, double vel, ChLinkTSDA link) -> double"""
        return _vehicle.LinearDamperForce___call__(self, time, rest_length, length, vel, link)
    __swig_destroy__ = _vehicle.delete_LinearDamperForce

# Register LinearDamperForce in _vehicle:
_vehicle.LinearDamperForce_swigregister(LinearDamperForce)

class LinearSpringDamperForce(pychrono.core.ForceFunctor):
    r"""Proxy of C++ chrono::vehicle::LinearSpringDamperForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, k, c):
        r"""__init__(LinearSpringDamperForce self, double k, double c) -> LinearSpringDamperForce"""
        _vehicle.LinearSpringDamperForce_swiginit(self, _vehicle.new_LinearSpringDamperForce(k, c))

    def __call__(self, time, rest_length, length, vel, link):
        r"""__call__(LinearSpringDamperForce self, double time, double rest_length, double length, double vel, ChLinkTSDA link) -> double"""
        return _vehicle.LinearSpringDamperForce___call__(self, time, rest_length, length, vel, link)
    __swig_destroy__ = _vehicle.delete_LinearSpringDamperForce

# Register LinearSpringDamperForce in _vehicle:
_vehicle.LinearSpringDamperForce_swigregister(LinearSpringDamperForce)

class LinearSpringDamperActuatorForce(pychrono.core.ForceFunctor):
    r"""Proxy of C++ chrono::vehicle::LinearSpringDamperActuatorForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, k, c, f):
        r"""__init__(LinearSpringDamperActuatorForce self, double k, double c, double f) -> LinearSpringDamperActuatorForce"""
        _vehicle.LinearSpringDamperActuatorForce_swiginit(self, _vehicle.new_LinearSpringDamperActuatorForce(k, c, f))

    def __call__(self, time, rest_length, length, vel, link):
        r"""__call__(LinearSpringDamperActuatorForce self, double time, double rest_length, double length, double vel, ChLinkTSDA link) -> double"""
        return _vehicle.LinearSpringDamperActuatorForce___call__(self, time, rest_length, length, vel, link)
    __swig_destroy__ = _vehicle.delete_LinearSpringDamperActuatorForce

# Register LinearSpringDamperActuatorForce in _vehicle:
_vehicle.LinearSpringDamperActuatorForce_swigregister(LinearSpringDamperActuatorForce)

class MapSpringForce(pychrono.core.ForceFunctor):
    r"""Proxy of C++ chrono::vehicle::MapSpringForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MapSpringForce self) -> MapSpringForce
        __init__(MapSpringForce self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > const & data) -> MapSpringForce
        """
        _vehicle.MapSpringForce_swiginit(self, _vehicle.new_MapSpringForce(*args))

    def add_point(self, x, y):
        r"""add_point(MapSpringForce self, double x, double y)"""
        return _vehicle.MapSpringForce_add_point(self, x, y)

    def __call__(self, time, rest_length, length, vel, link):
        r"""__call__(MapSpringForce self, double time, double rest_length, double length, double vel, ChLinkTSDA link) -> double"""
        return _vehicle.MapSpringForce___call__(self, time, rest_length, length, vel, link)
    __swig_destroy__ = _vehicle.delete_MapSpringForce

# Register MapSpringForce in _vehicle:
_vehicle.MapSpringForce_swigregister(MapSpringForce)

class MapSpringBistopForce(pychrono.core.ForceFunctor):
    r"""Proxy of C++ chrono::vehicle::MapSpringBistopForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MapSpringBistopForce self, double spring_min_length, double spring_max_length) -> MapSpringBistopForce
        __init__(MapSpringBistopForce self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > const & data, double spring_min_length, double spring_max_length) -> MapSpringBistopForce
        """
        _vehicle.MapSpringBistopForce_swiginit(self, _vehicle.new_MapSpringBistopForce(*args))

    def add_point(self, x, y):
        r"""add_point(MapSpringBistopForce self, double x, double y)"""
        return _vehicle.MapSpringBistopForce_add_point(self, x, y)

    def __call__(self, time, rest_length, length, vel, link):
        r"""__call__(MapSpringBistopForce self, double time, double rest_length, double length, double vel, ChLinkTSDA link) -> double"""
        return _vehicle.MapSpringBistopForce___call__(self, time, rest_length, length, vel, link)
    __swig_destroy__ = _vehicle.delete_MapSpringBistopForce

# Register MapSpringBistopForce in _vehicle:
_vehicle.MapSpringBistopForce_swigregister(MapSpringBistopForce)

class LinearSpringBistopForce(pychrono.core.ForceFunctor):
    r"""Proxy of C++ chrono::vehicle::LinearSpringBistopForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, k, min_length, max_length):
        r"""__init__(LinearSpringBistopForce self, double k, double min_length, double max_length) -> LinearSpringBistopForce"""
        _vehicle.LinearSpringBistopForce_swiginit(self, _vehicle.new_LinearSpringBistopForce(k, min_length, max_length))

    def __call__(self, time, rest_length, length, vel, link):
        r"""__call__(LinearSpringBistopForce self, double time, double rest_length, double length, double vel, ChLinkTSDA link) -> double"""
        return _vehicle.LinearSpringBistopForce___call__(self, time, rest_length, length, vel, link)
    __swig_destroy__ = _vehicle.delete_LinearSpringBistopForce

# Register LinearSpringBistopForce in _vehicle:
_vehicle.LinearSpringBistopForce_swigregister(LinearSpringBistopForce)

class DegressiveDamperForce(pychrono.core.ForceFunctor):
    r"""Proxy of C++ chrono::vehicle::DegressiveDamperForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DegressiveDamperForce self, double c_compression) -> DegressiveDamperForce
        __init__(DegressiveDamperForce self, double c_compression, double c_expansion) -> DegressiveDamperForce
        __init__(DegressiveDamperForce self, double c_compression, double degr_compression, double degr_expansion) -> DegressiveDamperForce
        __init__(DegressiveDamperForce self, double c_compression, double degr_compression, double c_expansion, double degr_expansion) -> DegressiveDamperForce
        """
        _vehicle.DegressiveDamperForce_swiginit(self, _vehicle.new_DegressiveDamperForce(*args))

    def __call__(self, time, rest_length, length, vel, link):
        r"""__call__(DegressiveDamperForce self, double time, double rest_length, double length, double vel, ChLinkTSDA link) -> double"""
        return _vehicle.DegressiveDamperForce___call__(self, time, rest_length, length, vel, link)
    __swig_destroy__ = _vehicle.delete_DegressiveDamperForce

# Register DegressiveDamperForce in _vehicle:
_vehicle.DegressiveDamperForce_swigregister(DegressiveDamperForce)

class MapDamperForce(pychrono.core.ForceFunctor):
    r"""Proxy of C++ chrono::vehicle::MapDamperForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MapDamperForce self) -> MapDamperForce
        __init__(MapDamperForce self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > const & data) -> MapDamperForce
        """
        _vehicle.MapDamperForce_swiginit(self, _vehicle.new_MapDamperForce(*args))

    def add_point(self, x, y):
        r"""add_point(MapDamperForce self, double x, double y)"""
        return _vehicle.MapDamperForce_add_point(self, x, y)

    def __call__(self, time, rest_length, length, vel, link):
        r"""__call__(MapDamperForce self, double time, double rest_length, double length, double vel, ChLinkTSDA link) -> double"""
        return _vehicle.MapDamperForce___call__(self, time, rest_length, length, vel, link)
    __swig_destroy__ = _vehicle.delete_MapDamperForce

# Register MapDamperForce in _vehicle:
_vehicle.MapDamperForce_swigregister(MapDamperForce)

class MapSpringDamperActuatorForce(pychrono.core.ForceFunctor):
    r"""Proxy of C++ chrono::vehicle::MapSpringDamperActuatorForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MapSpringDamperActuatorForce self) -> MapSpringDamperActuatorForce
        __init__(MapSpringDamperActuatorForce self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > const & dataK, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > const & dataC, double f) -> MapSpringDamperActuatorForce
        """
        _vehicle.MapSpringDamperActuatorForce_swiginit(self, _vehicle.new_MapSpringDamperActuatorForce(*args))

    def add_pointK(self, x, y):
        r"""add_pointK(MapSpringDamperActuatorForce self, double x, double y)"""
        return _vehicle.MapSpringDamperActuatorForce_add_pointK(self, x, y)

    def add_pointC(self, x, y):
        r"""add_pointC(MapSpringDamperActuatorForce self, double x, double y)"""
        return _vehicle.MapSpringDamperActuatorForce_add_pointC(self, x, y)

    def set_f(self, f):
        r"""set_f(MapSpringDamperActuatorForce self, double f)"""
        return _vehicle.MapSpringDamperActuatorForce_set_f(self, f)

    def __call__(self, time, rest_length, length, vel, link):
        r"""__call__(MapSpringDamperActuatorForce self, double time, double rest_length, double length, double vel, ChLinkTSDA link) -> double"""
        return _vehicle.MapSpringDamperActuatorForce___call__(self, time, rest_length, length, vel, link)
    __swig_destroy__ = _vehicle.delete_MapSpringDamperActuatorForce

# Register MapSpringDamperActuatorForce in _vehicle:
_vehicle.MapSpringDamperActuatorForce_swigregister(MapSpringDamperActuatorForce)

class LinearSpringTorque(pychrono.core.TorqueFunctor):
    r"""Proxy of C++ chrono::vehicle::LinearSpringTorque class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, k, rest_angle=0):
        r"""__init__(LinearSpringTorque self, double k, double rest_angle=0) -> LinearSpringTorque"""
        _vehicle.LinearSpringTorque_swiginit(self, _vehicle.new_LinearSpringTorque(k, rest_angle))

    def __call__(self, time, angle, vel, link):
        r"""__call__(LinearSpringTorque self, double time, double angle, double vel, ChLinkRotSpringCB link) -> double"""
        return _vehicle.LinearSpringTorque___call__(self, time, angle, vel, link)
    __swig_destroy__ = _vehicle.delete_LinearSpringTorque

# Register LinearSpringTorque in _vehicle:
_vehicle.LinearSpringTorque_swigregister(LinearSpringTorque)

class LinearDamperTorque(pychrono.core.TorqueFunctor):
    r"""Proxy of C++ chrono::vehicle::LinearDamperTorque class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, c):
        r"""__init__(LinearDamperTorque self, double c) -> LinearDamperTorque"""
        _vehicle.LinearDamperTorque_swiginit(self, _vehicle.new_LinearDamperTorque(c))

    def __call__(self, time, angle, vel, link):
        r"""__call__(LinearDamperTorque self, double time, double angle, double vel, ChLinkRotSpringCB link) -> double"""
        return _vehicle.LinearDamperTorque___call__(self, time, angle, vel, link)
    __swig_destroy__ = _vehicle.delete_LinearDamperTorque

# Register LinearDamperTorque in _vehicle:
_vehicle.LinearDamperTorque_swigregister(LinearDamperTorque)

class LinearSpringDamperTorque(pychrono.core.TorqueFunctor):
    r"""Proxy of C++ chrono::vehicle::LinearSpringDamperTorque class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, k, c, rest_angle=0):
        r"""__init__(LinearSpringDamperTorque self, double k, double c, double rest_angle=0) -> LinearSpringDamperTorque"""
        _vehicle.LinearSpringDamperTorque_swiginit(self, _vehicle.new_LinearSpringDamperTorque(k, c, rest_angle))

    def __call__(self, time, angle, vel, link):
        r"""__call__(LinearSpringDamperTorque self, double time, double angle, double vel, ChLinkRotSpringCB link) -> double"""
        return _vehicle.LinearSpringDamperTorque___call__(self, time, angle, vel, link)
    __swig_destroy__ = _vehicle.delete_LinearSpringDamperTorque

# Register LinearSpringDamperTorque in _vehicle:
_vehicle.LinearSpringDamperTorque_swigregister(LinearSpringDamperTorque)

class LinearSpringDamperActuatorTorque(pychrono.core.TorqueFunctor):
    r"""Proxy of C++ chrono::vehicle::LinearSpringDamperActuatorTorque class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, k, c, t, rest_angle=0):
        r"""__init__(LinearSpringDamperActuatorTorque self, double k, double c, double t, double rest_angle=0) -> LinearSpringDamperActuatorTorque"""
        _vehicle.LinearSpringDamperActuatorTorque_swiginit(self, _vehicle.new_LinearSpringDamperActuatorTorque(k, c, t, rest_angle))

    def __call__(self, time, angle, vel, link):
        r"""__call__(LinearSpringDamperActuatorTorque self, double time, double angle, double vel, ChLinkRotSpringCB link) -> double"""
        return _vehicle.LinearSpringDamperActuatorTorque___call__(self, time, angle, vel, link)
    __swig_destroy__ = _vehicle.delete_LinearSpringDamperActuatorTorque

# Register LinearSpringDamperActuatorTorque in _vehicle:
_vehicle.LinearSpringDamperActuatorTorque_swigregister(LinearSpringDamperActuatorTorque)

class MapSpringTorque(pychrono.core.TorqueFunctor):
    r"""Proxy of C++ chrono::vehicle::MapSpringTorque class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MapSpringTorque self) -> MapSpringTorque
        __init__(MapSpringTorque self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > const & data, double rest_angle=0) -> MapSpringTorque
        """
        _vehicle.MapSpringTorque_swiginit(self, _vehicle.new_MapSpringTorque(*args))

    def add_point(self, x, y):
        r"""add_point(MapSpringTorque self, double x, double y)"""
        return _vehicle.MapSpringTorque_add_point(self, x, y)

    def __call__(self, time, angle, vel, link):
        r"""__call__(MapSpringTorque self, double time, double angle, double vel, ChLinkRotSpringCB link) -> double"""
        return _vehicle.MapSpringTorque___call__(self, time, angle, vel, link)
    __swig_destroy__ = _vehicle.delete_MapSpringTorque

# Register MapSpringTorque in _vehicle:
_vehicle.MapSpringTorque_swigregister(MapSpringTorque)

class MapDamperTorque(pychrono.core.TorqueFunctor):
    r"""Proxy of C++ chrono::vehicle::MapDamperTorque class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MapDamperTorque self) -> MapDamperTorque
        __init__(MapDamperTorque self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > const & data) -> MapDamperTorque
        """
        _vehicle.MapDamperTorque_swiginit(self, _vehicle.new_MapDamperTorque(*args))

    def add_point(self, x, y):
        r"""add_point(MapDamperTorque self, double x, double y)"""
        return _vehicle.MapDamperTorque_add_point(self, x, y)

    def __call__(self, time, angle, vel, link):
        r"""__call__(MapDamperTorque self, double time, double angle, double vel, ChLinkRotSpringCB link) -> double"""
        return _vehicle.MapDamperTorque___call__(self, time, angle, vel, link)
    __swig_destroy__ = _vehicle.delete_MapDamperTorque

# Register MapDamperTorque in _vehicle:
_vehicle.MapDamperTorque_swigregister(MapDamperTorque)

VisualizationType_NONE = _vehicle.VisualizationType_NONE

VisualizationType_PRIMITIVES = _vehicle.VisualizationType_PRIMITIVES

VisualizationType_MESH = _vehicle.VisualizationType_MESH

TireModelType_RIGID = _vehicle.TireModelType_RIGID

TireModelType_RIGID_MESH = _vehicle.TireModelType_RIGID_MESH

TireModelType_PACEJKA = _vehicle.TireModelType_PACEJKA

TireModelType_LUGRE = _vehicle.TireModelType_LUGRE

TireModelType_FIALA = _vehicle.TireModelType_FIALA

TireModelType_ANCF = _vehicle.TireModelType_ANCF

TireModelType_REISSNER = _vehicle.TireModelType_REISSNER

TireModelType_FEA = _vehicle.TireModelType_FEA

TireModelType_PAC89 = _vehicle.TireModelType_PAC89

TireModelType_TMEASY = _vehicle.TireModelType_TMEASY

TireModelType_PAC02 = _vehicle.TireModelType_PAC02

PowertrainModelType_SHAFTS = _vehicle.PowertrainModelType_SHAFTS

PowertrainModelType_SIMPLE_MAP = _vehicle.PowertrainModelType_SIMPLE_MAP

PowertrainModelType_SIMPLE = _vehicle.PowertrainModelType_SIMPLE

PowertrainModelType_SIMPLE_CVT = _vehicle.PowertrainModelType_SIMPLE_CVT

SuspensionType_DOUBLE_WISHBONE = _vehicle.SuspensionType_DOUBLE_WISHBONE

SuspensionType_DOUBLE_WISHBONE_REDUCED = _vehicle.SuspensionType_DOUBLE_WISHBONE_REDUCED

SuspensionType_HENDRICKSON_PRIMAXX = _vehicle.SuspensionType_HENDRICKSON_PRIMAXX

SuspensionType_LEAF_SPRING_AXLE = _vehicle.SuspensionType_LEAF_SPRING_AXLE

SuspensionType_SAE_LEAF_SPRING_AXLE = _vehicle.SuspensionType_SAE_LEAF_SPRING_AXLE

SuspensionType_MACPHERSON_STRUT = _vehicle.SuspensionType_MACPHERSON_STRUT

SuspensionType_MULTI_LINK = _vehicle.SuspensionType_MULTI_LINK

SuspensionType_RIGID_PINNED = _vehicle.SuspensionType_RIGID_PINNED

SuspensionType_RIGID_SUSPENSION = _vehicle.SuspensionType_RIGID_SUSPENSION

SuspensionType_SEMI_TRAILING_ARM = _vehicle.SuspensionType_SEMI_TRAILING_ARM

SuspensionType_SOLID_AXLE = _vehicle.SuspensionType_SOLID_AXLE

SuspensionType_SOLID_THREE_LINK_AXLE = _vehicle.SuspensionType_SOLID_THREE_LINK_AXLE

SuspensionType_SOLID_BELLCRANK_THREE_LINK_AXLE = _vehicle.SuspensionType_SOLID_BELLCRANK_THREE_LINK_AXLE

SuspensionType_THREE_LINK_IRS = _vehicle.SuspensionType_THREE_LINK_IRS

SuspensionType_TOE_BAR_LEAF_SPRING_AXLE = _vehicle.SuspensionType_TOE_BAR_LEAF_SPRING_AXLE

SuspensionType_SAE_TOE_BAR_LEAF_SPRING_AXLE = _vehicle.SuspensionType_SAE_TOE_BAR_LEAF_SPRING_AXLE

SteeringType_PITMAN_ARM = _vehicle.SteeringType_PITMAN_ARM

SteeringType_PITMAN_ARM_SHAFTS = _vehicle.SteeringType_PITMAN_ARM_SHAFTS

SteeringType_RACK_PINION = _vehicle.SteeringType_RACK_PINION

DrivelineType_FWD = _vehicle.DrivelineType_FWD

DrivelineType_RWD = _vehicle.DrivelineType_RWD

DrivelineType_AWD = _vehicle.DrivelineType_AWD

DrivelineType_SIMPLE = _vehicle.DrivelineType_SIMPLE

CHASSIS = _vehicle.CHASSIS

TIRES = _vehicle.TIRES

TrackShoeType_SINGLE_PIN = _vehicle.TrackShoeType_SINGLE_PIN

TrackShoeType_DOUBLE_PIN = _vehicle.TrackShoeType_DOUBLE_PIN

TrackShoeType_BAND_BUSHING = _vehicle.TrackShoeType_BAND_BUSHING

TrackShoeType_BAND_ANCF = _vehicle.TrackShoeType_BAND_ANCF

GuidePinType_CENTRAL_PIN = _vehicle.GuidePinType_CENTRAL_PIN

GuidePinType_LATERAL_PIN = _vehicle.GuidePinType_LATERAL_PIN

OUT_SPRINGS = _vehicle.OUT_SPRINGS

OUT_SHOCKS = _vehicle.OUT_SHOCKS

OUT_CONSTRAINTS = _vehicle.OUT_CONSTRAINTS

OUT_TESTRIG = _vehicle.OUT_TESTRIG

ChassisCollisionType_NONE = _vehicle.ChassisCollisionType_NONE

ChassisCollisionType_PRIMITIVES = _vehicle.ChassisCollisionType_PRIMITIVES

ChassisCollisionType_MESH = _vehicle.ChassisCollisionType_MESH

class ChVehicleOutput(object):
    r"""Proxy of C++ chrono::vehicle::ChVehicleOutput class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ASCII = _vehicle.ChVehicleOutput_ASCII
    
    JSON = _vehicle.ChVehicleOutput_JSON
    
    HDF5 = _vehicle.ChVehicleOutput_HDF5
    
    __swig_destroy__ = _vehicle.delete_ChVehicleOutput

    def WriteTime(self, frame, time):
        r"""WriteTime(ChVehicleOutput self, int frame, double time)"""
        return _vehicle.ChVehicleOutput_WriteTime(self, frame, time)

    def WriteSection(self, name):
        r"""WriteSection(ChVehicleOutput self, std::string const & name)"""
        return _vehicle.ChVehicleOutput_WriteSection(self, name)

    def WriteBodies(self, bodies):
        r"""WriteBodies(ChVehicleOutput self, vector_ChBody bodies)"""
        return _vehicle.ChVehicleOutput_WriteBodies(self, bodies)

    def WriteAuxRefBodies(self, bodies):
        r"""WriteAuxRefBodies(ChVehicleOutput self, std::vector< std::shared_ptr< chrono::ChBodyAuxRef >,std::allocator< std::shared_ptr< chrono::ChBodyAuxRef > > > const & bodies)"""
        return _vehicle.ChVehicleOutput_WriteAuxRefBodies(self, bodies)

    def WriteMarkers(self, markers):
        r"""WriteMarkers(ChVehicleOutput self, std::vector< std::shared_ptr< ChMarker >,std::allocator< std::shared_ptr< ChMarker > > > const & markers)"""
        return _vehicle.ChVehicleOutput_WriteMarkers(self, markers)

    def WriteShafts(self, shafts):
        r"""WriteShafts(ChVehicleOutput self, std::vector< std::shared_ptr< chrono::ChShaft >,std::allocator< std::shared_ptr< chrono::ChShaft > > > const & shafts)"""
        return _vehicle.ChVehicleOutput_WriteShafts(self, shafts)

    def WriteJoints(self, joints):
        r"""WriteJoints(ChVehicleOutput self, vector_ChLink joints)"""
        return _vehicle.ChVehicleOutput_WriteJoints(self, joints)

    def WriteCouples(self, couples):
        r"""WriteCouples(ChVehicleOutput self, std::vector< std::shared_ptr< chrono::ChShaftsCouple >,std::allocator< std::shared_ptr< chrono::ChShaftsCouple > > > const & couples)"""
        return _vehicle.ChVehicleOutput_WriteCouples(self, couples)

    def WriteLinSprings(self, springs):
        r"""WriteLinSprings(ChVehicleOutput self, std::vector< std::shared_ptr< chrono::ChLinkTSDA >,std::allocator< std::shared_ptr< chrono::ChLinkTSDA > > > const & springs)"""
        return _vehicle.ChVehicleOutput_WriteLinSprings(self, springs)

    def WriteRotSprings(self, springs):
        r"""WriteRotSprings(ChVehicleOutput self, std::vector< std::shared_ptr< chrono::ChLinkRotSpringCB >,std::allocator< std::shared_ptr< chrono::ChLinkRotSpringCB > > > const & springs)"""
        return _vehicle.ChVehicleOutput_WriteRotSprings(self, springs)

    def WriteBodyLoads(self, loads):
        r"""WriteBodyLoads(ChVehicleOutput self, std::vector< std::shared_ptr< chrono::ChLoadBodyBody >,std::allocator< std::shared_ptr< chrono::ChLoadBodyBody > > > const & loads)"""
        return _vehicle.ChVehicleOutput_WriteBodyLoads(self, loads)

# Register ChVehicleOutput in _vehicle:
_vehicle.ChVehicleOutput_swigregister(ChVehicleOutput)


def SetDataPath(path):
    r"""SetDataPath(std::string const & path)"""
    return _vehicle.SetDataPath(path)

def GetDataPath():
    r"""GetDataPath() -> std::string const &"""
    return _vehicle.GetDataPath()

def GetDataFile(filename):
    r"""GetDataFile(std::string const & filename) -> std::string"""
    return _vehicle.GetDataFile(filename)
class ChPart(object):
    r"""Proxy of C++ chrono::vehicle::ChPart class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChPart

    def GetName(self):
        r"""GetName(ChPart self) -> std::string const &"""
        return _vehicle.ChPart_GetName(self)

    def SetName(self, name):
        r"""SetName(ChPart self, std::string const & name)"""
        return _vehicle.ChPart_SetName(self, name)

    def GetTemplateName(self):
        r"""GetTemplateName(ChPart self) -> std::string"""
        return _vehicle.ChPart_GetTemplateName(self)

    def SetVisualizationType(self, vis):
        r"""SetVisualizationType(ChPart self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChPart_SetVisualizationType(self, vis)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChPart self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChPart_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChPart self)"""
        return _vehicle.ChPart_RemoveVisualizationAssets(self)

    def SetContactFrictionCoefficient(self, friction_coefficient):
        r"""SetContactFrictionCoefficient(ChPart self, float friction_coefficient)"""
        return _vehicle.ChPart_SetContactFrictionCoefficient(self, friction_coefficient)

    def SetContactRestitutionCoefficient(self, restitution_coefficient):
        r"""SetContactRestitutionCoefficient(ChPart self, float restitution_coefficient)"""
        return _vehicle.ChPart_SetContactRestitutionCoefficient(self, restitution_coefficient)

    def SetContactMaterialProperties(self, young_modulus, poisson_ratio):
        r"""SetContactMaterialProperties(ChPart self, float young_modulus, float poisson_ratio)"""
        return _vehicle.ChPart_SetContactMaterialProperties(self, young_modulus, poisson_ratio)

    def SetContactMaterialCoefficients(self, kn, gn, kt, gt):
        r"""SetContactMaterialCoefficients(ChPart self, float kn, float gn, float kt, float gt)"""
        return _vehicle.ChPart_SetContactMaterialCoefficients(self, kn, gn, kt, gt)

    def GetCoefficientFriction(self):
        r"""GetCoefficientFriction(ChPart self) -> float"""
        return _vehicle.ChPart_GetCoefficientFriction(self)

    def GetCoefficientRestitution(self):
        r"""GetCoefficientRestitution(ChPart self) -> float"""
        return _vehicle.ChPart_GetCoefficientRestitution(self)

    def GetYoungModulus(self):
        r"""GetYoungModulus(ChPart self) -> float"""
        return _vehicle.ChPart_GetYoungModulus(self)

    def GetPoissonRatio(self):
        r"""GetPoissonRatio(ChPart self) -> float"""
        return _vehicle.ChPart_GetPoissonRatio(self)

    def GetKn(self):
        r"""GetKn(ChPart self) -> float"""
        return _vehicle.ChPart_GetKn(self)

    def GetKt(self):
        r"""GetKt(ChPart self) -> float"""
        return _vehicle.ChPart_GetKt(self)

    def GetGn(self):
        r"""GetGn(ChPart self) -> float"""
        return _vehicle.ChPart_GetGn(self)

    def GetGt(self):
        r"""GetGt(ChPart self) -> float"""
        return _vehicle.ChPart_GetGt(self)

    def SetOutput(self, state):
        r"""SetOutput(ChPart self, bool state)"""
        return _vehicle.ChPart_SetOutput(self, state)

    def OutputEnabled(self):
        r"""OutputEnabled(ChPart self) -> bool"""
        return _vehicle.ChPart_OutputEnabled(self)

    def ExportComponentList(self, jsonDocument):
        r"""ExportComponentList(ChPart self, rapidjson::Document & jsonDocument)"""
        return _vehicle.ChPart_ExportComponentList(self, jsonDocument)

    def Output(self, database):
        r"""Output(ChPart self, ChVehicleOutput database)"""
        return _vehicle.ChPart_Output(self, database)

    @staticmethod
    def TransformInertiaMatrix(moments, products, vehicle_rot, body_rot):
        r"""TransformInertiaMatrix(ChVectorD moments, ChVectorD products, ChMatrix33D vehicle_rot, ChMatrix33D body_rot) -> ChMatrix33D"""
        return _vehicle.ChPart_TransformInertiaMatrix(moments, products, vehicle_rot, body_rot)

# Register ChPart in _vehicle:
_vehicle.ChPart_swigregister(ChPart)

def ChPart_TransformInertiaMatrix(moments, products, vehicle_rot, body_rot):
    r"""ChPart_TransformInertiaMatrix(ChVectorD moments, ChVectorD products, ChMatrix33D vehicle_rot, ChMatrix33D body_rot) -> ChMatrix33D"""
    return _vehicle.ChPart_TransformInertiaMatrix(moments, products, vehicle_rot, body_rot)

class ChPowertrain(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChPowertrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    FORWARD = _vehicle.ChPowertrain_FORWARD
    
    NEUTRAL = _vehicle.ChPowertrain_NEUTRAL
    
    REVERSE = _vehicle.ChPowertrain_REVERSE
    
    __swig_destroy__ = _vehicle.delete_ChPowertrain

    def GetMotorSpeed(self):
        r"""GetMotorSpeed(ChPowertrain self) -> double"""
        return _vehicle.ChPowertrain_GetMotorSpeed(self)

    def GetMotorTorque(self):
        r"""GetMotorTorque(ChPowertrain self) -> double"""
        return _vehicle.ChPowertrain_GetMotorTorque(self)

    def GetTorqueConverterSlippage(self):
        r"""GetTorqueConverterSlippage(ChPowertrain self) -> double"""
        return _vehicle.ChPowertrain_GetTorqueConverterSlippage(self)

    def GetTorqueConverterInputTorque(self):
        r"""GetTorqueConverterInputTorque(ChPowertrain self) -> double"""
        return _vehicle.ChPowertrain_GetTorqueConverterInputTorque(self)

    def GetTorqueConverterOutputTorque(self):
        r"""GetTorqueConverterOutputTorque(ChPowertrain self) -> double"""
        return _vehicle.ChPowertrain_GetTorqueConverterOutputTorque(self)

    def GetCurrentTransmissionGear(self):
        r"""GetCurrentTransmissionGear(ChPowertrain self) -> int"""
        return _vehicle.ChPowertrain_GetCurrentTransmissionGear(self)

    def GetOutputTorque(self):
        r"""GetOutputTorque(ChPowertrain self) -> double"""
        return _vehicle.ChPowertrain_GetOutputTorque(self)

    def GetDriveMode(self):
        r"""GetDriveMode(ChPowertrain self) -> chrono::vehicle::ChPowertrain::DriveMode"""
        return _vehicle.ChPowertrain_GetDriveMode(self)

    def SetDriveMode(self, mmode):
        r"""SetDriveMode(ChPowertrain self, chrono::vehicle::ChPowertrain::DriveMode mmode)"""
        return _vehicle.ChPowertrain_SetDriveMode(self, mmode)

# Register ChPowertrain in _vehicle:
_vehicle.ChPowertrain_swigregister(ChPowertrain)

class ChSimplePowertrain(ChPowertrain):
    r"""Proxy of C++ chrono::vehicle::ChSimplePowertrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSimplePowertrain

    def GetTemplateName(self):
        r"""GetTemplateName(ChSimplePowertrain self) -> std::string"""
        return _vehicle.ChSimplePowertrain_GetTemplateName(self)

    def GetMotorSpeed(self):
        r"""GetMotorSpeed(ChSimplePowertrain self) -> double"""
        return _vehicle.ChSimplePowertrain_GetMotorSpeed(self)

    def GetMotorTorque(self):
        r"""GetMotorTorque(ChSimplePowertrain self) -> double"""
        return _vehicle.ChSimplePowertrain_GetMotorTorque(self)

    def GetTorqueConverterSlippage(self):
        r"""GetTorqueConverterSlippage(ChSimplePowertrain self) -> double"""
        return _vehicle.ChSimplePowertrain_GetTorqueConverterSlippage(self)

    def GetTorqueConverterInputTorque(self):
        r"""GetTorqueConverterInputTorque(ChSimplePowertrain self) -> double"""
        return _vehicle.ChSimplePowertrain_GetTorqueConverterInputTorque(self)

    def GetTorqueConverterOutputTorque(self):
        r"""GetTorqueConverterOutputTorque(ChSimplePowertrain self) -> double"""
        return _vehicle.ChSimplePowertrain_GetTorqueConverterOutputTorque(self)

    def GetCurrentTransmissionGear(self):
        r"""GetCurrentTransmissionGear(ChSimplePowertrain self) -> int"""
        return _vehicle.ChSimplePowertrain_GetCurrentTransmissionGear(self)

    def GetOutputTorque(self):
        r"""GetOutputTorque(ChSimplePowertrain self) -> double"""
        return _vehicle.ChSimplePowertrain_GetOutputTorque(self)

    def SetDriveMode(self, mmode):
        r"""SetDriveMode(ChSimplePowertrain self, chrono::vehicle::ChPowertrain::DriveMode mmode)"""
        return _vehicle.ChSimplePowertrain_SetDriveMode(self, mmode)

# Register ChSimplePowertrain in _vehicle:
_vehicle.ChSimplePowertrain_swigregister(ChSimplePowertrain)

class ChSimpleMapPowertrain(ChPowertrain):
    r"""Proxy of C++ chrono::vehicle::ChSimpleMapPowertrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSimpleMapPowertrain

    def GetTemplateName(self):
        r"""GetTemplateName(ChSimpleMapPowertrain self) -> std::string"""
        return _vehicle.ChSimpleMapPowertrain_GetTemplateName(self)

    def GetMotorSpeed(self):
        r"""GetMotorSpeed(ChSimpleMapPowertrain self) -> double"""
        return _vehicle.ChSimpleMapPowertrain_GetMotorSpeed(self)

    def GetMotorTorque(self):
        r"""GetMotorTorque(ChSimpleMapPowertrain self) -> double"""
        return _vehicle.ChSimpleMapPowertrain_GetMotorTorque(self)

    def GetTorqueConverterSlippage(self):
        r"""GetTorqueConverterSlippage(ChSimpleMapPowertrain self) -> double"""
        return _vehicle.ChSimpleMapPowertrain_GetTorqueConverterSlippage(self)

    def GetTorqueConverterInputTorque(self):
        r"""GetTorqueConverterInputTorque(ChSimpleMapPowertrain self) -> double"""
        return _vehicle.ChSimpleMapPowertrain_GetTorqueConverterInputTorque(self)

    def GetTorqueConverterOutputTorque(self):
        r"""GetTorqueConverterOutputTorque(ChSimpleMapPowertrain self) -> double"""
        return _vehicle.ChSimpleMapPowertrain_GetTorqueConverterOutputTorque(self)

    def GetCurrentTransmissionGear(self):
        r"""GetCurrentTransmissionGear(ChSimpleMapPowertrain self) -> int"""
        return _vehicle.ChSimpleMapPowertrain_GetCurrentTransmissionGear(self)

    def GetOutputTorque(self):
        r"""GetOutputTorque(ChSimpleMapPowertrain self) -> double"""
        return _vehicle.ChSimpleMapPowertrain_GetOutputTorque(self)

    def SetDriveMode(self, mode):
        r"""SetDriveMode(ChSimpleMapPowertrain self, chrono::vehicle::ChPowertrain::DriveMode mode)"""
        return _vehicle.ChSimpleMapPowertrain_SetDriveMode(self, mode)

    def EnableAutomaticTransmission(self, automatic):
        r"""EnableAutomaticTransmission(ChSimpleMapPowertrain self, bool automatic)"""
        return _vehicle.ChSimpleMapPowertrain_EnableAutomaticTransmission(self, automatic)

    def SetForwardGear(self, igear):
        r"""SetForwardGear(ChSimpleMapPowertrain self, int igear)"""
        return _vehicle.ChSimpleMapPowertrain_SetForwardGear(self, igear)

# Register ChSimpleMapPowertrain in _vehicle:
_vehicle.ChSimpleMapPowertrain_swigregister(ChSimpleMapPowertrain)

class ChSimpleCVTPowertrain(ChPowertrain):
    r"""Proxy of C++ chrono::vehicle::ChSimpleCVTPowertrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSimpleCVTPowertrain

    def GetTemplateName(self):
        r"""GetTemplateName(ChSimpleCVTPowertrain self) -> std::string"""
        return _vehicle.ChSimpleCVTPowertrain_GetTemplateName(self)

    def GetMotorSpeed(self):
        r"""GetMotorSpeed(ChSimpleCVTPowertrain self) -> double"""
        return _vehicle.ChSimpleCVTPowertrain_GetMotorSpeed(self)

    def GetMotorTorque(self):
        r"""GetMotorTorque(ChSimpleCVTPowertrain self) -> double"""
        return _vehicle.ChSimpleCVTPowertrain_GetMotorTorque(self)

    def GetTorqueConverterSlippage(self):
        r"""GetTorqueConverterSlippage(ChSimpleCVTPowertrain self) -> double"""
        return _vehicle.ChSimpleCVTPowertrain_GetTorqueConverterSlippage(self)

    def GetTorqueConverterInputTorque(self):
        r"""GetTorqueConverterInputTorque(ChSimpleCVTPowertrain self) -> double"""
        return _vehicle.ChSimpleCVTPowertrain_GetTorqueConverterInputTorque(self)

    def GetTorqueConverterOutputTorque(self):
        r"""GetTorqueConverterOutputTorque(ChSimpleCVTPowertrain self) -> double"""
        return _vehicle.ChSimpleCVTPowertrain_GetTorqueConverterOutputTorque(self)

    def GetCurrentTransmissionGear(self):
        r"""GetCurrentTransmissionGear(ChSimpleCVTPowertrain self) -> int"""
        return _vehicle.ChSimpleCVTPowertrain_GetCurrentTransmissionGear(self)

    def GetOutputTorque(self):
        r"""GetOutputTorque(ChSimpleCVTPowertrain self) -> double"""
        return _vehicle.ChSimpleCVTPowertrain_GetOutputTorque(self)

    def SetDriveMode(self, mmode):
        r"""SetDriveMode(ChSimpleCVTPowertrain self, chrono::vehicle::ChPowertrain::DriveMode mmode)"""
        return _vehicle.ChSimpleCVTPowertrain_SetDriveMode(self, mmode)

# Register ChSimpleCVTPowertrain in _vehicle:
_vehicle.ChSimpleCVTPowertrain_swigregister(ChSimpleCVTPowertrain)

class ChShaftsPowertrain(ChPowertrain):
    r"""Proxy of C++ chrono::vehicle::ChShaftsPowertrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChShaftsPowertrain

    def GetTemplateName(self):
        r"""GetTemplateName(ChShaftsPowertrain self) -> std::string"""
        return _vehicle.ChShaftsPowertrain_GetTemplateName(self)

    def GetMotorSpeed(self):
        r"""GetMotorSpeed(ChShaftsPowertrain self) -> double"""
        return _vehicle.ChShaftsPowertrain_GetMotorSpeed(self)

    def GetMotorTorque(self):
        r"""GetMotorTorque(ChShaftsPowertrain self) -> double"""
        return _vehicle.ChShaftsPowertrain_GetMotorTorque(self)

    def GetTorqueConverterSlippage(self):
        r"""GetTorqueConverterSlippage(ChShaftsPowertrain self) -> double"""
        return _vehicle.ChShaftsPowertrain_GetTorqueConverterSlippage(self)

    def GetTorqueConverterInputTorque(self):
        r"""GetTorqueConverterInputTorque(ChShaftsPowertrain self) -> double"""
        return _vehicle.ChShaftsPowertrain_GetTorqueConverterInputTorque(self)

    def GetTorqueConverterOutputTorque(self):
        r"""GetTorqueConverterOutputTorque(ChShaftsPowertrain self) -> double"""
        return _vehicle.ChShaftsPowertrain_GetTorqueConverterOutputTorque(self)

    def GetCurrentTransmissionGear(self):
        r"""GetCurrentTransmissionGear(ChShaftsPowertrain self) -> int"""
        return _vehicle.ChShaftsPowertrain_GetCurrentTransmissionGear(self)

    def GetOutputTorque(self):
        r"""GetOutputTorque(ChShaftsPowertrain self) -> double"""
        return _vehicle.ChShaftsPowertrain_GetOutputTorque(self)

    def SetDriveMode(self, mmode):
        r"""SetDriveMode(ChShaftsPowertrain self, chrono::vehicle::ChPowertrain::DriveMode mmode)"""
        return _vehicle.ChShaftsPowertrain_SetDriveMode(self, mmode)

    def SetSelectedGear(self, igear):
        r"""SetSelectedGear(ChShaftsPowertrain self, int igear)"""
        return _vehicle.ChShaftsPowertrain_SetSelectedGear(self, igear)

    def SetGearShiftLatency(self, ml):
        r"""SetGearShiftLatency(ChShaftsPowertrain self, double ml)"""
        return _vehicle.ChShaftsPowertrain_SetGearShiftLatency(self, ml)

    def GetGearShiftLatency(self, ml):
        r"""GetGearShiftLatency(ChShaftsPowertrain self, double ml) -> double"""
        return _vehicle.ChShaftsPowertrain_GetGearShiftLatency(self, ml)

# Register ChShaftsPowertrain in _vehicle:
_vehicle.ChShaftsPowertrain_swigregister(ChShaftsPowertrain)

class SimplePowertrain(ChSimplePowertrain):
    r"""Proxy of C++ chrono::vehicle::SimplePowertrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SimplePowertrain self, std::string const & filename) -> SimplePowertrain
        __init__(SimplePowertrain self, rapidjson::Document const & d) -> SimplePowertrain
        """
        _vehicle.SimplePowertrain_swiginit(self, _vehicle.new_SimplePowertrain(*args))
    __swig_destroy__ = _vehicle.delete_SimplePowertrain

    def GetForwardGearRatio(self):
        r"""GetForwardGearRatio(SimplePowertrain self) -> double"""
        return _vehicle.SimplePowertrain_GetForwardGearRatio(self)

    def GetReverseGearRatio(self):
        r"""GetReverseGearRatio(SimplePowertrain self) -> double"""
        return _vehicle.SimplePowertrain_GetReverseGearRatio(self)

    def GetMaxTorque(self):
        r"""GetMaxTorque(SimplePowertrain self) -> double"""
        return _vehicle.SimplePowertrain_GetMaxTorque(self)

    def GetMaxSpeed(self):
        r"""GetMaxSpeed(SimplePowertrain self) -> double"""
        return _vehicle.SimplePowertrain_GetMaxSpeed(self)

# Register SimplePowertrain in _vehicle:
_vehicle.SimplePowertrain_swigregister(SimplePowertrain)

class SimpleMapPowertrain(ChSimpleMapPowertrain):
    r"""Proxy of C++ chrono::vehicle::SimpleMapPowertrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SimpleMapPowertrain self, std::string const & filename) -> SimpleMapPowertrain
        __init__(SimpleMapPowertrain self, rapidjson::Document const & d) -> SimpleMapPowertrain
        """
        _vehicle.SimpleMapPowertrain_swiginit(self, _vehicle.new_SimpleMapPowertrain(*args))
    __swig_destroy__ = _vehicle.delete_SimpleMapPowertrain

    def GetMaxEngineSpeed(self):
        r"""GetMaxEngineSpeed(SimpleMapPowertrain self) -> double"""
        return _vehicle.SimpleMapPowertrain_GetMaxEngineSpeed(self)

    def SetGearRatios(self, fwd_gear_ratios, reverse_gear_ratio):
        r"""SetGearRatios(SimpleMapPowertrain self, std::vector< double,std::allocator< double > > & fwd_gear_ratios, double & reverse_gear_ratio)"""
        return _vehicle.SimpleMapPowertrain_SetGearRatios(self, fwd_gear_ratios, reverse_gear_ratio)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(SimpleMapPowertrain self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.SimpleMapPowertrain_SetShiftPoints(self, shift_bands)

    def SetEngineTorqueMaps(self, map0, mapF):
        r"""SetEngineTorqueMaps(SimpleMapPowertrain self, ChFunction_Recorder & map0, ChFunction_Recorder & mapF)"""
        return _vehicle.SimpleMapPowertrain_SetEngineTorqueMaps(self, map0, mapF)

# Register SimpleMapPowertrain in _vehicle:
_vehicle.SimpleMapPowertrain_swigregister(SimpleMapPowertrain)

class SimpleCVTPowertrain(ChSimpleCVTPowertrain):
    r"""Proxy of C++ chrono::vehicle::SimpleCVTPowertrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SimpleCVTPowertrain self, std::string const & filename) -> SimpleCVTPowertrain
        __init__(SimpleCVTPowertrain self, rapidjson::Document const & d) -> SimpleCVTPowertrain
        """
        _vehicle.SimpleCVTPowertrain_swiginit(self, _vehicle.new_SimpleCVTPowertrain(*args))
    __swig_destroy__ = _vehicle.delete_SimpleCVTPowertrain

    def GetForwardGearRatio(self):
        r"""GetForwardGearRatio(SimpleCVTPowertrain self) -> double"""
        return _vehicle.SimpleCVTPowertrain_GetForwardGearRatio(self)

    def GetReverseGearRatio(self):
        r"""GetReverseGearRatio(SimpleCVTPowertrain self) -> double"""
        return _vehicle.SimpleCVTPowertrain_GetReverseGearRatio(self)

    def GetMaxTorque(self):
        r"""GetMaxTorque(SimpleCVTPowertrain self) -> double"""
        return _vehicle.SimpleCVTPowertrain_GetMaxTorque(self)

    def GetMaxPower(self):
        r"""GetMaxPower(SimpleCVTPowertrain self) -> double"""
        return _vehicle.SimpleCVTPowertrain_GetMaxPower(self)

    def GetCriticalSpeed(self):
        r"""GetCriticalSpeed(SimpleCVTPowertrain self) -> double"""
        return _vehicle.SimpleCVTPowertrain_GetCriticalSpeed(self)

# Register SimpleCVTPowertrain in _vehicle:
_vehicle.SimpleCVTPowertrain_swigregister(SimpleCVTPowertrain)

class ShaftsPowertrain(ChShaftsPowertrain):
    r"""Proxy of C++ chrono::vehicle::ShaftsPowertrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ShaftsPowertrain self, std::string const & filename) -> ShaftsPowertrain
        __init__(ShaftsPowertrain self, rapidjson::Document const & d) -> ShaftsPowertrain
        """
        _vehicle.ShaftsPowertrain_swiginit(self, _vehicle.new_ShaftsPowertrain(*args))
    __swig_destroy__ = _vehicle.delete_ShaftsPowertrain

    def SetGearRatios(self, gear_ratios):
        r"""SetGearRatios(ShaftsPowertrain self, std::vector< double,std::allocator< double > > & gear_ratios)"""
        return _vehicle.ShaftsPowertrain_SetGearRatios(self, gear_ratios)

    def GetMotorBlockInertia(self):
        r"""GetMotorBlockInertia(ShaftsPowertrain self) -> double"""
        return _vehicle.ShaftsPowertrain_GetMotorBlockInertia(self)

    def GetCrankshaftInertia(self):
        r"""GetCrankshaftInertia(ShaftsPowertrain self) -> double"""
        return _vehicle.ShaftsPowertrain_GetCrankshaftInertia(self)

    def GetIngearShaftInertia(self):
        r"""GetIngearShaftInertia(ShaftsPowertrain self) -> double"""
        return _vehicle.ShaftsPowertrain_GetIngearShaftInertia(self)

    def GetUpshiftRPM(self):
        r"""GetUpshiftRPM(ShaftsPowertrain self) -> double"""
        return _vehicle.ShaftsPowertrain_GetUpshiftRPM(self)

    def GetDownshiftRPM(self):
        r"""GetDownshiftRPM(ShaftsPowertrain self) -> double"""
        return _vehicle.ShaftsPowertrain_GetDownshiftRPM(self)

    def SetEngineTorqueMap(self, map):
        r"""SetEngineTorqueMap(ShaftsPowertrain self, std::shared_ptr< ChFunction_Recorder > & map)"""
        return _vehicle.ShaftsPowertrain_SetEngineTorqueMap(self, map)

    def SetEngineLossesMap(self, map):
        r"""SetEngineLossesMap(ShaftsPowertrain self, std::shared_ptr< ChFunction_Recorder > & map)"""
        return _vehicle.ShaftsPowertrain_SetEngineLossesMap(self, map)

    def SetTorqueConverterCapacityFactorMap(self, map):
        r"""SetTorqueConverterCapacityFactorMap(ShaftsPowertrain self, std::shared_ptr< ChFunction_Recorder > & map)"""
        return _vehicle.ShaftsPowertrain_SetTorqueConverterCapacityFactorMap(self, map)

    def SetTorqeConverterTorqueRatioMap(self, map):
        r"""SetTorqeConverterTorqueRatioMap(ShaftsPowertrain self, std::shared_ptr< ChFunction_Recorder > & map)"""
        return _vehicle.ShaftsPowertrain_SetTorqeConverterTorqueRatioMap(self, map)

# Register ShaftsPowertrain in _vehicle:
_vehicle.ShaftsPowertrain_swigregister(ShaftsPowertrain)

class Generic_SimplePowertrain(ChSimplePowertrain):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_SimplePowertrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_SimplePowertrain self, std::string const & name) -> Generic_SimplePowertrain"""
        _vehicle.Generic_SimplePowertrain_swiginit(self, _vehicle.new_Generic_SimplePowertrain(name))
    __swig_destroy__ = _vehicle.delete_Generic_SimplePowertrain

    def GetForwardGearRatio(self):
        r"""GetForwardGearRatio(Generic_SimplePowertrain self) -> double"""
        return _vehicle.Generic_SimplePowertrain_GetForwardGearRatio(self)

    def GetReverseGearRatio(self):
        r"""GetReverseGearRatio(Generic_SimplePowertrain self) -> double"""
        return _vehicle.Generic_SimplePowertrain_GetReverseGearRatio(self)

    def GetMaxTorque(self):
        r"""GetMaxTorque(Generic_SimplePowertrain self) -> double"""
        return _vehicle.Generic_SimplePowertrain_GetMaxTorque(self)

    def GetMaxSpeed(self):
        r"""GetMaxSpeed(Generic_SimplePowertrain self) -> double"""
        return _vehicle.Generic_SimplePowertrain_GetMaxSpeed(self)

# Register Generic_SimplePowertrain in _vehicle:
_vehicle.Generic_SimplePowertrain_swigregister(Generic_SimplePowertrain)

class Generic_SimpleMapPowertrain(ChPowertrain):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_SimpleMapPowertrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_SimpleMapPowertrain self, std::string const & name) -> Generic_SimpleMapPowertrain"""
        _vehicle.Generic_SimpleMapPowertrain_swiginit(self, _vehicle.new_Generic_SimpleMapPowertrain(name))
    __swig_destroy__ = _vehicle.delete_Generic_SimpleMapPowertrain

    def GetTemplateName(self):
        r"""GetTemplateName(Generic_SimpleMapPowertrain self) -> std::string"""
        return _vehicle.Generic_SimpleMapPowertrain_GetTemplateName(self)

    def GetMotorSpeed(self):
        r"""GetMotorSpeed(Generic_SimpleMapPowertrain self) -> double"""
        return _vehicle.Generic_SimpleMapPowertrain_GetMotorSpeed(self)

    def GetMotorTorque(self):
        r"""GetMotorTorque(Generic_SimpleMapPowertrain self) -> double"""
        return _vehicle.Generic_SimpleMapPowertrain_GetMotorTorque(self)

    def GetTorqueConverterSlippage(self):
        r"""GetTorqueConverterSlippage(Generic_SimpleMapPowertrain self) -> double"""
        return _vehicle.Generic_SimpleMapPowertrain_GetTorqueConverterSlippage(self)

    def GetTorqueConverterInputTorque(self):
        r"""GetTorqueConverterInputTorque(Generic_SimpleMapPowertrain self) -> double"""
        return _vehicle.Generic_SimpleMapPowertrain_GetTorqueConverterInputTorque(self)

    def GetTorqueConverterOutputTorque(self):
        r"""GetTorqueConverterOutputTorque(Generic_SimpleMapPowertrain self) -> double"""
        return _vehicle.Generic_SimpleMapPowertrain_GetTorqueConverterOutputTorque(self)

    def GetCurrentTransmissionGear(self):
        r"""GetCurrentTransmissionGear(Generic_SimpleMapPowertrain self) -> int"""
        return _vehicle.Generic_SimpleMapPowertrain_GetCurrentTransmissionGear(self)

    def GetOutputTorque(self):
        r"""GetOutputTorque(Generic_SimpleMapPowertrain self) -> double"""
        return _vehicle.Generic_SimpleMapPowertrain_GetOutputTorque(self)

    def SetDriveMode(self, mmode):
        r"""SetDriveMode(Generic_SimpleMapPowertrain self, chrono::vehicle::ChPowertrain::DriveMode mmode)"""
        return _vehicle.Generic_SimpleMapPowertrain_SetDriveMode(self, mmode)

    def SetSelectedGear(self, igear):
        r"""SetSelectedGear(Generic_SimpleMapPowertrain self, int igear)"""
        return _vehicle.Generic_SimpleMapPowertrain_SetSelectedGear(self, igear)

# Register Generic_SimpleMapPowertrain in _vehicle:
_vehicle.Generic_SimpleMapPowertrain_swigregister(Generic_SimpleMapPowertrain)

class HMMWV_SimplePowertrain(ChSimplePowertrain):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_SimplePowertrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_SimplePowertrain self, std::string const & name) -> HMMWV_SimplePowertrain"""
        _vehicle.HMMWV_SimplePowertrain_swiginit(self, _vehicle.new_HMMWV_SimplePowertrain(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_SimplePowertrain

    def GetForwardGearRatio(self):
        r"""GetForwardGearRatio(HMMWV_SimplePowertrain self) -> double"""
        return _vehicle.HMMWV_SimplePowertrain_GetForwardGearRatio(self)

    def GetReverseGearRatio(self):
        r"""GetReverseGearRatio(HMMWV_SimplePowertrain self) -> double"""
        return _vehicle.HMMWV_SimplePowertrain_GetReverseGearRatio(self)

    def GetMaxTorque(self):
        r"""GetMaxTorque(HMMWV_SimplePowertrain self) -> double"""
        return _vehicle.HMMWV_SimplePowertrain_GetMaxTorque(self)

    def GetMaxSpeed(self):
        r"""GetMaxSpeed(HMMWV_SimplePowertrain self) -> double"""
        return _vehicle.HMMWV_SimplePowertrain_GetMaxSpeed(self)

# Register HMMWV_SimplePowertrain in _vehicle:
_vehicle.HMMWV_SimplePowertrain_swigregister(HMMWV_SimplePowertrain)

class HMMWV_SimpleMapPowertrain(ChSimpleMapPowertrain):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_SimpleMapPowertrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_SimpleMapPowertrain self, std::string const & name) -> HMMWV_SimpleMapPowertrain"""
        _vehicle.HMMWV_SimpleMapPowertrain_swiginit(self, _vehicle.new_HMMWV_SimpleMapPowertrain(name))

    def GetMaxEngineSpeed(self):
        r"""GetMaxEngineSpeed(HMMWV_SimpleMapPowertrain self) -> double"""
        return _vehicle.HMMWV_SimpleMapPowertrain_GetMaxEngineSpeed(self)

    def SetEngineTorqueMaps(self, map0, mapF):
        r"""SetEngineTorqueMaps(HMMWV_SimpleMapPowertrain self, ChFunction_Recorder & map0, ChFunction_Recorder & mapF)"""
        return _vehicle.HMMWV_SimpleMapPowertrain_SetEngineTorqueMaps(self, map0, mapF)

    def SetGearRatios(self, fwd_gear_ratios, reverse_gear_ratio):
        r"""SetGearRatios(HMMWV_SimpleMapPowertrain self, std::vector< double,std::allocator< double > > & fwd_gear_ratios, double & reverse_gear_ratio)"""
        return _vehicle.HMMWV_SimpleMapPowertrain_SetGearRatios(self, fwd_gear_ratios, reverse_gear_ratio)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(HMMWV_SimpleMapPowertrain self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.HMMWV_SimpleMapPowertrain_SetShiftPoints(self, shift_bands)
    __swig_destroy__ = _vehicle.delete_HMMWV_SimpleMapPowertrain

# Register HMMWV_SimpleMapPowertrain in _vehicle:
_vehicle.HMMWV_SimpleMapPowertrain_swigregister(HMMWV_SimpleMapPowertrain)

class Sedan_SimpleMapPowertrain(ChSimpleMapPowertrain):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan_SimpleMapPowertrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Sedan_SimpleMapPowertrain self, std::string const & name) -> Sedan_SimpleMapPowertrain"""
        _vehicle.Sedan_SimpleMapPowertrain_swiginit(self, _vehicle.new_Sedan_SimpleMapPowertrain(name))

    def GetMaxEngineSpeed(self):
        r"""GetMaxEngineSpeed(Sedan_SimpleMapPowertrain self) -> double"""
        return _vehicle.Sedan_SimpleMapPowertrain_GetMaxEngineSpeed(self)

    def SetEngineTorqueMaps(self, map0, mapF):
        r"""SetEngineTorqueMaps(Sedan_SimpleMapPowertrain self, ChFunction_Recorder & map0, ChFunction_Recorder & mapF)"""
        return _vehicle.Sedan_SimpleMapPowertrain_SetEngineTorqueMaps(self, map0, mapF)

    def SetGearRatios(self, fwd_gear_ratios, reverse_gear_ratio):
        r"""SetGearRatios(Sedan_SimpleMapPowertrain self, std::vector< double,std::allocator< double > > & fwd_gear_ratios, double & reverse_gear_ratio)"""
        return _vehicle.Sedan_SimpleMapPowertrain_SetGearRatios(self, fwd_gear_ratios, reverse_gear_ratio)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(Sedan_SimpleMapPowertrain self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.Sedan_SimpleMapPowertrain_SetShiftPoints(self, shift_bands)
    __swig_destroy__ = _vehicle.delete_Sedan_SimpleMapPowertrain

# Register Sedan_SimpleMapPowertrain in _vehicle:
_vehicle.Sedan_SimpleMapPowertrain_swigregister(Sedan_SimpleMapPowertrain)

class CityBus_SimpleMapPowertrain(ChSimpleMapPowertrain):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_SimpleMapPowertrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_SimpleMapPowertrain self, std::string const & name) -> CityBus_SimpleMapPowertrain"""
        _vehicle.CityBus_SimpleMapPowertrain_swiginit(self, _vehicle.new_CityBus_SimpleMapPowertrain(name))

    def GetMaxEngineSpeed(self):
        r"""GetMaxEngineSpeed(CityBus_SimpleMapPowertrain self) -> double"""
        return _vehicle.CityBus_SimpleMapPowertrain_GetMaxEngineSpeed(self)

    def SetEngineTorqueMaps(self, map0, mapF):
        r"""SetEngineTorqueMaps(CityBus_SimpleMapPowertrain self, ChFunction_Recorder & map0, ChFunction_Recorder & mapF)"""
        return _vehicle.CityBus_SimpleMapPowertrain_SetEngineTorqueMaps(self, map0, mapF)

    def SetGearRatios(self, fwd_gear_ratios, reverse_gear_ratio):
        r"""SetGearRatios(CityBus_SimpleMapPowertrain self, std::vector< double,std::allocator< double > > & fwd_gear_ratios, double & reverse_gear_ratio)"""
        return _vehicle.CityBus_SimpleMapPowertrain_SetGearRatios(self, fwd_gear_ratios, reverse_gear_ratio)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(CityBus_SimpleMapPowertrain self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.CityBus_SimpleMapPowertrain_SetShiftPoints(self, shift_bands)
    __swig_destroy__ = _vehicle.delete_CityBus_SimpleMapPowertrain

# Register CityBus_SimpleMapPowertrain in _vehicle:
_vehicle.CityBus_SimpleMapPowertrain_swigregister(CityBus_SimpleMapPowertrain)

class MAN_5t_SimpleMapPowertrain(ChSimpleMapPowertrain):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_SimpleMapPowertrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_5t_SimpleMapPowertrain self, std::string const & name) -> MAN_5t_SimpleMapPowertrain"""
        _vehicle.MAN_5t_SimpleMapPowertrain_swiginit(self, _vehicle.new_MAN_5t_SimpleMapPowertrain(name))

    def GetMaxEngineSpeed(self):
        r"""GetMaxEngineSpeed(MAN_5t_SimpleMapPowertrain self) -> double"""
        return _vehicle.MAN_5t_SimpleMapPowertrain_GetMaxEngineSpeed(self)

    def SetEngineTorqueMaps(self, map0, mapF):
        r"""SetEngineTorqueMaps(MAN_5t_SimpleMapPowertrain self, ChFunction_Recorder & map0, ChFunction_Recorder & mapF)"""
        return _vehicle.MAN_5t_SimpleMapPowertrain_SetEngineTorqueMaps(self, map0, mapF)

    def SetGearRatios(self, fwd_gear_ratios, reverse_gear_ratio):
        r"""SetGearRatios(MAN_5t_SimpleMapPowertrain self, std::vector< double,std::allocator< double > > & fwd_gear_ratios, double & reverse_gear_ratio)"""
        return _vehicle.MAN_5t_SimpleMapPowertrain_SetGearRatios(self, fwd_gear_ratios, reverse_gear_ratio)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(MAN_5t_SimpleMapPowertrain self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.MAN_5t_SimpleMapPowertrain_SetShiftPoints(self, shift_bands)
    __swig_destroy__ = _vehicle.delete_MAN_5t_SimpleMapPowertrain

# Register MAN_5t_SimpleMapPowertrain in _vehicle:
_vehicle.MAN_5t_SimpleMapPowertrain_swigregister(MAN_5t_SimpleMapPowertrain)

class MAN_5t_SimpleCVTPowertrain(ChSimpleCVTPowertrain):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_SimpleCVTPowertrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, maxSpeed):
        r"""__init__(MAN_5t_SimpleCVTPowertrain self, std::string const & name, double maxSpeed) -> MAN_5t_SimpleCVTPowertrain"""
        _vehicle.MAN_5t_SimpleCVTPowertrain_swiginit(self, _vehicle.new_MAN_5t_SimpleCVTPowertrain(name, maxSpeed))
    __swig_destroy__ = _vehicle.delete_MAN_5t_SimpleCVTPowertrain

    def GetForwardGearRatio(self):
        r"""GetForwardGearRatio(MAN_5t_SimpleCVTPowertrain self) -> double"""
        return _vehicle.MAN_5t_SimpleCVTPowertrain_GetForwardGearRatio(self)

    def GetReverseGearRatio(self):
        r"""GetReverseGearRatio(MAN_5t_SimpleCVTPowertrain self) -> double"""
        return _vehicle.MAN_5t_SimpleCVTPowertrain_GetReverseGearRatio(self)

    def GetMaxTorque(self):
        r"""GetMaxTorque(MAN_5t_SimpleCVTPowertrain self) -> double"""
        return _vehicle.MAN_5t_SimpleCVTPowertrain_GetMaxTorque(self)

    def GetMaxPower(self):
        r"""GetMaxPower(MAN_5t_SimpleCVTPowertrain self) -> double"""
        return _vehicle.MAN_5t_SimpleCVTPowertrain_GetMaxPower(self)

    def GetCriticalSpeed(self):
        r"""GetCriticalSpeed(MAN_5t_SimpleCVTPowertrain self) -> double"""
        return _vehicle.MAN_5t_SimpleCVTPowertrain_GetCriticalSpeed(self)

# Register MAN_5t_SimpleCVTPowertrain in _vehicle:
_vehicle.MAN_5t_SimpleCVTPowertrain_swigregister(MAN_5t_SimpleCVTPowertrain)

class MAN_7t_SimpleMapPowertrain(ChSimpleMapPowertrain):
    r"""Proxy of C++ chrono::vehicle::man::MAN_7t_SimpleMapPowertrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_7t_SimpleMapPowertrain self, std::string const & name) -> MAN_7t_SimpleMapPowertrain"""
        _vehicle.MAN_7t_SimpleMapPowertrain_swiginit(self, _vehicle.new_MAN_7t_SimpleMapPowertrain(name))

    def GetMaxEngineSpeed(self):
        r"""GetMaxEngineSpeed(MAN_7t_SimpleMapPowertrain self) -> double"""
        return _vehicle.MAN_7t_SimpleMapPowertrain_GetMaxEngineSpeed(self)

    def SetEngineTorqueMaps(self, map0, mapF):
        r"""SetEngineTorqueMaps(MAN_7t_SimpleMapPowertrain self, ChFunction_Recorder & map0, ChFunction_Recorder & mapF)"""
        return _vehicle.MAN_7t_SimpleMapPowertrain_SetEngineTorqueMaps(self, map0, mapF)

    def SetGearRatios(self, fwd_gear_ratios, reverse_gear_ratio):
        r"""SetGearRatios(MAN_7t_SimpleMapPowertrain self, std::vector< double,std::allocator< double > > & fwd_gear_ratios, double & reverse_gear_ratio)"""
        return _vehicle.MAN_7t_SimpleMapPowertrain_SetGearRatios(self, fwd_gear_ratios, reverse_gear_ratio)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(MAN_7t_SimpleMapPowertrain self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.MAN_7t_SimpleMapPowertrain_SetShiftPoints(self, shift_bands)
    __swig_destroy__ = _vehicle.delete_MAN_7t_SimpleMapPowertrain

# Register MAN_7t_SimpleMapPowertrain in _vehicle:
_vehicle.MAN_7t_SimpleMapPowertrain_swigregister(MAN_7t_SimpleMapPowertrain)

class MAN_7t_SimpleCVTPowertrain(ChSimpleCVTPowertrain):
    r"""Proxy of C++ chrono::vehicle::man::MAN_7t_SimpleCVTPowertrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, maxSpeed):
        r"""__init__(MAN_7t_SimpleCVTPowertrain self, std::string const & name, double maxSpeed) -> MAN_7t_SimpleCVTPowertrain"""
        _vehicle.MAN_7t_SimpleCVTPowertrain_swiginit(self, _vehicle.new_MAN_7t_SimpleCVTPowertrain(name, maxSpeed))
    __swig_destroy__ = _vehicle.delete_MAN_7t_SimpleCVTPowertrain

    def GetForwardGearRatio(self):
        r"""GetForwardGearRatio(MAN_7t_SimpleCVTPowertrain self) -> double"""
        return _vehicle.MAN_7t_SimpleCVTPowertrain_GetForwardGearRatio(self)

    def GetReverseGearRatio(self):
        r"""GetReverseGearRatio(MAN_7t_SimpleCVTPowertrain self) -> double"""
        return _vehicle.MAN_7t_SimpleCVTPowertrain_GetReverseGearRatio(self)

    def GetMaxTorque(self):
        r"""GetMaxTorque(MAN_7t_SimpleCVTPowertrain self) -> double"""
        return _vehicle.MAN_7t_SimpleCVTPowertrain_GetMaxTorque(self)

    def GetMaxPower(self):
        r"""GetMaxPower(MAN_7t_SimpleCVTPowertrain self) -> double"""
        return _vehicle.MAN_7t_SimpleCVTPowertrain_GetMaxPower(self)

    def GetCriticalSpeed(self):
        r"""GetCriticalSpeed(MAN_7t_SimpleCVTPowertrain self) -> double"""
        return _vehicle.MAN_7t_SimpleCVTPowertrain_GetCriticalSpeed(self)

# Register MAN_7t_SimpleCVTPowertrain in _vehicle:
_vehicle.MAN_7t_SimpleCVTPowertrain_swigregister(MAN_7t_SimpleCVTPowertrain)

class UAZBUS_SimpleMapPowertrain(ChSimpleMapPowertrain):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_SimpleMapPowertrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_SimpleMapPowertrain self, std::string const & name) -> UAZBUS_SimpleMapPowertrain"""
        _vehicle.UAZBUS_SimpleMapPowertrain_swiginit(self, _vehicle.new_UAZBUS_SimpleMapPowertrain(name))

    def GetMaxEngineSpeed(self):
        r"""GetMaxEngineSpeed(UAZBUS_SimpleMapPowertrain self) -> double"""
        return _vehicle.UAZBUS_SimpleMapPowertrain_GetMaxEngineSpeed(self)

    def SetEngineTorqueMaps(self, map0, mapF):
        r"""SetEngineTorqueMaps(UAZBUS_SimpleMapPowertrain self, ChFunction_Recorder & map0, ChFunction_Recorder & mapF)"""
        return _vehicle.UAZBUS_SimpleMapPowertrain_SetEngineTorqueMaps(self, map0, mapF)

    def SetGearRatios(self, fwd_gear_ratios, reverse_gear_ratio):
        r"""SetGearRatios(UAZBUS_SimpleMapPowertrain self, std::vector< double,std::allocator< double > > & fwd_gear_ratios, double & reverse_gear_ratio)"""
        return _vehicle.UAZBUS_SimpleMapPowertrain_SetGearRatios(self, fwd_gear_ratios, reverse_gear_ratio)

    def SetShiftPoints(self, shift_bands):
        r"""SetShiftPoints(UAZBUS_SimpleMapPowertrain self, std::vector< std::pair< double,double >,std::allocator< std::pair< double,double > > > & shift_bands)"""
        return _vehicle.UAZBUS_SimpleMapPowertrain_SetShiftPoints(self, shift_bands)
    __swig_destroy__ = _vehicle.delete_UAZBUS_SimpleMapPowertrain

# Register UAZBUS_SimpleMapPowertrain in _vehicle:
_vehicle.UAZBUS_SimpleMapPowertrain_swigregister(UAZBUS_SimpleMapPowertrain)


def CastToSimplePowertrain(in_obj):
    r"""CastToSimplePowertrain(std::shared_ptr< chrono::vehicle::ChPowertrain > in_obj) -> std::shared_ptr< chrono::vehicle::SimplePowertrain >"""
    return _vehicle.CastToSimplePowertrain(in_obj)

def CastToSimpleMapPowertrain(in_obj):
    r"""CastToSimpleMapPowertrain(std::shared_ptr< chrono::vehicle::ChPowertrain > in_obj) -> std::shared_ptr< chrono::vehicle::SimpleMapPowertrain >"""
    return _vehicle.CastToSimpleMapPowertrain(in_obj)

def CastToSimpleCVTPowertrain(in_obj):
    r"""CastToSimpleCVTPowertrain(std::shared_ptr< chrono::vehicle::ChPowertrain > in_obj) -> std::shared_ptr< chrono::vehicle::SimpleCVTPowertrain >"""
    return _vehicle.CastToSimpleCVTPowertrain(in_obj)

def CastToShaftsPowertrain(in_obj):
    r"""CastToShaftsPowertrain(std::shared_ptr< chrono::vehicle::ChPowertrain > in_obj) -> std::shared_ptr< chrono::vehicle::ShaftsPowertrain >"""
    return _vehicle.CastToShaftsPowertrain(in_obj)
class ChChassis(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChChassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChChassis

    def GetMass(self):
        r"""GetMass(ChChassis self) -> double"""
        return _vehicle.ChChassis_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(ChChassis self) -> ChMatrix33D"""
        return _vehicle.ChChassis_GetInertia(self)

    def GetLocalPosCOM(self):
        r"""GetLocalPosCOM(ChChassis self) -> ChVectorD"""
        return _vehicle.ChChassis_GetLocalPosCOM(self)

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(ChChassis self) -> ChCoordsysD"""
        return _vehicle.ChChassis_GetLocalDriverCoordsys(self)

    def GetBody(self):
        r"""GetBody(ChChassis self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _vehicle.ChChassis_GetBody(self)

    def GetPos(self):
        r"""GetPos(ChChassis self) -> ChVectorD"""
        return _vehicle.ChChassis_GetPos(self)

    def GetRot(self):
        r"""GetRot(ChChassis self) -> ChQuaternionD"""
        return _vehicle.ChChassis_GetRot(self)

    def GetCOMPos(self):
        r"""GetCOMPos(ChChassis self) -> ChVectorD"""
        return _vehicle.ChChassis_GetCOMPos(self)

    def GetCOMRot(self):
        r"""GetCOMRot(ChChassis self) -> ChQuaternionD"""
        return _vehicle.ChChassis_GetCOMRot(self)

    def GetDriverPos(self):
        r"""GetDriverPos(ChChassis self) -> ChVectorD"""
        return _vehicle.ChChassis_GetDriverPos(self)

    def GetSpeed(self):
        r"""GetSpeed(ChChassis self) -> double"""
        return _vehicle.ChChassis_GetSpeed(self)

    def GetCOMSpeed(self):
        r"""GetCOMSpeed(ChChassis self) -> double"""
        return _vehicle.ChChassis_GetCOMSpeed(self)

    def GetPointLocation(self, locpos):
        r"""GetPointLocation(ChChassis self, ChVectorD locpos) -> ChVectorD"""
        return _vehicle.ChChassis_GetPointLocation(self, locpos)

    def GetPointVelocity(self, locpos):
        r"""GetPointVelocity(ChChassis self, ChVectorD locpos) -> ChVectorD"""
        return _vehicle.ChChassis_GetPointVelocity(self, locpos)

    def GetPointAcceleration(self, locpos):
        r"""GetPointAcceleration(ChChassis self, ChVectorD locpos) -> ChVectorD"""
        return _vehicle.ChChassis_GetPointAcceleration(self, locpos)

    def Initialize(self, system, chassisPos, chassisFwdVel, collision_family=0):
        r"""Initialize(ChChassis self, ChSystem system, ChCoordsysD chassisPos, double chassisFwdVel, int collision_family=0)"""
        return _vehicle.ChChassis_Initialize(self, system, chassisPos, chassisFwdVel, collision_family)

    def SetCollide(self, state):
        r"""SetCollide(ChChassis self, bool state)"""
        return _vehicle.ChChassis_SetCollide(self, state)

    def SetFixed(self, val):
        r"""SetFixed(ChChassis self, bool val)"""
        return _vehicle.ChChassis_SetFixed(self, val)

    def IsFixed(self):
        r"""IsFixed(ChChassis self) -> bool"""
        return _vehicle.ChChassis_IsFixed(self)

    def AddMarker(self, name, pos):
        r"""AddMarker(ChChassis self, std::string const & name, ChCoordsysD pos)"""
        return _vehicle.ChChassis_AddMarker(self, name, pos)

    def GetMarkers(self):
        r"""GetMarkers(ChChassis self) -> std::vector< std::shared_ptr< ChMarker >,std::allocator< std::shared_ptr< ChMarker > > > const &"""
        return _vehicle.ChChassis_GetMarkers(self)

    def SetAerodynamicDrag(self, Cd, area, air_density):
        r"""SetAerodynamicDrag(ChChassis self, double Cd, double area, double air_density)"""
        return _vehicle.ChChassis_SetAerodynamicDrag(self, Cd, area, air_density)

    def Synchronize(self, time):
        r"""Synchronize(ChChassis self, double time)"""
        return _vehicle.ChChassis_Synchronize(self, time)

# Register ChChassis in _vehicle:
_vehicle.ChChassis_swigregister(ChChassis)

class ChRigidChassis(ChChassis):
    r"""Proxy of C++ chrono::vehicle::ChRigidChassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChRigidChassis

    def GetTemplateName(self):
        r"""GetTemplateName(ChRigidChassis self) -> std::string"""
        return _vehicle.ChRigidChassis_GetTemplateName(self)

    def HasCollision(self):
        r"""HasCollision(ChRigidChassis self) -> bool"""
        return _vehicle.ChRigidChassis_HasCollision(self)

    def HasPrimitives(self):
        r"""HasPrimitives(ChRigidChassis self) -> bool"""
        return _vehicle.ChRigidChassis_HasPrimitives(self)

    def HasMesh(self):
        r"""HasMesh(ChRigidChassis self) -> bool"""
        return _vehicle.ChRigidChassis_HasMesh(self)

    def GetMeshFilename(self):
        r"""GetMeshFilename(ChRigidChassis self) -> std::string const &"""
        return _vehicle.ChRigidChassis_GetMeshFilename(self)

    def SetCollide(self, state):
        r"""SetCollide(ChRigidChassis self, bool state)"""
        return _vehicle.ChRigidChassis_SetCollide(self, state)

    def Initialize(self, system, chassisPos, chassisFwdVel, collision_family=0):
        r"""Initialize(ChRigidChassis self, ChSystem system, ChCoordsysD chassisPos, double chassisFwdVel, int collision_family=0)"""
        return _vehicle.ChRigidChassis_Initialize(self, system, chassisPos, chassisFwdVel, collision_family)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChRigidChassis self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChRigidChassis_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChRigidChassis self)"""
        return _vehicle.ChRigidChassis_RemoveVisualizationAssets(self)

# Register ChRigidChassis in _vehicle:
_vehicle.ChRigidChassis_swigregister(ChRigidChassis)

class RigidChassis(ChRigidChassis):
    r"""Proxy of C++ chrono::vehicle::RigidChassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RigidChassis self, std::string const & filename) -> RigidChassis
        __init__(RigidChassis self, rapidjson::Document const & d) -> RigidChassis
        """
        _vehicle.RigidChassis_swiginit(self, _vehicle.new_RigidChassis(*args))
    __swig_destroy__ = _vehicle.delete_RigidChassis

    def GetMass(self):
        r"""GetMass(RigidChassis self) -> double"""
        return _vehicle.RigidChassis_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(RigidChassis self) -> ChMatrix33D"""
        return _vehicle.RigidChassis_GetInertia(self)

    def GetLocalPosCOM(self):
        r"""GetLocalPosCOM(RigidChassis self) -> ChVectorD"""
        return _vehicle.RigidChassis_GetLocalPosCOM(self)

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(RigidChassis self) -> ChCoordsysD"""
        return _vehicle.RigidChassis_GetLocalDriverCoordsys(self)

# Register RigidChassis in _vehicle:
_vehicle.RigidChassis_swigregister(RigidChassis)

class Generic_Chassis(ChRigidChassis):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_Chassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, fixed=False):
        r"""__init__(Generic_Chassis self, std::string const & name, bool fixed=False) -> Generic_Chassis"""
        _vehicle.Generic_Chassis_swiginit(self, _vehicle.new_Generic_Chassis(name, fixed))
    __swig_destroy__ = _vehicle.delete_Generic_Chassis

    def GetMass(self):
        r"""GetMass(Generic_Chassis self) -> double"""
        return _vehicle.Generic_Chassis_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(Generic_Chassis self) -> ChMatrix33D"""
        return _vehicle.Generic_Chassis_GetInertia(self)

    def GetLocalPosCOM(self):
        r"""GetLocalPosCOM(Generic_Chassis self) -> ChVectorD"""
        return _vehicle.Generic_Chassis_GetLocalPosCOM(self)

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(Generic_Chassis self) -> ChCoordsysD"""
        return _vehicle.Generic_Chassis_GetLocalDriverCoordsys(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(Generic_Chassis self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Generic_Chassis_AddVisualizationAssets(self, vis)

# Register Generic_Chassis in _vehicle:
_vehicle.Generic_Chassis_swigregister(Generic_Chassis)

class HMMWV_Chassis(ChRigidChassis):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_Chassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(HMMWV_Chassis self, std::string const & name, bool fixed=False, chrono::vehicle::ChassisCollisionType chassis_collision_type=NONE) -> HMMWV_Chassis"""
        _vehicle.HMMWV_Chassis_swiginit(self, _vehicle.new_HMMWV_Chassis(*args))
    __swig_destroy__ = _vehicle.delete_HMMWV_Chassis

    def GetMass(self):
        r"""GetMass(HMMWV_Chassis self) -> double"""
        return _vehicle.HMMWV_Chassis_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(HMMWV_Chassis self) -> ChMatrix33D"""
        return _vehicle.HMMWV_Chassis_GetInertia(self)

    def GetLocalPosCOM(self):
        r"""GetLocalPosCOM(HMMWV_Chassis self) -> ChVectorD"""
        return _vehicle.HMMWV_Chassis_GetLocalPosCOM(self)

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(HMMWV_Chassis self) -> ChCoordsysD"""
        return _vehicle.HMMWV_Chassis_GetLocalDriverCoordsys(self)

# Register HMMWV_Chassis in _vehicle:
_vehicle.HMMWV_Chassis_swigregister(HMMWV_Chassis)

class Sedan_Chassis(ChRigidChassis):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan_Chassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Sedan_Chassis self, std::string const & name, bool fixed=False, chrono::vehicle::ChassisCollisionType chassis_collision_type=NONE) -> Sedan_Chassis"""
        _vehicle.Sedan_Chassis_swiginit(self, _vehicle.new_Sedan_Chassis(*args))
    __swig_destroy__ = _vehicle.delete_Sedan_Chassis

    def GetMass(self):
        r"""GetMass(Sedan_Chassis self) -> double"""
        return _vehicle.Sedan_Chassis_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(Sedan_Chassis self) -> ChMatrix33D"""
        return _vehicle.Sedan_Chassis_GetInertia(self)

    def GetLocalPosCOM(self):
        r"""GetLocalPosCOM(Sedan_Chassis self) -> ChVectorD"""
        return _vehicle.Sedan_Chassis_GetLocalPosCOM(self)

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(Sedan_Chassis self) -> ChCoordsysD"""
        return _vehicle.Sedan_Chassis_GetLocalDriverCoordsys(self)

# Register Sedan_Chassis in _vehicle:
_vehicle.Sedan_Chassis_swigregister(Sedan_Chassis)

class CityBus_Chassis(ChRigidChassis):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_Chassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(CityBus_Chassis self, std::string const & name, bool fixed=False, chrono::vehicle::ChassisCollisionType chassis_collision_type=NONE) -> CityBus_Chassis"""
        _vehicle.CityBus_Chassis_swiginit(self, _vehicle.new_CityBus_Chassis(*args))
    __swig_destroy__ = _vehicle.delete_CityBus_Chassis

    def GetMass(self):
        r"""GetMass(CityBus_Chassis self) -> double"""
        return _vehicle.CityBus_Chassis_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(CityBus_Chassis self) -> ChMatrix33D"""
        return _vehicle.CityBus_Chassis_GetInertia(self)

    def GetLocalPosCOM(self):
        r"""GetLocalPosCOM(CityBus_Chassis self) -> ChVectorD"""
        return _vehicle.CityBus_Chassis_GetLocalPosCOM(self)

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(CityBus_Chassis self) -> ChCoordsysD"""
        return _vehicle.CityBus_Chassis_GetLocalDriverCoordsys(self)

# Register CityBus_Chassis in _vehicle:
_vehicle.CityBus_Chassis_swigregister(CityBus_Chassis)

class MAN_5t_Chassis(ChRigidChassis):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_Chassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(MAN_5t_Chassis self, std::string const & name, bool fixed=False, chrono::vehicle::ChassisCollisionType chassis_collision_type=NONE) -> MAN_5t_Chassis"""
        _vehicle.MAN_5t_Chassis_swiginit(self, _vehicle.new_MAN_5t_Chassis(*args))
    __swig_destroy__ = _vehicle.delete_MAN_5t_Chassis

    def GetMass(self):
        r"""GetMass(MAN_5t_Chassis self) -> double"""
        return _vehicle.MAN_5t_Chassis_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(MAN_5t_Chassis self) -> ChMatrix33D"""
        return _vehicle.MAN_5t_Chassis_GetInertia(self)

    def GetLocalPosCOM(self):
        r"""GetLocalPosCOM(MAN_5t_Chassis self) -> ChVectorD"""
        return _vehicle.MAN_5t_Chassis_GetLocalPosCOM(self)

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(MAN_5t_Chassis self) -> ChCoordsysD"""
        return _vehicle.MAN_5t_Chassis_GetLocalDriverCoordsys(self)

# Register MAN_5t_Chassis in _vehicle:
_vehicle.MAN_5t_Chassis_swigregister(MAN_5t_Chassis)

class MAN_7t_Chassis(ChRigidChassis):
    r"""Proxy of C++ chrono::vehicle::man::MAN_7t_Chassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(MAN_7t_Chassis self, std::string const & name, bool fixed=False, chrono::vehicle::ChassisCollisionType chassis_collision_type=NONE) -> MAN_7t_Chassis"""
        _vehicle.MAN_7t_Chassis_swiginit(self, _vehicle.new_MAN_7t_Chassis(*args))
    __swig_destroy__ = _vehicle.delete_MAN_7t_Chassis

    def GetMass(self):
        r"""GetMass(MAN_7t_Chassis self) -> double"""
        return _vehicle.MAN_7t_Chassis_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(MAN_7t_Chassis self) -> ChMatrix33D"""
        return _vehicle.MAN_7t_Chassis_GetInertia(self)

    def GetLocalPosCOM(self):
        r"""GetLocalPosCOM(MAN_7t_Chassis self) -> ChVectorD"""
        return _vehicle.MAN_7t_Chassis_GetLocalPosCOM(self)

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(MAN_7t_Chassis self) -> ChCoordsysD"""
        return _vehicle.MAN_7t_Chassis_GetLocalDriverCoordsys(self)

# Register MAN_7t_Chassis in _vehicle:
_vehicle.MAN_7t_Chassis_swigregister(MAN_7t_Chassis)

class MAN_10t_Chassis(ChRigidChassis):
    r"""Proxy of C++ chrono::vehicle::man::MAN_10t_Chassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(MAN_10t_Chassis self, std::string const & name, bool fixed=False, chrono::vehicle::ChassisCollisionType chassis_collision_type=NONE) -> MAN_10t_Chassis"""
        _vehicle.MAN_10t_Chassis_swiginit(self, _vehicle.new_MAN_10t_Chassis(*args))
    __swig_destroy__ = _vehicle.delete_MAN_10t_Chassis

    def GetMass(self):
        r"""GetMass(MAN_10t_Chassis self) -> double"""
        return _vehicle.MAN_10t_Chassis_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(MAN_10t_Chassis self) -> ChMatrix33D"""
        return _vehicle.MAN_10t_Chassis_GetInertia(self)

    def GetLocalPosCOM(self):
        r"""GetLocalPosCOM(MAN_10t_Chassis self) -> ChVectorD"""
        return _vehicle.MAN_10t_Chassis_GetLocalPosCOM(self)

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(MAN_10t_Chassis self) -> ChCoordsysD"""
        return _vehicle.MAN_10t_Chassis_GetLocalDriverCoordsys(self)

# Register MAN_10t_Chassis in _vehicle:
_vehicle.MAN_10t_Chassis_swigregister(MAN_10t_Chassis)

class UAZBUS_Chassis(ChRigidChassis):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_Chassis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(UAZBUS_Chassis self, std::string const & name, bool fixed=False, chrono::vehicle::ChassisCollisionType chassis_collision_type=NONE) -> UAZBUS_Chassis"""
        _vehicle.UAZBUS_Chassis_swiginit(self, _vehicle.new_UAZBUS_Chassis(*args))
    __swig_destroy__ = _vehicle.delete_UAZBUS_Chassis

    def GetMass(self):
        r"""GetMass(UAZBUS_Chassis self) -> double"""
        return _vehicle.UAZBUS_Chassis_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(UAZBUS_Chassis self) -> ChMatrix33D"""
        return _vehicle.UAZBUS_Chassis_GetInertia(self)

    def GetLocalPosCOM(self):
        r"""GetLocalPosCOM(UAZBUS_Chassis self) -> ChVectorD"""
        return _vehicle.UAZBUS_Chassis_GetLocalPosCOM(self)

    def GetLocalDriverCoordsys(self):
        r"""GetLocalDriverCoordsys(UAZBUS_Chassis self) -> ChCoordsysD"""
        return _vehicle.UAZBUS_Chassis_GetLocalDriverCoordsys(self)

# Register UAZBUS_Chassis in _vehicle:
_vehicle.UAZBUS_Chassis_swigregister(UAZBUS_Chassis)


def CastToChRigidChassis(in_obj):
    r"""CastToChRigidChassis(std::shared_ptr< chrono::vehicle::ChChassis > in_obj) -> std::shared_ptr< chrono::vehicle::ChRigidChassis >"""
    return _vehicle.CastToChRigidChassis(in_obj)
class ChVehicle(object):
    r"""Proxy of C++ chrono::vehicle::ChVehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChVehicle

    def GetName(self):
        r"""GetName(ChVehicle self) -> std::string const &"""
        return _vehicle.ChVehicle_GetName(self)

    def SetName(self, name):
        r"""SetName(ChVehicle self, std::string const & name)"""
        return _vehicle.ChVehicle_SetName(self, name)

    def GetTemplateName(self):
        r"""GetTemplateName(ChVehicle self) -> std::string"""
        return _vehicle.ChVehicle_GetTemplateName(self)

    def GetSystem(self):
        r"""GetSystem(ChVehicle self) -> ChSystem"""
        return _vehicle.ChVehicle_GetSystem(self)

    def GetChTime(self):
        r"""GetChTime(ChVehicle self) -> double"""
        return _vehicle.ChVehicle_GetChTime(self)

    def GetChassis(self):
        r"""GetChassis(ChVehicle self) -> std::shared_ptr< chrono::vehicle::ChChassis >"""
        return _vehicle.ChVehicle_GetChassis(self)

    def GetChassisBody(self):
        r"""GetChassisBody(ChVehicle self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _vehicle.ChVehicle_GetChassisBody(self)

    def GetPowertrain(self):
        r"""GetPowertrain(ChVehicle self) -> std::shared_ptr< chrono::vehicle::ChPowertrain >"""
        return _vehicle.ChVehicle_GetPowertrain(self)

    def GetVehicleMass(self):
        r"""GetVehicleMass(ChVehicle self) -> double"""
        return _vehicle.ChVehicle_GetVehicleMass(self)

    def GetVehicleCOMPos(self):
        r"""GetVehicleCOMPos(ChVehicle self) -> ChVectorD"""
        return _vehicle.ChVehicle_GetVehicleCOMPos(self)

    def GetVehiclePos(self):
        r"""GetVehiclePos(ChVehicle self) -> ChVectorD"""
        return _vehicle.ChVehicle_GetVehiclePos(self)

    def GetVehicleRot(self):
        r"""GetVehicleRot(ChVehicle self) -> ChQuaternionD"""
        return _vehicle.ChVehicle_GetVehicleRot(self)

    def GetVehicleSpeed(self):
        r"""GetVehicleSpeed(ChVehicle self) -> double"""
        return _vehicle.ChVehicle_GetVehicleSpeed(self)

    def GetVehicleSpeedCOM(self):
        r"""GetVehicleSpeedCOM(ChVehicle self) -> double"""
        return _vehicle.ChVehicle_GetVehicleSpeedCOM(self)

    def GetVehiclePointLocation(self, locpos):
        r"""GetVehiclePointLocation(ChVehicle self, ChVectorD locpos) -> ChVectorD"""
        return _vehicle.ChVehicle_GetVehiclePointLocation(self, locpos)

    def GetVehiclePointVelocity(self, locpos):
        r"""GetVehiclePointVelocity(ChVehicle self, ChVectorD locpos) -> ChVectorD"""
        return _vehicle.ChVehicle_GetVehiclePointVelocity(self, locpos)

    def GetVehicleAcceleration(self, locpos):
        r"""GetVehicleAcceleration(ChVehicle self, ChVectorD locpos) -> ChVectorD"""
        return _vehicle.ChVehicle_GetVehicleAcceleration(self, locpos)

    def GetDriveshaft(self):
        r"""GetDriveshaft(ChVehicle self) -> std::shared_ptr< chrono::ChShaft >"""
        return _vehicle.ChVehicle_GetDriveshaft(self)

    def GetDriveshaftSpeed(self):
        r"""GetDriveshaftSpeed(ChVehicle self) -> double"""
        return _vehicle.ChVehicle_GetDriveshaftSpeed(self)

    def GetDriverPos(self):
        r"""GetDriverPos(ChVehicle self) -> ChVectorD"""
        return _vehicle.ChVehicle_GetDriverPos(self)

    def SetOutput(self, type, out_dir, out_name, output_step):
        r"""SetOutput(ChVehicle self, chrono::vehicle::ChVehicleOutput::Type type, std::string const & out_dir, std::string const & out_name, double output_step)"""
        return _vehicle.ChVehicle_SetOutput(self, type, out_dir, out_name, output_step)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(ChVehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.ChVehicle_Initialize(self, chassisPos, chassisFwdVel)

    def SetChassisVisualizationType(self, vis):
        r"""SetChassisVisualizationType(ChVehicle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChVehicle_SetChassisVisualizationType(self, vis)

    def SetChassisCollide(self, state):
        r"""SetChassisCollide(ChVehicle self, bool state)"""
        return _vehicle.ChVehicle_SetChassisCollide(self, state)

    def SetChassisVehicleCollide(self, state):
        r"""SetChassisVehicleCollide(ChVehicle self, bool state)"""
        return _vehicle.ChVehicle_SetChassisVehicleCollide(self, state)

    def SetChassisOutput(self, state):
        r"""SetChassisOutput(ChVehicle self, bool state)"""
        return _vehicle.ChVehicle_SetChassisOutput(self, state)

    def Advance(self, step):
        r"""Advance(ChVehicle self, double step)"""
        return _vehicle.ChVehicle_Advance(self, step)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChVehicle self)"""
        return _vehicle.ChVehicle_LogConstraintViolations(self)

    def ExportComponentList(self, *args):
        r"""
        ExportComponentList(ChVehicle self) -> std::string
        ExportComponentList(ChVehicle self, std::string const & filename)
        """
        return _vehicle.ChVehicle_ExportComponentList(self, *args)

    def Output(self, frame, database):
        r"""Output(ChVehicle self, int frame, ChVehicleOutput database)"""
        return _vehicle.ChVehicle_Output(self, frame, database)

# Register ChVehicle in _vehicle:
_vehicle.ChVehicle_swigregister(ChVehicle)

import pychrono.irrlicht
class vector_Entry(object):
    r"""Proxy of C++ std::vector< chrono::vehicle::ChDataDriver::Entry > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_Entry self) -> SwigPyIterator"""
        return _vehicle.vector_Entry_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_Entry self) -> bool"""
        return _vehicle.vector_Entry___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_Entry self) -> bool"""
        return _vehicle.vector_Entry___bool__(self)

    def __len__(self):
        r"""__len__(vector_Entry self) -> std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type"""
        return _vehicle.vector_Entry___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::difference_type i, std::vector< chrono::vehicle::ChDataDriver::Entry >::difference_type j) -> vector_Entry"""
        return _vehicle.vector_Entry___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::difference_type i, std::vector< chrono::vehicle::ChDataDriver::Entry >::difference_type j)
        __setslice__(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::difference_type i, std::vector< chrono::vehicle::ChDataDriver::Entry >::difference_type j, vector_Entry v)
        """
        return _vehicle.vector_Entry___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::difference_type i, std::vector< chrono::vehicle::ChDataDriver::Entry >::difference_type j)"""
        return _vehicle.vector_Entry___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::difference_type i)
        __delitem__(vector_Entry self, PySliceObject * slice)
        """
        return _vehicle.vector_Entry___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_Entry self, PySliceObject * slice) -> vector_Entry
        __getitem__(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::difference_type i) -> Entry
        """
        return _vehicle.vector_Entry___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_Entry self, PySliceObject * slice, vector_Entry v)
        __setitem__(vector_Entry self, PySliceObject * slice)
        __setitem__(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::difference_type i, Entry x)
        """
        return _vehicle.vector_Entry___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_Entry self) -> Entry"""
        return _vehicle.vector_Entry_pop(self)

    def append(self, x):
        r"""append(vector_Entry self, Entry x)"""
        return _vehicle.vector_Entry_append(self, x)

    def empty(self):
        r"""empty(vector_Entry self) -> bool"""
        return _vehicle.vector_Entry_empty(self)

    def size(self):
        r"""size(vector_Entry self) -> std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type"""
        return _vehicle.vector_Entry_size(self)

    def swap(self, v):
        r"""swap(vector_Entry self, vector_Entry v)"""
        return _vehicle.vector_Entry_swap(self, v)

    def begin(self):
        r"""begin(vector_Entry self) -> std::vector< chrono::vehicle::ChDataDriver::Entry >::iterator"""
        return _vehicle.vector_Entry_begin(self)

    def end(self):
        r"""end(vector_Entry self) -> std::vector< chrono::vehicle::ChDataDriver::Entry >::iterator"""
        return _vehicle.vector_Entry_end(self)

    def rbegin(self):
        r"""rbegin(vector_Entry self) -> std::vector< chrono::vehicle::ChDataDriver::Entry >::reverse_iterator"""
        return _vehicle.vector_Entry_rbegin(self)

    def rend(self):
        r"""rend(vector_Entry self) -> std::vector< chrono::vehicle::ChDataDriver::Entry >::reverse_iterator"""
        return _vehicle.vector_Entry_rend(self)

    def clear(self):
        r"""clear(vector_Entry self)"""
        return _vehicle.vector_Entry_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_Entry self) -> std::vector< chrono::vehicle::ChDataDriver::Entry >::allocator_type"""
        return _vehicle.vector_Entry_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_Entry self)"""
        return _vehicle.vector_Entry_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::iterator pos) -> std::vector< chrono::vehicle::ChDataDriver::Entry >::iterator
        erase(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::iterator first, std::vector< chrono::vehicle::ChDataDriver::Entry >::iterator last) -> std::vector< chrono::vehicle::ChDataDriver::Entry >::iterator
        """
        return _vehicle.vector_Entry_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_Entry self) -> vector_Entry
        __init__(vector_Entry self, vector_Entry other) -> vector_Entry
        __init__(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type size) -> vector_Entry
        __init__(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type size, Entry value) -> vector_Entry
        """
        _vehicle.vector_Entry_swiginit(self, _vehicle.new_vector_Entry(*args))

    def push_back(self, x):
        r"""push_back(vector_Entry self, Entry x)"""
        return _vehicle.vector_Entry_push_back(self, x)

    def front(self):
        r"""front(vector_Entry self) -> Entry"""
        return _vehicle.vector_Entry_front(self)

    def back(self):
        r"""back(vector_Entry self) -> Entry"""
        return _vehicle.vector_Entry_back(self)

    def assign(self, n, x):
        r"""assign(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type n, Entry x)"""
        return _vehicle.vector_Entry_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type new_size)
        resize(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type new_size, Entry x)
        """
        return _vehicle.vector_Entry_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::iterator pos, Entry x) -> std::vector< chrono::vehicle::ChDataDriver::Entry >::iterator
        insert(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::iterator pos, std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type n, Entry x)
        """
        return _vehicle.vector_Entry_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_Entry self, std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type n)"""
        return _vehicle.vector_Entry_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_Entry self) -> std::vector< chrono::vehicle::ChDataDriver::Entry >::size_type"""
        return _vehicle.vector_Entry_capacity(self)
    __swig_destroy__ = _vehicle.delete_vector_Entry

# Register vector_Entry in _vehicle:
_vehicle.vector_Entry_swigregister(vector_Entry)

class ChDriver(object):
    r"""Proxy of C++ chrono::vehicle::ChDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, vehicle):
        r"""__init__(ChDriver self, ChVehicle vehicle) -> ChDriver"""
        _vehicle.ChDriver_swiginit(self, _vehicle.new_ChDriver(vehicle))
    __swig_destroy__ = _vehicle.delete_ChDriver

    def GetThrottle(self):
        r"""GetThrottle(ChDriver self) -> double"""
        return _vehicle.ChDriver_GetThrottle(self)

    def GetSteering(self):
        r"""GetSteering(ChDriver self) -> double"""
        return _vehicle.ChDriver_GetSteering(self)

    def GetBraking(self):
        r"""GetBraking(ChDriver self) -> double"""
        return _vehicle.ChDriver_GetBraking(self)

    def GetInputs(self):
        r"""GetInputs(ChDriver self) -> Inputs"""
        return _vehicle.ChDriver_GetInputs(self)

    def Initialize(self):
        r"""Initialize(ChDriver self)"""
        return _vehicle.ChDriver_Initialize(self)

    def Synchronize(self, time):
        r"""Synchronize(ChDriver self, double time)"""
        return _vehicle.ChDriver_Synchronize(self, time)

    def Advance(self, step):
        r"""Advance(ChDriver self, double step)"""
        return _vehicle.ChDriver_Advance(self, step)

    def LogInit(self, filename):
        r"""LogInit(ChDriver self, std::string const & filename) -> bool"""
        return _vehicle.ChDriver_LogInit(self, filename)

    def Log(self, time):
        r"""Log(ChDriver self, double time) -> bool"""
        return _vehicle.ChDriver_Log(self, time)

    def SetSteering(self, val, min_val=-1, max_val=1):
        r"""SetSteering(ChDriver self, double val, double min_val=-1, double max_val=1)"""
        return _vehicle.ChDriver_SetSteering(self, val, min_val, max_val)

    def SetThrottle(self, val, min_val=0, max_val=1):
        r"""SetThrottle(ChDriver self, double val, double min_val=0, double max_val=1)"""
        return _vehicle.ChDriver_SetThrottle(self, val, min_val, max_val)

    def SetBraking(self, val, min_val=0, max_val=1):
        r"""SetBraking(ChDriver self, double val, double min_val=0, double max_val=1)"""
        return _vehicle.ChDriver_SetBraking(self, val, min_val, max_val)

# Register ChDriver in _vehicle:
_vehicle.ChDriver_swigregister(ChDriver)

class Inputs(object):
    r"""Proxy of C++ chrono::vehicle::ChDriver::Inputs class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_steering = property(_vehicle.Inputs_m_steering_get, _vehicle.Inputs_m_steering_set, doc=r"""m_steering : double""")
    m_throttle = property(_vehicle.Inputs_m_throttle_get, _vehicle.Inputs_m_throttle_set, doc=r"""m_throttle : double""")
    m_braking = property(_vehicle.Inputs_m_braking_get, _vehicle.Inputs_m_braking_set, doc=r"""m_braking : double""")

    def __init__(self):
        r"""__init__(Inputs self) -> Inputs"""
        _vehicle.Inputs_swiginit(self, _vehicle.new_Inputs())
    __swig_destroy__ = _vehicle.delete_Inputs

# Register Inputs in _vehicle:
_vehicle.Inputs_swigregister(Inputs)

class ChDataDriver(ChDriver):
    r"""Proxy of C++ chrono::vehicle::ChDataDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChDataDriver self, ChVehicle vehicle, std::string const & filename, bool sorted=True) -> ChDataDriver
        __init__(ChDataDriver self, ChVehicle vehicle, vector_Entry data, bool sorted=True) -> ChDataDriver
        """
        _vehicle.ChDataDriver_swiginit(self, _vehicle.new_ChDataDriver(*args))
    __swig_destroy__ = _vehicle.delete_ChDataDriver

    def Synchronize(self, time):
        r"""Synchronize(ChDataDriver self, double time)"""
        return _vehicle.ChDataDriver_Synchronize(self, time)

# Register ChDataDriver in _vehicle:
_vehicle.ChDataDriver_swigregister(ChDataDriver)

class Entry(object):
    r"""Proxy of C++ chrono::vehicle::ChDataDriver::Entry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Entry self) -> Entry
        __init__(Entry self, double time, double steering, double throttle, double braking) -> Entry
        """
        _vehicle.Entry_swiginit(self, _vehicle.new_Entry(*args))
    m_time = property(_vehicle.Entry_m_time_get, _vehicle.Entry_m_time_set, doc=r"""m_time : double""")
    m_steering = property(_vehicle.Entry_m_steering_get, _vehicle.Entry_m_steering_set, doc=r"""m_steering : double""")
    m_throttle = property(_vehicle.Entry_m_throttle_get, _vehicle.Entry_m_throttle_set, doc=r"""m_throttle : double""")
    m_braking = property(_vehicle.Entry_m_braking_get, _vehicle.Entry_m_braking_set, doc=r"""m_braking : double""")
    __swig_destroy__ = _vehicle.delete_Entry

# Register Entry in _vehicle:
_vehicle.Entry_swigregister(Entry)

class ChSpeedController(object):
    r"""Proxy of C++ chrono::vehicle::ChSpeedController class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChSpeedController self) -> ChSpeedController
        __init__(ChSpeedController self, std::string const & filename) -> ChSpeedController
        """
        _vehicle.ChSpeedController_swiginit(self, _vehicle.new_ChSpeedController(*args))
    __swig_destroy__ = _vehicle.delete_ChSpeedController

    def SetGains(self, Kp, Ki, Kd):
        r"""SetGains(ChSpeedController self, double Kp, double Ki, double Kd)"""
        return _vehicle.ChSpeedController_SetGains(self, Kp, Ki, Kd)

    def GetCurrentSpeed(self):
        r"""GetCurrentSpeed(ChSpeedController self) -> double"""
        return _vehicle.ChSpeedController_GetCurrentSpeed(self)

    def Reset(self, vehicle):
        r"""Reset(ChSpeedController self, ChVehicle vehicle)"""
        return _vehicle.ChSpeedController_Reset(self, vehicle)

    def Advance(self, vehicle, target_speed, step):
        r"""Advance(ChSpeedController self, ChVehicle vehicle, double target_speed, double step) -> double"""
        return _vehicle.ChSpeedController_Advance(self, vehicle, target_speed, step)

    def StartDataCollection(self):
        r"""StartDataCollection(ChSpeedController self)"""
        return _vehicle.ChSpeedController_StartDataCollection(self)

    def StopDataCollection(self):
        r"""StopDataCollection(ChSpeedController self)"""
        return _vehicle.ChSpeedController_StopDataCollection(self)

    def IsDataCollectionEnabled(self):
        r"""IsDataCollectionEnabled(ChSpeedController self) -> bool"""
        return _vehicle.ChSpeedController_IsDataCollectionEnabled(self)

    def IsDataAvailable(self):
        r"""IsDataAvailable(ChSpeedController self) -> bool"""
        return _vehicle.ChSpeedController_IsDataAvailable(self)

    def WriteOutputFile(self, filename):
        r"""WriteOutputFile(ChSpeedController self, std::string const & filename)"""
        return _vehicle.ChSpeedController_WriteOutputFile(self, filename)

# Register ChSpeedController in _vehicle:
_vehicle.ChSpeedController_swigregister(ChSpeedController)

class ChSteeringController(object):
    r"""Proxy of C++ chrono::vehicle::ChSteeringController class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSteeringController

    def SetLookAheadDistance(self, dist):
        r"""SetLookAheadDistance(ChSteeringController self, double dist)"""
        return _vehicle.ChSteeringController_SetLookAheadDistance(self, dist)

    def SetGains(self, Kp, Ki, Kd):
        r"""SetGains(ChSteeringController self, double Kp, double Ki, double Kd)"""
        return _vehicle.ChSteeringController_SetGains(self, Kp, Ki, Kd)

    def GetSentinelLocation(self):
        r"""GetSentinelLocation(ChSteeringController self) -> ChVectorD"""
        return _vehicle.ChSteeringController_GetSentinelLocation(self)

    def GetTargetLocation(self):
        r"""GetTargetLocation(ChSteeringController self) -> ChVectorD"""
        return _vehicle.ChSteeringController_GetTargetLocation(self)

    def Reset(self, vehicle):
        r"""Reset(ChSteeringController self, ChVehicle vehicle)"""
        return _vehicle.ChSteeringController_Reset(self, vehicle)

    def Advance(self, vehicle, step):
        r"""Advance(ChSteeringController self, ChVehicle vehicle, double step) -> double"""
        return _vehicle.ChSteeringController_Advance(self, vehicle, step)

    def StartDataCollection(self):
        r"""StartDataCollection(ChSteeringController self)"""
        return _vehicle.ChSteeringController_StartDataCollection(self)

    def StopDataCollection(self):
        r"""StopDataCollection(ChSteeringController self)"""
        return _vehicle.ChSteeringController_StopDataCollection(self)

    def IsDataCollectionEnabled(self):
        r"""IsDataCollectionEnabled(ChSteeringController self) -> bool"""
        return _vehicle.ChSteeringController_IsDataCollectionEnabled(self)

    def IsDataAvailable(self):
        r"""IsDataAvailable(ChSteeringController self) -> bool"""
        return _vehicle.ChSteeringController_IsDataAvailable(self)

    def WriteOutputFile(self, filename):
        r"""WriteOutputFile(ChSteeringController self, std::string const & filename)"""
        return _vehicle.ChSteeringController_WriteOutputFile(self, filename)

# Register ChSteeringController in _vehicle:
_vehicle.ChSteeringController_swigregister(ChSteeringController)

class ChPathSteeringController(ChSteeringController):
    r"""Proxy of C++ chrono::vehicle::ChPathSteeringController class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChPathSteeringController self, std::shared_ptr< chrono::ChBezierCurve > path, bool isClosedPath=False) -> ChPathSteeringController
        __init__(ChPathSteeringController self, std::string const & filename, std::shared_ptr< chrono::ChBezierCurve > path, bool isClosedPath=False) -> ChPathSteeringController
        """
        _vehicle.ChPathSteeringController_swiginit(self, _vehicle.new_ChPathSteeringController(*args))
    __swig_destroy__ = _vehicle.delete_ChPathSteeringController

    def GetPath(self):
        r"""GetPath(ChPathSteeringController self) -> std::shared_ptr< chrono::ChBezierCurve >"""
        return _vehicle.ChPathSteeringController_GetPath(self)

    def Reset(self, vehicle):
        r"""Reset(ChPathSteeringController self, ChVehicle vehicle)"""
        return _vehicle.ChPathSteeringController_Reset(self, vehicle)

    def CalcTargetLocation(self):
        r"""CalcTargetLocation(ChPathSteeringController self)"""
        return _vehicle.ChPathSteeringController_CalcTargetLocation(self)

# Register ChPathSteeringController in _vehicle:
_vehicle.ChPathSteeringController_swigregister(ChPathSteeringController)

class ChPathSteeringControllerXT(ChSteeringController):
    r"""Proxy of C++ chrono::vehicle::ChPathSteeringControllerXT class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChPathSteeringControllerXT self, std::shared_ptr< chrono::ChBezierCurve > path, bool isClosedPath=False, double max_wheel_turn_angle=0.0) -> ChPathSteeringControllerXT
        __init__(ChPathSteeringControllerXT self, std::string const & filename, std::shared_ptr< chrono::ChBezierCurve > path, bool isClosedPath=False, double max_wheel_turn_angle=0.0) -> ChPathSteeringControllerXT
        """
        _vehicle.ChPathSteeringControllerXT_swiginit(self, _vehicle.new_ChPathSteeringControllerXT(*args))
    __swig_destroy__ = _vehicle.delete_ChPathSteeringControllerXT

    def GetPath(self):
        r"""GetPath(ChPathSteeringControllerXT self) -> std::shared_ptr< chrono::ChBezierCurve >"""
        return _vehicle.ChPathSteeringControllerXT_GetPath(self)

    def Reset(self, vehicle):
        r"""Reset(ChPathSteeringControllerXT self, ChVehicle vehicle)"""
        return _vehicle.ChPathSteeringControllerXT_Reset(self, vehicle)

    def SetGains(self, Kp=0.4, W_y_err=1.0, W_heading_err=1.0, W_ackermann=1.0):
        r"""SetGains(ChPathSteeringControllerXT self, double Kp=0.4, double W_y_err=1.0, double W_heading_err=1.0, double W_ackermann=1.0)"""
        return _vehicle.ChPathSteeringControllerXT_SetGains(self, Kp, W_y_err, W_heading_err, W_ackermann)

    def CalcTargetLocation(self):
        r"""CalcTargetLocation(ChPathSteeringControllerXT self)"""
        return _vehicle.ChPathSteeringControllerXT_CalcTargetLocation(self)

    def Advance(self, vehicle, step):
        r"""Advance(ChPathSteeringControllerXT self, ChVehicle vehicle, double step) -> double"""
        return _vehicle.ChPathSteeringControllerXT_Advance(self, vehicle, step)

# Register ChPathSteeringControllerXT in _vehicle:
_vehicle.ChPathSteeringControllerXT_swigregister(ChPathSteeringControllerXT)

class ChPathSteeringControllerSR(ChSteeringController):
    r"""Proxy of C++ chrono::vehicle::ChPathSteeringControllerSR class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChPathSteeringControllerSR self, std::shared_ptr< chrono::ChBezierCurve > path, bool isClosedPath=False, double max_wheel_turn_angle=0.0, double axle_space=2.5) -> ChPathSteeringControllerSR
        __init__(ChPathSteeringControllerSR self, std::string const & filename, std::shared_ptr< chrono::ChBezierCurve > path, bool isClosedPath=False, double max_wheel_turn_angle=0.0, double axle_space=2.5) -> ChPathSteeringControllerSR
        """
        _vehicle.ChPathSteeringControllerSR_swiginit(self, _vehicle.new_ChPathSteeringControllerSR(*args))
    __swig_destroy__ = _vehicle.delete_ChPathSteeringControllerSR

    def GetPath(self):
        r"""GetPath(ChPathSteeringControllerSR self) -> std::shared_ptr< chrono::ChBezierCurve >"""
        return _vehicle.ChPathSteeringControllerSR_GetPath(self)

    def SetGains(self, Klat=0.1, Kug=0.0):
        r"""SetGains(ChPathSteeringControllerSR self, double Klat=0.1, double Kug=0.0)"""
        return _vehicle.ChPathSteeringControllerSR_SetGains(self, Klat, Kug)

    def SetPreviewTime(self, Tp=0.5):
        r"""SetPreviewTime(ChPathSteeringControllerSR self, double Tp=0.5)"""
        return _vehicle.ChPathSteeringControllerSR_SetPreviewTime(self, Tp)

    def Advance(self, vehicle, step):
        r"""Advance(ChPathSteeringControllerSR self, ChVehicle vehicle, double step) -> double"""
        return _vehicle.ChPathSteeringControllerSR_Advance(self, vehicle, step)

    def Reset(self, vehicle):
        r"""Reset(ChPathSteeringControllerSR self, ChVehicle vehicle)"""
        return _vehicle.ChPathSteeringControllerSR_Reset(self, vehicle)

    def CalcTargetLocation(self):
        r"""CalcTargetLocation(ChPathSteeringControllerSR self)"""
        return _vehicle.ChPathSteeringControllerSR_CalcTargetLocation(self)

# Register ChPathSteeringControllerSR in _vehicle:
_vehicle.ChPathSteeringControllerSR_swigregister(ChPathSteeringControllerSR)

class ChAdaptiveSpeedController(object):
    r"""Proxy of C++ chrono::vehicle::ChAdaptiveSpeedController class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChAdaptiveSpeedController self) -> ChAdaptiveSpeedController
        __init__(ChAdaptiveSpeedController self, std::string const & filename) -> ChAdaptiveSpeedController
        """
        _vehicle.ChAdaptiveSpeedController_swiginit(self, _vehicle.new_ChAdaptiveSpeedController(*args))
    __swig_destroy__ = _vehicle.delete_ChAdaptiveSpeedController

    def SetGains(self, Kp, Ki, Kd):
        r"""SetGains(ChAdaptiveSpeedController self, double Kp, double Ki, double Kd)"""
        return _vehicle.ChAdaptiveSpeedController_SetGains(self, Kp, Ki, Kd)

    def GetCurrentSpeed(self):
        r"""GetCurrentSpeed(ChAdaptiveSpeedController self) -> double"""
        return _vehicle.ChAdaptiveSpeedController_GetCurrentSpeed(self)

    def Reset(self, vehicle):
        r"""Reset(ChAdaptiveSpeedController self, ChVehicle vehicle)"""
        return _vehicle.ChAdaptiveSpeedController_Reset(self, vehicle)

    def Advance(self, vehicle, target_speed, target_following_time, target_min_distance, current_distance, step):
        r"""Advance(ChAdaptiveSpeedController self, ChVehicle vehicle, double target_speed, double target_following_time, double target_min_distance, double current_distance, double step) -> double"""
        return _vehicle.ChAdaptiveSpeedController_Advance(self, vehicle, target_speed, target_following_time, target_min_distance, current_distance, step)

    def StartDataCollection(self):
        r"""StartDataCollection(ChAdaptiveSpeedController self)"""
        return _vehicle.ChAdaptiveSpeedController_StartDataCollection(self)

    def StopDataCollection(self):
        r"""StopDataCollection(ChAdaptiveSpeedController self)"""
        return _vehicle.ChAdaptiveSpeedController_StopDataCollection(self)

    def IsDataCollectionEnabled(self):
        r"""IsDataCollectionEnabled(ChAdaptiveSpeedController self) -> bool"""
        return _vehicle.ChAdaptiveSpeedController_IsDataCollectionEnabled(self)

    def IsDataAvailable(self):
        r"""IsDataAvailable(ChAdaptiveSpeedController self) -> bool"""
        return _vehicle.ChAdaptiveSpeedController_IsDataAvailable(self)

    def WriteOutputFile(self, filename):
        r"""WriteOutputFile(ChAdaptiveSpeedController self, std::string const & filename)"""
        return _vehicle.ChAdaptiveSpeedController_WriteOutputFile(self, filename)

# Register ChAdaptiveSpeedController in _vehicle:
_vehicle.ChAdaptiveSpeedController_swigregister(ChAdaptiveSpeedController)

class ChPathFollowerDriver(ChDriver):
    r"""Proxy of C++ chrono::vehicle::ChPathFollowerDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChPathFollowerDriver self, ChVehicle vehicle, std::shared_ptr< chrono::ChBezierCurve > path, std::string const & path_name, double target_speed, bool isClosedPath=False) -> ChPathFollowerDriver
        __init__(ChPathFollowerDriver self, ChVehicle vehicle, std::string const & steering_filename, std::string const & speed_filename, std::shared_ptr< chrono::ChBezierCurve > path, std::string const & path_name, double target_speed, bool isClosedPath=False) -> ChPathFollowerDriver
        """
        _vehicle.ChPathFollowerDriver_swiginit(self, _vehicle.new_ChPathFollowerDriver(*args))
    __swig_destroy__ = _vehicle.delete_ChPathFollowerDriver

    def SetDesiredSpeed(self, val):
        r"""SetDesiredSpeed(ChPathFollowerDriver self, double val)"""
        return _vehicle.ChPathFollowerDriver_SetDesiredSpeed(self, val)

    def SetThreshholdThrottle(self, val):
        r"""SetThreshholdThrottle(ChPathFollowerDriver self, double val)"""
        return _vehicle.ChPathFollowerDriver_SetThreshholdThrottle(self, val)

    def GetSteeringController(self):
        r"""GetSteeringController(ChPathFollowerDriver self) -> ChPathSteeringController"""
        return _vehicle.ChPathFollowerDriver_GetSteeringController(self)

    def GetSpeedController(self):
        r"""GetSpeedController(ChPathFollowerDriver self) -> ChSpeedController"""
        return _vehicle.ChPathFollowerDriver_GetSpeedController(self)

    def Reset(self):
        r"""Reset(ChPathFollowerDriver self)"""
        return _vehicle.ChPathFollowerDriver_Reset(self)

    def Advance(self, step):
        r"""Advance(ChPathFollowerDriver self, double step)"""
        return _vehicle.ChPathFollowerDriver_Advance(self, step)

    def ExportPathPovray(self, out_dir):
        r"""ExportPathPovray(ChPathFollowerDriver self, std::string const & out_dir)"""
        return _vehicle.ChPathFollowerDriver_ExportPathPovray(self, out_dir)

# Register ChPathFollowerDriver in _vehicle:
_vehicle.ChPathFollowerDriver_swigregister(ChPathFollowerDriver)

class ChPathFollowerDriverXT(ChDriver):
    r"""Proxy of C++ chrono::vehicle::ChPathFollowerDriverXT class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChPathFollowerDriverXT self, ChVehicle vehicle, std::shared_ptr< chrono::ChBezierCurve > path, std::string const & path_name, double target_speed, bool isClosedPath=False, double maxWheelTurnAngle=0.0) -> ChPathFollowerDriverXT
        __init__(ChPathFollowerDriverXT self, ChVehicle vehicle, std::string const & steering_filename, std::string const & speed_filename, std::shared_ptr< chrono::ChBezierCurve > path, std::string const & path_name, double target_speed, bool isClosedPath=False, double maxWheelTurnAngle=0.0) -> ChPathFollowerDriverXT
        """
        _vehicle.ChPathFollowerDriverXT_swiginit(self, _vehicle.new_ChPathFollowerDriverXT(*args))
    __swig_destroy__ = _vehicle.delete_ChPathFollowerDriverXT

    def SetDesiredSpeed(self, val):
        r"""SetDesiredSpeed(ChPathFollowerDriverXT self, double val)"""
        return _vehicle.ChPathFollowerDriverXT_SetDesiredSpeed(self, val)

    def SetThreshholdThrottle(self, val):
        r"""SetThreshholdThrottle(ChPathFollowerDriverXT self, double val)"""
        return _vehicle.ChPathFollowerDriverXT_SetThreshholdThrottle(self, val)

    def GetSteeringController(self):
        r"""GetSteeringController(ChPathFollowerDriverXT self) -> ChPathSteeringControllerXT"""
        return _vehicle.ChPathFollowerDriverXT_GetSteeringController(self)

    def GetSpeedController(self):
        r"""GetSpeedController(ChPathFollowerDriverXT self) -> ChSpeedController"""
        return _vehicle.ChPathFollowerDriverXT_GetSpeedController(self)

    def Reset(self):
        r"""Reset(ChPathFollowerDriverXT self)"""
        return _vehicle.ChPathFollowerDriverXT_Reset(self)

    def Advance(self, step):
        r"""Advance(ChPathFollowerDriverXT self, double step)"""
        return _vehicle.ChPathFollowerDriverXT_Advance(self, step)

    def ExportPathPovray(self, out_dir):
        r"""ExportPathPovray(ChPathFollowerDriverXT self, std::string const & out_dir)"""
        return _vehicle.ChPathFollowerDriverXT_ExportPathPovray(self, out_dir)

# Register ChPathFollowerDriverXT in _vehicle:
_vehicle.ChPathFollowerDriverXT_swigregister(ChPathFollowerDriverXT)

class ChPathFollowerDriverSR(ChDriver):
    r"""Proxy of C++ chrono::vehicle::ChPathFollowerDriverSR class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChPathFollowerDriverSR self, ChVehicle vehicle, std::shared_ptr< chrono::ChBezierCurve > path, std::string const & path_name, double target_speed, bool isClosedPath=False, double maxWheelTurnAngle=0.0, double axle_space=2.5) -> ChPathFollowerDriverSR
        __init__(ChPathFollowerDriverSR self, ChVehicle vehicle, std::string const & steering_filename, std::string const & speed_filename, std::shared_ptr< chrono::ChBezierCurve > path, std::string const & path_name, double target_speed, bool isClosedPath=False, double maxWheelTurnAngle=0.0, double axle_space=2.5) -> ChPathFollowerDriverSR
        """
        _vehicle.ChPathFollowerDriverSR_swiginit(self, _vehicle.new_ChPathFollowerDriverSR(*args))
    __swig_destroy__ = _vehicle.delete_ChPathFollowerDriverSR

    def SetDesiredSpeed(self, val):
        r"""SetDesiredSpeed(ChPathFollowerDriverSR self, double val)"""
        return _vehicle.ChPathFollowerDriverSR_SetDesiredSpeed(self, val)

    def SetThreshholdThrottle(self, val):
        r"""SetThreshholdThrottle(ChPathFollowerDriverSR self, double val)"""
        return _vehicle.ChPathFollowerDriverSR_SetThreshholdThrottle(self, val)

    def GetSteeringController(self):
        r"""GetSteeringController(ChPathFollowerDriverSR self) -> ChPathSteeringControllerSR"""
        return _vehicle.ChPathFollowerDriverSR_GetSteeringController(self)

    def GetSpeedController(self):
        r"""GetSpeedController(ChPathFollowerDriverSR self) -> ChSpeedController"""
        return _vehicle.ChPathFollowerDriverSR_GetSpeedController(self)

    def Reset(self):
        r"""Reset(ChPathFollowerDriverSR self)"""
        return _vehicle.ChPathFollowerDriverSR_Reset(self)

    def Advance(self, step):
        r"""Advance(ChPathFollowerDriverSR self, double step)"""
        return _vehicle.ChPathFollowerDriverSR_Advance(self, step)

    def ExportPathPovray(self, out_dir):
        r"""ExportPathPovray(ChPathFollowerDriverSR self, std::string const & out_dir)"""
        return _vehicle.ChPathFollowerDriverSR_ExportPathPovray(self, out_dir)

# Register ChPathFollowerDriverSR in _vehicle:
_vehicle.ChPathFollowerDriverSR_swigregister(ChPathFollowerDriverSR)

class ChPathFollowerACCDriver(ChDriver):
    r"""Proxy of C++ chrono::vehicle::ChPathFollowerACCDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChPathFollowerACCDriver self, ChVehicle vehicle, std::shared_ptr< chrono::ChBezierCurve > path, std::string const & path_name, double target_speed, double target_following_time, double target_min_distance, double current_distance, bool isClosedPath=False) -> ChPathFollowerACCDriver
        __init__(ChPathFollowerACCDriver self, ChVehicle vehicle, std::string const & steering_filename, std::string const & speed_filename, std::shared_ptr< chrono::ChBezierCurve > path, std::string const & path_name, double target_speed, double target_following_time, double target_min_distance, double current_distance, bool isClosedPath=False) -> ChPathFollowerACCDriver
        """
        _vehicle.ChPathFollowerACCDriver_swiginit(self, _vehicle.new_ChPathFollowerACCDriver(*args))
    __swig_destroy__ = _vehicle.delete_ChPathFollowerACCDriver

    def SetDesiredSpeed(self, val):
        r"""SetDesiredSpeed(ChPathFollowerACCDriver self, double val)"""
        return _vehicle.ChPathFollowerACCDriver_SetDesiredSpeed(self, val)

    def SetDesiredFollowingTime(self, val):
        r"""SetDesiredFollowingTime(ChPathFollowerACCDriver self, double val)"""
        return _vehicle.ChPathFollowerACCDriver_SetDesiredFollowingTime(self, val)

    def SetDesiredFollowingMinDistance(self, val):
        r"""SetDesiredFollowingMinDistance(ChPathFollowerACCDriver self, double val)"""
        return _vehicle.ChPathFollowerACCDriver_SetDesiredFollowingMinDistance(self, val)

    def SetCurrentDistance(self, val):
        r"""SetCurrentDistance(ChPathFollowerACCDriver self, double val)"""
        return _vehicle.ChPathFollowerACCDriver_SetCurrentDistance(self, val)

    def SetThreshholdThrottle(self, val):
        r"""SetThreshholdThrottle(ChPathFollowerACCDriver self, double val)"""
        return _vehicle.ChPathFollowerACCDriver_SetThreshholdThrottle(self, val)

    def GetSteeringController(self):
        r"""GetSteeringController(ChPathFollowerACCDriver self) -> ChPathSteeringController"""
        return _vehicle.ChPathFollowerACCDriver_GetSteeringController(self)

    def GetSpeedController(self):
        r"""GetSpeedController(ChPathFollowerACCDriver self) -> ChAdaptiveSpeedController"""
        return _vehicle.ChPathFollowerACCDriver_GetSpeedController(self)

    def Reset(self):
        r"""Reset(ChPathFollowerACCDriver self)"""
        return _vehicle.ChPathFollowerACCDriver_Reset(self)

    def Advance(self, step):
        r"""Advance(ChPathFollowerACCDriver self, double step)"""
        return _vehicle.ChPathFollowerACCDriver_Advance(self, step)

    def ExportPathPovray(self, out_dir):
        r"""ExportPathPovray(ChPathFollowerACCDriver self, std::string const & out_dir)"""
        return _vehicle.ChPathFollowerACCDriver_ExportPathPovray(self, out_dir)

# Register ChPathFollowerACCDriver in _vehicle:
_vehicle.ChPathFollowerACCDriver_swigregister(ChPathFollowerACCDriver)

class ChChaseCamera(object):
    r"""Proxy of C++ chrono::utils::ChChaseCamera class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Chase = _vehicle.ChChaseCamera_Chase
    
    Follow = _vehicle.ChChaseCamera_Follow
    
    Track = _vehicle.ChChaseCamera_Track
    
    Inside = _vehicle.ChChaseCamera_Inside
    
    Free = _vehicle.ChChaseCamera_Free
    

    def __init__(self, chassis):
        r"""__init__(ChChaseCamera self, std::shared_ptr< chrono::ChBody > chassis) -> ChChaseCamera"""
        _vehicle.ChChaseCamera_swiginit(self, _vehicle.new_ChChaseCamera(chassis))
    __swig_destroy__ = _vehicle.delete_ChChaseCamera

    def Initialize(self, ptOnChassis, driverCoordsys, chaseDist, chaseHeight):
        r"""Initialize(ChChaseCamera self, ChVectorD ptOnChassis, ChCoordsysD driverCoordsys, double chaseDist, double chaseHeight)"""
        return _vehicle.ChChaseCamera_Initialize(self, ptOnChassis, driverCoordsys, chaseDist, chaseHeight)

    def Update(self, step):
        r"""Update(ChChaseCamera self, double step)"""
        return _vehicle.ChChaseCamera_Update(self, step)

    def Zoom(self, val):
        r"""Zoom(ChChaseCamera self, int val)"""
        return _vehicle.ChChaseCamera_Zoom(self, val)

    def Turn(self, val):
        r"""Turn(ChChaseCamera self, int val)"""
        return _vehicle.ChChaseCamera_Turn(self, val)

    def Raise(self, val):
        r"""Raise(ChChaseCamera self, int val)"""
        return _vehicle.ChChaseCamera_Raise(self, val)

    def SetState(self, s):
        r"""SetState(ChChaseCamera self, chrono::utils::ChChaseCamera::State s)"""
        return _vehicle.ChChaseCamera_SetState(self, s)

    def SetCameraPos(self, pos):
        r"""SetCameraPos(ChChaseCamera self, ChVectorD pos)"""
        return _vehicle.ChChaseCamera_SetCameraPos(self, pos)

    def SetCameraAngle(self, angle):
        r"""SetCameraAngle(ChChaseCamera self, double angle)"""
        return _vehicle.ChChaseCamera_SetCameraAngle(self, angle)

    def GetState(self):
        r"""GetState(ChChaseCamera self) -> chrono::utils::ChChaseCamera::State"""
        return _vehicle.ChChaseCamera_GetState(self)

    def GetStateName(self):
        r"""GetStateName(ChChaseCamera self) -> std::string const &"""
        return _vehicle.ChChaseCamera_GetStateName(self)

    def GetCameraPos(self):
        r"""GetCameraPos(ChChaseCamera self) -> ChVectorD"""
        return _vehicle.ChChaseCamera_GetCameraPos(self)

    def GetTargetPos(self):
        r"""GetTargetPos(ChChaseCamera self) -> ChVectorD"""
        return _vehicle.ChChaseCamera_GetTargetPos(self)

    def SetHorizGain(self, g):
        r"""SetHorizGain(ChChaseCamera self, double g)"""
        return _vehicle.ChChaseCamera_SetHorizGain(self, g)

    def SetVertGain(self, g):
        r"""SetVertGain(ChChaseCamera self, double g)"""
        return _vehicle.ChChaseCamera_SetVertGain(self, g)

    def SetMultLimits(self, minMult, maxMult):
        r"""SetMultLimits(ChChaseCamera self, double minMult, double maxMult)"""
        return _vehicle.ChChaseCamera_SetMultLimits(self, minMult, maxMult)

    def SetChassis(self, chassis):
        r"""SetChassis(ChChaseCamera self, std::shared_ptr< chrono::ChBody > chassis)"""
        return _vehicle.ChChaseCamera_SetChassis(self, chassis)

# Register ChChaseCamera in _vehicle:
_vehicle.ChChaseCamera_swigregister(ChChaseCamera)

class ChVehicleIrrApp(pychrono.irrlicht.ChIrrApp):
    r"""Proxy of C++ chrono::vehicle::ChVehicleIrrApp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChVehicleIrrApp self, ChVehicle vehicle, wchar_t const * title=None, irr::core::dimension2d< irr::u32 > dims=irr::core::dimension2d< irr::u32 >(1000, 800), irr::ELOG_LEVEL log_level=irr::ELL_INFORMATION) -> ChVehicleIrrApp"""
        _vehicle.ChVehicleIrrApp_swiginit(self, _vehicle.new_ChVehicleIrrApp(*args))
    __swig_destroy__ = _vehicle.delete_ChVehicleIrrApp

    def SetSkyBox(self):
        r"""SetSkyBox(ChVehicleIrrApp self)"""
        return _vehicle.ChVehicleIrrApp_SetSkyBox(self)

    def SetChaseCamera(self, ptOnChassis, chaseDist, chaseHeight):
        r"""SetChaseCamera(ChVehicleIrrApp self, ChVectorD ptOnChassis, double chaseDist, double chaseHeight)"""
        return _vehicle.ChVehicleIrrApp_SetChaseCamera(self, ptOnChassis, chaseDist, chaseHeight)

    def SetStepsize(self, val):
        r"""SetStepsize(ChVehicleIrrApp self, double val)"""
        return _vehicle.ChVehicleIrrApp_SetStepsize(self, val)

    def SetChaseCameraState(self, state):
        r"""SetChaseCameraState(ChVehicleIrrApp self, chrono::utils::ChChaseCamera::State state)"""
        return _vehicle.ChVehicleIrrApp_SetChaseCameraState(self, state)

    def SetChaseCameraPosition(self, pos):
        r"""SetChaseCameraPosition(ChVehicleIrrApp self, ChVectorD pos)"""
        return _vehicle.ChVehicleIrrApp_SetChaseCameraPosition(self, pos)

    def SetChaseCameraAngle(self, angle):
        r"""SetChaseCameraAngle(ChVehicleIrrApp self, double angle)"""
        return _vehicle.ChVehicleIrrApp_SetChaseCameraAngle(self, angle)

    def SetChaseCameraMultipliers(self, minMult, maxMult):
        r"""SetChaseCameraMultipliers(ChVehicleIrrApp self, double minMult, double maxMult)"""
        return _vehicle.ChVehicleIrrApp_SetChaseCameraMultipliers(self, minMult, maxMult)

    def SetHUDLocation(self, HUD_x, HUD_y):
        r"""SetHUDLocation(ChVehicleIrrApp self, int HUD_x, int HUD_y)"""
        return _vehicle.ChVehicleIrrApp_SetHUDLocation(self, HUD_x, HUD_y)

    def EnableGrid(self, val):
        r"""EnableGrid(ChVehicleIrrApp self, bool val)"""
        return _vehicle.ChVehicleIrrApp_EnableGrid(self, val)

    def EnableStats(self, val):
        r"""EnableStats(ChVehicleIrrApp self, bool val)"""
        return _vehicle.ChVehicleIrrApp_EnableStats(self, val)

    def SetGridHeight(self, height):
        r"""SetGridHeight(ChVehicleIrrApp self, double height)"""
        return _vehicle.ChVehicleIrrApp_SetGridHeight(self, height)

    def EnableSound(self, sound):
        r"""EnableSound(ChVehicleIrrApp self, bool sound)"""
        return _vehicle.ChVehicleIrrApp_EnableSound(self, sound)

    def DrawAll(self):
        r"""DrawAll(ChVehicleIrrApp self)"""
        return _vehicle.ChVehicleIrrApp_DrawAll(self)

    def Synchronize(self, msg, driver_inputs):
        r"""Synchronize(ChVehicleIrrApp self, std::string const & msg, Inputs driver_inputs)"""
        return _vehicle.ChVehicleIrrApp_Synchronize(self, msg, driver_inputs)

    def Advance(self, step):
        r"""Advance(ChVehicleIrrApp self, double step)"""
        return _vehicle.ChVehicleIrrApp_Advance(self, step)

    def WriteImageToFile(self, filename):
        r"""WriteImageToFile(ChVehicleIrrApp self, std::string const & filename)"""
        return _vehicle.ChVehicleIrrApp_WriteImageToFile(self, filename)

# Register ChVehicleIrrApp in _vehicle:
_vehicle.ChVehicleIrrApp_swigregister(ChVehicleIrrApp)

class ChWheeledVehicleIrrApp(ChVehicleIrrApp):
    r"""Proxy of C++ chrono::vehicle::ChWheeledVehicleIrrApp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChWheeledVehicleIrrApp self, ChVehicle vehicle, wchar_t const * title=None, irr::core::dimension2d< irr::u32 > dims=irr::core::dimension2d< irr::u32 >(1000, 800), irr::ELOG_LEVEL log_level=irr::ELL_INFORMATION) -> ChWheeledVehicleIrrApp"""
        _vehicle.ChWheeledVehicleIrrApp_swiginit(self, _vehicle.new_ChWheeledVehicleIrrApp(*args))
    __swig_destroy__ = _vehicle.delete_ChWheeledVehicleIrrApp

# Register ChWheeledVehicleIrrApp in _vehicle:
_vehicle.ChWheeledVehicleIrrApp_swigregister(ChWheeledVehicleIrrApp)

class ChIrrGuiDriver(ChDriver):
    r"""Proxy of C++ chrono::vehicle::ChIrrGuiDriver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    LOCK = _vehicle.ChIrrGuiDriver_LOCK
    
    KEYBOARD = _vehicle.ChIrrGuiDriver_KEYBOARD
    
    DATAFILE = _vehicle.ChIrrGuiDriver_DATAFILE
    
    JOYSTICK = _vehicle.ChIrrGuiDriver_JOYSTICK
    

    def __init__(self, app):
        r"""__init__(ChIrrGuiDriver self, ChVehicleIrrApp app) -> ChIrrGuiDriver"""
        _vehicle.ChIrrGuiDriver_swiginit(self, _vehicle.new_ChIrrGuiDriver(app))
    __swig_destroy__ = _vehicle.delete_ChIrrGuiDriver

    def OnEvent(self, event):
        r"""OnEvent(ChIrrGuiDriver self, irr::SEvent const & event) -> bool"""
        return _vehicle.ChIrrGuiDriver_OnEvent(self, event)

    def Synchronize(self, time):
        r"""Synchronize(ChIrrGuiDriver self, double time)"""
        return _vehicle.ChIrrGuiDriver_Synchronize(self, time)

    def Advance(self, step):
        r"""Advance(ChIrrGuiDriver self, double step)"""
        return _vehicle.ChIrrGuiDriver_Advance(self, step)

    def SetThrottleDelta(self, delta):
        r"""SetThrottleDelta(ChIrrGuiDriver self, double delta)"""
        return _vehicle.ChIrrGuiDriver_SetThrottleDelta(self, delta)

    def SetSteeringDelta(self, delta):
        r"""SetSteeringDelta(ChIrrGuiDriver self, double delta)"""
        return _vehicle.ChIrrGuiDriver_SetSteeringDelta(self, delta)

    def SetBrakingDelta(self, delta):
        r"""SetBrakingDelta(ChIrrGuiDriver self, double delta)"""
        return _vehicle.ChIrrGuiDriver_SetBrakingDelta(self, delta)

    def SetStepsize(self, val):
        r"""SetStepsize(ChIrrGuiDriver self, double val)"""
        return _vehicle.ChIrrGuiDriver_SetStepsize(self, val)

    def SetGains(self, steering_gain, throttle_gain, braking_gain):
        r"""SetGains(ChIrrGuiDriver self, double steering_gain, double throttle_gain, double braking_gain)"""
        return _vehicle.ChIrrGuiDriver_SetGains(self, steering_gain, throttle_gain, braking_gain)

    def SetInputDataFile(self, filename):
        r"""SetInputDataFile(ChIrrGuiDriver self, std::string const & filename)"""
        return _vehicle.ChIrrGuiDriver_SetInputDataFile(self, filename)

    def SetInputMode(self, mode):
        r"""SetInputMode(ChIrrGuiDriver self, chrono::vehicle::ChIrrGuiDriver::InputMode mode)"""
        return _vehicle.ChIrrGuiDriver_SetInputMode(self, mode)

    def GetInputModeAsString(self):
        r"""GetInputModeAsString(ChIrrGuiDriver self) -> std::string"""
        return _vehicle.ChIrrGuiDriver_GetInputModeAsString(self)

# Register ChIrrGuiDriver in _vehicle:
_vehicle.ChIrrGuiDriver_swigregister(ChIrrGuiDriver)

class ChTerrain(object):
    r"""Proxy of C++ chrono::vehicle::ChTerrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTerrain

    def Synchronize(self, time):
        r"""Synchronize(ChTerrain self, double time)"""
        return _vehicle.ChTerrain_Synchronize(self, time)

    def Advance(self, step):
        r"""Advance(ChTerrain self, double step)"""
        return _vehicle.ChTerrain_Advance(self, step)

    def GetHeight(self, x, y):
        r"""GetHeight(ChTerrain self, double x, double y) -> double"""
        return _vehicle.ChTerrain_GetHeight(self, x, y)

    def GetNormal(self, x, y):
        r"""GetNormal(ChTerrain self, double x, double y) -> ChVectorD"""
        return _vehicle.ChTerrain_GetNormal(self, x, y)

    def GetCoefficientFriction(self, x, y):
        r"""GetCoefficientFriction(ChTerrain self, double x, double y) -> float"""
        return _vehicle.ChTerrain_GetCoefficientFriction(self, x, y)

    def RegisterFrictionFunctor(self, functor):
        r"""RegisterFrictionFunctor(ChTerrain self, FrictionFunctor functor)"""
        return _vehicle.ChTerrain_RegisterFrictionFunctor(self, functor)

# Register ChTerrain in _vehicle:
_vehicle.ChTerrain_swigregister(ChTerrain)

class FrictionFunctor(object):
    r"""Proxy of C++ chrono::vehicle::ChTerrain::FrictionFunctor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_FrictionFunctor

    def __call__(self, x, y):
        r"""__call__(FrictionFunctor self, double x, double y) -> float"""
        return _vehicle.FrictionFunctor___call__(self, x, y)

# Register FrictionFunctor in _vehicle:
_vehicle.FrictionFunctor_swigregister(FrictionFunctor)

class FlatTerrain(ChTerrain):
    r"""Proxy of C++ chrono::vehicle::FlatTerrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, height, friction=0.8):
        r"""__init__(FlatTerrain self, double height, float friction=0.8) -> FlatTerrain"""
        _vehicle.FlatTerrain_swiginit(self, _vehicle.new_FlatTerrain(height, friction))
    __swig_destroy__ = _vehicle.delete_FlatTerrain

    def GetHeight(self, x, y):
        r"""GetHeight(FlatTerrain self, double x, double y) -> double"""
        return _vehicle.FlatTerrain_GetHeight(self, x, y)

    def GetNormal(self, x, y):
        r"""GetNormal(FlatTerrain self, double x, double y) -> ChVectorD"""
        return _vehicle.FlatTerrain_GetNormal(self, x, y)

    def GetCoefficientFriction(self, x, y):
        r"""GetCoefficientFriction(FlatTerrain self, double x, double y) -> float"""
        return _vehicle.FlatTerrain_GetCoefficientFriction(self, x, y)

# Register FlatTerrain in _vehicle:
_vehicle.FlatTerrain_swigregister(FlatTerrain)

class RigidTerrain(ChTerrain):
    r"""Proxy of C++ chrono::vehicle::RigidTerrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PatchType_BOX = _vehicle.RigidTerrain_PatchType_BOX
    
    PatchType_MESH = _vehicle.RigidTerrain_PatchType_MESH
    
    PatchType_HEIGHT_MAP = _vehicle.RigidTerrain_PatchType_HEIGHT_MAP
    

    def __init__(self, *args):
        r"""
        __init__(RigidTerrain self, ChSystem system) -> RigidTerrain
        __init__(RigidTerrain self, ChSystem system, std::string const & filename) -> RigidTerrain
        """
        _vehicle.RigidTerrain_swiginit(self, _vehicle.new_RigidTerrain(*args))
    __swig_destroy__ = _vehicle.delete_RigidTerrain

    def AddPatch(self, *args):
        r"""
        AddPatch(RigidTerrain self, ChCoordsysD position, ChVectorD size, bool tiled=False, double max_tile_size=1, bool visualization=True) -> std::shared_ptr< chrono::vehicle::RigidTerrain::Patch >
        AddPatch(RigidTerrain self, ChCoordsysD position, std::string const & mesh_file, std::string const & mesh_name, double sweep_sphere_radius=0, bool visualization=True) -> std::shared_ptr< chrono::vehicle::RigidTerrain::Patch >
        AddPatch(RigidTerrain self, ChCoordsysD position, std::string const & heightmap_file, std::string const & mesh_name, double sizeX, double sizeY, double hMin, double hMax, double sweep_sphere_radius=0, bool visualization=True) -> std::shared_ptr< chrono::vehicle::RigidTerrain::Patch >
        """
        return _vehicle.RigidTerrain_AddPatch(self, *args)

    def Initialize(self):
        r"""Initialize(RigidTerrain self)"""
        return _vehicle.RigidTerrain_Initialize(self)

    def GetPatches(self):
        r"""GetPatches(RigidTerrain self) -> std::vector< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch >,std::allocator< std::shared_ptr< chrono::vehicle::RigidTerrain::Patch > > > const &"""
        return _vehicle.RigidTerrain_GetPatches(self)

    def GetHeight(self, x, y):
        r"""GetHeight(RigidTerrain self, double x, double y) -> double"""
        return _vehicle.RigidTerrain_GetHeight(self, x, y)

    def GetNormal(self, x, y):
        r"""GetNormal(RigidTerrain self, double x, double y) -> ChVectorD"""
        return _vehicle.RigidTerrain_GetNormal(self, x, y)

    def UseLocationDependentFriction(self, val):
        r"""UseLocationDependentFriction(RigidTerrain self, bool val)"""
        return _vehicle.RigidTerrain_UseLocationDependentFriction(self, val)

    def GetCoefficientFriction(self, x, y):
        r"""GetCoefficientFriction(RigidTerrain self, double x, double y) -> float"""
        return _vehicle.RigidTerrain_GetCoefficientFriction(self, x, y)

    def ExportMeshPovray(self, out_dir, smoothed=False):
        r"""ExportMeshPovray(RigidTerrain self, std::string const & out_dir, bool smoothed=False)"""
        return _vehicle.RigidTerrain_ExportMeshPovray(self, out_dir, smoothed)

    def FindPoint(self, x, y, height, normal, friction):
        r"""FindPoint(RigidTerrain self, double x, double y, double & height, ChVectorD normal, float & friction) -> bool"""
        return _vehicle.RigidTerrain_FindPoint(self, x, y, height, normal, friction)

# Register RigidTerrain in _vehicle:
_vehicle.RigidTerrain_swigregister(RigidTerrain)

class Patch(object):
    r"""Proxy of C++ chrono::vehicle::RigidTerrain::Patch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SetContactFrictionCoefficient(self, friction_coefficient):
        r"""SetContactFrictionCoefficient(Patch self, float friction_coefficient)"""
        return _vehicle.Patch_SetContactFrictionCoefficient(self, friction_coefficient)

    def SetContactRestitutionCoefficient(self, restitution_coefficient):
        r"""SetContactRestitutionCoefficient(Patch self, float restitution_coefficient)"""
        return _vehicle.Patch_SetContactRestitutionCoefficient(self, restitution_coefficient)

    def SetContactMaterialProperties(self, young_modulus, poisson_ratio):
        r"""SetContactMaterialProperties(Patch self, float young_modulus, float poisson_ratio)"""
        return _vehicle.Patch_SetContactMaterialProperties(self, young_modulus, poisson_ratio)

    def SetContactMaterialCoefficients(self, kn, gn, kt, gt):
        r"""SetContactMaterialCoefficients(Patch self, float kn, float gn, float kt, float gt)"""
        return _vehicle.Patch_SetContactMaterialCoefficients(self, kn, gn, kt, gt)

    def SetColor(self, color):
        r"""SetColor(Patch self, ChColor color)"""
        return _vehicle.Patch_SetColor(self, color)

    def SetTexture(self, tex_file, tex_scale_x=1, tex_scale_y=1):
        r"""SetTexture(Patch self, std::string const & tex_file, float tex_scale_x=1, float tex_scale_y=1)"""
        return _vehicle.Patch_SetTexture(self, tex_file, tex_scale_x, tex_scale_y)

    def GetGroundBody(self):
        r"""GetGroundBody(Patch self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.Patch_GetGroundBody(self)
    __swig_destroy__ = _vehicle.delete_Patch

# Register Patch in _vehicle:
_vehicle.Patch_swigregister(Patch)

class SCMDeformableTerrain(ChTerrain):
    r"""Proxy of C++ chrono::vehicle::SCMDeformableTerrain class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PLOT_NONE = _vehicle.SCMDeformableTerrain_PLOT_NONE
    
    PLOT_LEVEL = _vehicle.SCMDeformableTerrain_PLOT_LEVEL
    
    PLOT_LEVEL_INITIAL = _vehicle.SCMDeformableTerrain_PLOT_LEVEL_INITIAL
    
    PLOT_SINKAGE = _vehicle.SCMDeformableTerrain_PLOT_SINKAGE
    
    PLOT_SINKAGE_ELASTIC = _vehicle.SCMDeformableTerrain_PLOT_SINKAGE_ELASTIC
    
    PLOT_SINKAGE_PLASTIC = _vehicle.SCMDeformableTerrain_PLOT_SINKAGE_PLASTIC
    
    PLOT_STEP_PLASTIC_FLOW = _vehicle.SCMDeformableTerrain_PLOT_STEP_PLASTIC_FLOW
    
    PLOT_PRESSURE = _vehicle.SCMDeformableTerrain_PLOT_PRESSURE
    
    PLOT_PRESSURE_YELD = _vehicle.SCMDeformableTerrain_PLOT_PRESSURE_YELD
    
    PLOT_SHEAR = _vehicle.SCMDeformableTerrain_PLOT_SHEAR
    
    PLOT_K_JANOSI = _vehicle.SCMDeformableTerrain_PLOT_K_JANOSI
    
    PLOT_IS_TOUCHED = _vehicle.SCMDeformableTerrain_PLOT_IS_TOUCHED
    
    PLOT_ISLAND_ID = _vehicle.SCMDeformableTerrain_PLOT_ISLAND_ID
    
    PLOT_MASSREMAINDER = _vehicle.SCMDeformableTerrain_PLOT_MASSREMAINDER
    

    def __init__(self, system):
        r"""__init__(SCMDeformableTerrain self, ChSystem system) -> SCMDeformableTerrain"""
        _vehicle.SCMDeformableTerrain_swiginit(self, _vehicle.new_SCMDeformableTerrain(system))
    __swig_destroy__ = _vehicle.delete_SCMDeformableTerrain

    def SetPlane(self, mplane):
        r"""SetPlane(SCMDeformableTerrain self, ChCoordsysD mplane)"""
        return _vehicle.SCMDeformableTerrain_SetPlane(self, mplane)

    def SetSoilParameters(self, Bekker_Kphi, Bekker_Kc, Bekker_n, Mohr_cohesion, Mohr_friction, Janosi_shear, elastic_K, damping_R):
        r"""SetSoilParameters(SCMDeformableTerrain self, double Bekker_Kphi, double Bekker_Kc, double Bekker_n, double Mohr_cohesion, double Mohr_friction, double Janosi_shear, double elastic_K, double damping_R)"""
        return _vehicle.SCMDeformableTerrain_SetSoilParameters(self, Bekker_Kphi, Bekker_Kc, Bekker_n, Mohr_cohesion, Mohr_friction, Janosi_shear, elastic_K, damping_R)

    def SetBulldozingFlow(self, mb):
        r"""SetBulldozingFlow(SCMDeformableTerrain self, bool mb)"""
        return _vehicle.SCMDeformableTerrain_SetBulldozingFlow(self, mb)

    def GetBulldozingFlow(self):
        r"""GetBulldozingFlow(SCMDeformableTerrain self) -> bool"""
        return _vehicle.SCMDeformableTerrain_GetBulldozingFlow(self)

    def SetBulldozingParameters(self, mbulldozing_erosion_angle, mbulldozing_flow_factor=1.0, mbulldozing_erosion_n_iterations=3, mbulldozing_erosion_n_propagations=10):
        r"""SetBulldozingParameters(SCMDeformableTerrain self, double mbulldozing_erosion_angle, double mbulldozing_flow_factor=1.0, int mbulldozing_erosion_n_iterations=3, int mbulldozing_erosion_n_propagations=10)"""
        return _vehicle.SCMDeformableTerrain_SetBulldozingParameters(self, mbulldozing_erosion_angle, mbulldozing_flow_factor, mbulldozing_erosion_n_iterations, mbulldozing_erosion_n_propagations)

    def SetAutomaticRefinement(self, mr):
        r"""SetAutomaticRefinement(SCMDeformableTerrain self, bool mr)"""
        return _vehicle.SCMDeformableTerrain_SetAutomaticRefinement(self, mr)

    def GetAutomaticRefinement(self):
        r"""GetAutomaticRefinement(SCMDeformableTerrain self) -> bool"""
        return _vehicle.SCMDeformableTerrain_GetAutomaticRefinement(self)

    def SetAutomaticRefinementResolution(self, mr):
        r"""SetAutomaticRefinementResolution(SCMDeformableTerrain self, double mr)"""
        return _vehicle.SCMDeformableTerrain_SetAutomaticRefinementResolution(self, mr)

    def GetAutomaticRefinementResolution(self):
        r"""GetAutomaticRefinementResolution(SCMDeformableTerrain self) -> double"""
        return _vehicle.SCMDeformableTerrain_GetAutomaticRefinementResolution(self)

    def SetTestHighOffset(self, moff):
        r"""SetTestHighOffset(SCMDeformableTerrain self, double moff)"""
        return _vehicle.SCMDeformableTerrain_SetTestHighOffset(self, moff)

    def GetTestHighOffset(self):
        r"""GetTestHighOffset(SCMDeformableTerrain self) -> double"""
        return _vehicle.SCMDeformableTerrain_GetTestHighOffset(self)

    def SetPlotType(self, mplot, mmin, mmax):
        r"""SetPlotType(SCMDeformableTerrain self, chrono::vehicle::SCMDeformableTerrain::DataPlotType mplot, double mmin, double mmax)"""
        return _vehicle.SCMDeformableTerrain_SetPlotType(self, mplot, mmin, mmax)

    def SetColor(self, color):
        r"""SetColor(SCMDeformableTerrain self, ChColor color)"""
        return _vehicle.SCMDeformableTerrain_SetColor(self, color)

    def SetTexture(self, tex_file, tex_scale_x=1, tex_scale_y=1):
        r"""SetTexture(SCMDeformableTerrain self, std::string const tex_file, float tex_scale_x=1, float tex_scale_y=1)"""
        return _vehicle.SCMDeformableTerrain_SetTexture(self, tex_file, tex_scale_x, tex_scale_y)

    def EnableMovingPatch(self, body, point_on_body, dimX, dimY):
        r"""EnableMovingPatch(SCMDeformableTerrain self, std::shared_ptr< chrono::ChBody > body, ChVectorD point_on_body, double dimX, double dimY)"""
        return _vehicle.SCMDeformableTerrain_EnableMovingPatch(self, body, point_on_body, dimX, dimY)

    def RegisterSoilParametersCallback(self, cb):
        r"""RegisterSoilParametersCallback(SCMDeformableTerrain self, SoilParametersCallback cb)"""
        return _vehicle.SCMDeformableTerrain_RegisterSoilParametersCallback(self, cb)

    def GetHeight(self, x, y):
        r"""GetHeight(SCMDeformableTerrain self, double x, double y) -> double"""
        return _vehicle.SCMDeformableTerrain_GetHeight(self, x, y)

    def GetNormal(self, x, y):
        r"""GetNormal(SCMDeformableTerrain self, double x, double y) -> ChVectorD"""
        return _vehicle.SCMDeformableTerrain_GetNormal(self, x, y)

    def GetCoefficientFriction(self, x, y):
        r"""GetCoefficientFriction(SCMDeformableTerrain self, double x, double y) -> float"""
        return _vehicle.SCMDeformableTerrain_GetCoefficientFriction(self, x, y)

    def GetPlane(self):
        r"""GetPlane(SCMDeformableTerrain self) -> ChCoordsysD"""
        return _vehicle.SCMDeformableTerrain_GetPlane(self)

    def GetMesh(self):
        r"""GetMesh(SCMDeformableTerrain self) -> std::shared_ptr< chrono::ChTriangleMeshShape > const"""
        return _vehicle.SCMDeformableTerrain_GetMesh(self)

    def Initialize(self, *args):
        r"""
        Initialize(SCMDeformableTerrain self, double height, double sizeX, double sizeY, int divX, int divY)
        Initialize(SCMDeformableTerrain self, std::string const & mesh_file)
        Initialize(SCMDeformableTerrain self, std::string const & heightmap_file, std::string const & mesh_name, double sizeX, double sizeY, double hMin, double hMax)
        """
        return _vehicle.SCMDeformableTerrain_Initialize(self, *args)

    def GetContactForce(self, body):
        r"""GetContactForce(SCMDeformableTerrain self, std::shared_ptr< chrono::ChBody > body) -> TerrainForce"""
        return _vehicle.SCMDeformableTerrain_GetContactForce(self, body)

    def PrintStepStatistics(self, os):
        r"""PrintStepStatistics(SCMDeformableTerrain self, std::ostream & os)"""
        return _vehicle.SCMDeformableTerrain_PrintStepStatistics(self, os)

# Register SCMDeformableTerrain in _vehicle:
_vehicle.SCMDeformableTerrain_swigregister(SCMDeformableTerrain)

class SoilParametersCallback(object):
    r"""Proxy of C++ chrono::vehicle::SCMDeformableTerrain::SoilParametersCallback class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_SoilParametersCallback

    def Set(self, x, y):
        r"""Set(SoilParametersCallback self, double x, double y)"""
        return _vehicle.SoilParametersCallback_Set(self, x, y)
    m_Bekker_Kphi = property(_vehicle.SoilParametersCallback_m_Bekker_Kphi_get, _vehicle.SoilParametersCallback_m_Bekker_Kphi_set, doc=r"""m_Bekker_Kphi : double""")
    m_Bekker_Kc = property(_vehicle.SoilParametersCallback_m_Bekker_Kc_get, _vehicle.SoilParametersCallback_m_Bekker_Kc_set, doc=r"""m_Bekker_Kc : double""")
    m_Bekker_n = property(_vehicle.SoilParametersCallback_m_Bekker_n_get, _vehicle.SoilParametersCallback_m_Bekker_n_set, doc=r"""m_Bekker_n : double""")
    m_Mohr_cohesion = property(_vehicle.SoilParametersCallback_m_Mohr_cohesion_get, _vehicle.SoilParametersCallback_m_Mohr_cohesion_set, doc=r"""m_Mohr_cohesion : double""")
    m_Mohr_friction = property(_vehicle.SoilParametersCallback_m_Mohr_friction_get, _vehicle.SoilParametersCallback_m_Mohr_friction_set, doc=r"""m_Mohr_friction : double""")
    m_Janosi_shear = property(_vehicle.SoilParametersCallback_m_Janosi_shear_get, _vehicle.SoilParametersCallback_m_Janosi_shear_set, doc=r"""m_Janosi_shear : double""")
    m_elastic_K = property(_vehicle.SoilParametersCallback_m_elastic_K_get, _vehicle.SoilParametersCallback_m_elastic_K_set, doc=r"""m_elastic_K : double""")
    m_damping_R = property(_vehicle.SoilParametersCallback_m_damping_R_get, _vehicle.SoilParametersCallback_m_damping_R_set, doc=r"""m_damping_R : double""")

# Register SoilParametersCallback in _vehicle:
_vehicle.SoilParametersCallback_swigregister(SoilParametersCallback)

class SCMDeformableSoil(pychrono.core.ChLoadContainer):
    r"""Proxy of C++ chrono::vehicle::SCMDeformableSoil class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, system):
        r"""__init__(SCMDeformableSoil self, ChSystem system) -> SCMDeformableSoil"""
        _vehicle.SCMDeformableSoil_swiginit(self, _vehicle.new_SCMDeformableSoil(system))
    __swig_destroy__ = _vehicle.delete_SCMDeformableSoil

    def Initialize(self, *args):
        r"""
        Initialize(SCMDeformableSoil self, double height, double sizeX, double sizeY, int divX, int divY)
        Initialize(SCMDeformableSoil self, std::string const & mesh_file)
        Initialize(SCMDeformableSoil self, std::string const & heightmap_file, std::string const & mesh_name, double sizeX, double sizeY, double hMin, double hMax)
        """
        return _vehicle.SCMDeformableSoil_Initialize(self, *args)

# Register SCMDeformableSoil in _vehicle:
_vehicle.SCMDeformableSoil_swigregister(SCMDeformableSoil)

class ChSuspension(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChSuspension class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSuspension

    def IsSteerable(self):
        r"""IsSteerable(ChSuspension self) -> bool"""
        return _vehicle.ChSuspension_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChSuspension self) -> bool"""
        return _vehicle.ChSuspension_IsIndependent(self)

    def GetLocation(self):
        r"""GetLocation(ChSuspension self) -> ChVectorD"""
        return _vehicle.ChSuspension_GetLocation(self)

    def GetSpindle(self, side):
        r"""GetSpindle(ChSuspension self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChSuspension_GetSpindle(self, side)

    def GetAxle(self, side):
        r"""GetAxle(ChSuspension self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChShaft >"""
        return _vehicle.ChSuspension_GetAxle(self, side)

    def GetRevolute(self, side):
        r"""GetRevolute(ChSuspension self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkLockRevolute >"""
        return _vehicle.ChSuspension_GetRevolute(self, side)

    def GetSpindlePos(self, side):
        r"""GetSpindlePos(ChSuspension self, chrono::vehicle::VehicleSide side) -> ChVectorD"""
        return _vehicle.ChSuspension_GetSpindlePos(self, side)

    def GetSpindleRot(self, side):
        r"""GetSpindleRot(ChSuspension self, chrono::vehicle::VehicleSide side) -> ChQuaternionD"""
        return _vehicle.ChSuspension_GetSpindleRot(self, side)

    def GetSpindleLinVel(self, side):
        r"""GetSpindleLinVel(ChSuspension self, chrono::vehicle::VehicleSide side) -> ChVectorD"""
        return _vehicle.ChSuspension_GetSpindleLinVel(self, side)

    def GetSpindleAngVel(self, side):
        r"""GetSpindleAngVel(ChSuspension self, chrono::vehicle::VehicleSide side) -> ChVectorD"""
        return _vehicle.ChSuspension_GetSpindleAngVel(self, side)

    def GetAxleSpeed(self, side):
        r"""GetAxleSpeed(ChSuspension self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSuspension_GetAxleSpeed(self, side)

    def GetSteeringIndex(self):
        r"""GetSteeringIndex(ChSuspension self) -> int"""
        return _vehicle.ChSuspension_GetSteeringIndex(self)

    def Synchronize(self):
        r"""Synchronize(ChSuspension self)"""
        return _vehicle.ChSuspension_Synchronize(self)

    def ApplyAxleTorque(self, side, torque):
        r"""ApplyAxleTorque(ChSuspension self, chrono::vehicle::VehicleSide side, double torque)"""
        return _vehicle.ChSuspension_ApplyAxleTorque(self, side, torque)

    def Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChSuspension self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, std::shared_ptr< chrono::ChBody > tierod_body, int steering_index, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChSuspension_Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel, right_ang_vel)

    def getSpindleRadius(self):
        r"""getSpindleRadius(ChSuspension self) -> double"""
        return _vehicle.ChSuspension_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(ChSuspension self) -> double"""
        return _vehicle.ChSuspension_getSpindleWidth(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChSuspension self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChSuspension_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChSuspension self)"""
        return _vehicle.ChSuspension_RemoveVisualizationAssets(self)

    def GetLeftBody(self):
        r"""GetLeftBody(ChSuspension self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChSuspension_GetLeftBody(self)

    def GetRightBody(self):
        r"""GetRightBody(ChSuspension self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChSuspension_GetRightBody(self)

    def GetMass(self):
        r"""GetMass(ChSuspension self) -> double"""
        return _vehicle.ChSuspension_GetMass(self)

    def GetCOMPos(self):
        r"""GetCOMPos(ChSuspension self) -> ChVectorD"""
        return _vehicle.ChSuspension_GetCOMPos(self)

    def GetTrack(self):
        r"""GetTrack(ChSuspension self) -> double"""
        return _vehicle.ChSuspension_GetTrack(self)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChSuspension self, chrono::vehicle::VehicleSide side) -> Force"""
        return _vehicle.ChSuspension_ReportSuspensionForce(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChSuspension self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChSuspension_LogConstraintViolations(self, side)

# Register ChSuspension in _vehicle:
_vehicle.ChSuspension_swigregister(ChSuspension)

class Force(object):
    r"""Proxy of C++ chrono::vehicle::ChSuspension::Force class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    spring_force = property(_vehicle.Force_spring_force_get, _vehicle.Force_spring_force_set, doc=r"""spring_force : double""")
    shock_force = property(_vehicle.Force_shock_force_get, _vehicle.Force_shock_force_set, doc=r"""shock_force : double""")
    spring_length = property(_vehicle.Force_spring_length_get, _vehicle.Force_spring_length_set, doc=r"""spring_length : double""")
    spring_velocity = property(_vehicle.Force_spring_velocity_get, _vehicle.Force_spring_velocity_set, doc=r"""spring_velocity : double""")
    shock_length = property(_vehicle.Force_shock_length_get, _vehicle.Force_shock_length_set, doc=r"""shock_length : double""")
    shock_velocity = property(_vehicle.Force_shock_velocity_get, _vehicle.Force_shock_velocity_set, doc=r"""shock_velocity : double""")

    def __init__(self):
        r"""__init__(Force self) -> Force"""
        _vehicle.Force_swiginit(self, _vehicle.new_Force())
    __swig_destroy__ = _vehicle.delete_Force

# Register Force in _vehicle:
_vehicle.Force_swigregister(Force)

class ChDoubleWishbone(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChDoubleWishbone class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChDoubleWishbone

    def GetTemplateName(self):
        r"""GetTemplateName(ChDoubleWishbone self) -> std::string"""
        return _vehicle.ChDoubleWishbone_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChDoubleWishbone self) -> bool"""
        return _vehicle.ChDoubleWishbone_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChDoubleWishbone self) -> bool"""
        return _vehicle.ChDoubleWishbone_IsIndependent(self)

    def Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChDoubleWishbone self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, std::shared_ptr< chrono::ChBody > tierod_body, int steering_index, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChDoubleWishbone_Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChDoubleWishbone self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChDoubleWishbone_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChDoubleWishbone self)"""
        return _vehicle.ChDoubleWishbone_RemoveVisualizationAssets(self)

    def GetMass(self):
        r"""GetMass(ChDoubleWishbone self) -> double"""
        return _vehicle.ChDoubleWishbone_GetMass(self)

    def GetCOMPos(self):
        r"""GetCOMPos(ChDoubleWishbone self) -> ChVectorD"""
        return _vehicle.ChDoubleWishbone_GetCOMPos(self)

    def GetTrack(self):
        r"""GetTrack(ChDoubleWishbone self) -> double"""
        return _vehicle.ChDoubleWishbone_GetTrack(self)

    def GetSpring(self, side):
        r"""GetSpring(ChDoubleWishbone self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChDoubleWishbone_GetSpring(self, side)

    def GetShock(self, side):
        r"""GetShock(ChDoubleWishbone self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChDoubleWishbone_GetShock(self, side)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChDoubleWishbone self, chrono::vehicle::VehicleSide side) -> Force"""
        return _vehicle.ChDoubleWishbone_ReportSuspensionForce(self, side)

    def GetSpringForce(self, side):
        r"""GetSpringForce(ChDoubleWishbone self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChDoubleWishbone_GetSpringForce(self, side)

    def GetSpringLength(self, side):
        r"""GetSpringLength(ChDoubleWishbone self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChDoubleWishbone_GetSpringLength(self, side)

    def GetSpringDeformation(self, side):
        r"""GetSpringDeformation(ChDoubleWishbone self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChDoubleWishbone_GetSpringDeformation(self, side)

    def GetShockForce(self, side):
        r"""GetShockForce(ChDoubleWishbone self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChDoubleWishbone_GetShockForce(self, side)

    def GetShockLength(self, side):
        r"""GetShockLength(ChDoubleWishbone self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChDoubleWishbone_GetShockLength(self, side)

    def GetShockVelocity(self, side):
        r"""GetShockVelocity(ChDoubleWishbone self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChDoubleWishbone_GetShockVelocity(self, side)

    def Get_LCA_sph_pos(self, side):
        r"""Get_LCA_sph_pos(ChDoubleWishbone self, chrono::vehicle::VehicleSide side) -> ChVectorD"""
        return _vehicle.ChDoubleWishbone_Get_LCA_sph_pos(self, side)

    def Get_UCA_sph_pos(self, side):
        r"""Get_UCA_sph_pos(ChDoubleWishbone self, chrono::vehicle::VehicleSide side) -> ChVectorD"""
        return _vehicle.ChDoubleWishbone_Get_UCA_sph_pos(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChDoubleWishbone self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChDoubleWishbone_LogConstraintViolations(self, side)

    def GetLeftBody(self):
        r"""GetLeftBody(ChDoubleWishbone self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChDoubleWishbone_GetLeftBody(self)

    def GetRightBody(self):
        r"""GetRightBody(ChDoubleWishbone self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChDoubleWishbone_GetRightBody(self)

    def LogHardpointLocations(self, ref, inches=False):
        r"""LogHardpointLocations(ChDoubleWishbone self, ChVectorD ref, bool inches=False)"""
        return _vehicle.ChDoubleWishbone_LogHardpointLocations(self, ref, inches)

# Register ChDoubleWishbone in _vehicle:
_vehicle.ChDoubleWishbone_swigregister(ChDoubleWishbone)

class ChMacPhersonStrut(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChMacPhersonStrut class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChMacPhersonStrut

    def GetTemplateName(self):
        r"""GetTemplateName(ChMacPhersonStrut self) -> std::string"""
        return _vehicle.ChMacPhersonStrut_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChMacPhersonStrut self) -> bool"""
        return _vehicle.ChMacPhersonStrut_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChMacPhersonStrut self) -> bool"""
        return _vehicle.ChMacPhersonStrut_IsIndependent(self)

    def Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChMacPhersonStrut self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, std::shared_ptr< chrono::ChBody > tierod_body, int steering_index, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChMacPhersonStrut_Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChMacPhersonStrut self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChMacPhersonStrut_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChMacPhersonStrut self)"""
        return _vehicle.ChMacPhersonStrut_RemoveVisualizationAssets(self)

    def GetMass(self):
        r"""GetMass(ChMacPhersonStrut self) -> double"""
        return _vehicle.ChMacPhersonStrut_GetMass(self)

    def GetCOMPos(self):
        r"""GetCOMPos(ChMacPhersonStrut self) -> ChVectorD"""
        return _vehicle.ChMacPhersonStrut_GetCOMPos(self)

    def GetTrack(self):
        r"""GetTrack(ChMacPhersonStrut self) -> double"""
        return _vehicle.ChMacPhersonStrut_GetTrack(self)

    def GetSpring(self, side):
        r"""GetSpring(ChMacPhersonStrut self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChMacPhersonStrut_GetSpring(self, side)

    def GetShock(self, side):
        r"""GetShock(ChMacPhersonStrut self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChMacPhersonStrut_GetShock(self, side)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChMacPhersonStrut self, chrono::vehicle::VehicleSide side) -> Force"""
        return _vehicle.ChMacPhersonStrut_ReportSuspensionForce(self, side)

    def GetSpringForce(self, side):
        r"""GetSpringForce(ChMacPhersonStrut self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMacPhersonStrut_GetSpringForce(self, side)

    def GetSpringLength(self, side):
        r"""GetSpringLength(ChMacPhersonStrut self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMacPhersonStrut_GetSpringLength(self, side)

    def GetSpringDeformation(self, side):
        r"""GetSpringDeformation(ChMacPhersonStrut self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMacPhersonStrut_GetSpringDeformation(self, side)

    def GetShockForce(self, side):
        r"""GetShockForce(ChMacPhersonStrut self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMacPhersonStrut_GetShockForce(self, side)

    def GetShockLength(self, side):
        r"""GetShockLength(ChMacPhersonStrut self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMacPhersonStrut_GetShockLength(self, side)

    def GetShockVelocity(self, side):
        r"""GetShockVelocity(ChMacPhersonStrut self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMacPhersonStrut_GetShockVelocity(self, side)

    def Get_LCA_sph_pos(self, side):
        r"""Get_LCA_sph_pos(ChMacPhersonStrut self, chrono::vehicle::VehicleSide side) -> ChVectorD"""
        return _vehicle.ChMacPhersonStrut_Get_LCA_sph_pos(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChMacPhersonStrut self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChMacPhersonStrut_LogConstraintViolations(self, side)

    def GetLeftBody(self):
        r"""GetLeftBody(ChMacPhersonStrut self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChMacPhersonStrut_GetLeftBody(self)

    def GetRightBody(self):
        r"""GetRightBody(ChMacPhersonStrut self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChMacPhersonStrut_GetRightBody(self)

    def LogHardpointLocations(self, ref, inches=False):
        r"""LogHardpointLocations(ChMacPhersonStrut self, ChVectorD ref, bool inches=False)"""
        return _vehicle.ChMacPhersonStrut_LogHardpointLocations(self, ref, inches)

# Register ChMacPhersonStrut in _vehicle:
_vehicle.ChMacPhersonStrut_swigregister(ChMacPhersonStrut)

class ChLeafspringAxle(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChLeafspringAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChLeafspringAxle

    def GetTemplateName(self):
        r"""GetTemplateName(ChLeafspringAxle self) -> std::string"""
        return _vehicle.ChLeafspringAxle_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChLeafspringAxle self) -> bool"""
        return _vehicle.ChLeafspringAxle_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChLeafspringAxle self) -> bool"""
        return _vehicle.ChLeafspringAxle_IsIndependent(self)

    def Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChLeafspringAxle self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, std::shared_ptr< chrono::ChBody > tierod_body, int steering_index, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChLeafspringAxle_Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChLeafspringAxle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChLeafspringAxle_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChLeafspringAxle self)"""
        return _vehicle.ChLeafspringAxle_RemoveVisualizationAssets(self)

    def GetMass(self):
        r"""GetMass(ChLeafspringAxle self) -> double"""
        return _vehicle.ChLeafspringAxle_GetMass(self)

    def GetCOMPos(self):
        r"""GetCOMPos(ChLeafspringAxle self) -> ChVectorD"""
        return _vehicle.ChLeafspringAxle_GetCOMPos(self)

    def GetTrack(self):
        r"""GetTrack(ChLeafspringAxle self) -> double"""
        return _vehicle.ChLeafspringAxle_GetTrack(self)

    def GetSpring(self, side):
        r"""GetSpring(ChLeafspringAxle self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChLeafspringAxle_GetSpring(self, side)

    def GetShock(self, side):
        r"""GetShock(ChLeafspringAxle self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChLeafspringAxle_GetShock(self, side)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChLeafspringAxle self, chrono::vehicle::VehicleSide side) -> Force"""
        return _vehicle.ChLeafspringAxle_ReportSuspensionForce(self, side)

    def GetSpringForce(self, side):
        r"""GetSpringForce(ChLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChLeafspringAxle_GetSpringForce(self, side)

    def GetSpringLength(self, side):
        r"""GetSpringLength(ChLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChLeafspringAxle_GetSpringLength(self, side)

    def GetSpringDeformation(self, side):
        r"""GetSpringDeformation(ChLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChLeafspringAxle_GetSpringDeformation(self, side)

    def GetShockForce(self, side):
        r"""GetShockForce(ChLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChLeafspringAxle_GetShockForce(self, side)

    def GetShockLength(self, side):
        r"""GetShockLength(ChLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChLeafspringAxle_GetShockLength(self, side)

    def GetShockVelocity(self, side):
        r"""GetShockVelocity(ChLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChLeafspringAxle_GetShockVelocity(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChLeafspringAxle self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChLeafspringAxle_LogConstraintViolations(self, side)

    def LogHardpointLocations(self, ref, inches=False):
        r"""LogHardpointLocations(ChLeafspringAxle self, ChVectorD ref, bool inches=False)"""
        return _vehicle.ChLeafspringAxle_LogHardpointLocations(self, ref, inches)

# Register ChLeafspringAxle in _vehicle:
_vehicle.ChLeafspringAxle_swigregister(ChLeafspringAxle)

class ChHendricksonPRIMAXX(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChHendricksonPRIMAXX class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChHendricksonPRIMAXX

    def GetTemplateName(self):
        r"""GetTemplateName(ChHendricksonPRIMAXX self) -> std::string"""
        return _vehicle.ChHendricksonPRIMAXX_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChHendricksonPRIMAXX self) -> bool"""
        return _vehicle.ChHendricksonPRIMAXX_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChHendricksonPRIMAXX self) -> bool"""
        return _vehicle.ChHendricksonPRIMAXX_IsIndependent(self)

    def Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChHendricksonPRIMAXX self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, std::shared_ptr< chrono::ChBody > tierod_body, int steering_index, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChHendricksonPRIMAXX_Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChHendricksonPRIMAXX self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChHendricksonPRIMAXX_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChHendricksonPRIMAXX self)"""
        return _vehicle.ChHendricksonPRIMAXX_RemoveVisualizationAssets(self)

    def GetMass(self):
        r"""GetMass(ChHendricksonPRIMAXX self) -> double"""
        return _vehicle.ChHendricksonPRIMAXX_GetMass(self)

    def GetCOMPos(self):
        r"""GetCOMPos(ChHendricksonPRIMAXX self) -> ChVectorD"""
        return _vehicle.ChHendricksonPRIMAXX_GetCOMPos(self)

    def GetTrack(self):
        r"""GetTrack(ChHendricksonPRIMAXX self) -> double"""
        return _vehicle.ChHendricksonPRIMAXX_GetTrack(self)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChHendricksonPRIMAXX self, chrono::vehicle::VehicleSide side) -> Force"""
        return _vehicle.ChHendricksonPRIMAXX_ReportSuspensionForce(self, side)

    def GetShockLBForce(self, side):
        r"""GetShockLBForce(ChHendricksonPRIMAXX self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChHendricksonPRIMAXX_GetShockLBForce(self, side)

    def GetShockLBLength(self, side):
        r"""GetShockLBLength(ChHendricksonPRIMAXX self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChHendricksonPRIMAXX_GetShockLBLength(self, side)

    def GetShockLBVelocity(self, side):
        r"""GetShockLBVelocity(ChHendricksonPRIMAXX self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChHendricksonPRIMAXX_GetShockLBVelocity(self, side)

    def GetShockAHForce(self, side):
        r"""GetShockAHForce(ChHendricksonPRIMAXX self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChHendricksonPRIMAXX_GetShockAHForce(self, side)

    def GetShockAHLength(self, side):
        r"""GetShockAHLength(ChHendricksonPRIMAXX self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChHendricksonPRIMAXX_GetShockAHLength(self, side)

    def GetShockAHVelocity(self, side):
        r"""GetShockAHVelocity(ChHendricksonPRIMAXX self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChHendricksonPRIMAXX_GetShockAHVelocity(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChHendricksonPRIMAXX self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChHendricksonPRIMAXX_LogConstraintViolations(self, side)

    def LogHardpointLocations(self, ref, inches=False):
        r"""LogHardpointLocations(ChHendricksonPRIMAXX self, ChVectorD ref, bool inches=False)"""
        return _vehicle.ChHendricksonPRIMAXX_LogHardpointLocations(self, ref, inches)

# Register ChHendricksonPRIMAXX in _vehicle:
_vehicle.ChHendricksonPRIMAXX_swigregister(ChHendricksonPRIMAXX)

class ChDoubleWishboneReduced(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChDoubleWishboneReduced class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChDoubleWishboneReduced

    def GetTemplateName(self):
        r"""GetTemplateName(ChDoubleWishboneReduced self) -> std::string"""
        return _vehicle.ChDoubleWishboneReduced_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChDoubleWishboneReduced self) -> bool"""
        return _vehicle.ChDoubleWishboneReduced_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChDoubleWishboneReduced self) -> bool"""
        return _vehicle.ChDoubleWishboneReduced_IsIndependent(self)

    def Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChDoubleWishboneReduced self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, std::shared_ptr< chrono::ChBody > tierod_body, int steering_index, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChDoubleWishboneReduced_Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChDoubleWishboneReduced self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChDoubleWishboneReduced_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChDoubleWishboneReduced self)"""
        return _vehicle.ChDoubleWishboneReduced_RemoveVisualizationAssets(self)

    def GetMass(self):
        r"""GetMass(ChDoubleWishboneReduced self) -> double"""
        return _vehicle.ChDoubleWishboneReduced_GetMass(self)

    def GetCOMPos(self):
        r"""GetCOMPos(ChDoubleWishboneReduced self) -> ChVectorD"""
        return _vehicle.ChDoubleWishboneReduced_GetCOMPos(self)

    def GetTrack(self):
        r"""GetTrack(ChDoubleWishboneReduced self) -> double"""
        return _vehicle.ChDoubleWishboneReduced_GetTrack(self)

    def GetShock(self, side):
        r"""GetShock(ChDoubleWishboneReduced self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChDoubleWishboneReduced_GetShock(self, side)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChDoubleWishboneReduced self, chrono::vehicle::VehicleSide side) -> Force"""
        return _vehicle.ChDoubleWishboneReduced_ReportSuspensionForce(self, side)

    def GetLeftBody(self):
        r"""GetLeftBody(ChDoubleWishboneReduced self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChDoubleWishboneReduced_GetLeftBody(self)

    def GetRightBody(self):
        r"""GetRightBody(ChDoubleWishboneReduced self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChDoubleWishboneReduced_GetRightBody(self)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChDoubleWishboneReduced self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChDoubleWishboneReduced_LogConstraintViolations(self, side)

# Register ChDoubleWishboneReduced in _vehicle:
_vehicle.ChDoubleWishboneReduced_swigregister(ChDoubleWishboneReduced)

class ChMultiLink(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChMultiLink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChMultiLink

    def GetTemplateName(self):
        r"""GetTemplateName(ChMultiLink self) -> std::string"""
        return _vehicle.ChMultiLink_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChMultiLink self) -> bool"""
        return _vehicle.ChMultiLink_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChMultiLink self) -> bool"""
        return _vehicle.ChMultiLink_IsIndependent(self)

    def Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChMultiLink self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, std::shared_ptr< chrono::ChBody > tierod_body, int steering_index, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChMultiLink_Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChMultiLink self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChMultiLink_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChMultiLink self)"""
        return _vehicle.ChMultiLink_RemoveVisualizationAssets(self)

    def GetMass(self):
        r"""GetMass(ChMultiLink self) -> double"""
        return _vehicle.ChMultiLink_GetMass(self)

    def GetCOMPos(self):
        r"""GetCOMPos(ChMultiLink self) -> ChVectorD"""
        return _vehicle.ChMultiLink_GetCOMPos(self)

    def GetTrack(self):
        r"""GetTrack(ChMultiLink self) -> double"""
        return _vehicle.ChMultiLink_GetTrack(self)

    def GetSpring(self, side):
        r"""GetSpring(ChMultiLink self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChMultiLink_GetSpring(self, side)

    def GetShock(self, side):
        r"""GetShock(ChMultiLink self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChMultiLink_GetShock(self, side)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChMultiLink self, chrono::vehicle::VehicleSide side) -> Force"""
        return _vehicle.ChMultiLink_ReportSuspensionForce(self, side)

    def GetSpringForce(self, side):
        r"""GetSpringForce(ChMultiLink self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMultiLink_GetSpringForce(self, side)

    def GetSpringLength(self, side):
        r"""GetSpringLength(ChMultiLink self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMultiLink_GetSpringLength(self, side)

    def GetSpringDeformation(self, side):
        r"""GetSpringDeformation(ChMultiLink self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMultiLink_GetSpringDeformation(self, side)

    def GetShockForce(self, side):
        r"""GetShockForce(ChMultiLink self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMultiLink_GetShockForce(self, side)

    def GetShockLength(self, side):
        r"""GetShockLength(ChMultiLink self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMultiLink_GetShockLength(self, side)

    def GetShockVelocity(self, side):
        r"""GetShockVelocity(ChMultiLink self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChMultiLink_GetShockVelocity(self, side)

    def GetLeftBody(self):
        r"""GetLeftBody(ChMultiLink self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChMultiLink_GetLeftBody(self)

    def GetRightBody(self):
        r"""GetRightBody(ChMultiLink self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChMultiLink_GetRightBody(self)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChMultiLink self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChMultiLink_LogConstraintViolations(self, side)

    def LogHardpointLocations(self, ref, inches=False):
        r"""LogHardpointLocations(ChMultiLink self, ChVectorD ref, bool inches=False)"""
        return _vehicle.ChMultiLink_LogHardpointLocations(self, ref, inches)

# Register ChMultiLink in _vehicle:
_vehicle.ChMultiLink_swigregister(ChMultiLink)

class ChRigidPinnedAxle(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChRigidPinnedAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChRigidPinnedAxle

    def GetTemplateName(self):
        r"""GetTemplateName(ChRigidPinnedAxle self) -> std::string"""
        return _vehicle.ChRigidPinnedAxle_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChRigidPinnedAxle self) -> bool"""
        return _vehicle.ChRigidPinnedAxle_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChRigidPinnedAxle self) -> bool"""
        return _vehicle.ChRigidPinnedAxle_IsIndependent(self)

    def Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChRigidPinnedAxle self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, std::shared_ptr< chrono::ChBody > tierod_body, int steering_index, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChRigidPinnedAxle_Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChRigidPinnedAxle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChRigidPinnedAxle_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChRigidPinnedAxle self)"""
        return _vehicle.ChRigidPinnedAxle_RemoveVisualizationAssets(self)

    def GetMass(self):
        r"""GetMass(ChRigidPinnedAxle self) -> double"""
        return _vehicle.ChRigidPinnedAxle_GetMass(self)

    def GetCOMPos(self):
        r"""GetCOMPos(ChRigidPinnedAxle self) -> ChVectorD"""
        return _vehicle.ChRigidPinnedAxle_GetCOMPos(self)

    def GetTrack(self):
        r"""GetTrack(ChRigidPinnedAxle self) -> double"""
        return _vehicle.ChRigidPinnedAxle_GetTrack(self)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChRigidPinnedAxle self, chrono::vehicle::VehicleSide side) -> Force"""
        return _vehicle.ChRigidPinnedAxle_ReportSuspensionForce(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChRigidPinnedAxle self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChRigidPinnedAxle_LogConstraintViolations(self, side)

# Register ChRigidPinnedAxle in _vehicle:
_vehicle.ChRigidPinnedAxle_swigregister(ChRigidPinnedAxle)

class ChSemiTrailingArm(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChSemiTrailingArm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSemiTrailingArm

    def GetTemplateName(self):
        r"""GetTemplateName(ChSemiTrailingArm self) -> std::string"""
        return _vehicle.ChSemiTrailingArm_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChSemiTrailingArm self) -> bool"""
        return _vehicle.ChSemiTrailingArm_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChSemiTrailingArm self) -> bool"""
        return _vehicle.ChSemiTrailingArm_IsIndependent(self)

    def Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChSemiTrailingArm self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, std::shared_ptr< chrono::ChBody > tierod_body, int steering_index, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChSemiTrailingArm_Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChSemiTrailingArm self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChSemiTrailingArm_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChSemiTrailingArm self)"""
        return _vehicle.ChSemiTrailingArm_RemoveVisualizationAssets(self)

    def GetMass(self):
        r"""GetMass(ChSemiTrailingArm self) -> double"""
        return _vehicle.ChSemiTrailingArm_GetMass(self)

    def GetCOMPos(self):
        r"""GetCOMPos(ChSemiTrailingArm self) -> ChVectorD"""
        return _vehicle.ChSemiTrailingArm_GetCOMPos(self)

    def GetTrack(self):
        r"""GetTrack(ChSemiTrailingArm self) -> double"""
        return _vehicle.ChSemiTrailingArm_GetTrack(self)

    def GetSpring(self, side):
        r"""GetSpring(ChSemiTrailingArm self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChSemiTrailingArm_GetSpring(self, side)

    def GetShock(self, side):
        r"""GetShock(ChSemiTrailingArm self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChSemiTrailingArm_GetShock(self, side)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChSemiTrailingArm self, chrono::vehicle::VehicleSide side) -> Force"""
        return _vehicle.ChSemiTrailingArm_ReportSuspensionForce(self, side)

    def GetSpringForce(self, side):
        r"""GetSpringForce(ChSemiTrailingArm self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSemiTrailingArm_GetSpringForce(self, side)

    def GetSpringLength(self, side):
        r"""GetSpringLength(ChSemiTrailingArm self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSemiTrailingArm_GetSpringLength(self, side)

    def GetSpringDeformation(self, side):
        r"""GetSpringDeformation(ChSemiTrailingArm self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSemiTrailingArm_GetSpringDeformation(self, side)

    def GetShockForce(self, side):
        r"""GetShockForce(ChSemiTrailingArm self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSemiTrailingArm_GetShockForce(self, side)

    def GetShockLength(self, side):
        r"""GetShockLength(ChSemiTrailingArm self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSemiTrailingArm_GetShockLength(self, side)

    def GetShockVelocity(self, side):
        r"""GetShockVelocity(ChSemiTrailingArm self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSemiTrailingArm_GetShockVelocity(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChSemiTrailingArm self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChSemiTrailingArm_LogConstraintViolations(self, side)

    def GetLeftBody(self):
        r"""GetLeftBody(ChSemiTrailingArm self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChSemiTrailingArm_GetLeftBody(self)

    def GetRightBody(self):
        r"""GetRightBody(ChSemiTrailingArm self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChSemiTrailingArm_GetRightBody(self)

    def LogHardpointLocations(self, ref, inches=False):
        r"""LogHardpointLocations(ChSemiTrailingArm self, ChVectorD ref, bool inches=False)"""
        return _vehicle.ChSemiTrailingArm_LogHardpointLocations(self, ref, inches)

# Register ChSemiTrailingArm in _vehicle:
_vehicle.ChSemiTrailingArm_swigregister(ChSemiTrailingArm)

class ChRigidSuspension(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChRigidSuspension class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChRigidSuspension

    def GetTemplateName(self):
        r"""GetTemplateName(ChRigidSuspension self) -> std::string"""
        return _vehicle.ChRigidSuspension_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChRigidSuspension self) -> bool"""
        return _vehicle.ChRigidSuspension_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChRigidSuspension self) -> bool"""
        return _vehicle.ChRigidSuspension_IsIndependent(self)

    def Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChRigidSuspension self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, std::shared_ptr< chrono::ChBody > tierod_body, int steering_index, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChRigidSuspension_Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel, right_ang_vel)

    def GetMass(self):
        r"""GetMass(ChRigidSuspension self) -> double"""
        return _vehicle.ChRigidSuspension_GetMass(self)

    def GetCOMPos(self):
        r"""GetCOMPos(ChRigidSuspension self) -> ChVectorD"""
        return _vehicle.ChRigidSuspension_GetCOMPos(self)

    def GetTrack(self):
        r"""GetTrack(ChRigidSuspension self) -> double"""
        return _vehicle.ChRigidSuspension_GetTrack(self)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChRigidSuspension self, chrono::vehicle::VehicleSide side) -> Force"""
        return _vehicle.ChRigidSuspension_ReportSuspensionForce(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChRigidSuspension self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChRigidSuspension_LogConstraintViolations(self, side)

# Register ChRigidSuspension in _vehicle:
_vehicle.ChRigidSuspension_swigregister(ChRigidSuspension)

class ChSolidAxle(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChSolidAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSolidAxle

    def GetTemplateName(self):
        r"""GetTemplateName(ChSolidAxle self) -> std::string"""
        return _vehicle.ChSolidAxle_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChSolidAxle self) -> bool"""
        return _vehicle.ChSolidAxle_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChSolidAxle self) -> bool"""
        return _vehicle.ChSolidAxle_IsIndependent(self)

    def Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChSolidAxle self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, std::shared_ptr< chrono::ChBody > tierod_body, int steering_index, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChSolidAxle_Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChSolidAxle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChSolidAxle_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChSolidAxle self)"""
        return _vehicle.ChSolidAxle_RemoveVisualizationAssets(self)

    def GetMass(self):
        r"""GetMass(ChSolidAxle self) -> double"""
        return _vehicle.ChSolidAxle_GetMass(self)

    def GetCOMPos(self):
        r"""GetCOMPos(ChSolidAxle self) -> ChVectorD"""
        return _vehicle.ChSolidAxle_GetCOMPos(self)

    def GetTrack(self):
        r"""GetTrack(ChSolidAxle self) -> double"""
        return _vehicle.ChSolidAxle_GetTrack(self)

    def GetSpring(self, side):
        r"""GetSpring(ChSolidAxle self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChSolidAxle_GetSpring(self, side)

    def GetShock(self, side):
        r"""GetShock(ChSolidAxle self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChSolidAxle_GetShock(self, side)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChSolidAxle self, chrono::vehicle::VehicleSide side) -> Force"""
        return _vehicle.ChSolidAxle_ReportSuspensionForce(self, side)

    def GetSpringForce(self, side):
        r"""GetSpringForce(ChSolidAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidAxle_GetSpringForce(self, side)

    def GetSpringLength(self, side):
        r"""GetSpringLength(ChSolidAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidAxle_GetSpringLength(self, side)

    def GetSpringDeformation(self, side):
        r"""GetSpringDeformation(ChSolidAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidAxle_GetSpringDeformation(self, side)

    def GetShockForce(self, side):
        r"""GetShockForce(ChSolidAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidAxle_GetShockForce(self, side)

    def GetShockLength(self, side):
        r"""GetShockLength(ChSolidAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidAxle_GetShockLength(self, side)

    def GetShockVelocity(self, side):
        r"""GetShockVelocity(ChSolidAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidAxle_GetShockVelocity(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChSolidAxle self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChSolidAxle_LogConstraintViolations(self, side)

    def LogHardpointLocations(self, ref, inches=False):
        r"""LogHardpointLocations(ChSolidAxle self, ChVectorD ref, bool inches=False)"""
        return _vehicle.ChSolidAxle_LogHardpointLocations(self, ref, inches)

# Register ChSolidAxle in _vehicle:
_vehicle.ChSolidAxle_swigregister(ChSolidAxle)

class ChThreeLinkIRS(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChThreeLinkIRS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChThreeLinkIRS

    def GetTemplateName(self):
        r"""GetTemplateName(ChThreeLinkIRS self) -> std::string"""
        return _vehicle.ChThreeLinkIRS_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChThreeLinkIRS self) -> bool"""
        return _vehicle.ChThreeLinkIRS_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChThreeLinkIRS self) -> bool"""
        return _vehicle.ChThreeLinkIRS_IsIndependent(self)

    def Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChThreeLinkIRS self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, std::shared_ptr< chrono::ChBody > tierod_body, int steering_index, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChThreeLinkIRS_Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChThreeLinkIRS self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChThreeLinkIRS_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChThreeLinkIRS self)"""
        return _vehicle.ChThreeLinkIRS_RemoveVisualizationAssets(self)

    def GetMass(self):
        r"""GetMass(ChThreeLinkIRS self) -> double"""
        return _vehicle.ChThreeLinkIRS_GetMass(self)

    def GetCOMPos(self):
        r"""GetCOMPos(ChThreeLinkIRS self) -> ChVectorD"""
        return _vehicle.ChThreeLinkIRS_GetCOMPos(self)

    def GetTrack(self):
        r"""GetTrack(ChThreeLinkIRS self) -> double"""
        return _vehicle.ChThreeLinkIRS_GetTrack(self)

    def GetSpring(self, side):
        r"""GetSpring(ChThreeLinkIRS self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChThreeLinkIRS_GetSpring(self, side)

    def GetShock(self, side):
        r"""GetShock(ChThreeLinkIRS self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChThreeLinkIRS_GetShock(self, side)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChThreeLinkIRS self, chrono::vehicle::VehicleSide side) -> Force"""
        return _vehicle.ChThreeLinkIRS_ReportSuspensionForce(self, side)

    def GetSpringForce(self, side):
        r"""GetSpringForce(ChThreeLinkIRS self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChThreeLinkIRS_GetSpringForce(self, side)

    def GetSpringLength(self, side):
        r"""GetSpringLength(ChThreeLinkIRS self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChThreeLinkIRS_GetSpringLength(self, side)

    def GetSpringDeformation(self, side):
        r"""GetSpringDeformation(ChThreeLinkIRS self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChThreeLinkIRS_GetSpringDeformation(self, side)

    def GetShockForce(self, side):
        r"""GetShockForce(ChThreeLinkIRS self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChThreeLinkIRS_GetShockForce(self, side)

    def GetShockLength(self, side):
        r"""GetShockLength(ChThreeLinkIRS self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChThreeLinkIRS_GetShockLength(self, side)

    def GetShockVelocity(self, side):
        r"""GetShockVelocity(ChThreeLinkIRS self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChThreeLinkIRS_GetShockVelocity(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChThreeLinkIRS self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChThreeLinkIRS_LogConstraintViolations(self, side)

    def GetLeftBody(self):
        r"""GetLeftBody(ChThreeLinkIRS self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChThreeLinkIRS_GetLeftBody(self)

    def GetRightBody(self):
        r"""GetRightBody(ChThreeLinkIRS self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChThreeLinkIRS_GetRightBody(self)

    def LogHardpointLocations(self, ref, inches=False):
        r"""LogHardpointLocations(ChThreeLinkIRS self, ChVectorD ref, bool inches=False)"""
        return _vehicle.ChThreeLinkIRS_LogHardpointLocations(self, ref, inches)

# Register ChThreeLinkIRS in _vehicle:
_vehicle.ChThreeLinkIRS_swigregister(ChThreeLinkIRS)

class ChToeBarLeafspringAxle(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChToeBarLeafspringAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChToeBarLeafspringAxle

    def GetTemplateName(self):
        r"""GetTemplateName(ChToeBarLeafspringAxle self) -> std::string"""
        return _vehicle.ChToeBarLeafspringAxle_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChToeBarLeafspringAxle self) -> bool"""
        return _vehicle.ChToeBarLeafspringAxle_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChToeBarLeafspringAxle self) -> bool"""
        return _vehicle.ChToeBarLeafspringAxle_IsIndependent(self)

    def Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChToeBarLeafspringAxle self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, std::shared_ptr< chrono::ChBody > tierod_body, int steering_index, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChToeBarLeafspringAxle_Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChToeBarLeafspringAxle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChToeBarLeafspringAxle_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChToeBarLeafspringAxle self)"""
        return _vehicle.ChToeBarLeafspringAxle_RemoveVisualizationAssets(self)

    def GetMass(self):
        r"""GetMass(ChToeBarLeafspringAxle self) -> double"""
        return _vehicle.ChToeBarLeafspringAxle_GetMass(self)

    def GetCOMPos(self):
        r"""GetCOMPos(ChToeBarLeafspringAxle self) -> ChVectorD"""
        return _vehicle.ChToeBarLeafspringAxle_GetCOMPos(self)

    def GetTrack(self):
        r"""GetTrack(ChToeBarLeafspringAxle self) -> double"""
        return _vehicle.ChToeBarLeafspringAxle_GetTrack(self)

    def GetSpring(self, side):
        r"""GetSpring(ChToeBarLeafspringAxle self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChToeBarLeafspringAxle_GetSpring(self, side)

    def GetShock(self, side):
        r"""GetShock(ChToeBarLeafspringAxle self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChToeBarLeafspringAxle_GetShock(self, side)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChToeBarLeafspringAxle self, chrono::vehicle::VehicleSide side) -> Force"""
        return _vehicle.ChToeBarLeafspringAxle_ReportSuspensionForce(self, side)

    def GetSpringForce(self, side):
        r"""GetSpringForce(ChToeBarLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChToeBarLeafspringAxle_GetSpringForce(self, side)

    def GetSpringLength(self, side):
        r"""GetSpringLength(ChToeBarLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChToeBarLeafspringAxle_GetSpringLength(self, side)

    def GetSpringDeformation(self, side):
        r"""GetSpringDeformation(ChToeBarLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChToeBarLeafspringAxle_GetSpringDeformation(self, side)

    def GetShockForce(self, side):
        r"""GetShockForce(ChToeBarLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChToeBarLeafspringAxle_GetShockForce(self, side)

    def GetShockLength(self, side):
        r"""GetShockLength(ChToeBarLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChToeBarLeafspringAxle_GetShockLength(self, side)

    def GetShockVelocity(self, side):
        r"""GetShockVelocity(ChToeBarLeafspringAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChToeBarLeafspringAxle_GetShockVelocity(self, side)

    def GetKingpinAngleLeft(self):
        r"""GetKingpinAngleLeft(ChToeBarLeafspringAxle self) -> double"""
        return _vehicle.ChToeBarLeafspringAxle_GetKingpinAngleLeft(self)

    def GetKingpinAngleRight(self):
        r"""GetKingpinAngleRight(ChToeBarLeafspringAxle self) -> double"""
        return _vehicle.ChToeBarLeafspringAxle_GetKingpinAngleRight(self)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChToeBarLeafspringAxle self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChToeBarLeafspringAxle_LogConstraintViolations(self, side)

    def LogHardpointLocations(self, ref, inches=False):
        r"""LogHardpointLocations(ChToeBarLeafspringAxle self, ChVectorD ref, bool inches=False)"""
        return _vehicle.ChToeBarLeafspringAxle_LogHardpointLocations(self, ref, inches)

# Register ChToeBarLeafspringAxle in _vehicle:
_vehicle.ChToeBarLeafspringAxle_swigregister(ChToeBarLeafspringAxle)

class ChSolidBellcrankThreeLinkAxle(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChSolidBellcrankThreeLinkAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSolidBellcrankThreeLinkAxle

    def GetTemplateName(self):
        r"""GetTemplateName(ChSolidBellcrankThreeLinkAxle self) -> std::string"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChSolidBellcrankThreeLinkAxle self) -> bool"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChSolidBellcrankThreeLinkAxle self) -> bool"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_IsIndependent(self)

    def Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChSolidBellcrankThreeLinkAxle self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, std::shared_ptr< chrono::ChBody > tierod_body, int steering_index, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChSolidBellcrankThreeLinkAxle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChSolidBellcrankThreeLinkAxle self)"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_RemoveVisualizationAssets(self)

    def GetMass(self):
        r"""GetMass(ChSolidBellcrankThreeLinkAxle self) -> double"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_GetMass(self)

    def GetCOMPos(self):
        r"""GetCOMPos(ChSolidBellcrankThreeLinkAxle self) -> ChVectorD"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_GetCOMPos(self)

    def GetTrack(self):
        r"""GetTrack(ChSolidBellcrankThreeLinkAxle self) -> double"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_GetTrack(self)

    def GetSpring(self, side):
        r"""GetSpring(ChSolidBellcrankThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_GetSpring(self, side)

    def GetShock(self, side):
        r"""GetShock(ChSolidBellcrankThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_GetShock(self, side)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChSolidBellcrankThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> Force"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_ReportSuspensionForce(self, side)

    def GetSpringForce(self, side):
        r"""GetSpringForce(ChSolidBellcrankThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_GetSpringForce(self, side)

    def GetSpringLength(self, side):
        r"""GetSpringLength(ChSolidBellcrankThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_GetSpringLength(self, side)

    def GetSpringDeformation(self, side):
        r"""GetSpringDeformation(ChSolidBellcrankThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_GetSpringDeformation(self, side)

    def GetShockForce(self, side):
        r"""GetShockForce(ChSolidBellcrankThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_GetShockForce(self, side)

    def GetShockLength(self, side):
        r"""GetShockLength(ChSolidBellcrankThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_GetShockLength(self, side)

    def GetShockVelocity(self, side):
        r"""GetShockVelocity(ChSolidBellcrankThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_GetShockVelocity(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChSolidBellcrankThreeLinkAxle self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_LogConstraintViolations(self, side)

    def LogHardpointLocations(self, ref, inches=False):
        r"""LogHardpointLocations(ChSolidBellcrankThreeLinkAxle self, ChVectorD ref, bool inches=False)"""
        return _vehicle.ChSolidBellcrankThreeLinkAxle_LogHardpointLocations(self, ref, inches)

# Register ChSolidBellcrankThreeLinkAxle in _vehicle:
_vehicle.ChSolidBellcrankThreeLinkAxle_swigregister(ChSolidBellcrankThreeLinkAxle)

class ChSolidThreeLinkAxle(ChSuspension):
    r"""Proxy of C++ chrono::vehicle::ChSolidThreeLinkAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSolidThreeLinkAxle

    def GetTemplateName(self):
        r"""GetTemplateName(ChSolidThreeLinkAxle self) -> std::string"""
        return _vehicle.ChSolidThreeLinkAxle_GetTemplateName(self)

    def IsSteerable(self):
        r"""IsSteerable(ChSolidThreeLinkAxle self) -> bool"""
        return _vehicle.ChSolidThreeLinkAxle_IsSteerable(self)

    def IsIndependent(self):
        r"""IsIndependent(ChSolidThreeLinkAxle self) -> bool"""
        return _vehicle.ChSolidThreeLinkAxle_IsIndependent(self)

    def Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChSolidThreeLinkAxle self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, std::shared_ptr< chrono::ChBody > tierod_body, int steering_index, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChSolidThreeLinkAxle_Initialize(self, chassis, location, tierod_body, steering_index, left_ang_vel, right_ang_vel)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChSolidThreeLinkAxle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChSolidThreeLinkAxle_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChSolidThreeLinkAxle self)"""
        return _vehicle.ChSolidThreeLinkAxle_RemoveVisualizationAssets(self)

    def GetMass(self):
        r"""GetMass(ChSolidThreeLinkAxle self) -> double"""
        return _vehicle.ChSolidThreeLinkAxle_GetMass(self)

    def GetCOMPos(self):
        r"""GetCOMPos(ChSolidThreeLinkAxle self) -> ChVectorD"""
        return _vehicle.ChSolidThreeLinkAxle_GetCOMPos(self)

    def GetTrack(self):
        r"""GetTrack(ChSolidThreeLinkAxle self) -> double"""
        return _vehicle.ChSolidThreeLinkAxle_GetTrack(self)

    def GetSpring(self, side):
        r"""GetSpring(ChSolidThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChSolidThreeLinkAxle_GetSpring(self, side)

    def GetShock(self, side):
        r"""GetShock(ChSolidThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> std::shared_ptr< chrono::ChLinkTSDA >"""
        return _vehicle.ChSolidThreeLinkAxle_GetShock(self, side)

    def ReportSuspensionForce(self, side):
        r"""ReportSuspensionForce(ChSolidThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> Force"""
        return _vehicle.ChSolidThreeLinkAxle_ReportSuspensionForce(self, side)

    def GetSpringForce(self, side):
        r"""GetSpringForce(ChSolidThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidThreeLinkAxle_GetSpringForce(self, side)

    def GetSpringLength(self, side):
        r"""GetSpringLength(ChSolidThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidThreeLinkAxle_GetSpringLength(self, side)

    def GetSpringDeformation(self, side):
        r"""GetSpringDeformation(ChSolidThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidThreeLinkAxle_GetSpringDeformation(self, side)

    def GetShockForce(self, side):
        r"""GetShockForce(ChSolidThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidThreeLinkAxle_GetShockForce(self, side)

    def GetShockLength(self, side):
        r"""GetShockLength(ChSolidThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidThreeLinkAxle_GetShockLength(self, side)

    def GetShockVelocity(self, side):
        r"""GetShockVelocity(ChSolidThreeLinkAxle self, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSolidThreeLinkAxle_GetShockVelocity(self, side)

    def LogConstraintViolations(self, side):
        r"""LogConstraintViolations(ChSolidThreeLinkAxle self, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChSolidThreeLinkAxle_LogConstraintViolations(self, side)

    def LogHardpointLocations(self, ref, inches=False):
        r"""LogHardpointLocations(ChSolidThreeLinkAxle self, ChVectorD ref, bool inches=False)"""
        return _vehicle.ChSolidThreeLinkAxle_LogHardpointLocations(self, ref, inches)

# Register ChSolidThreeLinkAxle in _vehicle:
_vehicle.ChSolidThreeLinkAxle_swigregister(ChSolidThreeLinkAxle)

class DoubleWishbone(ChDoubleWishbone):
    r"""Proxy of C++ chrono::vehicle::DoubleWishbone class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DoubleWishbone self, std::string const & filename) -> DoubleWishbone
        __init__(DoubleWishbone self, rapidjson::Document const & d) -> DoubleWishbone
        """
        _vehicle.DoubleWishbone_swiginit(self, _vehicle.new_DoubleWishbone(*args))
    __swig_destroy__ = _vehicle.delete_DoubleWishbone

    def getSpindleMass(self):
        r"""getSpindleMass(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getSpindleMass(self)

    def getUCAMass(self):
        r"""getUCAMass(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getUCAMass(self)

    def getLCAMass(self):
        r"""getLCAMass(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getLCAMass(self)

    def getUprightMass(self):
        r"""getUprightMass(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getSpindleWidth(self)

    def getUCARadius(self):
        r"""getUCARadius(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getUCARadius(self)

    def getLCARadius(self):
        r"""getLCARadius(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getLCARadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(DoubleWishbone self) -> ChVectorD"""
        return _vehicle.DoubleWishbone_getSpindleInertia(self)

    def getUCAInertiaMoments(self):
        r"""getUCAInertiaMoments(DoubleWishbone self) -> ChVectorD"""
        return _vehicle.DoubleWishbone_getUCAInertiaMoments(self)

    def getUCAInertiaProducts(self):
        r"""getUCAInertiaProducts(DoubleWishbone self) -> ChVectorD"""
        return _vehicle.DoubleWishbone_getUCAInertiaProducts(self)

    def getLCAInertiaMoments(self):
        r"""getLCAInertiaMoments(DoubleWishbone self) -> ChVectorD"""
        return _vehicle.DoubleWishbone_getLCAInertiaMoments(self)

    def getLCAInertiaProducts(self):
        r"""getLCAInertiaProducts(DoubleWishbone self) -> ChVectorD"""
        return _vehicle.DoubleWishbone_getLCAInertiaProducts(self)

    def getUprightInertiaMoments(self):
        r"""getUprightInertiaMoments(DoubleWishbone self) -> ChVectorD"""
        return _vehicle.DoubleWishbone_getUprightInertiaMoments(self)

    def getUprightInertiaProducts(self):
        r"""getUprightInertiaProducts(DoubleWishbone self) -> ChVectorD"""
        return _vehicle.DoubleWishbone_getUprightInertiaProducts(self)

    def getAxleInertia(self):
        r"""getAxleInertia(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(DoubleWishbone self) -> double"""
        return _vehicle.DoubleWishbone_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(DoubleWishbone self) -> ForceFunctor"""
        return _vehicle.DoubleWishbone_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(DoubleWishbone self) -> ForceFunctor"""
        return _vehicle.DoubleWishbone_getShockForceFunctor(self)

# Register DoubleWishbone in _vehicle:
_vehicle.DoubleWishbone_swigregister(DoubleWishbone)

class DoubleWishboneReduced(ChDoubleWishboneReduced):
    r"""Proxy of C++ chrono::vehicle::DoubleWishboneReduced class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(DoubleWishboneReduced self, std::string const & filename) -> DoubleWishboneReduced
        __init__(DoubleWishboneReduced self, rapidjson::Document const & d) -> DoubleWishboneReduced
        """
        _vehicle.DoubleWishboneReduced_swiginit(self, _vehicle.new_DoubleWishboneReduced(*args))
    __swig_destroy__ = _vehicle.delete_DoubleWishboneReduced

    def getSpindleMass(self):
        r"""getSpindleMass(DoubleWishboneReduced self) -> double"""
        return _vehicle.DoubleWishboneReduced_getSpindleMass(self)

    def getUprightMass(self):
        r"""getUprightMass(DoubleWishboneReduced self) -> double"""
        return _vehicle.DoubleWishboneReduced_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(DoubleWishboneReduced self) -> double"""
        return _vehicle.DoubleWishboneReduced_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(DoubleWishboneReduced self) -> double"""
        return _vehicle.DoubleWishboneReduced_getSpindleWidth(self)

    def getUprightRadius(self):
        r"""getUprightRadius(DoubleWishboneReduced self) -> double"""
        return _vehicle.DoubleWishboneReduced_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(DoubleWishboneReduced self) -> ChVectorD"""
        return _vehicle.DoubleWishboneReduced_getSpindleInertia(self)

    def getUprightInertia(self):
        r"""getUprightInertia(DoubleWishboneReduced self) -> ChVectorD"""
        return _vehicle.DoubleWishboneReduced_getUprightInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(DoubleWishboneReduced self) -> double"""
        return _vehicle.DoubleWishboneReduced_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(DoubleWishboneReduced self) -> double"""
        return _vehicle.DoubleWishboneReduced_getSpringRestLength(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(DoubleWishboneReduced self) -> ForceFunctor"""
        return _vehicle.DoubleWishboneReduced_getShockForceFunctor(self)

# Register DoubleWishboneReduced in _vehicle:
_vehicle.DoubleWishboneReduced_swigregister(DoubleWishboneReduced)

class HendricksonPRIMAXX(ChHendricksonPRIMAXX):
    r"""Proxy of C++ chrono::vehicle::HendricksonPRIMAXX class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(HendricksonPRIMAXX self, std::string const & filename) -> HendricksonPRIMAXX
        __init__(HendricksonPRIMAXX self, rapidjson::Document const & d) -> HendricksonPRIMAXX
        """
        _vehicle.HendricksonPRIMAXX_swiginit(self, _vehicle.new_HendricksonPRIMAXX(*args))
    __swig_destroy__ = _vehicle.delete_HendricksonPRIMAXX

    def getAxlehousingCOM(self):
        r"""getAxlehousingCOM(HendricksonPRIMAXX self) -> ChVectorD"""
        return _vehicle.HendricksonPRIMAXX_getAxlehousingCOM(self)

    def getTransversebeamCOM(self):
        r"""getTransversebeamCOM(HendricksonPRIMAXX self) -> ChVectorD"""
        return _vehicle.HendricksonPRIMAXX_getTransversebeamCOM(self)

    def getAxlehousingMass(self):
        r"""getAxlehousingMass(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getAxlehousingMass(self)

    def getKnuckleMass(self):
        r"""getKnuckleMass(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getKnuckleMass(self)

    def getSpindleMass(self):
        r"""getSpindleMass(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getSpindleMass(self)

    def getTorquerodMass(self):
        r"""getTorquerodMass(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getTorquerodMass(self)

    def getLowerbeamMass(self):
        r"""getLowerbeamMass(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getLowerbeamMass(self)

    def getTransversebeamMass(self):
        r"""getTransversebeamMass(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getTransversebeamMass(self)

    def getAxlehousingRadius(self):
        r"""getAxlehousingRadius(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getAxlehousingRadius(self)

    def getKnuckleRadius(self):
        r"""getKnuckleRadius(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getKnuckleRadius(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getSpindleWidth(self)

    def getTorquerodRadius(self):
        r"""getTorquerodRadius(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getTorquerodRadius(self)

    def getLowerbeamRadius(self):
        r"""getLowerbeamRadius(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getLowerbeamRadius(self)

    def getTransversebeamRadius(self):
        r"""getTransversebeamRadius(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getTransversebeamRadius(self)

    def getAxlehousingInertia(self):
        r"""getAxlehousingInertia(HendricksonPRIMAXX self) -> ChVectorD"""
        return _vehicle.HendricksonPRIMAXX_getAxlehousingInertia(self)

    def getKnuckleInertia(self):
        r"""getKnuckleInertia(HendricksonPRIMAXX self) -> ChVectorD"""
        return _vehicle.HendricksonPRIMAXX_getKnuckleInertia(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(HendricksonPRIMAXX self) -> ChVectorD"""
        return _vehicle.HendricksonPRIMAXX_getSpindleInertia(self)

    def getTorquerodInertia(self):
        r"""getTorquerodInertia(HendricksonPRIMAXX self) -> ChVectorD"""
        return _vehicle.HendricksonPRIMAXX_getTorquerodInertia(self)

    def getLowerbeamInertia(self):
        r"""getLowerbeamInertia(HendricksonPRIMAXX self) -> ChVectorD"""
        return _vehicle.HendricksonPRIMAXX_getLowerbeamInertia(self)

    def getTransversebeamInertia(self):
        r"""getTransversebeamInertia(HendricksonPRIMAXX self) -> ChVectorD"""
        return _vehicle.HendricksonPRIMAXX_getTransversebeamInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getAxleInertia(self)

    def getShockAHRestLength(self):
        r"""getShockAHRestLength(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getShockAHRestLength(self)

    def getShockAHForceCallback(self):
        r"""getShockAHForceCallback(HendricksonPRIMAXX self) -> ForceFunctor"""
        return _vehicle.HendricksonPRIMAXX_getShockAHForceCallback(self)

    def getShockLBRestLength(self):
        r"""getShockLBRestLength(HendricksonPRIMAXX self) -> double"""
        return _vehicle.HendricksonPRIMAXX_getShockLBRestLength(self)

    def getShockLBForceCallback(self):
        r"""getShockLBForceCallback(HendricksonPRIMAXX self) -> ForceFunctor"""
        return _vehicle.HendricksonPRIMAXX_getShockLBForceCallback(self)

# Register HendricksonPRIMAXX in _vehicle:
_vehicle.HendricksonPRIMAXX_swigregister(HendricksonPRIMAXX)

class LeafspringAxle(ChLeafspringAxle):
    r"""Proxy of C++ chrono::vehicle::LeafspringAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(LeafspringAxle self, std::string const & filename) -> LeafspringAxle
        __init__(LeafspringAxle self, rapidjson::Document const & d) -> LeafspringAxle
        """
        _vehicle.LeafspringAxle_swiginit(self, _vehicle.new_LeafspringAxle(*args))
    __swig_destroy__ = _vehicle.delete_LeafspringAxle

# Register LeafspringAxle in _vehicle:
_vehicle.LeafspringAxle_swigregister(LeafspringAxle)

class MacPhersonStrut(ChMacPhersonStrut):
    r"""Proxy of C++ chrono::vehicle::MacPhersonStrut class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MacPhersonStrut self, std::string const & filename) -> MacPhersonStrut
        __init__(MacPhersonStrut self, rapidjson::Document const & d) -> MacPhersonStrut
        """
        _vehicle.MacPhersonStrut_swiginit(self, _vehicle.new_MacPhersonStrut(*args))
    __swig_destroy__ = _vehicle.delete_MacPhersonStrut

    def getSpindleMass(self):
        r"""getSpindleMass(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getSpindleMass(self)

    def getStrutMass(self):
        r"""getStrutMass(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getStrutMass(self)

    def getLCAMass(self):
        r"""getLCAMass(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getLCAMass(self)

    def getUprightMass(self):
        r"""getUprightMass(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getSpindleWidth(self)

    def getStrutRadius(self):
        r"""getStrutRadius(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getStrutRadius(self)

    def getLCARadius(self):
        r"""getLCARadius(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getLCARadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(MacPhersonStrut self) -> ChVectorD"""
        return _vehicle.MacPhersonStrut_getSpindleInertia(self)

    def getStrutInertia(self):
        r"""getStrutInertia(MacPhersonStrut self) -> ChVectorD"""
        return _vehicle.MacPhersonStrut_getStrutInertia(self)

    def getLCAInertia(self):
        r"""getLCAInertia(MacPhersonStrut self) -> ChVectorD"""
        return _vehicle.MacPhersonStrut_getLCAInertia(self)

    def getUprightInertia(self):
        r"""getUprightInertia(MacPhersonStrut self) -> ChVectorD"""
        return _vehicle.MacPhersonStrut_getUprightInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(MacPhersonStrut self) -> double"""
        return _vehicle.MacPhersonStrut_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(MacPhersonStrut self) -> ForceFunctor"""
        return _vehicle.MacPhersonStrut_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(MacPhersonStrut self) -> ForceFunctor"""
        return _vehicle.MacPhersonStrut_getShockForceFunctor(self)

# Register MacPhersonStrut in _vehicle:
_vehicle.MacPhersonStrut_swigregister(MacPhersonStrut)

class MultiLink(ChMultiLink):
    r"""Proxy of C++ chrono::vehicle::MultiLink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MultiLink self, std::string const & filename) -> MultiLink
        __init__(MultiLink self, rapidjson::Document const & d) -> MultiLink
        """
        _vehicle.MultiLink_swiginit(self, _vehicle.new_MultiLink(*args))
    __swig_destroy__ = _vehicle.delete_MultiLink

    def getSpindleMass(self):
        r"""getSpindleMass(MultiLink self) -> double"""
        return _vehicle.MultiLink_getSpindleMass(self)

    def getUpperArmMass(self):
        r"""getUpperArmMass(MultiLink self) -> double"""
        return _vehicle.MultiLink_getUpperArmMass(self)

    def getLateralMass(self):
        r"""getLateralMass(MultiLink self) -> double"""
        return _vehicle.MultiLink_getLateralMass(self)

    def getTrailingLinkMass(self):
        r"""getTrailingLinkMass(MultiLink self) -> double"""
        return _vehicle.MultiLink_getTrailingLinkMass(self)

    def getUprightMass(self):
        r"""getUprightMass(MultiLink self) -> double"""
        return _vehicle.MultiLink_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(MultiLink self) -> double"""
        return _vehicle.MultiLink_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(MultiLink self) -> double"""
        return _vehicle.MultiLink_getSpindleWidth(self)

    def getUpperArmRadius(self):
        r"""getUpperArmRadius(MultiLink self) -> double"""
        return _vehicle.MultiLink_getUpperArmRadius(self)

    def getLateralRadius(self):
        r"""getLateralRadius(MultiLink self) -> double"""
        return _vehicle.MultiLink_getLateralRadius(self)

    def getTrailingLinkRadius(self):
        r"""getTrailingLinkRadius(MultiLink self) -> double"""
        return _vehicle.MultiLink_getTrailingLinkRadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(MultiLink self) -> double"""
        return _vehicle.MultiLink_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(MultiLink self) -> ChVectorD"""
        return _vehicle.MultiLink_getSpindleInertia(self)

    def getUpperArmInertia(self):
        r"""getUpperArmInertia(MultiLink self) -> ChVectorD"""
        return _vehicle.MultiLink_getUpperArmInertia(self)

    def getLateralInertia(self):
        r"""getLateralInertia(MultiLink self) -> ChVectorD"""
        return _vehicle.MultiLink_getLateralInertia(self)

    def getTrailingLinkInertia(self):
        r"""getTrailingLinkInertia(MultiLink self) -> ChVectorD"""
        return _vehicle.MultiLink_getTrailingLinkInertia(self)

    def getUprightInertia(self):
        r"""getUprightInertia(MultiLink self) -> ChVectorD"""
        return _vehicle.MultiLink_getUprightInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(MultiLink self) -> double"""
        return _vehicle.MultiLink_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(MultiLink self) -> double"""
        return _vehicle.MultiLink_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(MultiLink self) -> ForceFunctor"""
        return _vehicle.MultiLink_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(MultiLink self) -> ForceFunctor"""
        return _vehicle.MultiLink_getShockForceFunctor(self)

# Register MultiLink in _vehicle:
_vehicle.MultiLink_swigregister(MultiLink)

class SemiTrailingArm(ChSemiTrailingArm):
    r"""Proxy of C++ chrono::vehicle::SemiTrailingArm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SemiTrailingArm self, std::string const & filename) -> SemiTrailingArm
        __init__(SemiTrailingArm self, rapidjson::Document const & d) -> SemiTrailingArm
        """
        _vehicle.SemiTrailingArm_swiginit(self, _vehicle.new_SemiTrailingArm(*args))
    __swig_destroy__ = _vehicle.delete_SemiTrailingArm

    def getSpindleMass(self):
        r"""getSpindleMass(SemiTrailingArm self) -> double"""
        return _vehicle.SemiTrailingArm_getSpindleMass(self)

    def getArmMass(self):
        r"""getArmMass(SemiTrailingArm self) -> double"""
        return _vehicle.SemiTrailingArm_getArmMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(SemiTrailingArm self) -> double"""
        return _vehicle.SemiTrailingArm_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(SemiTrailingArm self) -> double"""
        return _vehicle.SemiTrailingArm_getSpindleWidth(self)

    def getArmRadius(self):
        r"""getArmRadius(SemiTrailingArm self) -> double"""
        return _vehicle.SemiTrailingArm_getArmRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(SemiTrailingArm self) -> ChVectorD"""
        return _vehicle.SemiTrailingArm_getSpindleInertia(self)

    def getArmInertia(self):
        r"""getArmInertia(SemiTrailingArm self) -> ChVectorD"""
        return _vehicle.SemiTrailingArm_getArmInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(SemiTrailingArm self) -> double"""
        return _vehicle.SemiTrailingArm_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(SemiTrailingArm self) -> double"""
        return _vehicle.SemiTrailingArm_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(SemiTrailingArm self) -> ForceFunctor"""
        return _vehicle.SemiTrailingArm_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(SemiTrailingArm self) -> ForceFunctor"""
        return _vehicle.SemiTrailingArm_getShockForceFunctor(self)

# Register SemiTrailingArm in _vehicle:
_vehicle.SemiTrailingArm_swigregister(SemiTrailingArm)

class SolidAxle(ChSolidAxle):
    r"""Proxy of C++ chrono::vehicle::SolidAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SolidAxle self, std::string const & filename) -> SolidAxle
        __init__(SolidAxle self, rapidjson::Document const & d) -> SolidAxle
        """
        _vehicle.SolidAxle_swiginit(self, _vehicle.new_SolidAxle(*args))
    __swig_destroy__ = _vehicle.delete_SolidAxle

    def getAxleTubeMass(self):
        r"""getAxleTubeMass(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getAxleTubeMass(self)

    def getSpindleMass(self):
        r"""getSpindleMass(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getSpindleMass(self)

    def getULMass(self):
        r"""getULMass(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getULMass(self)

    def getLLMass(self):
        r"""getLLMass(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getLLMass(self)

    def getKnuckleMass(self):
        r"""getKnuckleMass(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getKnuckleMass(self)

    def getTierodMass(self):
        r"""getTierodMass(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getTierodMass(self)

    def getDraglinkMass(self):
        r"""getDraglinkMass(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getDraglinkMass(self)

    def getBellCrankMass(self):
        r"""getBellCrankMass(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getBellCrankMass(self)

    def getAxleTubeRadius(self):
        r"""getAxleTubeRadius(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getAxleTubeRadius(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getSpindleWidth(self)

    def getULRadius(self):
        r"""getULRadius(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getULRadius(self)

    def getLLRadius(self):
        r"""getLLRadius(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getLLRadius(self)

    def getKnuckleRadius(self):
        r"""getKnuckleRadius(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getKnuckleRadius(self)

    def getTierodRadius(self):
        r"""getTierodRadius(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getTierodRadius(self)

    def getDraglinkRadius(self):
        r"""getDraglinkRadius(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getDraglinkRadius(self)

    def getBellCrankRadius(self):
        r"""getBellCrankRadius(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getBellCrankRadius(self)

    def getAxleTubeInertia(self):
        r"""getAxleTubeInertia(SolidAxle self) -> ChVectorD"""
        return _vehicle.SolidAxle_getAxleTubeInertia(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(SolidAxle self) -> ChVectorD"""
        return _vehicle.SolidAxle_getSpindleInertia(self)

    def getULInertia(self):
        r"""getULInertia(SolidAxle self) -> ChVectorD"""
        return _vehicle.SolidAxle_getULInertia(self)

    def getLLInertia(self):
        r"""getLLInertia(SolidAxle self) -> ChVectorD"""
        return _vehicle.SolidAxle_getLLInertia(self)

    def getKnuckleInertia(self):
        r"""getKnuckleInertia(SolidAxle self) -> ChVectorD"""
        return _vehicle.SolidAxle_getKnuckleInertia(self)

    def getTierodInertia(self):
        r"""getTierodInertia(SolidAxle self) -> ChVectorD"""
        return _vehicle.SolidAxle_getTierodInertia(self)

    def getDraglinkInertia(self):
        r"""getDraglinkInertia(SolidAxle self) -> ChVectorD"""
        return _vehicle.SolidAxle_getDraglinkInertia(self)

    def getBellCrankInertia(self):
        r"""getBellCrankInertia(SolidAxle self) -> ChVectorD"""
        return _vehicle.SolidAxle_getBellCrankInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(SolidAxle self) -> double"""
        return _vehicle.SolidAxle_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(SolidAxle self) -> ForceFunctor"""
        return _vehicle.SolidAxle_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(SolidAxle self) -> ForceFunctor"""
        return _vehicle.SolidAxle_getShockForceFunctor(self)

    def getAxleTubeCOM(self):
        r"""getAxleTubeCOM(SolidAxle self) -> ChVectorD"""
        return _vehicle.SolidAxle_getAxleTubeCOM(self)

# Register SolidAxle in _vehicle:
_vehicle.SolidAxle_swigregister(SolidAxle)

class ThreeLinkIRS(ChThreeLinkIRS):
    r"""Proxy of C++ chrono::vehicle::ThreeLinkIRS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ThreeLinkIRS self, std::string const & filename) -> ThreeLinkIRS
        __init__(ThreeLinkIRS self, rapidjson::Document const & d) -> ThreeLinkIRS
        """
        _vehicle.ThreeLinkIRS_swiginit(self, _vehicle.new_ThreeLinkIRS(*args))
    __swig_destroy__ = _vehicle.delete_ThreeLinkIRS

    def getSpindleMass(self):
        r"""getSpindleMass(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getSpindleMass(self)

    def getArmMass(self):
        r"""getArmMass(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getArmMass(self)

    def getUpperLinkMass(self):
        r"""getUpperLinkMass(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getUpperLinkMass(self)

    def getLowerLinkMass(self):
        r"""getLowerLinkMass(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getLowerLinkMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getSpindleWidth(self)

    def getArmRadius(self):
        r"""getArmRadius(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getArmRadius(self)

    def getUpperLinkRadius(self):
        r"""getUpperLinkRadius(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getUpperLinkRadius(self)

    def getLowerLinkRadius(self):
        r"""getLowerLinkRadius(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getLowerLinkRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(ThreeLinkIRS self) -> ChVectorD"""
        return _vehicle.ThreeLinkIRS_getSpindleInertia(self)

    def getArmInertia(self):
        r"""getArmInertia(ThreeLinkIRS self) -> ChVectorD"""
        return _vehicle.ThreeLinkIRS_getArmInertia(self)

    def getUpperLinkInertia(self):
        r"""getUpperLinkInertia(ThreeLinkIRS self) -> ChVectorD"""
        return _vehicle.ThreeLinkIRS_getUpperLinkInertia(self)

    def getLowerLinkInertia(self):
        r"""getLowerLinkInertia(ThreeLinkIRS self) -> ChVectorD"""
        return _vehicle.ThreeLinkIRS_getLowerLinkInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(ThreeLinkIRS self) -> double"""
        return _vehicle.ThreeLinkIRS_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(ThreeLinkIRS self) -> ForceFunctor"""
        return _vehicle.ThreeLinkIRS_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(ThreeLinkIRS self) -> ForceFunctor"""
        return _vehicle.ThreeLinkIRS_getShockForceFunctor(self)

# Register ThreeLinkIRS in _vehicle:
_vehicle.ThreeLinkIRS_swigregister(ThreeLinkIRS)

class ToeBarLeafspringAxle(ChToeBarLeafspringAxle):
    r"""Proxy of C++ chrono::vehicle::ToeBarLeafspringAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ToeBarLeafspringAxle self, std::string const & filename) -> ToeBarLeafspringAxle
        __init__(ToeBarLeafspringAxle self, rapidjson::Document const & d) -> ToeBarLeafspringAxle
        """
        _vehicle.ToeBarLeafspringAxle_swiginit(self, _vehicle.new_ToeBarLeafspringAxle(*args))
    __swig_destroy__ = _vehicle.delete_ToeBarLeafspringAxle

# Register ToeBarLeafspringAxle in _vehicle:
_vehicle.ToeBarLeafspringAxle_swigregister(ToeBarLeafspringAxle)

class SolidBellcrankThreeLinkAxle(ChSolidBellcrankThreeLinkAxle):
    r"""Proxy of C++ chrono::vehicle::SolidBellcrankThreeLinkAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SolidBellcrankThreeLinkAxle self, std::string const & filename) -> SolidBellcrankThreeLinkAxle
        __init__(SolidBellcrankThreeLinkAxle self, rapidjson::Document const & d) -> SolidBellcrankThreeLinkAxle
        """
        _vehicle.SolidBellcrankThreeLinkAxle_swiginit(self, _vehicle.new_SolidBellcrankThreeLinkAxle(*args))
    __swig_destroy__ = _vehicle.delete_SolidBellcrankThreeLinkAxle

# Register SolidBellcrankThreeLinkAxle in _vehicle:
_vehicle.SolidBellcrankThreeLinkAxle_swigregister(SolidBellcrankThreeLinkAxle)

class SolidThreeLinkAxle(ChSolidThreeLinkAxle):
    r"""Proxy of C++ chrono::vehicle::SolidThreeLinkAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SolidThreeLinkAxle self, std::string const & filename) -> SolidThreeLinkAxle
        __init__(SolidThreeLinkAxle self, rapidjson::Document const & d) -> SolidThreeLinkAxle
        """
        _vehicle.SolidThreeLinkAxle_swiginit(self, _vehicle.new_SolidThreeLinkAxle(*args))
    __swig_destroy__ = _vehicle.delete_SolidThreeLinkAxle

# Register SolidThreeLinkAxle in _vehicle:
_vehicle.SolidThreeLinkAxle_swigregister(SolidThreeLinkAxle)

class Generic_RigidSuspension(ChRigidSuspension):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_RigidSuspension class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_RigidSuspension self, std::string const & name) -> Generic_RigidSuspension"""
        _vehicle.Generic_RigidSuspension_swiginit(self, _vehicle.new_Generic_RigidSuspension(name))
    __swig_destroy__ = _vehicle.delete_Generic_RigidSuspension

    def getSpindleMass(self):
        r"""getSpindleMass(Generic_RigidSuspension self) -> double"""
        return _vehicle.Generic_RigidSuspension_getSpindleMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(Generic_RigidSuspension self) -> double"""
        return _vehicle.Generic_RigidSuspension_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(Generic_RigidSuspension self) -> double"""
        return _vehicle.Generic_RigidSuspension_getSpindleWidth(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(Generic_RigidSuspension self) -> ChVectorD"""
        return _vehicle.Generic_RigidSuspension_getSpindleInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(Generic_RigidSuspension self) -> double"""
        return _vehicle.Generic_RigidSuspension_getAxleInertia(self)

# Register Generic_RigidSuspension in _vehicle:
_vehicle.Generic_RigidSuspension_swigregister(Generic_RigidSuspension)

class Generic_RigidPinnedAxle(ChRigidPinnedAxle):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_RigidPinnedAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_RigidPinnedAxle self, std::string const & name) -> Generic_RigidPinnedAxle"""
        _vehicle.Generic_RigidPinnedAxle_swiginit(self, _vehicle.new_Generic_RigidPinnedAxle(name))
    __swig_destroy__ = _vehicle.delete_Generic_RigidPinnedAxle

    def getAxleTubeCOM(self):
        r"""getAxleTubeCOM(Generic_RigidPinnedAxle self) -> ChVectorD"""
        return _vehicle.Generic_RigidPinnedAxle_getAxleTubeCOM(self)

    def getAxlePinLocation(self):
        r"""getAxlePinLocation(Generic_RigidPinnedAxle self) -> ChVectorD"""
        return _vehicle.Generic_RigidPinnedAxle_getAxlePinLocation(self)

    def getSpindleMass(self):
        r"""getSpindleMass(Generic_RigidPinnedAxle self) -> double"""
        return _vehicle.Generic_RigidPinnedAxle_getSpindleMass(self)

    def getAxleTubeMass(self):
        r"""getAxleTubeMass(Generic_RigidPinnedAxle self) -> double"""
        return _vehicle.Generic_RigidPinnedAxle_getAxleTubeMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(Generic_RigidPinnedAxle self) -> double"""
        return _vehicle.Generic_RigidPinnedAxle_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(Generic_RigidPinnedAxle self) -> double"""
        return _vehicle.Generic_RigidPinnedAxle_getSpindleWidth(self)

    def getAxleTubeRadius(self):
        r"""getAxleTubeRadius(Generic_RigidPinnedAxle self) -> double"""
        return _vehicle.Generic_RigidPinnedAxle_getAxleTubeRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(Generic_RigidPinnedAxle self) -> ChVectorD"""
        return _vehicle.Generic_RigidPinnedAxle_getSpindleInertia(self)

    def getAxleTubeInertia(self):
        r"""getAxleTubeInertia(Generic_RigidPinnedAxle self) -> ChVectorD"""
        return _vehicle.Generic_RigidPinnedAxle_getAxleTubeInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(Generic_RigidPinnedAxle self) -> double"""
        return _vehicle.Generic_RigidPinnedAxle_getAxleInertia(self)

# Register Generic_RigidPinnedAxle in _vehicle:
_vehicle.Generic_RigidPinnedAxle_swigregister(Generic_RigidPinnedAxle)

class Generic_MultiLink(ChMultiLink):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_MultiLink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_MultiLink self, std::string const & name) -> Generic_MultiLink"""
        _vehicle.Generic_MultiLink_swiginit(self, _vehicle.new_Generic_MultiLink(name))
    __swig_destroy__ = _vehicle.delete_Generic_MultiLink

    def getSpindleMass(self):
        r"""getSpindleMass(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getSpindleMass(self)

    def getUpperArmMass(self):
        r"""getUpperArmMass(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getUpperArmMass(self)

    def getLateralMass(self):
        r"""getLateralMass(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getLateralMass(self)

    def getTrailingLinkMass(self):
        r"""getTrailingLinkMass(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getTrailingLinkMass(self)

    def getUprightMass(self):
        r"""getUprightMass(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getSpindleWidth(self)

    def getUpperArmRadius(self):
        r"""getUpperArmRadius(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getUpperArmRadius(self)

    def getLateralRadius(self):
        r"""getLateralRadius(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getLateralRadius(self)

    def getTrailingLinkRadius(self):
        r"""getTrailingLinkRadius(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getTrailingLinkRadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(Generic_MultiLink self) -> ChVectorD"""
        return _vehicle.Generic_MultiLink_getSpindleInertia(self)

    def getUpperArmInertia(self):
        r"""getUpperArmInertia(Generic_MultiLink self) -> ChVectorD"""
        return _vehicle.Generic_MultiLink_getUpperArmInertia(self)

    def getLateralInertia(self):
        r"""getLateralInertia(Generic_MultiLink self) -> ChVectorD"""
        return _vehicle.Generic_MultiLink_getLateralInertia(self)

    def getTrailingLinkInertia(self):
        r"""getTrailingLinkInertia(Generic_MultiLink self) -> ChVectorD"""
        return _vehicle.Generic_MultiLink_getTrailingLinkInertia(self)

    def getUprightInertia(self):
        r"""getUprightInertia(Generic_MultiLink self) -> ChVectorD"""
        return _vehicle.Generic_MultiLink_getUprightInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(Generic_MultiLink self) -> double"""
        return _vehicle.Generic_MultiLink_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(Generic_MultiLink self) -> ForceFunctor"""
        return _vehicle.Generic_MultiLink_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(Generic_MultiLink self) -> ForceFunctor"""
        return _vehicle.Generic_MultiLink_getShockForceFunctor(self)

# Register Generic_MultiLink in _vehicle:
_vehicle.Generic_MultiLink_swigregister(Generic_MultiLink)

class Generic_DoubleWishbone(ChDoubleWishbone):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_DoubleWishbone class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_DoubleWishbone self, std::string const & name) -> Generic_DoubleWishbone"""
        _vehicle.Generic_DoubleWishbone_swiginit(self, _vehicle.new_Generic_DoubleWishbone(name))
    __swig_destroy__ = _vehicle.delete_Generic_DoubleWishbone

    def getSpindleMass(self):
        r"""getSpindleMass(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getSpindleMass(self)

    def getUCAMass(self):
        r"""getUCAMass(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getUCAMass(self)

    def getLCAMass(self):
        r"""getLCAMass(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getLCAMass(self)

    def getUprightMass(self):
        r"""getUprightMass(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getSpindleWidth(self)

    def getUCARadius(self):
        r"""getUCARadius(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getUCARadius(self)

    def getLCARadius(self):
        r"""getLCARadius(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getLCARadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(Generic_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishbone_getSpindleInertia(self)

    def getUCAInertiaMoments(self):
        r"""getUCAInertiaMoments(Generic_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishbone_getUCAInertiaMoments(self)

    def getUCAInertiaProducts(self):
        r"""getUCAInertiaProducts(Generic_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishbone_getUCAInertiaProducts(self)

    def getLCAInertiaMoments(self):
        r"""getLCAInertiaMoments(Generic_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishbone_getLCAInertiaMoments(self)

    def getLCAInertiaProducts(self):
        r"""getLCAInertiaProducts(Generic_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishbone_getLCAInertiaProducts(self)

    def getUprightInertiaMoments(self):
        r"""getUprightInertiaMoments(Generic_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishbone_getUprightInertiaMoments(self)

    def getUprightInertiaProducts(self):
        r"""getUprightInertiaProducts(Generic_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishbone_getUprightInertiaProducts(self)

    def getAxleInertia(self):
        r"""getAxleInertia(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(Generic_DoubleWishbone self) -> double"""
        return _vehicle.Generic_DoubleWishbone_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(Generic_DoubleWishbone self) -> ForceFunctor"""
        return _vehicle.Generic_DoubleWishbone_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(Generic_DoubleWishbone self) -> ForceFunctor"""
        return _vehicle.Generic_DoubleWishbone_getShockForceFunctor(self)

# Register Generic_DoubleWishbone in _vehicle:
_vehicle.Generic_DoubleWishbone_swigregister(Generic_DoubleWishbone)

class Generic_DoubleWishboneFront(ChDoubleWishbone):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_DoubleWishboneFront class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_DoubleWishboneFront self, std::string const & name) -> Generic_DoubleWishboneFront"""
        _vehicle.Generic_DoubleWishboneFront_swiginit(self, _vehicle.new_Generic_DoubleWishboneFront(name))
    __swig_destroy__ = _vehicle.delete_Generic_DoubleWishboneFront

    def getSpindleMass(self):
        r"""getSpindleMass(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getSpindleMass(self)

    def getUCAMass(self):
        r"""getUCAMass(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getUCAMass(self)

    def getLCAMass(self):
        r"""getLCAMass(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getLCAMass(self)

    def getUprightMass(self):
        r"""getUprightMass(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getSpindleWidth(self)

    def getUCARadius(self):
        r"""getUCARadius(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getUCARadius(self)

    def getLCARadius(self):
        r"""getLCARadius(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getLCARadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(Generic_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneFront_getSpindleInertia(self)

    def getUCAInertiaMoments(self):
        r"""getUCAInertiaMoments(Generic_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneFront_getUCAInertiaMoments(self)

    def getUCAInertiaProducts(self):
        r"""getUCAInertiaProducts(Generic_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneFront_getUCAInertiaProducts(self)

    def getLCAInertiaMoments(self):
        r"""getLCAInertiaMoments(Generic_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneFront_getLCAInertiaMoments(self)

    def getLCAInertiaProducts(self):
        r"""getLCAInertiaProducts(Generic_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneFront_getLCAInertiaProducts(self)

    def getUprightInertiaMoments(self):
        r"""getUprightInertiaMoments(Generic_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneFront_getUprightInertiaMoments(self)

    def getUprightInertiaProducts(self):
        r"""getUprightInertiaProducts(Generic_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneFront_getUprightInertiaProducts(self)

    def getAxleInertia(self):
        r"""getAxleInertia(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(Generic_DoubleWishboneFront self) -> double"""
        return _vehicle.Generic_DoubleWishboneFront_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(Generic_DoubleWishboneFront self) -> ForceFunctor"""
        return _vehicle.Generic_DoubleWishboneFront_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(Generic_DoubleWishboneFront self) -> ForceFunctor"""
        return _vehicle.Generic_DoubleWishboneFront_getShockForceFunctor(self)

# Register Generic_DoubleWishboneFront in _vehicle:
_vehicle.Generic_DoubleWishboneFront_swigregister(Generic_DoubleWishboneFront)

class Generic_DoubleWishboneRear(ChDoubleWishbone):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_DoubleWishboneRear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_DoubleWishboneRear self, std::string const & name) -> Generic_DoubleWishboneRear"""
        _vehicle.Generic_DoubleWishboneRear_swiginit(self, _vehicle.new_Generic_DoubleWishboneRear(name))
    __swig_destroy__ = _vehicle.delete_Generic_DoubleWishboneRear

    def getSpindleMass(self):
        r"""getSpindleMass(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getSpindleMass(self)

    def getUCAMass(self):
        r"""getUCAMass(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getUCAMass(self)

    def getLCAMass(self):
        r"""getLCAMass(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getLCAMass(self)

    def getUprightMass(self):
        r"""getUprightMass(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getSpindleWidth(self)

    def getUCARadius(self):
        r"""getUCARadius(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getUCARadius(self)

    def getLCARadius(self):
        r"""getLCARadius(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getLCARadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(Generic_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneRear_getSpindleInertia(self)

    def getUCAInertiaMoments(self):
        r"""getUCAInertiaMoments(Generic_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneRear_getUCAInertiaMoments(self)

    def getUCAInertiaProducts(self):
        r"""getUCAInertiaProducts(Generic_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneRear_getUCAInertiaProducts(self)

    def getLCAInertiaMoments(self):
        r"""getLCAInertiaMoments(Generic_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneRear_getLCAInertiaMoments(self)

    def getLCAInertiaProducts(self):
        r"""getLCAInertiaProducts(Generic_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneRear_getLCAInertiaProducts(self)

    def getUprightInertiaMoments(self):
        r"""getUprightInertiaMoments(Generic_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneRear_getUprightInertiaMoments(self)

    def getUprightInertiaProducts(self):
        r"""getUprightInertiaProducts(Generic_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.Generic_DoubleWishboneRear_getUprightInertiaProducts(self)

    def getAxleInertia(self):
        r"""getAxleInertia(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(Generic_DoubleWishboneRear self) -> double"""
        return _vehicle.Generic_DoubleWishboneRear_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(Generic_DoubleWishboneRear self) -> ForceFunctor"""
        return _vehicle.Generic_DoubleWishboneRear_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(Generic_DoubleWishboneRear self) -> ForceFunctor"""
        return _vehicle.Generic_DoubleWishboneRear_getShockForceFunctor(self)

# Register Generic_DoubleWishboneRear in _vehicle:
_vehicle.Generic_DoubleWishboneRear_swigregister(Generic_DoubleWishboneRear)

class HMMWV_DoubleWishboneFront(ChDoubleWishbone):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_DoubleWishboneFront class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_DoubleWishboneFront self, std::string const & name) -> HMMWV_DoubleWishboneFront"""
        _vehicle.HMMWV_DoubleWishboneFront_swiginit(self, _vehicle.new_HMMWV_DoubleWishboneFront(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_DoubleWishboneFront

    def getSpindleMass(self):
        r"""getSpindleMass(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getSpindleMass(self)

    def getUCAMass(self):
        r"""getUCAMass(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getUCAMass(self)

    def getLCAMass(self):
        r"""getLCAMass(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getLCAMass(self)

    def getUprightMass(self):
        r"""getUprightMass(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getSpindleWidth(self)

    def getUCARadius(self):
        r"""getUCARadius(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getUCARadius(self)

    def getLCARadius(self):
        r"""getLCARadius(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getLCARadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(HMMWV_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneFront_getSpindleInertia(self)

    def getUCAInertiaMoments(self):
        r"""getUCAInertiaMoments(HMMWV_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneFront_getUCAInertiaMoments(self)

    def getUCAInertiaProducts(self):
        r"""getUCAInertiaProducts(HMMWV_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneFront_getUCAInertiaProducts(self)

    def getLCAInertiaMoments(self):
        r"""getLCAInertiaMoments(HMMWV_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneFront_getLCAInertiaMoments(self)

    def getLCAInertiaProducts(self):
        r"""getLCAInertiaProducts(HMMWV_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneFront_getLCAInertiaProducts(self)

    def getUprightInertiaMoments(self):
        r"""getUprightInertiaMoments(HMMWV_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneFront_getUprightInertiaMoments(self)

    def getUprightInertiaProducts(self):
        r"""getUprightInertiaProducts(HMMWV_DoubleWishboneFront self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneFront_getUprightInertiaProducts(self)

    def getAxleInertia(self):
        r"""getAxleInertia(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(HMMWV_DoubleWishboneFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneFront_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(HMMWV_DoubleWishboneFront self) -> ForceFunctor"""
        return _vehicle.HMMWV_DoubleWishboneFront_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(HMMWV_DoubleWishboneFront self) -> ForceFunctor"""
        return _vehicle.HMMWV_DoubleWishboneFront_getShockForceFunctor(self)

# Register HMMWV_DoubleWishboneFront in _vehicle:
_vehicle.HMMWV_DoubleWishboneFront_swigregister(HMMWV_DoubleWishboneFront)

class HMMWV_DoubleWishboneRear(ChDoubleWishbone):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_DoubleWishboneRear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_DoubleWishboneRear self, std::string const & name) -> HMMWV_DoubleWishboneRear"""
        _vehicle.HMMWV_DoubleWishboneRear_swiginit(self, _vehicle.new_HMMWV_DoubleWishboneRear(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_DoubleWishboneRear

    def getSpindleMass(self):
        r"""getSpindleMass(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getSpindleMass(self)

    def getUCAMass(self):
        r"""getUCAMass(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getUCAMass(self)

    def getLCAMass(self):
        r"""getLCAMass(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getLCAMass(self)

    def getUprightMass(self):
        r"""getUprightMass(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getSpindleWidth(self)

    def getUCARadius(self):
        r"""getUCARadius(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getUCARadius(self)

    def getLCARadius(self):
        r"""getLCARadius(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getLCARadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(HMMWV_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneRear_getSpindleInertia(self)

    def getUCAInertiaMoments(self):
        r"""getUCAInertiaMoments(HMMWV_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneRear_getUCAInertiaMoments(self)

    def getUCAInertiaProducts(self):
        r"""getUCAInertiaProducts(HMMWV_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneRear_getUCAInertiaProducts(self)

    def getLCAInertiaMoments(self):
        r"""getLCAInertiaMoments(HMMWV_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneRear_getLCAInertiaMoments(self)

    def getLCAInertiaProducts(self):
        r"""getLCAInertiaProducts(HMMWV_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneRear_getLCAInertiaProducts(self)

    def getUprightInertiaMoments(self):
        r"""getUprightInertiaMoments(HMMWV_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneRear_getUprightInertiaMoments(self)

    def getUprightInertiaProducts(self):
        r"""getUprightInertiaProducts(HMMWV_DoubleWishboneRear self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneRear_getUprightInertiaProducts(self)

    def getAxleInertia(self):
        r"""getAxleInertia(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(HMMWV_DoubleWishboneRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneRear_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(HMMWV_DoubleWishboneRear self) -> ForceFunctor"""
        return _vehicle.HMMWV_DoubleWishboneRear_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(HMMWV_DoubleWishboneRear self) -> ForceFunctor"""
        return _vehicle.HMMWV_DoubleWishboneRear_getShockForceFunctor(self)

# Register HMMWV_DoubleWishboneRear in _vehicle:
_vehicle.HMMWV_DoubleWishboneRear_swigregister(HMMWV_DoubleWishboneRear)

class HMMWV_DoubleWishboneReducedFront(ChDoubleWishboneReduced):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedFront class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_DoubleWishboneReducedFront self, std::string const & name) -> HMMWV_DoubleWishboneReducedFront"""
        _vehicle.HMMWV_DoubleWishboneReducedFront_swiginit(self, _vehicle.new_HMMWV_DoubleWishboneReducedFront(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_DoubleWishboneReducedFront

    def getSpindleMass(self):
        r"""getSpindleMass(HMMWV_DoubleWishboneReducedFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedFront_getSpindleMass(self)

    def getUprightMass(self):
        r"""getUprightMass(HMMWV_DoubleWishboneReducedFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedFront_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(HMMWV_DoubleWishboneReducedFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedFront_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(HMMWV_DoubleWishboneReducedFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedFront_getSpindleWidth(self)

    def getUprightRadius(self):
        r"""getUprightRadius(HMMWV_DoubleWishboneReducedFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedFront_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(HMMWV_DoubleWishboneReducedFront self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneReducedFront_getSpindleInertia(self)

    def getUprightInertia(self):
        r"""getUprightInertia(HMMWV_DoubleWishboneReducedFront self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneReducedFront_getUprightInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(HMMWV_DoubleWishboneReducedFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedFront_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(HMMWV_DoubleWishboneReducedFront self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedFront_getSpringRestLength(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(HMMWV_DoubleWishboneReducedFront self) -> ForceFunctor"""
        return _vehicle.HMMWV_DoubleWishboneReducedFront_getShockForceFunctor(self)

# Register HMMWV_DoubleWishboneReducedFront in _vehicle:
_vehicle.HMMWV_DoubleWishboneReducedFront_swigregister(HMMWV_DoubleWishboneReducedFront)

class HMMWV_DoubleWishboneReducedRear(ChDoubleWishboneReduced):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_DoubleWishboneReducedRear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_DoubleWishboneReducedRear self, std::string const & name) -> HMMWV_DoubleWishboneReducedRear"""
        _vehicle.HMMWV_DoubleWishboneReducedRear_swiginit(self, _vehicle.new_HMMWV_DoubleWishboneReducedRear(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_DoubleWishboneReducedRear

    def getSpindleMass(self):
        r"""getSpindleMass(HMMWV_DoubleWishboneReducedRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedRear_getSpindleMass(self)

    def getUprightMass(self):
        r"""getUprightMass(HMMWV_DoubleWishboneReducedRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedRear_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(HMMWV_DoubleWishboneReducedRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedRear_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(HMMWV_DoubleWishboneReducedRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedRear_getSpindleWidth(self)

    def getUprightRadius(self):
        r"""getUprightRadius(HMMWV_DoubleWishboneReducedRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedRear_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(HMMWV_DoubleWishboneReducedRear self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneReducedRear_getSpindleInertia(self)

    def getUprightInertia(self):
        r"""getUprightInertia(HMMWV_DoubleWishboneReducedRear self) -> ChVectorD"""
        return _vehicle.HMMWV_DoubleWishboneReducedRear_getUprightInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(HMMWV_DoubleWishboneReducedRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedRear_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(HMMWV_DoubleWishboneReducedRear self) -> double"""
        return _vehicle.HMMWV_DoubleWishboneReducedRear_getSpringRestLength(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(HMMWV_DoubleWishboneReducedRear self) -> ForceFunctor"""
        return _vehicle.HMMWV_DoubleWishboneReducedRear_getShockForceFunctor(self)

# Register HMMWV_DoubleWishboneReducedRear in _vehicle:
_vehicle.HMMWV_DoubleWishboneReducedRear_swigregister(HMMWV_DoubleWishboneReducedRear)

class Sedan_DoubleWishbone(ChDoubleWishbone):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan_DoubleWishbone class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Sedan_DoubleWishbone self, std::string const & name) -> Sedan_DoubleWishbone"""
        _vehicle.Sedan_DoubleWishbone_swiginit(self, _vehicle.new_Sedan_DoubleWishbone(name))
    __swig_destroy__ = _vehicle.delete_Sedan_DoubleWishbone

    def getSpindleMass(self):
        r"""getSpindleMass(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getSpindleMass(self)

    def getUCAMass(self):
        r"""getUCAMass(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getUCAMass(self)

    def getLCAMass(self):
        r"""getLCAMass(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getLCAMass(self)

    def getUprightMass(self):
        r"""getUprightMass(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getSpindleWidth(self)

    def getUCARadius(self):
        r"""getUCARadius(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getUCARadius(self)

    def getLCARadius(self):
        r"""getLCARadius(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getLCARadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(Sedan_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Sedan_DoubleWishbone_getSpindleInertia(self)

    def getUCAInertiaMoments(self):
        r"""getUCAInertiaMoments(Sedan_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Sedan_DoubleWishbone_getUCAInertiaMoments(self)

    def getUCAInertiaProducts(self):
        r"""getUCAInertiaProducts(Sedan_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Sedan_DoubleWishbone_getUCAInertiaProducts(self)

    def getLCAInertiaMoments(self):
        r"""getLCAInertiaMoments(Sedan_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Sedan_DoubleWishbone_getLCAInertiaMoments(self)

    def getLCAInertiaProducts(self):
        r"""getLCAInertiaProducts(Sedan_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Sedan_DoubleWishbone_getLCAInertiaProducts(self)

    def getUprightInertiaMoments(self):
        r"""getUprightInertiaMoments(Sedan_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Sedan_DoubleWishbone_getUprightInertiaMoments(self)

    def getUprightInertiaProducts(self):
        r"""getUprightInertiaProducts(Sedan_DoubleWishbone self) -> ChVectorD"""
        return _vehicle.Sedan_DoubleWishbone_getUprightInertiaProducts(self)

    def getAxleInertia(self):
        r"""getAxleInertia(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(Sedan_DoubleWishbone self) -> double"""
        return _vehicle.Sedan_DoubleWishbone_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(Sedan_DoubleWishbone self) -> ForceFunctor"""
        return _vehicle.Sedan_DoubleWishbone_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(Sedan_DoubleWishbone self) -> ForceFunctor"""
        return _vehicle.Sedan_DoubleWishbone_getShockForceFunctor(self)

# Register Sedan_DoubleWishbone in _vehicle:
_vehicle.Sedan_DoubleWishbone_swigregister(Sedan_DoubleWishbone)

class Sedan_MultiLink(ChMultiLink):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan_MultiLink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Sedan_MultiLink self, std::string const & name) -> Sedan_MultiLink"""
        _vehicle.Sedan_MultiLink_swiginit(self, _vehicle.new_Sedan_MultiLink(name))
    __swig_destroy__ = _vehicle.delete_Sedan_MultiLink

    def getSpindleMass(self):
        r"""getSpindleMass(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getSpindleMass(self)

    def getUpperArmMass(self):
        r"""getUpperArmMass(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getUpperArmMass(self)

    def getLateralMass(self):
        r"""getLateralMass(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getLateralMass(self)

    def getTrailingLinkMass(self):
        r"""getTrailingLinkMass(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getTrailingLinkMass(self)

    def getUprightMass(self):
        r"""getUprightMass(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getUprightMass(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getSpindleWidth(self)

    def getUpperArmRadius(self):
        r"""getUpperArmRadius(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getUpperArmRadius(self)

    def getLateralRadius(self):
        r"""getLateralRadius(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getLateralRadius(self)

    def getTrailingLinkRadius(self):
        r"""getTrailingLinkRadius(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getTrailingLinkRadius(self)

    def getUprightRadius(self):
        r"""getUprightRadius(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getUprightRadius(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(Sedan_MultiLink self) -> ChVectorD"""
        return _vehicle.Sedan_MultiLink_getSpindleInertia(self)

    def getUpperArmInertia(self):
        r"""getUpperArmInertia(Sedan_MultiLink self) -> ChVectorD"""
        return _vehicle.Sedan_MultiLink_getUpperArmInertia(self)

    def getLateralInertia(self):
        r"""getLateralInertia(Sedan_MultiLink self) -> ChVectorD"""
        return _vehicle.Sedan_MultiLink_getLateralInertia(self)

    def getTrailingLinkInertia(self):
        r"""getTrailingLinkInertia(Sedan_MultiLink self) -> ChVectorD"""
        return _vehicle.Sedan_MultiLink_getTrailingLinkInertia(self)

    def getUprightInertia(self):
        r"""getUprightInertia(Sedan_MultiLink self) -> ChVectorD"""
        return _vehicle.Sedan_MultiLink_getUprightInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(Sedan_MultiLink self) -> double"""
        return _vehicle.Sedan_MultiLink_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(Sedan_MultiLink self) -> ForceFunctor"""
        return _vehicle.Sedan_MultiLink_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(Sedan_MultiLink self) -> ForceFunctor"""
        return _vehicle.Sedan_MultiLink_getShockForceFunctor(self)

# Register Sedan_MultiLink in _vehicle:
_vehicle.Sedan_MultiLink_swigregister(Sedan_MultiLink)

class CityBus_ToeBarLeafspringAxle(ChToeBarLeafspringAxle):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_ToeBarLeafspringAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_ToeBarLeafspringAxle self, std::string const & name) -> CityBus_ToeBarLeafspringAxle"""
        _vehicle.CityBus_ToeBarLeafspringAxle_swiginit(self, _vehicle.new_CityBus_ToeBarLeafspringAxle(name))
    __swig_destroy__ = _vehicle.delete_CityBus_ToeBarLeafspringAxle

# Register CityBus_ToeBarLeafspringAxle in _vehicle:
_vehicle.CityBus_ToeBarLeafspringAxle_swigregister(CityBus_ToeBarLeafspringAxle)

class CityBus_SolidAxleFront(ChSolidAxle):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_SolidAxleFront class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_SolidAxleFront self, std::string const & name) -> CityBus_SolidAxleFront"""
        _vehicle.CityBus_SolidAxleFront_swiginit(self, _vehicle.new_CityBus_SolidAxleFront(name))
    __swig_destroy__ = _vehicle.delete_CityBus_SolidAxleFront

    def getAxleTubeMass(self):
        r"""getAxleTubeMass(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getAxleTubeMass(self)

    def getSpindleMass(self):
        r"""getSpindleMass(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getSpindleMass(self)

    def getULMass(self):
        r"""getULMass(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getULMass(self)

    def getLLMass(self):
        r"""getLLMass(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getLLMass(self)

    def getKnuckleMass(self):
        r"""getKnuckleMass(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getKnuckleMass(self)

    def getTierodMass(self):
        r"""getTierodMass(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getTierodMass(self)

    def getDraglinkMass(self):
        r"""getDraglinkMass(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getDraglinkMass(self)

    def getBellCrankMass(self):
        r"""getBellCrankMass(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getBellCrankMass(self)

    def getAxleTubeRadius(self):
        r"""getAxleTubeRadius(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getAxleTubeRadius(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getSpindleWidth(self)

    def getULRadius(self):
        r"""getULRadius(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getULRadius(self)

    def getLLRadius(self):
        r"""getLLRadius(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getLLRadius(self)

    def getKnuckleRadius(self):
        r"""getKnuckleRadius(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getKnuckleRadius(self)

    def getTierodRadius(self):
        r"""getTierodRadius(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getTierodRadius(self)

    def getDraglinkRadius(self):
        r"""getDraglinkRadius(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getDraglinkRadius(self)

    def getBellCrankRadius(self):
        r"""getBellCrankRadius(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getBellCrankRadius(self)

    def getAxleTubeInertia(self):
        r"""getAxleTubeInertia(CityBus_SolidAxleFront self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleFront_getAxleTubeInertia(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(CityBus_SolidAxleFront self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleFront_getSpindleInertia(self)

    def getULInertia(self):
        r"""getULInertia(CityBus_SolidAxleFront self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleFront_getULInertia(self)

    def getLLInertia(self):
        r"""getLLInertia(CityBus_SolidAxleFront self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleFront_getLLInertia(self)

    def getKnuckleInertia(self):
        r"""getKnuckleInertia(CityBus_SolidAxleFront self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleFront_getKnuckleInertia(self)

    def getTierodInertia(self):
        r"""getTierodInertia(CityBus_SolidAxleFront self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleFront_getTierodInertia(self)

    def getDraglinkInertia(self):
        r"""getDraglinkInertia(CityBus_SolidAxleFront self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleFront_getDraglinkInertia(self)

    def getBellCrankInertia(self):
        r"""getBellCrankInertia(CityBus_SolidAxleFront self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleFront_getBellCrankInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(CityBus_SolidAxleFront self) -> double"""
        return _vehicle.CityBus_SolidAxleFront_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(CityBus_SolidAxleFront self) -> ForceFunctor"""
        return _vehicle.CityBus_SolidAxleFront_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(CityBus_SolidAxleFront self) -> ForceFunctor"""
        return _vehicle.CityBus_SolidAxleFront_getShockForceFunctor(self)

    def getAxleTubeCOM(self):
        r"""getAxleTubeCOM(CityBus_SolidAxleFront self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleFront_getAxleTubeCOM(self)

# Register CityBus_SolidAxleFront in _vehicle:
_vehicle.CityBus_SolidAxleFront_swigregister(CityBus_SolidAxleFront)

class CityBus_SolidAxleRear(ChSolidAxle):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_SolidAxleRear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_SolidAxleRear self, std::string const & name) -> CityBus_SolidAxleRear"""
        _vehicle.CityBus_SolidAxleRear_swiginit(self, _vehicle.new_CityBus_SolidAxleRear(name))
    __swig_destroy__ = _vehicle.delete_CityBus_SolidAxleRear

    def getAxleTubeMass(self):
        r"""getAxleTubeMass(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getAxleTubeMass(self)

    def getSpindleMass(self):
        r"""getSpindleMass(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getSpindleMass(self)

    def getULMass(self):
        r"""getULMass(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getULMass(self)

    def getLLMass(self):
        r"""getLLMass(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getLLMass(self)

    def getKnuckleMass(self):
        r"""getKnuckleMass(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getKnuckleMass(self)

    def getTierodMass(self):
        r"""getTierodMass(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getTierodMass(self)

    def getDraglinkMass(self):
        r"""getDraglinkMass(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getDraglinkMass(self)

    def getBellCrankMass(self):
        r"""getBellCrankMass(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getBellCrankMass(self)

    def getAxleTubeRadius(self):
        r"""getAxleTubeRadius(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getAxleTubeRadius(self)

    def getSpindleRadius(self):
        r"""getSpindleRadius(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getSpindleRadius(self)

    def getSpindleWidth(self):
        r"""getSpindleWidth(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getSpindleWidth(self)

    def getULRadius(self):
        r"""getULRadius(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getULRadius(self)

    def getLLRadius(self):
        r"""getLLRadius(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getLLRadius(self)

    def getKnuckleRadius(self):
        r"""getKnuckleRadius(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getKnuckleRadius(self)

    def getTierodRadius(self):
        r"""getTierodRadius(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getTierodRadius(self)

    def getDraglinkRadius(self):
        r"""getDraglinkRadius(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getDraglinkRadius(self)

    def getBellCrankRadius(self):
        r"""getBellCrankRadius(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getBellCrankRadius(self)

    def getAxleTubeInertia(self):
        r"""getAxleTubeInertia(CityBus_SolidAxleRear self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleRear_getAxleTubeInertia(self)

    def getSpindleInertia(self):
        r"""getSpindleInertia(CityBus_SolidAxleRear self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleRear_getSpindleInertia(self)

    def getULInertia(self):
        r"""getULInertia(CityBus_SolidAxleRear self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleRear_getULInertia(self)

    def getLLInertia(self):
        r"""getLLInertia(CityBus_SolidAxleRear self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleRear_getLLInertia(self)

    def getKnuckleInertia(self):
        r"""getKnuckleInertia(CityBus_SolidAxleRear self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleRear_getKnuckleInertia(self)

    def getTierodInertia(self):
        r"""getTierodInertia(CityBus_SolidAxleRear self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleRear_getTierodInertia(self)

    def getDraglinkInertia(self):
        r"""getDraglinkInertia(CityBus_SolidAxleRear self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleRear_getDraglinkInertia(self)

    def getBellCrankInertia(self):
        r"""getBellCrankInertia(CityBus_SolidAxleRear self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleRear_getBellCrankInertia(self)

    def getAxleInertia(self):
        r"""getAxleInertia(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getAxleInertia(self)

    def getSpringRestLength(self):
        r"""getSpringRestLength(CityBus_SolidAxleRear self) -> double"""
        return _vehicle.CityBus_SolidAxleRear_getSpringRestLength(self)

    def getSpringForceFunctor(self):
        r"""getSpringForceFunctor(CityBus_SolidAxleRear self) -> ForceFunctor"""
        return _vehicle.CityBus_SolidAxleRear_getSpringForceFunctor(self)

    def getShockForceFunctor(self):
        r"""getShockForceFunctor(CityBus_SolidAxleRear self) -> ForceFunctor"""
        return _vehicle.CityBus_SolidAxleRear_getShockForceFunctor(self)

    def getAxleTubeCOM(self):
        r"""getAxleTubeCOM(CityBus_SolidAxleRear self) -> ChVectorD"""
        return _vehicle.CityBus_SolidAxleRear_getAxleTubeCOM(self)

# Register CityBus_SolidAxleRear in _vehicle:
_vehicle.CityBus_SolidAxleRear_swigregister(CityBus_SolidAxleRear)

class CityBus_LeafspringAxle(ChLeafspringAxle):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_LeafspringAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_LeafspringAxle self, std::string const & name) -> CityBus_LeafspringAxle"""
        _vehicle.CityBus_LeafspringAxle_swiginit(self, _vehicle.new_CityBus_LeafspringAxle(name))
    __swig_destroy__ = _vehicle.delete_CityBus_LeafspringAxle

# Register CityBus_LeafspringAxle in _vehicle:
_vehicle.CityBus_LeafspringAxle_swigregister(CityBus_LeafspringAxle)

class MAN_5t_BellcrankSolid3LinkAxle(ChSolidBellcrankThreeLinkAxle):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_BellcrankSolid3LinkAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_5t_BellcrankSolid3LinkAxle self, std::string const & name) -> MAN_5t_BellcrankSolid3LinkAxle"""
        _vehicle.MAN_5t_BellcrankSolid3LinkAxle_swiginit(self, _vehicle.new_MAN_5t_BellcrankSolid3LinkAxle(name))
    __swig_destroy__ = _vehicle.delete_MAN_5t_BellcrankSolid3LinkAxle

# Register MAN_5t_BellcrankSolid3LinkAxle in _vehicle:
_vehicle.MAN_5t_BellcrankSolid3LinkAxle_swigregister(MAN_5t_BellcrankSolid3LinkAxle)

class MAN_5t_Solid3LinkAxle(ChSolidThreeLinkAxle):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_Solid3LinkAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_5t_Solid3LinkAxle self, std::string const & name) -> MAN_5t_Solid3LinkAxle"""
        _vehicle.MAN_5t_Solid3LinkAxle_swiginit(self, _vehicle.new_MAN_5t_Solid3LinkAxle(name))
    __swig_destroy__ = _vehicle.delete_MAN_5t_Solid3LinkAxle

# Register MAN_5t_Solid3LinkAxle in _vehicle:
_vehicle.MAN_5t_Solid3LinkAxle_swigregister(MAN_5t_Solid3LinkAxle)

class MAN_10t_Front1Axle(ChSolidBellcrankThreeLinkAxle):
    r"""Proxy of C++ chrono::vehicle::man::MAN_10t_Front1Axle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_10t_Front1Axle self, std::string const & name) -> MAN_10t_Front1Axle"""
        _vehicle.MAN_10t_Front1Axle_swiginit(self, _vehicle.new_MAN_10t_Front1Axle(name))
    __swig_destroy__ = _vehicle.delete_MAN_10t_Front1Axle

# Register MAN_10t_Front1Axle in _vehicle:
_vehicle.MAN_10t_Front1Axle_swigregister(MAN_10t_Front1Axle)

class MAN_10t_Front2Axle(ChSolidBellcrankThreeLinkAxle):
    r"""Proxy of C++ chrono::vehicle::man::MAN_10t_Front2Axle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_10t_Front2Axle self, std::string const & name) -> MAN_10t_Front2Axle"""
        _vehicle.MAN_10t_Front2Axle_swiginit(self, _vehicle.new_MAN_10t_Front2Axle(name))
    __swig_destroy__ = _vehicle.delete_MAN_10t_Front2Axle

# Register MAN_10t_Front2Axle in _vehicle:
_vehicle.MAN_10t_Front2Axle_swigregister(MAN_10t_Front2Axle)

class UAZBUS_ToeBarLeafspringAxle(ChToeBarLeafspringAxle):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_ToeBarLeafspringAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_ToeBarLeafspringAxle self, std::string const & name) -> UAZBUS_ToeBarLeafspringAxle"""
        _vehicle.UAZBUS_ToeBarLeafspringAxle_swiginit(self, _vehicle.new_UAZBUS_ToeBarLeafspringAxle(name))
    __swig_destroy__ = _vehicle.delete_UAZBUS_ToeBarLeafspringAxle

# Register UAZBUS_ToeBarLeafspringAxle in _vehicle:
_vehicle.UAZBUS_ToeBarLeafspringAxle_swigregister(UAZBUS_ToeBarLeafspringAxle)

class UAZBUS_LeafspringAxle(ChLeafspringAxle):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_LeafspringAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_LeafspringAxle self, std::string const & name) -> UAZBUS_LeafspringAxle"""
        _vehicle.UAZBUS_LeafspringAxle_swiginit(self, _vehicle.new_UAZBUS_LeafspringAxle(name))
    __swig_destroy__ = _vehicle.delete_UAZBUS_LeafspringAxle

# Register UAZBUS_LeafspringAxle in _vehicle:
_vehicle.UAZBUS_LeafspringAxle_swigregister(UAZBUS_LeafspringAxle)


def CastToChDoubleWishbone(in_obj):
    r"""CastToChDoubleWishbone(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChDoubleWishbone >"""
    return _vehicle.CastToChDoubleWishbone(in_obj)

def CastToChMacPhersonStrut(in_obj):
    r"""CastToChMacPhersonStrut(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChMacPhersonStrut >"""
    return _vehicle.CastToChMacPhersonStrut(in_obj)

def CastToChLeafspringAxle(in_obj):
    r"""CastToChLeafspringAxle(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChLeafspringAxle >"""
    return _vehicle.CastToChLeafspringAxle(in_obj)

def CastToChHendricksonPRIMAXX(in_obj):
    r"""CastToChHendricksonPRIMAXX(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChHendricksonPRIMAXX >"""
    return _vehicle.CastToChHendricksonPRIMAXX(in_obj)

def CastToChDoubleWishboneReduced(in_obj):
    r"""CastToChDoubleWishboneReduced(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChDoubleWishboneReduced >"""
    return _vehicle.CastToChDoubleWishboneReduced(in_obj)

def CastToChMultiLink(in_obj):
    r"""CastToChMultiLink(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChMultiLink >"""
    return _vehicle.CastToChMultiLink(in_obj)

def CastToChRigidPinnedAxle(in_obj):
    r"""CastToChRigidPinnedAxle(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChRigidPinnedAxle >"""
    return _vehicle.CastToChRigidPinnedAxle(in_obj)

def CastToChSemiTrailingArm(in_obj):
    r"""CastToChSemiTrailingArm(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChSemiTrailingArm >"""
    return _vehicle.CastToChSemiTrailingArm(in_obj)

def CastToChRigidSuspension(in_obj):
    r"""CastToChRigidSuspension(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChRigidSuspension >"""
    return _vehicle.CastToChRigidSuspension(in_obj)

def CastToChSolidAxle(in_obj):
    r"""CastToChSolidAxle(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChSolidAxle >"""
    return _vehicle.CastToChSolidAxle(in_obj)

def CastToChThreeLinkIRS(in_obj):
    r"""CastToChThreeLinkIRS(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChThreeLinkIRS >"""
    return _vehicle.CastToChThreeLinkIRS(in_obj)

def CastToChToeBarLeafspringAxle(in_obj):
    r"""CastToChToeBarLeafspringAxle(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChToeBarLeafspringAxle >"""
    return _vehicle.CastToChToeBarLeafspringAxle(in_obj)

def CastToChSolidBellcrankThreeLinkAxle(in_obj):
    r"""CastToChSolidBellcrankThreeLinkAxle(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChSolidBellcrankThreeLinkAxle >"""
    return _vehicle.CastToChSolidBellcrankThreeLinkAxle(in_obj)

def CastToChSolidThreeLinkAxle(in_obj):
    r"""CastToChSolidThreeLinkAxle(std::shared_ptr< chrono::vehicle::ChSuspension > in_obj) -> std::shared_ptr< chrono::vehicle::ChSolidThreeLinkAxle >"""
    return _vehicle.CastToChSolidThreeLinkAxle(in_obj)
class ChDriveline(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChDriveline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChDriveline

    def GetDriveshaft(self):
        r"""GetDriveshaft(ChDriveline self) -> std::shared_ptr< chrono::ChShaft >"""
        return _vehicle.ChDriveline_GetDriveshaft(self)

    def GetDriveshaftSpeed(self):
        r"""GetDriveshaftSpeed(ChDriveline self) -> double"""
        return _vehicle.ChDriveline_GetDriveshaftSpeed(self)

    def Synchronize(self, torque):
        r"""Synchronize(ChDriveline self, double torque)"""
        return _vehicle.ChDriveline_Synchronize(self, torque)

# Register ChDriveline in _vehicle:
_vehicle.ChDriveline_swigregister(ChDriveline)

class ChDrivelineWV(ChDriveline):
    r"""Proxy of C++ chrono::vehicle::ChDrivelineWV class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChDrivelineWV

    def GetNumDrivenAxles(self):
        r"""GetNumDrivenAxles(ChDrivelineWV self) -> int"""
        return _vehicle.ChDrivelineWV_GetNumDrivenAxles(self)

    def Initialize(self, chassis, axles, driven_axles):
        r"""Initialize(ChDrivelineWV self, std::shared_ptr< chrono::ChBody > chassis, ChAxleList const & axles, vector_int driven_axles)"""
        return _vehicle.ChDrivelineWV_Initialize(self, chassis, axles, driven_axles)

    def LockAxleDifferential(self, axle, lock):
        r"""LockAxleDifferential(ChDrivelineWV self, int axle, bool lock)"""
        return _vehicle.ChDrivelineWV_LockAxleDifferential(self, axle, lock)

    def LockCentralDifferential(self, which, lock):
        r"""LockCentralDifferential(ChDrivelineWV self, int which, bool lock)"""
        return _vehicle.ChDrivelineWV_LockCentralDifferential(self, which, lock)

    def GetDrivenAxleIndexes(self):
        r"""GetDrivenAxleIndexes(ChDrivelineWV self) -> vector_int"""
        return _vehicle.ChDrivelineWV_GetDrivenAxleIndexes(self)

    def GetSpindleTorque(self, axle, side):
        r"""GetSpindleTorque(ChDrivelineWV self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChDrivelineWV_GetSpindleTorque(self, axle, side)

# Register ChDrivelineWV in _vehicle:
_vehicle.ChDrivelineWV_swigregister(ChDrivelineWV)

class ChShaftsDriveline2WD(ChDrivelineWV):
    r"""Proxy of C++ chrono::vehicle::ChShaftsDriveline2WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChShaftsDriveline2WD

    def GetTemplateName(self):
        r"""GetTemplateName(ChShaftsDriveline2WD self) -> std::string"""
        return _vehicle.ChShaftsDriveline2WD_GetTemplateName(self)

    def SetMotorBlockDirection(self, dir):
        r"""SetMotorBlockDirection(ChShaftsDriveline2WD self, ChVectorD dir)"""
        return _vehicle.ChShaftsDriveline2WD_SetMotorBlockDirection(self, dir)

    def SetAxleDirection(self, dir):
        r"""SetAxleDirection(ChShaftsDriveline2WD self, ChVectorD dir)"""
        return _vehicle.ChShaftsDriveline2WD_SetAxleDirection(self, dir)

    def LockAxleDifferential(self, axle, lock):
        r"""LockAxleDifferential(ChShaftsDriveline2WD self, int axle, bool lock)"""
        return _vehicle.ChShaftsDriveline2WD_LockAxleDifferential(self, axle, lock)

    def LockCentralDifferential(self, which, lock):
        r"""LockCentralDifferential(ChShaftsDriveline2WD self, int which, bool lock)"""
        return _vehicle.ChShaftsDriveline2WD_LockCentralDifferential(self, which, lock)

    def GetNumDrivenAxles(self):
        r"""GetNumDrivenAxles(ChShaftsDriveline2WD self) -> int"""
        return _vehicle.ChShaftsDriveline2WD_GetNumDrivenAxles(self)

    def Initialize(self, chassis, axles, driven_axles):
        r"""Initialize(ChShaftsDriveline2WD self, std::shared_ptr< chrono::ChBody > chassis, ChAxleList const & axles, vector_int driven_axles)"""
        return _vehicle.ChShaftsDriveline2WD_Initialize(self, chassis, axles, driven_axles)

    def GetSpindleTorque(self, axle, side):
        r"""GetSpindleTorque(ChShaftsDriveline2WD self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChShaftsDriveline2WD_GetSpindleTorque(self, axle, side)

# Register ChShaftsDriveline2WD in _vehicle:
_vehicle.ChShaftsDriveline2WD_swigregister(ChShaftsDriveline2WD)

class ChShaftsDriveline4WD(ChDrivelineWV):
    r"""Proxy of C++ chrono::vehicle::ChShaftsDriveline4WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChShaftsDriveline4WD

    def GetTemplateName(self):
        r"""GetTemplateName(ChShaftsDriveline4WD self) -> std::string"""
        return _vehicle.ChShaftsDriveline4WD_GetTemplateName(self)

    def SetMotorBlockDirection(self, dir):
        r"""SetMotorBlockDirection(ChShaftsDriveline4WD self, ChVectorD dir)"""
        return _vehicle.ChShaftsDriveline4WD_SetMotorBlockDirection(self, dir)

    def SetAxleDirection(self, dir):
        r"""SetAxleDirection(ChShaftsDriveline4WD self, ChVectorD dir)"""
        return _vehicle.ChShaftsDriveline4WD_SetAxleDirection(self, dir)

    def LockAxleDifferential(self, axle, lock):
        r"""LockAxleDifferential(ChShaftsDriveline4WD self, int axle, bool lock)"""
        return _vehicle.ChShaftsDriveline4WD_LockAxleDifferential(self, axle, lock)

    def LockCentralDifferential(self, which, lock):
        r"""LockCentralDifferential(ChShaftsDriveline4WD self, int which, bool lock)"""
        return _vehicle.ChShaftsDriveline4WD_LockCentralDifferential(self, which, lock)

    def GetNumDrivenAxles(self):
        r"""GetNumDrivenAxles(ChShaftsDriveline4WD self) -> int"""
        return _vehicle.ChShaftsDriveline4WD_GetNumDrivenAxles(self)

    def Initialize(self, chassis, axles, driven_axles):
        r"""Initialize(ChShaftsDriveline4WD self, std::shared_ptr< chrono::ChBody > chassis, ChAxleList const & axles, vector_int driven_axles)"""
        return _vehicle.ChShaftsDriveline4WD_Initialize(self, chassis, axles, driven_axles)

    def GetSpindleTorque(self, axle, side):
        r"""GetSpindleTorque(ChShaftsDriveline4WD self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChShaftsDriveline4WD_GetSpindleTorque(self, axle, side)

# Register ChShaftsDriveline4WD in _vehicle:
_vehicle.ChShaftsDriveline4WD_swigregister(ChShaftsDriveline4WD)

class ChSimpleDriveline(ChDrivelineWV):
    r"""Proxy of C++ chrono::vehicle::ChSimpleDriveline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSimpleDriveline

    def GetTemplateName(self):
        r"""GetTemplateName(ChSimpleDriveline self) -> std::string"""
        return _vehicle.ChSimpleDriveline_GetTemplateName(self)

    def GetNumDrivenAxles(self):
        r"""GetNumDrivenAxles(ChSimpleDriveline self) -> int"""
        return _vehicle.ChSimpleDriveline_GetNumDrivenAxles(self)

    def Initialize(self, chassis, axles, driven_axles):
        r"""Initialize(ChSimpleDriveline self, std::shared_ptr< chrono::ChBody > chassis, ChAxleList const & axles, vector_int driven_axles)"""
        return _vehicle.ChSimpleDriveline_Initialize(self, chassis, axles, driven_axles)

    def GetDriveshaftSpeed(self):
        r"""GetDriveshaftSpeed(ChSimpleDriveline self) -> double"""
        return _vehicle.ChSimpleDriveline_GetDriveshaftSpeed(self)

    def Synchronize(self, torque):
        r"""Synchronize(ChSimpleDriveline self, double torque)"""
        return _vehicle.ChSimpleDriveline_Synchronize(self, torque)

    def GetSpindleTorque(self, axle, side):
        r"""GetSpindleTorque(ChSimpleDriveline self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSimpleDriveline_GetSpindleTorque(self, axle, side)

# Register ChSimpleDriveline in _vehicle:
_vehicle.ChSimpleDriveline_swigregister(ChSimpleDriveline)

class ChSimpleDrivelineXWD(ChDrivelineWV):
    r"""Proxy of C++ chrono::vehicle::ChSimpleDrivelineXWD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSimpleDrivelineXWD

    def GetTemplateName(self):
        r"""GetTemplateName(ChSimpleDrivelineXWD self) -> std::string"""
        return _vehicle.ChSimpleDrivelineXWD_GetTemplateName(self)

    def GetNumDrivenAxles(self):
        r"""GetNumDrivenAxles(ChSimpleDrivelineXWD self) -> int"""
        return _vehicle.ChSimpleDrivelineXWD_GetNumDrivenAxles(self)

    def Initialize(self, chassis, axles, driven_axles):
        r"""Initialize(ChSimpleDrivelineXWD self, std::shared_ptr< chrono::ChBody > chassis, ChAxleList const & axles, vector_int driven_axles)"""
        return _vehicle.ChSimpleDrivelineXWD_Initialize(self, chassis, axles, driven_axles)

    def GetDriveshaftSpeed(self):
        r"""GetDriveshaftSpeed(ChSimpleDrivelineXWD self) -> double"""
        return _vehicle.ChSimpleDrivelineXWD_GetDriveshaftSpeed(self)

    def Synchronize(self, torque):
        r"""Synchronize(ChSimpleDrivelineXWD self, double torque)"""
        return _vehicle.ChSimpleDrivelineXWD_Synchronize(self, torque)

    def GetSpindleTorque(self, axle, side):
        r"""GetSpindleTorque(ChSimpleDrivelineXWD self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChSimpleDrivelineXWD_GetSpindleTorque(self, axle, side)

# Register ChSimpleDrivelineXWD in _vehicle:
_vehicle.ChSimpleDrivelineXWD_swigregister(ChSimpleDrivelineXWD)

class ShaftsDriveline2WD(ChShaftsDriveline2WD):
    r"""Proxy of C++ chrono::vehicle::ShaftsDriveline2WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ShaftsDriveline2WD self, std::string const & filename) -> ShaftsDriveline2WD
        __init__(ShaftsDriveline2WD self, rapidjson::Document const & d) -> ShaftsDriveline2WD
        """
        _vehicle.ShaftsDriveline2WD_swiginit(self, _vehicle.new_ShaftsDriveline2WD(*args))
    __swig_destroy__ = _vehicle.delete_ShaftsDriveline2WD

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(ShaftsDriveline2WD self) -> double"""
        return _vehicle.ShaftsDriveline2WD_GetDriveshaftInertia(self)

    def GetDifferentialBoxInertia(self):
        r"""GetDifferentialBoxInertia(ShaftsDriveline2WD self) -> double"""
        return _vehicle.ShaftsDriveline2WD_GetDifferentialBoxInertia(self)

    def GetConicalGearRatio(self):
        r"""GetConicalGearRatio(ShaftsDriveline2WD self) -> double"""
        return _vehicle.ShaftsDriveline2WD_GetConicalGearRatio(self)

    def GetDifferentialRatio(self):
        r"""GetDifferentialRatio(ShaftsDriveline2WD self) -> double"""
        return _vehicle.ShaftsDriveline2WD_GetDifferentialRatio(self)

    def GetAxleDifferentialLockingLimit(self):
        r"""GetAxleDifferentialLockingLimit(ShaftsDriveline2WD self) -> double"""
        return _vehicle.ShaftsDriveline2WD_GetAxleDifferentialLockingLimit(self)

# Register ShaftsDriveline2WD in _vehicle:
_vehicle.ShaftsDriveline2WD_swigregister(ShaftsDriveline2WD)

class SimpleDriveline(ChSimpleDriveline):
    r"""Proxy of C++ chrono::vehicle::SimpleDriveline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SimpleDriveline self, std::string const & filename) -> SimpleDriveline
        __init__(SimpleDriveline self, rapidjson::Document const & d) -> SimpleDriveline
        """
        _vehicle.SimpleDriveline_swiginit(self, _vehicle.new_SimpleDriveline(*args))
    __swig_destroy__ = _vehicle.delete_SimpleDriveline

    def GetFrontTorqueFraction(self):
        r"""GetFrontTorqueFraction(SimpleDriveline self) -> double"""
        return _vehicle.SimpleDriveline_GetFrontTorqueFraction(self)

    def GetFrontDifferentialMaxBias(self):
        r"""GetFrontDifferentialMaxBias(SimpleDriveline self) -> double"""
        return _vehicle.SimpleDriveline_GetFrontDifferentialMaxBias(self)

    def GetRearDifferentialMaxBias(self):
        r"""GetRearDifferentialMaxBias(SimpleDriveline self) -> double"""
        return _vehicle.SimpleDriveline_GetRearDifferentialMaxBias(self)

# Register SimpleDriveline in _vehicle:
_vehicle.SimpleDriveline_swigregister(SimpleDriveline)

class ShaftsDriveline4WD(ChShaftsDriveline4WD):
    r"""Proxy of C++ chrono::vehicle::ShaftsDriveline4WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ShaftsDriveline4WD self, std::string const & filename) -> ShaftsDriveline4WD
        __init__(ShaftsDriveline4WD self, rapidjson::Document const & d) -> ShaftsDriveline4WD
        """
        _vehicle.ShaftsDriveline4WD_swiginit(self, _vehicle.new_ShaftsDriveline4WD(*args))
    __swig_destroy__ = _vehicle.delete_ShaftsDriveline4WD

    def GetCentralDifferentialBoxInertia(self):
        r"""GetCentralDifferentialBoxInertia(ShaftsDriveline4WD self) -> double"""
        return _vehicle.ShaftsDriveline4WD_GetCentralDifferentialBoxInertia(self)

    def GetFrontDifferentialBoxInertia(self):
        r"""GetFrontDifferentialBoxInertia(ShaftsDriveline4WD self) -> double"""
        return _vehicle.ShaftsDriveline4WD_GetFrontDifferentialBoxInertia(self)

    def GetRearDifferentialBoxInertia(self):
        r"""GetRearDifferentialBoxInertia(ShaftsDriveline4WD self) -> double"""
        return _vehicle.ShaftsDriveline4WD_GetRearDifferentialBoxInertia(self)

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(ShaftsDriveline4WD self) -> double"""
        return _vehicle.ShaftsDriveline4WD_GetDriveshaftInertia(self)

    def GetToFrontDiffShaftInertia(self):
        r"""GetToFrontDiffShaftInertia(ShaftsDriveline4WD self) -> double"""
        return _vehicle.ShaftsDriveline4WD_GetToFrontDiffShaftInertia(self)

    def GetToRearDiffShaftInertia(self):
        r"""GetToRearDiffShaftInertia(ShaftsDriveline4WD self) -> double"""
        return _vehicle.ShaftsDriveline4WD_GetToRearDiffShaftInertia(self)

    def GetCentralDifferentialRatio(self):
        r"""GetCentralDifferentialRatio(ShaftsDriveline4WD self) -> double"""
        return _vehicle.ShaftsDriveline4WD_GetCentralDifferentialRatio(self)

    def GetFrontDifferentialRatio(self):
        r"""GetFrontDifferentialRatio(ShaftsDriveline4WD self) -> double"""
        return _vehicle.ShaftsDriveline4WD_GetFrontDifferentialRatio(self)

    def GetRearDifferentialRatio(self):
        r"""GetRearDifferentialRatio(ShaftsDriveline4WD self) -> double"""
        return _vehicle.ShaftsDriveline4WD_GetRearDifferentialRatio(self)

    def GetFrontConicalGearRatio(self):
        r"""GetFrontConicalGearRatio(ShaftsDriveline4WD self) -> double"""
        return _vehicle.ShaftsDriveline4WD_GetFrontConicalGearRatio(self)

    def GetRearConicalGearRatio(self):
        r"""GetRearConicalGearRatio(ShaftsDriveline4WD self) -> double"""
        return _vehicle.ShaftsDriveline4WD_GetRearConicalGearRatio(self)

    def GetAxleDifferentialLockingLimit(self):
        r"""GetAxleDifferentialLockingLimit(ShaftsDriveline4WD self) -> double"""
        return _vehicle.ShaftsDriveline4WD_GetAxleDifferentialLockingLimit(self)

    def GetCentralDifferentialLockingLimit(self):
        r"""GetCentralDifferentialLockingLimit(ShaftsDriveline4WD self) -> double"""
        return _vehicle.ShaftsDriveline4WD_GetCentralDifferentialLockingLimit(self)

# Register ShaftsDriveline4WD in _vehicle:
_vehicle.ShaftsDriveline4WD_swigregister(ShaftsDriveline4WD)

class SimpleDrivelineXWD(ChSimpleDrivelineXWD):
    r"""Proxy of C++ chrono::vehicle::SimpleDrivelineXWD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(SimpleDrivelineXWD self, std::string const & filename) -> SimpleDrivelineXWD
        __init__(SimpleDrivelineXWD self, rapidjson::Document const & d) -> SimpleDrivelineXWD
        """
        _vehicle.SimpleDrivelineXWD_swiginit(self, _vehicle.new_SimpleDrivelineXWD(*args))
    __swig_destroy__ = _vehicle.delete_SimpleDrivelineXWD

    def GetDifferentialMaxBias(self):
        r"""GetDifferentialMaxBias(SimpleDrivelineXWD self) -> double"""
        return _vehicle.SimpleDrivelineXWD_GetDifferentialMaxBias(self)

# Register SimpleDrivelineXWD in _vehicle:
_vehicle.SimpleDrivelineXWD_swigregister(SimpleDrivelineXWD)

class Generic_Driveline2WD(ChShaftsDriveline2WD):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_Driveline2WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_Driveline2WD self, std::string const & name) -> Generic_Driveline2WD"""
        _vehicle.Generic_Driveline2WD_swiginit(self, _vehicle.new_Generic_Driveline2WD(name))
    __swig_destroy__ = _vehicle.delete_Generic_Driveline2WD

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(Generic_Driveline2WD self) -> double"""
        return _vehicle.Generic_Driveline2WD_GetDriveshaftInertia(self)

    def GetDifferentialBoxInertia(self):
        r"""GetDifferentialBoxInertia(Generic_Driveline2WD self) -> double"""
        return _vehicle.Generic_Driveline2WD_GetDifferentialBoxInertia(self)

    def GetConicalGearRatio(self):
        r"""GetConicalGearRatio(Generic_Driveline2WD self) -> double"""
        return _vehicle.Generic_Driveline2WD_GetConicalGearRatio(self)

    def GetDifferentialRatio(self):
        r"""GetDifferentialRatio(Generic_Driveline2WD self) -> double"""
        return _vehicle.Generic_Driveline2WD_GetDifferentialRatio(self)

    def GetAxleDifferentialLockingLimit(self):
        r"""GetAxleDifferentialLockingLimit(Generic_Driveline2WD self) -> double"""
        return _vehicle.Generic_Driveline2WD_GetAxleDifferentialLockingLimit(self)

# Register Generic_Driveline2WD in _vehicle:
_vehicle.Generic_Driveline2WD_swigregister(Generic_Driveline2WD)

class Generic_SimpleDriveline(ChDrivelineWV):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_SimpleDriveline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_SimpleDriveline self, std::string const & name) -> Generic_SimpleDriveline"""
        _vehicle.Generic_SimpleDriveline_swiginit(self, _vehicle.new_Generic_SimpleDriveline(name))
    __swig_destroy__ = _vehicle.delete_Generic_SimpleDriveline

    def GetTemplateName(self):
        r"""GetTemplateName(Generic_SimpleDriveline self) -> std::string"""
        return _vehicle.Generic_SimpleDriveline_GetTemplateName(self)

    def GetNumDrivenAxles(self):
        r"""GetNumDrivenAxles(Generic_SimpleDriveline self) -> int"""
        return _vehicle.Generic_SimpleDriveline_GetNumDrivenAxles(self)

    def Initialize(self, chassis, axles, driven_axles):
        r"""Initialize(Generic_SimpleDriveline self, std::shared_ptr< chrono::ChBody > chassis, ChAxleList const & axles, vector_int driven_axles)"""
        return _vehicle.Generic_SimpleDriveline_Initialize(self, chassis, axles, driven_axles)

    def GetDriveshaftSpeed(self):
        r"""GetDriveshaftSpeed(Generic_SimpleDriveline self) -> double"""
        return _vehicle.Generic_SimpleDriveline_GetDriveshaftSpeed(self)

    def Synchronize(self, torque):
        r"""Synchronize(Generic_SimpleDriveline self, double torque)"""
        return _vehicle.Generic_SimpleDriveline_Synchronize(self, torque)

    def GetSpindleTorque(self, axle, side):
        r"""GetSpindleTorque(Generic_SimpleDriveline self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Generic_SimpleDriveline_GetSpindleTorque(self, axle, side)

# Register Generic_SimpleDriveline in _vehicle:
_vehicle.Generic_SimpleDriveline_swigregister(Generic_SimpleDriveline)

class HMMWV_Driveline2WD(ChShaftsDriveline2WD):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_Driveline2WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_Driveline2WD self, std::string const & name) -> HMMWV_Driveline2WD"""
        _vehicle.HMMWV_Driveline2WD_swiginit(self, _vehicle.new_HMMWV_Driveline2WD(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_Driveline2WD

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(HMMWV_Driveline2WD self) -> double"""
        return _vehicle.HMMWV_Driveline2WD_GetDriveshaftInertia(self)

    def GetDifferentialBoxInertia(self):
        r"""GetDifferentialBoxInertia(HMMWV_Driveline2WD self) -> double"""
        return _vehicle.HMMWV_Driveline2WD_GetDifferentialBoxInertia(self)

    def GetConicalGearRatio(self):
        r"""GetConicalGearRatio(HMMWV_Driveline2WD self) -> double"""
        return _vehicle.HMMWV_Driveline2WD_GetConicalGearRatio(self)

    def GetDifferentialRatio(self):
        r"""GetDifferentialRatio(HMMWV_Driveline2WD self) -> double"""
        return _vehicle.HMMWV_Driveline2WD_GetDifferentialRatio(self)

    def GetAxleDifferentialLockingLimit(self):
        r"""GetAxleDifferentialLockingLimit(HMMWV_Driveline2WD self) -> double"""
        return _vehicle.HMMWV_Driveline2WD_GetAxleDifferentialLockingLimit(self)

# Register HMMWV_Driveline2WD in _vehicle:
_vehicle.HMMWV_Driveline2WD_swigregister(HMMWV_Driveline2WD)

class HMMWV_Driveline4WD(ChShaftsDriveline4WD):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_Driveline4WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_Driveline4WD self, std::string const & name) -> HMMWV_Driveline4WD"""
        _vehicle.HMMWV_Driveline4WD_swiginit(self, _vehicle.new_HMMWV_Driveline4WD(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_Driveline4WD

    def GetCentralDifferentialBoxInertia(self):
        r"""GetCentralDifferentialBoxInertia(HMMWV_Driveline4WD self) -> double"""
        return _vehicle.HMMWV_Driveline4WD_GetCentralDifferentialBoxInertia(self)

    def GetFrontDifferentialBoxInertia(self):
        r"""GetFrontDifferentialBoxInertia(HMMWV_Driveline4WD self) -> double"""
        return _vehicle.HMMWV_Driveline4WD_GetFrontDifferentialBoxInertia(self)

    def GetRearDifferentialBoxInertia(self):
        r"""GetRearDifferentialBoxInertia(HMMWV_Driveline4WD self) -> double"""
        return _vehicle.HMMWV_Driveline4WD_GetRearDifferentialBoxInertia(self)

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(HMMWV_Driveline4WD self) -> double"""
        return _vehicle.HMMWV_Driveline4WD_GetDriveshaftInertia(self)

    def GetToFrontDiffShaftInertia(self):
        r"""GetToFrontDiffShaftInertia(HMMWV_Driveline4WD self) -> double"""
        return _vehicle.HMMWV_Driveline4WD_GetToFrontDiffShaftInertia(self)

    def GetToRearDiffShaftInertia(self):
        r"""GetToRearDiffShaftInertia(HMMWV_Driveline4WD self) -> double"""
        return _vehicle.HMMWV_Driveline4WD_GetToRearDiffShaftInertia(self)

    def GetCentralDifferentialRatio(self):
        r"""GetCentralDifferentialRatio(HMMWV_Driveline4WD self) -> double"""
        return _vehicle.HMMWV_Driveline4WD_GetCentralDifferentialRatio(self)

    def GetFrontDifferentialRatio(self):
        r"""GetFrontDifferentialRatio(HMMWV_Driveline4WD self) -> double"""
        return _vehicle.HMMWV_Driveline4WD_GetFrontDifferentialRatio(self)

    def GetRearDifferentialRatio(self):
        r"""GetRearDifferentialRatio(HMMWV_Driveline4WD self) -> double"""
        return _vehicle.HMMWV_Driveline4WD_GetRearDifferentialRatio(self)

    def GetFrontConicalGearRatio(self):
        r"""GetFrontConicalGearRatio(HMMWV_Driveline4WD self) -> double"""
        return _vehicle.HMMWV_Driveline4WD_GetFrontConicalGearRatio(self)

    def GetRearConicalGearRatio(self):
        r"""GetRearConicalGearRatio(HMMWV_Driveline4WD self) -> double"""
        return _vehicle.HMMWV_Driveline4WD_GetRearConicalGearRatio(self)

    def GetAxleDifferentialLockingLimit(self):
        r"""GetAxleDifferentialLockingLimit(HMMWV_Driveline4WD self) -> double"""
        return _vehicle.HMMWV_Driveline4WD_GetAxleDifferentialLockingLimit(self)

    def GetCentralDifferentialLockingLimit(self):
        r"""GetCentralDifferentialLockingLimit(HMMWV_Driveline4WD self) -> double"""
        return _vehicle.HMMWV_Driveline4WD_GetCentralDifferentialLockingLimit(self)

# Register HMMWV_Driveline4WD in _vehicle:
_vehicle.HMMWV_Driveline4WD_swigregister(HMMWV_Driveline4WD)

class HMMWV_SimpleDriveline(ChSimpleDriveline):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_SimpleDriveline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_SimpleDriveline self, std::string const & name) -> HMMWV_SimpleDriveline"""
        _vehicle.HMMWV_SimpleDriveline_swiginit(self, _vehicle.new_HMMWV_SimpleDriveline(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_SimpleDriveline

    def GetFrontTorqueFraction(self):
        r"""GetFrontTorqueFraction(HMMWV_SimpleDriveline self) -> double"""
        return _vehicle.HMMWV_SimpleDriveline_GetFrontTorqueFraction(self)

    def GetFrontDifferentialMaxBias(self):
        r"""GetFrontDifferentialMaxBias(HMMWV_SimpleDriveline self) -> double"""
        return _vehicle.HMMWV_SimpleDriveline_GetFrontDifferentialMaxBias(self)

    def GetRearDifferentialMaxBias(self):
        r"""GetRearDifferentialMaxBias(HMMWV_SimpleDriveline self) -> double"""
        return _vehicle.HMMWV_SimpleDriveline_GetRearDifferentialMaxBias(self)

# Register HMMWV_SimpleDriveline in _vehicle:
_vehicle.HMMWV_SimpleDriveline_swigregister(HMMWV_SimpleDriveline)

class Sedan_Driveline2WD(ChShaftsDriveline2WD):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan_Driveline2WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Sedan_Driveline2WD self, std::string const & name) -> Sedan_Driveline2WD"""
        _vehicle.Sedan_Driveline2WD_swiginit(self, _vehicle.new_Sedan_Driveline2WD(name))
    __swig_destroy__ = _vehicle.delete_Sedan_Driveline2WD

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(Sedan_Driveline2WD self) -> double"""
        return _vehicle.Sedan_Driveline2WD_GetDriveshaftInertia(self)

    def GetDifferentialBoxInertia(self):
        r"""GetDifferentialBoxInertia(Sedan_Driveline2WD self) -> double"""
        return _vehicle.Sedan_Driveline2WD_GetDifferentialBoxInertia(self)

    def GetConicalGearRatio(self):
        r"""GetConicalGearRatio(Sedan_Driveline2WD self) -> double"""
        return _vehicle.Sedan_Driveline2WD_GetConicalGearRatio(self)

    def GetDifferentialRatio(self):
        r"""GetDifferentialRatio(Sedan_Driveline2WD self) -> double"""
        return _vehicle.Sedan_Driveline2WD_GetDifferentialRatio(self)

    def GetAxleDifferentialLockingLimit(self):
        r"""GetAxleDifferentialLockingLimit(Sedan_Driveline2WD self) -> double"""
        return _vehicle.Sedan_Driveline2WD_GetAxleDifferentialLockingLimit(self)

# Register Sedan_Driveline2WD in _vehicle:
_vehicle.Sedan_Driveline2WD_swigregister(Sedan_Driveline2WD)

class CityBus_Driveline2WD(ChShaftsDriveline2WD):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_Driveline2WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_Driveline2WD self, std::string const & name) -> CityBus_Driveline2WD"""
        _vehicle.CityBus_Driveline2WD_swiginit(self, _vehicle.new_CityBus_Driveline2WD(name))
    __swig_destroy__ = _vehicle.delete_CityBus_Driveline2WD

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(CityBus_Driveline2WD self) -> double"""
        return _vehicle.CityBus_Driveline2WD_GetDriveshaftInertia(self)

    def GetDifferentialBoxInertia(self):
        r"""GetDifferentialBoxInertia(CityBus_Driveline2WD self) -> double"""
        return _vehicle.CityBus_Driveline2WD_GetDifferentialBoxInertia(self)

    def GetConicalGearRatio(self):
        r"""GetConicalGearRatio(CityBus_Driveline2WD self) -> double"""
        return _vehicle.CityBus_Driveline2WD_GetConicalGearRatio(self)

    def GetDifferentialRatio(self):
        r"""GetDifferentialRatio(CityBus_Driveline2WD self) -> double"""
        return _vehicle.CityBus_Driveline2WD_GetDifferentialRatio(self)

    def GetAxleDifferentialLockingLimit(self):
        r"""GetAxleDifferentialLockingLimit(CityBus_Driveline2WD self) -> double"""
        return _vehicle.CityBus_Driveline2WD_GetAxleDifferentialLockingLimit(self)

# Register CityBus_Driveline2WD in _vehicle:
_vehicle.CityBus_Driveline2WD_swigregister(CityBus_Driveline2WD)

class MAN_5t_SimpleDriveline(ChSimpleDriveline):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_SimpleDriveline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_5t_SimpleDriveline self, std::string const & name) -> MAN_5t_SimpleDriveline"""
        _vehicle.MAN_5t_SimpleDriveline_swiginit(self, _vehicle.new_MAN_5t_SimpleDriveline(name))
    __swig_destroy__ = _vehicle.delete_MAN_5t_SimpleDriveline

    def GetFrontTorqueFraction(self):
        r"""GetFrontTorqueFraction(MAN_5t_SimpleDriveline self) -> double"""
        return _vehicle.MAN_5t_SimpleDriveline_GetFrontTorqueFraction(self)

    def GetFrontDifferentialMaxBias(self):
        r"""GetFrontDifferentialMaxBias(MAN_5t_SimpleDriveline self) -> double"""
        return _vehicle.MAN_5t_SimpleDriveline_GetFrontDifferentialMaxBias(self)

    def GetRearDifferentialMaxBias(self):
        r"""GetRearDifferentialMaxBias(MAN_5t_SimpleDriveline self) -> double"""
        return _vehicle.MAN_5t_SimpleDriveline_GetRearDifferentialMaxBias(self)

# Register MAN_5t_SimpleDriveline in _vehicle:
_vehicle.MAN_5t_SimpleDriveline_swigregister(MAN_5t_SimpleDriveline)

class MAN_5t_SimpleDrivelineXWD(ChSimpleDrivelineXWD):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_SimpleDrivelineXWD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_5t_SimpleDrivelineXWD self, std::string const & name) -> MAN_5t_SimpleDrivelineXWD"""
        _vehicle.MAN_5t_SimpleDrivelineXWD_swiginit(self, _vehicle.new_MAN_5t_SimpleDrivelineXWD(name))
    __swig_destroy__ = _vehicle.delete_MAN_5t_SimpleDrivelineXWD

    def GetDifferentialMaxBias(self):
        r"""GetDifferentialMaxBias(MAN_5t_SimpleDrivelineXWD self) -> double"""
        return _vehicle.MAN_5t_SimpleDrivelineXWD_GetDifferentialMaxBias(self)

# Register MAN_5t_SimpleDrivelineXWD in _vehicle:
_vehicle.MAN_5t_SimpleDrivelineXWD_swigregister(MAN_5t_SimpleDrivelineXWD)

class UAZBUS_Driveline2WD(ChShaftsDriveline2WD):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_Driveline2WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_Driveline2WD self, std::string const & name) -> UAZBUS_Driveline2WD"""
        _vehicle.UAZBUS_Driveline2WD_swiginit(self, _vehicle.new_UAZBUS_Driveline2WD(name))
    __swig_destroy__ = _vehicle.delete_UAZBUS_Driveline2WD

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(UAZBUS_Driveline2WD self) -> double"""
        return _vehicle.UAZBUS_Driveline2WD_GetDriveshaftInertia(self)

    def GetDifferentialBoxInertia(self):
        r"""GetDifferentialBoxInertia(UAZBUS_Driveline2WD self) -> double"""
        return _vehicle.UAZBUS_Driveline2WD_GetDifferentialBoxInertia(self)

    def GetConicalGearRatio(self):
        r"""GetConicalGearRatio(UAZBUS_Driveline2WD self) -> double"""
        return _vehicle.UAZBUS_Driveline2WD_GetConicalGearRatio(self)

    def GetDifferentialRatio(self):
        r"""GetDifferentialRatio(UAZBUS_Driveline2WD self) -> double"""
        return _vehicle.UAZBUS_Driveline2WD_GetDifferentialRatio(self)

    def GetAxleDifferentialLockingLimit(self):
        r"""GetAxleDifferentialLockingLimit(UAZBUS_Driveline2WD self) -> double"""
        return _vehicle.UAZBUS_Driveline2WD_GetAxleDifferentialLockingLimit(self)

# Register UAZBUS_Driveline2WD in _vehicle:
_vehicle.UAZBUS_Driveline2WD_swigregister(UAZBUS_Driveline2WD)

class UAZBUS_Driveline4WD(ChShaftsDriveline4WD):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_Driveline4WD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_Driveline4WD self, std::string const & name) -> UAZBUS_Driveline4WD"""
        _vehicle.UAZBUS_Driveline4WD_swiginit(self, _vehicle.new_UAZBUS_Driveline4WD(name))
    __swig_destroy__ = _vehicle.delete_UAZBUS_Driveline4WD

    def GetCentralDifferentialBoxInertia(self):
        r"""GetCentralDifferentialBoxInertia(UAZBUS_Driveline4WD self) -> double"""
        return _vehicle.UAZBUS_Driveline4WD_GetCentralDifferentialBoxInertia(self)

    def GetFrontDifferentialBoxInertia(self):
        r"""GetFrontDifferentialBoxInertia(UAZBUS_Driveline4WD self) -> double"""
        return _vehicle.UAZBUS_Driveline4WD_GetFrontDifferentialBoxInertia(self)

    def GetRearDifferentialBoxInertia(self):
        r"""GetRearDifferentialBoxInertia(UAZBUS_Driveline4WD self) -> double"""
        return _vehicle.UAZBUS_Driveline4WD_GetRearDifferentialBoxInertia(self)

    def GetDriveshaftInertia(self):
        r"""GetDriveshaftInertia(UAZBUS_Driveline4WD self) -> double"""
        return _vehicle.UAZBUS_Driveline4WD_GetDriveshaftInertia(self)

    def GetToFrontDiffShaftInertia(self):
        r"""GetToFrontDiffShaftInertia(UAZBUS_Driveline4WD self) -> double"""
        return _vehicle.UAZBUS_Driveline4WD_GetToFrontDiffShaftInertia(self)

    def GetToRearDiffShaftInertia(self):
        r"""GetToRearDiffShaftInertia(UAZBUS_Driveline4WD self) -> double"""
        return _vehicle.UAZBUS_Driveline4WD_GetToRearDiffShaftInertia(self)

    def GetCentralDifferentialRatio(self):
        r"""GetCentralDifferentialRatio(UAZBUS_Driveline4WD self) -> double"""
        return _vehicle.UAZBUS_Driveline4WD_GetCentralDifferentialRatio(self)

    def GetFrontDifferentialRatio(self):
        r"""GetFrontDifferentialRatio(UAZBUS_Driveline4WD self) -> double"""
        return _vehicle.UAZBUS_Driveline4WD_GetFrontDifferentialRatio(self)

    def GetRearDifferentialRatio(self):
        r"""GetRearDifferentialRatio(UAZBUS_Driveline4WD self) -> double"""
        return _vehicle.UAZBUS_Driveline4WD_GetRearDifferentialRatio(self)

    def GetFrontConicalGearRatio(self):
        r"""GetFrontConicalGearRatio(UAZBUS_Driveline4WD self) -> double"""
        return _vehicle.UAZBUS_Driveline4WD_GetFrontConicalGearRatio(self)

    def GetRearConicalGearRatio(self):
        r"""GetRearConicalGearRatio(UAZBUS_Driveline4WD self) -> double"""
        return _vehicle.UAZBUS_Driveline4WD_GetRearConicalGearRatio(self)

    def GetAxleDifferentialLockingLimit(self):
        r"""GetAxleDifferentialLockingLimit(UAZBUS_Driveline4WD self) -> double"""
        return _vehicle.UAZBUS_Driveline4WD_GetAxleDifferentialLockingLimit(self)

    def GetCentralDifferentialLockingLimit(self):
        r"""GetCentralDifferentialLockingLimit(UAZBUS_Driveline4WD self) -> double"""
        return _vehicle.UAZBUS_Driveline4WD_GetCentralDifferentialLockingLimit(self)

# Register UAZBUS_Driveline4WD in _vehicle:
_vehicle.UAZBUS_Driveline4WD_swigregister(UAZBUS_Driveline4WD)


def CastToChDrivelineWV(in_obj):
    r"""CastToChDrivelineWV(std::shared_ptr< chrono::vehicle::ChDriveline > in_obj) -> std::shared_ptr< chrono::vehicle::ChDrivelineWV >"""
    return _vehicle.CastToChDrivelineWV(in_obj)

def CastToChShaftsDriveline2WD(in_obj):
    r"""CastToChShaftsDriveline2WD(std::shared_ptr< chrono::vehicle::ChDriveline > in_obj) -> std::shared_ptr< chrono::vehicle::ChShaftsDriveline2WD >"""
    return _vehicle.CastToChShaftsDriveline2WD(in_obj)

def CastToChShaftsDriveline4WD(in_obj):
    r"""CastToChShaftsDriveline4WD(std::shared_ptr< chrono::vehicle::ChDriveline > in_obj) -> std::shared_ptr< chrono::vehicle::ChShaftsDriveline4WD >"""
    return _vehicle.CastToChShaftsDriveline4WD(in_obj)

def CastToChSimpleDriveline(in_obj):
    r"""CastToChSimpleDriveline(std::shared_ptr< chrono::vehicle::ChDriveline > in_obj) -> std::shared_ptr< chrono::vehicle::ChSimpleDriveline >"""
    return _vehicle.CastToChSimpleDriveline(in_obj)

def CastToChSimpleDrivelineXWD(in_obj):
    r"""CastToChSimpleDrivelineXWD(std::shared_ptr< chrono::vehicle::ChDriveline > in_obj) -> std::shared_ptr< chrono::vehicle::ChSimpleDrivelineXWD >"""
    return _vehicle.CastToChSimpleDrivelineXWD(in_obj)
class ChSteering(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChSteering class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChSteering

    def GetPosition(self):
        r"""GetPosition(ChSteering self) -> ChCoordsysD"""
        return _vehicle.ChSteering_GetPosition(self)

    def GetSteeringLink(self):
        r"""GetSteeringLink(ChSteering self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChSteering_GetSteeringLink(self)

    def Initialize(self, chassis, location, rotation):
        r"""Initialize(ChSteering self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, ChQuaternionD rotation)"""
        return _vehicle.ChSteering_Initialize(self, chassis, location, rotation)

    def Synchronize(self, time, steering):
        r"""Synchronize(ChSteering self, double time, double steering)"""
        return _vehicle.ChSteering_Synchronize(self, time, steering)

    def GetMass(self):
        r"""GetMass(ChSteering self) -> double"""
        return _vehicle.ChSteering_GetMass(self)

    def GetCOMPos(self):
        r"""GetCOMPos(ChSteering self) -> ChVectorD"""
        return _vehicle.ChSteering_GetCOMPos(self)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChSteering self)"""
        return _vehicle.ChSteering_LogConstraintViolations(self)

# Register ChSteering in _vehicle:
_vehicle.ChSteering_swigregister(ChSteering)

class ChPitmanArm(ChSteering):
    r"""Proxy of C++ chrono::vehicle::ChPitmanArm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChPitmanArm

    def GetTemplateName(self):
        r"""GetTemplateName(ChPitmanArm self) -> std::string"""
        return _vehicle.ChPitmanArm_GetTemplateName(self)

    def Initialize(self, chassis, location, rotation):
        r"""Initialize(ChPitmanArm self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, ChQuaternionD rotation)"""
        return _vehicle.ChPitmanArm_Initialize(self, chassis, location, rotation)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChPitmanArm self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChPitmanArm_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChPitmanArm self)"""
        return _vehicle.ChPitmanArm_RemoveVisualizationAssets(self)

    def Synchronize(self, time, steering):
        r"""Synchronize(ChPitmanArm self, double time, double steering)"""
        return _vehicle.ChPitmanArm_Synchronize(self, time, steering)

    def GetMass(self):
        r"""GetMass(ChPitmanArm self) -> double"""
        return _vehicle.ChPitmanArm_GetMass(self)

    def GetCOMPos(self):
        r"""GetCOMPos(ChPitmanArm self) -> ChVectorD"""
        return _vehicle.ChPitmanArm_GetCOMPos(self)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChPitmanArm self)"""
        return _vehicle.ChPitmanArm_LogConstraintViolations(self)

# Register ChPitmanArm in _vehicle:
_vehicle.ChPitmanArm_swigregister(ChPitmanArm)

class ChPitmanArmShafts(ChSteering):
    r"""Proxy of C++ chrono::vehicle::ChPitmanArmShafts class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChPitmanArmShafts

    def GetTemplateName(self):
        r"""GetTemplateName(ChPitmanArmShafts self) -> std::string"""
        return _vehicle.ChPitmanArmShafts_GetTemplateName(self)

    def Initialize(self, chassis, location, rotation):
        r"""Initialize(ChPitmanArmShafts self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, ChQuaternionD rotation)"""
        return _vehicle.ChPitmanArmShafts_Initialize(self, chassis, location, rotation)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChPitmanArmShafts self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChPitmanArmShafts_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChPitmanArmShafts self)"""
        return _vehicle.ChPitmanArmShafts_RemoveVisualizationAssets(self)

    def Synchronize(self, time, steering):
        r"""Synchronize(ChPitmanArmShafts self, double time, double steering)"""
        return _vehicle.ChPitmanArmShafts_Synchronize(self, time, steering)

    def GetMass(self):
        r"""GetMass(ChPitmanArmShafts self) -> double"""
        return _vehicle.ChPitmanArmShafts_GetMass(self)

    def GetCOMPos(self):
        r"""GetCOMPos(ChPitmanArmShafts self) -> ChVectorD"""
        return _vehicle.ChPitmanArmShafts_GetCOMPos(self)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChPitmanArmShafts self)"""
        return _vehicle.ChPitmanArmShafts_LogConstraintViolations(self)

    def GetShaftInformation(self, time, motor_input, motor_input_der, shaft_angles, shaft_velocities, constraint_violations, arm_angular_vel):
        r"""GetShaftInformation(ChPitmanArmShafts self, double time, double & motor_input, double & motor_input_der, std::vector< double,std::allocator< double > > & shaft_angles, std::vector< double,std::allocator< double > > & shaft_velocities, std::vector< double,std::allocator< double > > & constraint_violations, ChVectorD arm_angular_vel)"""
        return _vehicle.ChPitmanArmShafts_GetShaftInformation(self, time, motor_input, motor_input_der, shaft_angles, shaft_velocities, constraint_violations, arm_angular_vel)

# Register ChPitmanArmShafts in _vehicle:
_vehicle.ChPitmanArmShafts_swigregister(ChPitmanArmShafts)

class ChRackPinion(ChSteering):
    r"""Proxy of C++ chrono::vehicle::ChRackPinion class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChRackPinion

    def GetTemplateName(self):
        r"""GetTemplateName(ChRackPinion self) -> std::string"""
        return _vehicle.ChRackPinion_GetTemplateName(self)

    def Initialize(self, chassis, location, rotation):
        r"""Initialize(ChRackPinion self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, ChQuaternionD rotation)"""
        return _vehicle.ChRackPinion_Initialize(self, chassis, location, rotation)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChRackPinion self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChRackPinion_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChRackPinion self)"""
        return _vehicle.ChRackPinion_RemoveVisualizationAssets(self)

    def Synchronize(self, time, steering):
        r"""Synchronize(ChRackPinion self, double time, double steering)"""
        return _vehicle.ChRackPinion_Synchronize(self, time, steering)

    def GetMass(self):
        r"""GetMass(ChRackPinion self) -> double"""
        return _vehicle.ChRackPinion_GetMass(self)

    def GetCOMPos(self):
        r"""GetCOMPos(ChRackPinion self) -> ChVectorD"""
        return _vehicle.ChRackPinion_GetCOMPos(self)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChRackPinion self)"""
        return _vehicle.ChRackPinion_LogConstraintViolations(self)

# Register ChRackPinion in _vehicle:
_vehicle.ChRackPinion_swigregister(ChRackPinion)

class ChRotaryArm(ChSteering):
    r"""Proxy of C++ chrono::vehicle::ChRotaryArm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChRotaryArm

    def GetTemplateName(self):
        r"""GetTemplateName(ChRotaryArm self) -> std::string"""
        return _vehicle.ChRotaryArm_GetTemplateName(self)

    def Initialize(self, chassis, location, rotation):
        r"""Initialize(ChRotaryArm self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD location, ChQuaternionD rotation)"""
        return _vehicle.ChRotaryArm_Initialize(self, chassis, location, rotation)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChRotaryArm self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChRotaryArm_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChRotaryArm self)"""
        return _vehicle.ChRotaryArm_RemoveVisualizationAssets(self)

    def Synchronize(self, time, steering):
        r"""Synchronize(ChRotaryArm self, double time, double steering)"""
        return _vehicle.ChRotaryArm_Synchronize(self, time, steering)

    def GetMass(self):
        r"""GetMass(ChRotaryArm self) -> double"""
        return _vehicle.ChRotaryArm_GetMass(self)

    def GetCOMPos(self):
        r"""GetCOMPos(ChRotaryArm self) -> ChVectorD"""
        return _vehicle.ChRotaryArm_GetCOMPos(self)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChRotaryArm self)"""
        return _vehicle.ChRotaryArm_LogConstraintViolations(self)

# Register ChRotaryArm in _vehicle:
_vehicle.ChRotaryArm_swigregister(ChRotaryArm)

class PitmanArm(ChPitmanArm):
    r"""Proxy of C++ chrono::vehicle::PitmanArm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PitmanArm self, std::string const & filename) -> PitmanArm
        __init__(PitmanArm self, rapidjson::Document const & d) -> PitmanArm
        """
        _vehicle.PitmanArm_swiginit(self, _vehicle.new_PitmanArm(*args))
    __swig_destroy__ = _vehicle.delete_PitmanArm

    def getSteeringLinkMass(self):
        r"""getSteeringLinkMass(PitmanArm self) -> double"""
        return _vehicle.PitmanArm_getSteeringLinkMass(self)

    def getPitmanArmMass(self):
        r"""getPitmanArmMass(PitmanArm self) -> double"""
        return _vehicle.PitmanArm_getPitmanArmMass(self)

    def getSteeringLinkRadius(self):
        r"""getSteeringLinkRadius(PitmanArm self) -> double"""
        return _vehicle.PitmanArm_getSteeringLinkRadius(self)

    def getPitmanArmRadius(self):
        r"""getPitmanArmRadius(PitmanArm self) -> double"""
        return _vehicle.PitmanArm_getPitmanArmRadius(self)

    def getSteeringLinkInertiaMoments(self):
        r"""getSteeringLinkInertiaMoments(PitmanArm self) -> ChVectorD"""
        return _vehicle.PitmanArm_getSteeringLinkInertiaMoments(self)

    def getSteeringLinkInertiaProducts(self):
        r"""getSteeringLinkInertiaProducts(PitmanArm self) -> ChVectorD"""
        return _vehicle.PitmanArm_getSteeringLinkInertiaProducts(self)

    def getPitmanArmInertiaMoments(self):
        r"""getPitmanArmInertiaMoments(PitmanArm self) -> ChVectorD"""
        return _vehicle.PitmanArm_getPitmanArmInertiaMoments(self)

    def getPitmanArmInertiaProducts(self):
        r"""getPitmanArmInertiaProducts(PitmanArm self) -> ChVectorD"""
        return _vehicle.PitmanArm_getPitmanArmInertiaProducts(self)

    def getMaxAngle(self):
        r"""getMaxAngle(PitmanArm self) -> double"""
        return _vehicle.PitmanArm_getMaxAngle(self)

# Register PitmanArm in _vehicle:
_vehicle.PitmanArm_swigregister(PitmanArm)

class RackPinion(ChRackPinion):
    r"""Proxy of C++ chrono::vehicle::RackPinion class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RackPinion self, std::string const & filename) -> RackPinion
        __init__(RackPinion self, rapidjson::Document const & d) -> RackPinion
        """
        _vehicle.RackPinion_swiginit(self, _vehicle.new_RackPinion(*args))
    __swig_destroy__ = _vehicle.delete_RackPinion

    def GetSteeringLinkMass(self):
        r"""GetSteeringLinkMass(RackPinion self) -> double"""
        return _vehicle.RackPinion_GetSteeringLinkMass(self)

    def GetSteeringLinkInertia(self):
        r"""GetSteeringLinkInertia(RackPinion self) -> ChVectorD"""
        return _vehicle.RackPinion_GetSteeringLinkInertia(self)

    def GetSteeringLinkCOM(self):
        r"""GetSteeringLinkCOM(RackPinion self) -> double"""
        return _vehicle.RackPinion_GetSteeringLinkCOM(self)

    def GetSteeringLinkRadius(self):
        r"""GetSteeringLinkRadius(RackPinion self) -> double"""
        return _vehicle.RackPinion_GetSteeringLinkRadius(self)

    def GetSteeringLinkLength(self):
        r"""GetSteeringLinkLength(RackPinion self) -> double"""
        return _vehicle.RackPinion_GetSteeringLinkLength(self)

    def GetPinionRadius(self):
        r"""GetPinionRadius(RackPinion self) -> double"""
        return _vehicle.RackPinion_GetPinionRadius(self)

    def GetMaxAngle(self):
        r"""GetMaxAngle(RackPinion self) -> double"""
        return _vehicle.RackPinion_GetMaxAngle(self)

# Register RackPinion in _vehicle:
_vehicle.RackPinion_swigregister(RackPinion)

class RotaryArm(ChRotaryArm):
    r"""Proxy of C++ chrono::vehicle::RotaryArm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RotaryArm self, std::string const & filename) -> RotaryArm
        __init__(RotaryArm self, rapidjson::Document const & d) -> RotaryArm
        """
        _vehicle.RotaryArm_swiginit(self, _vehicle.new_RotaryArm(*args))
    __swig_destroy__ = _vehicle.delete_RotaryArm

    def getPitmanArmMass(self):
        r"""getPitmanArmMass(RotaryArm self) -> double"""
        return _vehicle.RotaryArm_getPitmanArmMass(self)

    def getPitmanArmRadius(self):
        r"""getPitmanArmRadius(RotaryArm self) -> double"""
        return _vehicle.RotaryArm_getPitmanArmRadius(self)

    def getPitmanArmInertiaMoments(self):
        r"""getPitmanArmInertiaMoments(RotaryArm self) -> ChVectorD"""
        return _vehicle.RotaryArm_getPitmanArmInertiaMoments(self)

    def getPitmanArmInertiaProducts(self):
        r"""getPitmanArmInertiaProducts(RotaryArm self) -> ChVectorD"""
        return _vehicle.RotaryArm_getPitmanArmInertiaProducts(self)

    def getMaxAngle(self):
        r"""getMaxAngle(RotaryArm self) -> double"""
        return _vehicle.RotaryArm_getMaxAngle(self)

# Register RotaryArm in _vehicle:
_vehicle.RotaryArm_swigregister(RotaryArm)

class CityBus_RotaryArm(ChRotaryArm):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_RotaryArm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_RotaryArm self, std::string const & name) -> CityBus_RotaryArm"""
        _vehicle.CityBus_RotaryArm_swiginit(self, _vehicle.new_CityBus_RotaryArm(name))
    __swig_destroy__ = _vehicle.delete_CityBus_RotaryArm

    def getPitmanArmMass(self):
        r"""getPitmanArmMass(CityBus_RotaryArm self) -> double"""
        return _vehicle.CityBus_RotaryArm_getPitmanArmMass(self)

    def getPitmanArmRadius(self):
        r"""getPitmanArmRadius(CityBus_RotaryArm self) -> double"""
        return _vehicle.CityBus_RotaryArm_getPitmanArmRadius(self)

    def getPitmanArmInertiaMoments(self):
        r"""getPitmanArmInertiaMoments(CityBus_RotaryArm self) -> ChVectorD"""
        return _vehicle.CityBus_RotaryArm_getPitmanArmInertiaMoments(self)

    def getPitmanArmInertiaProducts(self):
        r"""getPitmanArmInertiaProducts(CityBus_RotaryArm self) -> ChVectorD"""
        return _vehicle.CityBus_RotaryArm_getPitmanArmInertiaProducts(self)

    def getMaxAngle(self):
        r"""getMaxAngle(CityBus_RotaryArm self) -> double"""
        return _vehicle.CityBus_RotaryArm_getMaxAngle(self)

# Register CityBus_RotaryArm in _vehicle:
_vehicle.CityBus_RotaryArm_swigregister(CityBus_RotaryArm)

class CityBus_RackPinion(ChRackPinion):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_RackPinion class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_RackPinion self, std::string const & name) -> CityBus_RackPinion"""
        _vehicle.CityBus_RackPinion_swiginit(self, _vehicle.new_CityBus_RackPinion(name))
    __swig_destroy__ = _vehicle.delete_CityBus_RackPinion

    def GetSteeringLinkMass(self):
        r"""GetSteeringLinkMass(CityBus_RackPinion self) -> double"""
        return _vehicle.CityBus_RackPinion_GetSteeringLinkMass(self)

    def GetSteeringLinkInertia(self):
        r"""GetSteeringLinkInertia(CityBus_RackPinion self) -> ChVectorD"""
        return _vehicle.CityBus_RackPinion_GetSteeringLinkInertia(self)

    def GetSteeringLinkCOM(self):
        r"""GetSteeringLinkCOM(CityBus_RackPinion self) -> double"""
        return _vehicle.CityBus_RackPinion_GetSteeringLinkCOM(self)

    def GetSteeringLinkRadius(self):
        r"""GetSteeringLinkRadius(CityBus_RackPinion self) -> double"""
        return _vehicle.CityBus_RackPinion_GetSteeringLinkRadius(self)

    def GetSteeringLinkLength(self):
        r"""GetSteeringLinkLength(CityBus_RackPinion self) -> double"""
        return _vehicle.CityBus_RackPinion_GetSteeringLinkLength(self)

    def GetPinionRadius(self):
        r"""GetPinionRadius(CityBus_RackPinion self) -> double"""
        return _vehicle.CityBus_RackPinion_GetPinionRadius(self)

    def GetMaxAngle(self):
        r"""GetMaxAngle(CityBus_RackPinion self) -> double"""
        return _vehicle.CityBus_RackPinion_GetMaxAngle(self)

# Register CityBus_RackPinion in _vehicle:
_vehicle.CityBus_RackPinion_swigregister(CityBus_RackPinion)

class MAN_5t_RotaryArm(ChRotaryArm):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_RotaryArm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_5t_RotaryArm self, std::string const & name) -> MAN_5t_RotaryArm"""
        _vehicle.MAN_5t_RotaryArm_swiginit(self, _vehicle.new_MAN_5t_RotaryArm(name))
    __swig_destroy__ = _vehicle.delete_MAN_5t_RotaryArm

    def getPitmanArmMass(self):
        r"""getPitmanArmMass(MAN_5t_RotaryArm self) -> double"""
        return _vehicle.MAN_5t_RotaryArm_getPitmanArmMass(self)

    def getPitmanArmRadius(self):
        r"""getPitmanArmRadius(MAN_5t_RotaryArm self) -> double"""
        return _vehicle.MAN_5t_RotaryArm_getPitmanArmRadius(self)

    def getPitmanArmInertiaMoments(self):
        r"""getPitmanArmInertiaMoments(MAN_5t_RotaryArm self) -> ChVectorD"""
        return _vehicle.MAN_5t_RotaryArm_getPitmanArmInertiaMoments(self)

    def getPitmanArmInertiaProducts(self):
        r"""getPitmanArmInertiaProducts(MAN_5t_RotaryArm self) -> ChVectorD"""
        return _vehicle.MAN_5t_RotaryArm_getPitmanArmInertiaProducts(self)

    def getMaxAngle(self):
        r"""getMaxAngle(MAN_5t_RotaryArm self) -> double"""
        return _vehicle.MAN_5t_RotaryArm_getMaxAngle(self)

# Register MAN_5t_RotaryArm in _vehicle:
_vehicle.MAN_5t_RotaryArm_swigregister(MAN_5t_RotaryArm)

class MAN_10t_RotaryArm2(ChRotaryArm):
    r"""Proxy of C++ chrono::vehicle::man::MAN_10t_RotaryArm2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_10t_RotaryArm2 self, std::string const & name) -> MAN_10t_RotaryArm2"""
        _vehicle.MAN_10t_RotaryArm2_swiginit(self, _vehicle.new_MAN_10t_RotaryArm2(name))
    __swig_destroy__ = _vehicle.delete_MAN_10t_RotaryArm2

    def getPitmanArmMass(self):
        r"""getPitmanArmMass(MAN_10t_RotaryArm2 self) -> double"""
        return _vehicle.MAN_10t_RotaryArm2_getPitmanArmMass(self)

    def getPitmanArmRadius(self):
        r"""getPitmanArmRadius(MAN_10t_RotaryArm2 self) -> double"""
        return _vehicle.MAN_10t_RotaryArm2_getPitmanArmRadius(self)

    def getPitmanArmInertiaMoments(self):
        r"""getPitmanArmInertiaMoments(MAN_10t_RotaryArm2 self) -> ChVectorD"""
        return _vehicle.MAN_10t_RotaryArm2_getPitmanArmInertiaMoments(self)

    def getPitmanArmInertiaProducts(self):
        r"""getPitmanArmInertiaProducts(MAN_10t_RotaryArm2 self) -> ChVectorD"""
        return _vehicle.MAN_10t_RotaryArm2_getPitmanArmInertiaProducts(self)

    def getMaxAngle(self):
        r"""getMaxAngle(MAN_10t_RotaryArm2 self) -> double"""
        return _vehicle.MAN_10t_RotaryArm2_getMaxAngle(self)

# Register MAN_10t_RotaryArm2 in _vehicle:
_vehicle.MAN_10t_RotaryArm2_swigregister(MAN_10t_RotaryArm2)

class UAZBUS_RotaryArm(ChRotaryArm):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_RotaryArm class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_RotaryArm self, std::string const & name) -> UAZBUS_RotaryArm"""
        _vehicle.UAZBUS_RotaryArm_swiginit(self, _vehicle.new_UAZBUS_RotaryArm(name))
    __swig_destroy__ = _vehicle.delete_UAZBUS_RotaryArm

    def getPitmanArmMass(self):
        r"""getPitmanArmMass(UAZBUS_RotaryArm self) -> double"""
        return _vehicle.UAZBUS_RotaryArm_getPitmanArmMass(self)

    def getPitmanArmRadius(self):
        r"""getPitmanArmRadius(UAZBUS_RotaryArm self) -> double"""
        return _vehicle.UAZBUS_RotaryArm_getPitmanArmRadius(self)

    def getPitmanArmInertiaMoments(self):
        r"""getPitmanArmInertiaMoments(UAZBUS_RotaryArm self) -> ChVectorD"""
        return _vehicle.UAZBUS_RotaryArm_getPitmanArmInertiaMoments(self)

    def getPitmanArmInertiaProducts(self):
        r"""getPitmanArmInertiaProducts(UAZBUS_RotaryArm self) -> ChVectorD"""
        return _vehicle.UAZBUS_RotaryArm_getPitmanArmInertiaProducts(self)

    def getMaxAngle(self):
        r"""getMaxAngle(UAZBUS_RotaryArm self) -> double"""
        return _vehicle.UAZBUS_RotaryArm_getMaxAngle(self)

# Register UAZBUS_RotaryArm in _vehicle:
_vehicle.UAZBUS_RotaryArm_swigregister(UAZBUS_RotaryArm)


def CastToChPitmanArm(in_obj):
    r"""CastToChPitmanArm(std::shared_ptr< chrono::vehicle::ChSteering > in_obj) -> std::shared_ptr< chrono::vehicle::ChPitmanArm >"""
    return _vehicle.CastToChPitmanArm(in_obj)

def CastToChPitmanArmShafts(in_obj):
    r"""CastToChPitmanArmShafts(std::shared_ptr< chrono::vehicle::ChSteering > in_obj) -> std::shared_ptr< chrono::vehicle::ChPitmanArmShafts >"""
    return _vehicle.CastToChPitmanArmShafts(in_obj)

def CastToChRackPinion(in_obj):
    r"""CastToChRackPinion(std::shared_ptr< chrono::vehicle::ChSteering > in_obj) -> std::shared_ptr< chrono::vehicle::ChRackPinion >"""
    return _vehicle.CastToChRackPinion(in_obj)

def CastToChRotaryArm(in_obj):
    r"""CastToChRotaryArm(std::shared_ptr< chrono::vehicle::ChSteering > in_obj) -> std::shared_ptr< chrono::vehicle::ChRotaryArm >"""
    return _vehicle.CastToChRotaryArm(in_obj)
class ChWheel(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChWheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChWheel

    def GetTemplateName(self):
        r"""GetTemplateName(ChWheel self) -> std::string"""
        return _vehicle.ChWheel_GetTemplateName(self)

    def GetMass(self):
        r"""GetMass(ChWheel self) -> double"""
        return _vehicle.ChWheel_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(ChWheel self) -> ChVectorD"""
        return _vehicle.ChWheel_GetInertia(self)

    def GetRadius(self):
        r"""GetRadius(ChWheel self) -> double"""
        return _vehicle.ChWheel_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(ChWheel self) -> double"""
        return _vehicle.ChWheel_GetWidth(self)

    def Initialize(self, spindle, side, offset=0):
        r"""Initialize(ChWheel self, std::shared_ptr< chrono::ChBody > spindle, chrono::vehicle::VehicleSide side, double offset=0)"""
        return _vehicle.ChWheel_Initialize(self, spindle, side, offset)

    def Synchronize(self):
        r"""Synchronize(ChWheel self)"""
        return _vehicle.ChWheel_Synchronize(self)

    def GetTire(self):
        r"""GetTire(ChWheel self) -> std::shared_ptr< chrono::vehicle::ChTire >"""
        return _vehicle.ChWheel_GetTire(self)

    def SetTire(self, tire):
        r"""SetTire(ChWheel self, std::shared_ptr< chrono::vehicle::ChTire > tire)"""
        return _vehicle.ChWheel_SetTire(self, tire)

    def GetSpindle(self):
        r"""GetSpindle(ChWheel self) -> std::shared_ptr< chrono::ChBody >"""
        return _vehicle.ChWheel_GetSpindle(self)

    def GetSide(self):
        r"""GetSide(ChWheel self) -> chrono::vehicle::VehicleSide"""
        return _vehicle.ChWheel_GetSide(self)

    def GetPos(self):
        r"""GetPos(ChWheel self) -> ChVectorD"""
        return _vehicle.ChWheel_GetPos(self)

    def GetState(self):
        r"""GetState(ChWheel self) -> WheelState"""
        return _vehicle.ChWheel_GetState(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChWheel self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChWheel_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChWheel self)"""
        return _vehicle.ChWheel_RemoveVisualizationAssets(self)

# Register ChWheel in _vehicle:
_vehicle.ChWheel_swigregister(ChWheel)

class Wheel(ChWheel):
    r"""Proxy of C++ chrono::vehicle::Wheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Wheel self, std::string const & filename) -> Wheel
        __init__(Wheel self, rapidjson::Document const & d) -> Wheel
        """
        _vehicle.Wheel_swiginit(self, _vehicle.new_Wheel(*args))
    __swig_destroy__ = _vehicle.delete_Wheel

    def GetMass(self):
        r"""GetMass(Wheel self) -> double"""
        return _vehicle.Wheel_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(Wheel self) -> ChVectorD"""
        return _vehicle.Wheel_GetInertia(self)

    def GetRadius(self):
        r"""GetRadius(Wheel self) -> double"""
        return _vehicle.Wheel_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(Wheel self) -> double"""
        return _vehicle.Wheel_GetWidth(self)

    def SetRadius(self, rad):
        r"""SetRadius(Wheel self, double rad)"""
        return _vehicle.Wheel_SetRadius(self, rad)

    def SetWidth(self, width):
        r"""SetWidth(Wheel self, double width)"""
        return _vehicle.Wheel_SetWidth(self, width)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(Wheel self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Wheel_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(Wheel self)"""
        return _vehicle.Wheel_RemoveVisualizationAssets(self)

# Register Wheel in _vehicle:
_vehicle.Wheel_swigregister(Wheel)

class Generic_Wheel(ChWheel):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_Wheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_Wheel self, std::string const & name) -> Generic_Wheel"""
        _vehicle.Generic_Wheel_swiginit(self, _vehicle.new_Generic_Wheel(name))
    __swig_destroy__ = _vehicle.delete_Generic_Wheel

    def GetMass(self):
        r"""GetMass(Generic_Wheel self) -> double"""
        return _vehicle.Generic_Wheel_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(Generic_Wheel self) -> ChVectorD"""
        return _vehicle.Generic_Wheel_GetInertia(self)

    def GetRadius(self):
        r"""GetRadius(Generic_Wheel self) -> double"""
        return _vehicle.Generic_Wheel_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(Generic_Wheel self) -> double"""
        return _vehicle.Generic_Wheel_GetWidth(self)

# Register Generic_Wheel in _vehicle:
_vehicle.Generic_Wheel_swigregister(Generic_Wheel)

class HMMWV_Wheel(ChWheel):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_Wheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_Wheel self, std::string const & name) -> HMMWV_Wheel"""
        _vehicle.HMMWV_Wheel_swiginit(self, _vehicle.new_HMMWV_Wheel(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_Wheel

    def GetMass(self):
        r"""GetMass(HMMWV_Wheel self) -> double"""
        return _vehicle.HMMWV_Wheel_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(HMMWV_Wheel self) -> ChVectorD"""
        return _vehicle.HMMWV_Wheel_GetInertia(self)

    def GetRadius(self):
        r"""GetRadius(HMMWV_Wheel self) -> double"""
        return _vehicle.HMMWV_Wheel_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(HMMWV_Wheel self) -> double"""
        return _vehicle.HMMWV_Wheel_GetWidth(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(HMMWV_Wheel self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.HMMWV_Wheel_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(HMMWV_Wheel self)"""
        return _vehicle.HMMWV_Wheel_RemoveVisualizationAssets(self)

# Register HMMWV_Wheel in _vehicle:
_vehicle.HMMWV_Wheel_swigregister(HMMWV_Wheel)

class Sedan_Wheel(ChWheel):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan_Wheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Sedan_Wheel self, std::string const & name) -> Sedan_Wheel"""
        _vehicle.Sedan_Wheel_swiginit(self, _vehicle.new_Sedan_Wheel(name))
    __swig_destroy__ = _vehicle.delete_Sedan_Wheel

    def GetMass(self):
        r"""GetMass(Sedan_Wheel self) -> double"""
        return _vehicle.Sedan_Wheel_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(Sedan_Wheel self) -> ChVectorD"""
        return _vehicle.Sedan_Wheel_GetInertia(self)

    def GetRadius(self):
        r"""GetRadius(Sedan_Wheel self) -> double"""
        return _vehicle.Sedan_Wheel_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(Sedan_Wheel self) -> double"""
        return _vehicle.Sedan_Wheel_GetWidth(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(Sedan_Wheel self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Sedan_Wheel_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(Sedan_Wheel self)"""
        return _vehicle.Sedan_Wheel_RemoveVisualizationAssets(self)

# Register Sedan_Wheel in _vehicle:
_vehicle.Sedan_Wheel_swigregister(Sedan_Wheel)

class CityBus_Wheel(ChWheel):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_Wheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_Wheel self, std::string const & name) -> CityBus_Wheel"""
        _vehicle.CityBus_Wheel_swiginit(self, _vehicle.new_CityBus_Wheel(name))
    __swig_destroy__ = _vehicle.delete_CityBus_Wheel

    def GetMass(self):
        r"""GetMass(CityBus_Wheel self) -> double"""
        return _vehicle.CityBus_Wheel_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(CityBus_Wheel self) -> ChVectorD"""
        return _vehicle.CityBus_Wheel_GetInertia(self)

    def GetRadius(self):
        r"""GetRadius(CityBus_Wheel self) -> double"""
        return _vehicle.CityBus_Wheel_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(CityBus_Wheel self) -> double"""
        return _vehicle.CityBus_Wheel_GetWidth(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(CityBus_Wheel self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.CityBus_Wheel_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(CityBus_Wheel self)"""
        return _vehicle.CityBus_Wheel_RemoveVisualizationAssets(self)

# Register CityBus_Wheel in _vehicle:
_vehicle.CityBus_Wheel_swigregister(CityBus_Wheel)

class MAN_5t_Wheel(ChWheel):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_Wheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_5t_Wheel self, std::string const & name) -> MAN_5t_Wheel"""
        _vehicle.MAN_5t_Wheel_swiginit(self, _vehicle.new_MAN_5t_Wheel(name))
    __swig_destroy__ = _vehicle.delete_MAN_5t_Wheel

    def GetMass(self):
        r"""GetMass(MAN_5t_Wheel self) -> double"""
        return _vehicle.MAN_5t_Wheel_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(MAN_5t_Wheel self) -> ChVectorD"""
        return _vehicle.MAN_5t_Wheel_GetInertia(self)

    def GetRadius(self):
        r"""GetRadius(MAN_5t_Wheel self) -> double"""
        return _vehicle.MAN_5t_Wheel_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(MAN_5t_Wheel self) -> double"""
        return _vehicle.MAN_5t_Wheel_GetWidth(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(MAN_5t_Wheel self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_5t_Wheel_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(MAN_5t_Wheel self)"""
        return _vehicle.MAN_5t_Wheel_RemoveVisualizationAssets(self)

# Register MAN_5t_Wheel in _vehicle:
_vehicle.MAN_5t_Wheel_swigregister(MAN_5t_Wheel)

class UAZBUS_Wheel(ChWheel):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_Wheel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_Wheel self, std::string const & name) -> UAZBUS_Wheel"""
        _vehicle.UAZBUS_Wheel_swiginit(self, _vehicle.new_UAZBUS_Wheel(name))
    __swig_destroy__ = _vehicle.delete_UAZBUS_Wheel

    def GetMass(self):
        r"""GetMass(UAZBUS_Wheel self) -> double"""
        return _vehicle.UAZBUS_Wheel_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(UAZBUS_Wheel self) -> ChVectorD"""
        return _vehicle.UAZBUS_Wheel_GetInertia(self)

    def GetRadius(self):
        r"""GetRadius(UAZBUS_Wheel self) -> double"""
        return _vehicle.UAZBUS_Wheel_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(UAZBUS_Wheel self) -> double"""
        return _vehicle.UAZBUS_Wheel_GetWidth(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(UAZBUS_Wheel self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.UAZBUS_Wheel_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(UAZBUS_Wheel self)"""
        return _vehicle.UAZBUS_Wheel_RemoveVisualizationAssets(self)

# Register UAZBUS_Wheel in _vehicle:
_vehicle.UAZBUS_Wheel_swigregister(UAZBUS_Wheel)

class ChBrake(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChBrake class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChBrake

    def Initialize(self, suspension, side):
        r"""Initialize(ChBrake self, std::shared_ptr< chrono::vehicle::ChSuspension > suspension, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChBrake_Initialize(self, suspension, side)

    def Synchronize(self, modulation):
        r"""Synchronize(ChBrake self, double modulation)"""
        return _vehicle.ChBrake_Synchronize(self, modulation)

    def GetBrakeTorque(self):
        r"""GetBrakeTorque(ChBrake self) -> double"""
        return _vehicle.ChBrake_GetBrakeTorque(self)

# Register ChBrake in _vehicle:
_vehicle.ChBrake_swigregister(ChBrake)

class ChBrakeSimple(ChBrake):
    r"""Proxy of C++ chrono::vehicle::ChBrakeSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChBrakeSimple

    def GetTemplateName(self):
        r"""GetTemplateName(ChBrakeSimple self) -> std::string"""
        return _vehicle.ChBrakeSimple_GetTemplateName(self)

    def Initialize(self, suspension, side):
        r"""Initialize(ChBrakeSimple self, std::shared_ptr< chrono::vehicle::ChSuspension > suspension, chrono::vehicle::VehicleSide side)"""
        return _vehicle.ChBrakeSimple_Initialize(self, suspension, side)

    def Synchronize(self, modulation):
        r"""Synchronize(ChBrakeSimple self, double modulation)"""
        return _vehicle.ChBrakeSimple_Synchronize(self, modulation)

    def GetBrakeTorque(self):
        r"""GetBrakeTorque(ChBrakeSimple self) -> double"""
        return _vehicle.ChBrakeSimple_GetBrakeTorque(self)

    def GetBrakeSpeed(self):
        r"""GetBrakeSpeed(ChBrakeSimple self) -> double"""
        return _vehicle.ChBrakeSimple_GetBrakeSpeed(self)

# Register ChBrakeSimple in _vehicle:
_vehicle.ChBrakeSimple_swigregister(ChBrakeSimple)

class BrakeSimple(ChBrakeSimple):
    r"""Proxy of C++ chrono::vehicle::BrakeSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(BrakeSimple self, std::string const & filename) -> BrakeSimple
        __init__(BrakeSimple self, rapidjson::Document const & d) -> BrakeSimple
        """
        _vehicle.BrakeSimple_swiginit(self, _vehicle.new_BrakeSimple(*args))
    __swig_destroy__ = _vehicle.delete_BrakeSimple

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(BrakeSimple self) -> double"""
        return _vehicle.BrakeSimple_GetMaxBrakingTorque(self)

# Register BrakeSimple in _vehicle:
_vehicle.BrakeSimple_swigregister(BrakeSimple)

class Generic_BrakeSimple(ChBrakeSimple):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_BrakeSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_BrakeSimple self, std::string const & name) -> Generic_BrakeSimple"""
        _vehicle.Generic_BrakeSimple_swiginit(self, _vehicle.new_Generic_BrakeSimple(name))
    __swig_destroy__ = _vehicle.delete_Generic_BrakeSimple

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(Generic_BrakeSimple self) -> double"""
        return _vehicle.Generic_BrakeSimple_GetMaxBrakingTorque(self)

# Register Generic_BrakeSimple in _vehicle:
_vehicle.Generic_BrakeSimple_swigregister(Generic_BrakeSimple)

class HMMWV_BrakeSimple(ChBrakeSimple):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_BrakeSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_BrakeSimple self, std::string const & name) -> HMMWV_BrakeSimple"""
        _vehicle.HMMWV_BrakeSimple_swiginit(self, _vehicle.new_HMMWV_BrakeSimple(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_BrakeSimple

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(HMMWV_BrakeSimple self) -> double"""
        return _vehicle.HMMWV_BrakeSimple_GetMaxBrakingTorque(self)

# Register HMMWV_BrakeSimple in _vehicle:
_vehicle.HMMWV_BrakeSimple_swigregister(HMMWV_BrakeSimple)

class Sedan_BrakeSimple(ChBrakeSimple):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan_BrakeSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Sedan_BrakeSimple self, std::string const & name) -> Sedan_BrakeSimple"""
        _vehicle.Sedan_BrakeSimple_swiginit(self, _vehicle.new_Sedan_BrakeSimple(name))
    __swig_destroy__ = _vehicle.delete_Sedan_BrakeSimple

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(Sedan_BrakeSimple self) -> double"""
        return _vehicle.Sedan_BrakeSimple_GetMaxBrakingTorque(self)

# Register Sedan_BrakeSimple in _vehicle:
_vehicle.Sedan_BrakeSimple_swigregister(Sedan_BrakeSimple)

class CityBus_BrakeSimple(ChBrakeSimple):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_BrakeSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_BrakeSimple self, std::string const & name) -> CityBus_BrakeSimple"""
        _vehicle.CityBus_BrakeSimple_swiginit(self, _vehicle.new_CityBus_BrakeSimple(name))
    __swig_destroy__ = _vehicle.delete_CityBus_BrakeSimple

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(CityBus_BrakeSimple self) -> double"""
        return _vehicle.CityBus_BrakeSimple_GetMaxBrakingTorque(self)

# Register CityBus_BrakeSimple in _vehicle:
_vehicle.CityBus_BrakeSimple_swigregister(CityBus_BrakeSimple)

class MAN_5t_BrakeSimple(ChBrakeSimple):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_BrakeSimple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_5t_BrakeSimple self, std::string const & name) -> MAN_5t_BrakeSimple"""
        _vehicle.MAN_5t_BrakeSimple_swiginit(self, _vehicle.new_MAN_5t_BrakeSimple(name))
    __swig_destroy__ = _vehicle.delete_MAN_5t_BrakeSimple

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(MAN_5t_BrakeSimple self) -> double"""
        return _vehicle.MAN_5t_BrakeSimple_GetMaxBrakingTorque(self)

# Register MAN_5t_BrakeSimple in _vehicle:
_vehicle.MAN_5t_BrakeSimple_swigregister(MAN_5t_BrakeSimple)

class UAZBUS_BrakeSimpleFront(ChBrakeSimple):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_BrakeSimpleFront class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_BrakeSimpleFront self, std::string const & name) -> UAZBUS_BrakeSimpleFront"""
        _vehicle.UAZBUS_BrakeSimpleFront_swiginit(self, _vehicle.new_UAZBUS_BrakeSimpleFront(name))
    __swig_destroy__ = _vehicle.delete_UAZBUS_BrakeSimpleFront

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(UAZBUS_BrakeSimpleFront self) -> double"""
        return _vehicle.UAZBUS_BrakeSimpleFront_GetMaxBrakingTorque(self)

# Register UAZBUS_BrakeSimpleFront in _vehicle:
_vehicle.UAZBUS_BrakeSimpleFront_swigregister(UAZBUS_BrakeSimpleFront)

class UAZBUS_BrakeSimpleRear(ChBrakeSimple):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_BrakeSimpleRear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_BrakeSimpleRear self, std::string const & name) -> UAZBUS_BrakeSimpleRear"""
        _vehicle.UAZBUS_BrakeSimpleRear_swiginit(self, _vehicle.new_UAZBUS_BrakeSimpleRear(name))
    __swig_destroy__ = _vehicle.delete_UAZBUS_BrakeSimpleRear

    def GetMaxBrakingTorque(self):
        r"""GetMaxBrakingTorque(UAZBUS_BrakeSimpleRear self) -> double"""
        return _vehicle.UAZBUS_BrakeSimpleRear_GetMaxBrakingTorque(self)

# Register UAZBUS_BrakeSimpleRear in _vehicle:
_vehicle.UAZBUS_BrakeSimpleRear_swigregister(UAZBUS_BrakeSimpleRear)

class ChTire(ChPart):
    r"""Proxy of C++ chrono::vehicle::ChTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    CollisionType_SINGLE_POINT = _vehicle.ChTire_CollisionType_SINGLE_POINT
    
    CollisionType_FOUR_POINTS = _vehicle.ChTire_CollisionType_FOUR_POINTS
    
    CollisionType_ENVELOPE = _vehicle.ChTire_CollisionType_ENVELOPE
    
    __swig_destroy__ = _vehicle.delete_ChTire

    def SetStepsize(self, val):
        r"""SetStepsize(ChTire self, double val)"""
        return _vehicle.ChTire_SetStepsize(self, val)

    def GetStepsize(self):
        r"""GetStepsize(ChTire self) -> double"""
        return _vehicle.ChTire_GetStepsize(self)

    def SetCollisionType(self, collision_type):
        r"""SetCollisionType(ChTire self, chrono::vehicle::ChTire::CollisionType collision_type)"""
        return _vehicle.ChTire_SetCollisionType(self, collision_type)

    def GetRadius(self):
        r"""GetRadius(ChTire self) -> double"""
        return _vehicle.ChTire_GetRadius(self)

    def GetMass(self):
        r"""GetMass(ChTire self) -> double"""
        return _vehicle.ChTire_GetMass(self)

    def ReportMass(self):
        r"""ReportMass(ChTire self) -> double"""
        return _vehicle.ChTire_ReportMass(self)

    def GetInertia(self):
        r"""GetInertia(ChTire self) -> ChVectorD"""
        return _vehicle.ChTire_GetInertia(self)

    def ReportTireForce(self, terrain):
        r"""ReportTireForce(ChTire self, ChTerrain terrain) -> TerrainForce"""
        return _vehicle.ChTire_ReportTireForce(self, terrain)

    def GetSlipAngle(self):
        r"""GetSlipAngle(ChTire self) -> double"""
        return _vehicle.ChTire_GetSlipAngle(self)

    def GetLongitudinalSlip(self):
        r"""GetLongitudinalSlip(ChTire self) -> double"""
        return _vehicle.ChTire_GetLongitudinalSlip(self)

    def GetCamberAngle(self):
        r"""GetCamberAngle(ChTire self) -> double"""
        return _vehicle.ChTire_GetCamberAngle(self)

    @staticmethod
    def EstimateInertia(tire_width, aspect_ratio, rim_diameter, tire_mass, t_factor=2):
        r"""EstimateInertia(double tire_width, double aspect_ratio, double rim_diameter, double tire_mass, double t_factor=2) -> ChVectorD"""
        return _vehicle.ChTire_EstimateInertia(tire_width, aspect_ratio, rim_diameter, tire_mass, t_factor)

    def GetDeflection(self):
        r"""GetDeflection(ChTire self) -> double"""
        return _vehicle.ChTire_GetDeflection(self)

    def Initialize(self, wheel):
        r"""Initialize(ChTire self, std::shared_ptr< chrono::vehicle::ChWheel > wheel)"""
        return _vehicle.ChTire_Initialize(self, wheel)

    def Synchronize(self, time, terrain):
        r"""Synchronize(ChTire self, double time, ChTerrain terrain)"""
        return _vehicle.ChTire_Synchronize(self, time, terrain)

    def Advance(self, step):
        r"""Advance(ChTire self, double step)"""
        return _vehicle.ChTire_Advance(self, step)

# Register ChTire in _vehicle:
_vehicle.ChTire_swigregister(ChTire)

def ChTire_EstimateInertia(tire_width, aspect_ratio, rim_diameter, tire_mass, t_factor=2):
    r"""ChTire_EstimateInertia(double tire_width, double aspect_ratio, double rim_diameter, double tire_mass, double t_factor=2) -> ChVectorD"""
    return _vehicle.ChTire_EstimateInertia(tire_width, aspect_ratio, rim_diameter, tire_mass, t_factor)

class ChTMeasyTire(ChTire):
    r"""Proxy of C++ chrono::vehicle::ChTMeasyTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChTMeasyTire

    def GetTemplateName(self):
        r"""GetTemplateName(ChTMeasyTire self) -> std::string"""
        return _vehicle.ChTMeasyTire_GetTemplateName(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChTMeasyTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChTMeasyTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChTMeasyTire self)"""
        return _vehicle.ChTMeasyTire_RemoveVisualizationAssets(self)

    def GetRadius(self):
        r"""GetRadius(ChTMeasyTire self) -> double"""
        return _vehicle.ChTMeasyTire_GetRadius(self)

    def ReportTireForce(self, terrain):
        r"""ReportTireForce(ChTMeasyTire self, ChTerrain terrain) -> TerrainForce"""
        return _vehicle.ChTMeasyTire_ReportTireForce(self, terrain)

    def SetGammaLimit(self, gamma_limit):
        r"""SetGammaLimit(ChTMeasyTire self, double gamma_limit)"""
        return _vehicle.ChTMeasyTire_SetGammaLimit(self, gamma_limit)

    def GetWidth(self):
        r"""GetWidth(ChTMeasyTire self) -> double"""
        return _vehicle.ChTMeasyTire_GetWidth(self)

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(ChTMeasyTire self) -> double"""
        return _vehicle.ChTMeasyTire_GetVisualizationWidth(self)

    def GetSlipAngle_internal(self):
        r"""GetSlipAngle_internal(ChTMeasyTire self) -> double"""
        return _vehicle.ChTMeasyTire_GetSlipAngle_internal(self)

    def GetLongitudinalSlip_internal(self):
        r"""GetLongitudinalSlip_internal(ChTMeasyTire self) -> double"""
        return _vehicle.ChTMeasyTire_GetLongitudinalSlip_internal(self)

    def GetCamberAngle_internal(self):
        r"""GetCamberAngle_internal(ChTMeasyTire self) -> double"""
        return _vehicle.ChTMeasyTire_GetCamberAngle_internal(self)

    @staticmethod
    def GetTireMaxLoad(li):
        r"""GetTireMaxLoad(unsigned int li) -> double"""
        return _vehicle.ChTMeasyTire_GetTireMaxLoad(li)

    def GuessTruck80Par(self, *args):
        r"""
        GuessTruck80Par(ChTMeasyTire self, unsigned int li, double tireWidth, double ratio, double rimDia, double pinfl_li=1.0, double pinfl_use=1.0)
        GuessTruck80Par(ChTMeasyTire self, double loadForce, double tireWidth, double ratio, double rimDia, double pinfl_li=1.0, double pinfl_use=1.0)
        """
        return _vehicle.ChTMeasyTire_GuessTruck80Par(self, *args)

    def GuessPassCar70Par(self, *args):
        r"""
        GuessPassCar70Par(ChTMeasyTire self, unsigned int li, double tireWidth, double ratio, double rimDia, double pinfl_li=1.0, double pinfl_use=1.0)
        GuessPassCar70Par(ChTMeasyTire self, double loadForce, double tireWidth, double ratio, double rimDia, double pinfl_li=1.0, double pinfl_use=1.0)
        """
        return _vehicle.ChTMeasyTire_GuessPassCar70Par(self, *args)

    def SetVerticalStiffness(self, *args):
        r"""
        SetVerticalStiffness(ChTMeasyTire self, double Cz)
        SetVerticalStiffness(ChTMeasyTire self, double Cz1, double Cz2)
        SetVerticalStiffness(ChTMeasyTire self, std::vector< double,std::allocator< double > > & defl, std::vector< double,std::allocator< double > > & frc)
        """
        return _vehicle.ChTMeasyTire_SetVerticalStiffness(self, *args)

    def SetFrictionCoefficient(self, coeff):
        r"""SetFrictionCoefficient(ChTMeasyTire self, double coeff)"""
        return _vehicle.ChTMeasyTire_SetFrictionCoefficient(self, coeff)

    def SetRollingResistanceCoefficients(self, rr_coeff_1, rr_coeff_2):
        r"""SetRollingResistanceCoefficients(ChTMeasyTire self, double rr_coeff_1, double rr_coeff_2)"""
        return _vehicle.ChTMeasyTire_SetRollingResistanceCoefficients(self, rr_coeff_1, rr_coeff_2)

    def SetDynamicRadiusCoefficients(self, rdyn_coeff_1, rdyn_coeff_2):
        r"""SetDynamicRadiusCoefficients(ChTMeasyTire self, double rdyn_coeff_1, double rdyn_coeff_2)"""
        return _vehicle.ChTMeasyTire_SetDynamicRadiusCoefficients(self, rdyn_coeff_1, rdyn_coeff_2)

    def WritePlots(self, plFileName, plTireFormat):
        r"""WritePlots(ChTMeasyTire self, std::string const & plFileName, std::string const & plTireFormat)"""
        return _vehicle.ChTMeasyTire_WritePlots(self, plFileName, plTireFormat)

    def GetDeflection(self, *args):
        r"""
        GetDeflection(ChTMeasyTire self) -> double
        GetDeflection(ChTMeasyTire self) -> ChVectorD
        """
        return _vehicle.ChTMeasyTire_GetDeflection(self, *args)

    def ExportParameterFile(self, fileName):
        r"""ExportParameterFile(ChTMeasyTire self, std::string fileName)"""
        return _vehicle.ChTMeasyTire_ExportParameterFile(self, fileName)

    def ExportJSONFile(self, jsonFileName):
        r"""ExportJSONFile(ChTMeasyTire self, std::string jsonFileName)"""
        return _vehicle.ChTMeasyTire_ExportJSONFile(self, jsonFileName)

    def CheckParameters(self):
        r"""CheckParameters(ChTMeasyTire self) -> bool"""
        return _vehicle.ChTMeasyTire_CheckParameters(self)

# Register ChTMeasyTire in _vehicle:
_vehicle.ChTMeasyTire_swigregister(ChTMeasyTire)

def ChTMeasyTire_GetTireMaxLoad(li):
    r"""ChTMeasyTire_GetTireMaxLoad(unsigned int li) -> double"""
    return _vehicle.ChTMeasyTire_GetTireMaxLoad(li)

class ChRigidTire(ChTire):
    r"""Proxy of C++ chrono::vehicle::ChRigidTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChRigidTire

    def GetTemplateName(self):
        r"""GetTemplateName(ChRigidTire self) -> std::string"""
        return _vehicle.ChRigidTire_GetTemplateName(self)

    def SetMeshFilename(self, mesh_file, sweep_sphere_radius=0):
        r"""SetMeshFilename(ChRigidTire self, std::string const & mesh_file, double sweep_sphere_radius=0)"""
        return _vehicle.ChRigidTire_SetMeshFilename(self, mesh_file, sweep_sphere_radius)

    def UseContactMesh(self):
        r"""UseContactMesh(ChRigidTire self) -> bool"""
        return _vehicle.ChRigidTire_UseContactMesh(self)

    def GetWidth(self):
        r"""GetWidth(ChRigidTire self) -> double"""
        return _vehicle.ChRigidTire_GetWidth(self)

    def ReportTireForce(self, terrain):
        r"""ReportTireForce(ChRigidTire self, ChTerrain terrain) -> TerrainForce"""
        return _vehicle.ChRigidTire_ReportTireForce(self, terrain)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChRigidTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChRigidTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChRigidTire self)"""
        return _vehicle.ChRigidTire_RemoveVisualizationAssets(self)

    def GetNumVertices(self):
        r"""GetNumVertices(ChRigidTire self) -> unsigned int"""
        return _vehicle.ChRigidTire_GetNumVertices(self)

    def GetNumTriangles(self):
        r"""GetNumTriangles(ChRigidTire self) -> unsigned int"""
        return _vehicle.ChRigidTire_GetNumTriangles(self)

    def GetMeshConnectivity(self):
        r"""GetMeshConnectivity(ChRigidTire self) -> std::vector< chrono::ChVector< int >,std::allocator< chrono::ChVector< int > > > const &"""
        return _vehicle.ChRigidTire_GetMeshConnectivity(self)

    def GetMeshVertices(self):
        r"""GetMeshVertices(ChRigidTire self) -> vector_ChVectorD"""
        return _vehicle.ChRigidTire_GetMeshVertices(self)

    def GetMeshNormals(self):
        r"""GetMeshNormals(ChRigidTire self) -> vector_ChVectorD"""
        return _vehicle.ChRigidTire_GetMeshNormals(self)

    def GetMeshVertexStates(self, pos, vel):
        r"""GetMeshVertexStates(ChRigidTire self, vector_ChVectorD pos, vector_ChVectorD vel)"""
        return _vehicle.ChRigidTire_GetMeshVertexStates(self, pos, vel)

# Register ChRigidTire in _vehicle:
_vehicle.ChRigidTire_swigregister(ChRigidTire)

class ChPacejkaTire(ChTire):
    r"""Proxy of C++ chrono::vehicle::ChPacejkaTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChPacejkaTire

    def GetTemplateName(self):
        r"""GetTemplateName(ChPacejkaTire self) -> std::string"""
        return _vehicle.ChPacejkaTire_GetTemplateName(self)

    def SetDrivenWheel(self, val):
        r"""SetDrivenWheel(ChPacejkaTire self, bool val)"""
        return _vehicle.ChPacejkaTire_SetDrivenWheel(self, val)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChPacejkaTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChPacejkaTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChPacejkaTire self)"""
        return _vehicle.ChPacejkaTire_RemoveVisualizationAssets(self)

    def GetRadius(self):
        r"""GetRadius(ChPacejkaTire self) -> double"""
        return _vehicle.ChPacejkaTire_GetRadius(self)

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(ChPacejkaTire self) -> double"""
        return _vehicle.ChPacejkaTire_GetVisualizationWidth(self)

    def ReportTireForce(self, terrain):
        r"""ReportTireForce(ChPacejkaTire self, ChTerrain terrain) -> TerrainForce"""
        return _vehicle.ChPacejkaTire_ReportTireForce(self, terrain)

    def GetTireForce_pureSlip(self, local=True):
        r"""GetTireForce_pureSlip(ChPacejkaTire self, bool const local=True) -> TerrainForce"""
        return _vehicle.ChPacejkaTire_GetTireForce_pureSlip(self, local)

    def GetTireForce_combinedSlip(self, local=True):
        r"""GetTireForce_combinedSlip(ChPacejkaTire self, bool const local=True) -> TerrainForce"""
        return _vehicle.ChPacejkaTire_GetTireForce_combinedSlip(self, local)

    def GetSlipAngle_internal(self):
        r"""GetSlipAngle_internal(ChPacejkaTire self) -> double"""
        return _vehicle.ChPacejkaTire_GetSlipAngle_internal(self)

    def GetLongitudinalSlip_internal(self):
        r"""GetLongitudinalSlip_internal(ChPacejkaTire self) -> double"""
        return _vehicle.ChPacejkaTire_GetLongitudinalSlip_internal(self)

    def GetCamberAngle_internal(self):
        r"""GetCamberAngle_internal(ChPacejkaTire self) -> double"""
        return _vehicle.ChPacejkaTire_GetCamberAngle_internal(self)

    def WriteOutData(self, time, outFilename):
        r"""WriteOutData(ChPacejkaTire self, double time, std::string const & outFilename)"""
        return _vehicle.ChPacejkaTire_WriteOutData(self, time, outFilename)

    def set_Fz_override(self, Fz):
        r"""set_Fz_override(ChPacejkaTire self, double Fz)"""
        return _vehicle.ChPacejkaTire_set_Fz_override(self, Fz)

    def getState_from_KAG(self, kappa, alpha, gamma, Vx):
        r"""getState_from_KAG(ChPacejkaTire self, double kappa, double alpha, double gamma, double Vx) -> WheelState"""
        return _vehicle.ChPacejkaTire_getState_from_KAG(self, kappa, alpha, gamma, Vx)

    def get_average_Advance_time(self):
        r"""get_average_Advance_time(ChPacejkaTire self) -> double"""
        return _vehicle.ChPacejkaTire_get_average_Advance_time(self)

    def get_average_ODE_time(self):
        r"""get_average_ODE_time(ChPacejkaTire self) -> double"""
        return _vehicle.ChPacejkaTire_get_average_ODE_time(self)

    def get_kappa(self):
        r"""get_kappa(ChPacejkaTire self) -> double"""
        return _vehicle.ChPacejkaTire_get_kappa(self)

    def get_alpha(self):
        r"""get_alpha(ChPacejkaTire self) -> double"""
        return _vehicle.ChPacejkaTire_get_alpha(self)

    def get_gamma(self):
        r"""get_gamma(ChPacejkaTire self) -> double"""
        return _vehicle.ChPacejkaTire_get_gamma(self)

    def get_kappaPrime(self):
        r"""get_kappaPrime(ChPacejkaTire self) -> double"""
        return _vehicle.ChPacejkaTire_get_kappaPrime(self)

    def get_alphaPrime(self):
        r"""get_alphaPrime(ChPacejkaTire self) -> double"""
        return _vehicle.ChPacejkaTire_get_alphaPrime(self)

    def get_gammaPrime(self):
        r"""get_gammaPrime(ChPacejkaTire self) -> double"""
        return _vehicle.ChPacejkaTire_get_gammaPrime(self)

    def get_min_long_slip(self):
        r"""get_min_long_slip(ChPacejkaTire self) -> double"""
        return _vehicle.ChPacejkaTire_get_min_long_slip(self)

    def get_max_long_slip(self):
        r"""get_max_long_slip(ChPacejkaTire self) -> double"""
        return _vehicle.ChPacejkaTire_get_max_long_slip(self)

    def get_min_lat_slip(self):
        r"""get_min_lat_slip(ChPacejkaTire self) -> double"""
        return _vehicle.ChPacejkaTire_get_min_lat_slip(self)

    def get_max_lat_slip(self):
        r"""get_max_lat_slip(ChPacejkaTire self) -> double"""
        return _vehicle.ChPacejkaTire_get_max_lat_slip(self)

    def get_longvl(self):
        r"""get_longvl(ChPacejkaTire self) -> double"""
        return _vehicle.ChPacejkaTire_get_longvl(self)

    def get_tire_rolling_rad(self):
        r"""get_tire_rolling_rad(ChPacejkaTire self) -> double"""
        return _vehicle.ChPacejkaTire_get_tire_rolling_rad(self)

# Register ChPacejkaTire in _vehicle:
_vehicle.ChPacejkaTire_swigregister(ChPacejkaTire)


def splitStr(*args):
    r"""
    splitStr(std::string const & s, char delim, std::vector< std::string,std::allocator< std::string > > & elems) -> std::vector< std::string,std::allocator< std::string > >
    splitStr(std::string const & s, char delim) -> std::vector< std::string,std::allocator< std::string > >
    """
    return _vehicle.splitStr(*args)
class slips(object):
    r"""Proxy of C++ chrono::vehicle::slips class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kappa = property(_vehicle.slips_kappa_get, _vehicle.slips_kappa_set, doc=r"""kappa : double""")
    alpha = property(_vehicle.slips_alpha_get, _vehicle.slips_alpha_set, doc=r"""alpha : double""")
    alpha_star = property(_vehicle.slips_alpha_star_get, _vehicle.slips_alpha_star_set, doc=r"""alpha_star : double""")
    gamma = property(_vehicle.slips_gamma_get, _vehicle.slips_gamma_set, doc=r"""gamma : double""")
    V_cx = property(_vehicle.slips_V_cx_get, _vehicle.slips_V_cx_set, doc=r"""V_cx : double""")
    V_cy = property(_vehicle.slips_V_cy_get, _vehicle.slips_V_cy_set, doc=r"""V_cy : double""")
    V_sx = property(_vehicle.slips_V_sx_get, _vehicle.slips_V_sx_set, doc=r"""V_sx : double""")
    V_sy = property(_vehicle.slips_V_sy_get, _vehicle.slips_V_sy_set, doc=r"""V_sy : double""")
    psi_dot = property(_vehicle.slips_psi_dot_get, _vehicle.slips_psi_dot_set, doc=r"""psi_dot : double""")
    cosPrime_alpha = property(_vehicle.slips_cosPrime_alpha_get, _vehicle.slips_cosPrime_alpha_set, doc=r"""cosPrime_alpha : double""")
    u = property(_vehicle.slips_u_get, _vehicle.slips_u_set, doc=r"""u : double""")
    v_alpha = property(_vehicle.slips_v_alpha_get, _vehicle.slips_v_alpha_set, doc=r"""v_alpha : double""")
    v_gamma = property(_vehicle.slips_v_gamma_get, _vehicle.slips_v_gamma_set, doc=r"""v_gamma : double""")
    v_phi = property(_vehicle.slips_v_phi_get, _vehicle.slips_v_phi_set, doc=r"""v_phi : double""")
    Idu_dt = property(_vehicle.slips_Idu_dt_get, _vehicle.slips_Idu_dt_set, doc=r"""Idu_dt : double""")
    Idv_alpha_dt = property(_vehicle.slips_Idv_alpha_dt_get, _vehicle.slips_Idv_alpha_dt_set, doc=r"""Idv_alpha_dt : double""")
    Idv_gamma_dt = property(_vehicle.slips_Idv_gamma_dt_get, _vehicle.slips_Idv_gamma_dt_set, doc=r"""Idv_gamma_dt : double""")
    Idv_phi_dt = property(_vehicle.slips_Idv_phi_dt_get, _vehicle.slips_Idv_phi_dt_set, doc=r"""Idv_phi_dt : double""")
    alphaP = property(_vehicle.slips_alphaP_get, _vehicle.slips_alphaP_set, doc=r"""alphaP : double""")
    kappaP = property(_vehicle.slips_kappaP_get, _vehicle.slips_kappaP_set, doc=r"""kappaP : double""")
    gammaP = property(_vehicle.slips_gammaP_get, _vehicle.slips_gammaP_set, doc=r"""gammaP : double""")
    phiT = property(_vehicle.slips_phiT_get, _vehicle.slips_phiT_set, doc=r"""phiT : double""")
    phiP = property(_vehicle.slips_phiP_get, _vehicle.slips_phiP_set, doc=r"""phiP : double""")

    def __init__(self):
        r"""__init__(slips self) -> slips"""
        _vehicle.slips_swiginit(self, _vehicle.new_slips())
    __swig_destroy__ = _vehicle.delete_slips

# Register slips in _vehicle:
_vehicle.slips_swigregister(slips)

class model(object):
    r"""Proxy of C++ chrono::vehicle::model class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    property_file_format = property(_vehicle.model_property_file_format_get, _vehicle.model_property_file_format_set, doc=r"""property_file_format : std::string""")
    use_mode = property(_vehicle.model_use_mode_get, _vehicle.model_use_mode_set, doc=r"""use_mode : int""")
    vxlow = property(_vehicle.model_vxlow_get, _vehicle.model_vxlow_set, doc=r"""vxlow : double""")
    longvl = property(_vehicle.model_longvl_get, _vehicle.model_longvl_set, doc=r"""longvl : double""")
    tyreside = property(_vehicle.model_tyreside_get, _vehicle.model_tyreside_set, doc=r"""tyreside : std::string""")

    def __init__(self):
        r"""__init__(model self) -> model"""
        _vehicle.model_swiginit(self, _vehicle.new_model())
    __swig_destroy__ = _vehicle.delete_model

# Register model in _vehicle:
_vehicle.model_swigregister(model)

class dimension(object):
    r"""Proxy of C++ chrono::vehicle::dimension class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    unloaded_radius = property(_vehicle.dimension_unloaded_radius_get, _vehicle.dimension_unloaded_radius_set, doc=r"""unloaded_radius : double""")
    width = property(_vehicle.dimension_width_get, _vehicle.dimension_width_set, doc=r"""width : double""")
    aspect_ratio = property(_vehicle.dimension_aspect_ratio_get, _vehicle.dimension_aspect_ratio_set, doc=r"""aspect_ratio : double""")
    rim_radius = property(_vehicle.dimension_rim_radius_get, _vehicle.dimension_rim_radius_set, doc=r"""rim_radius : double""")
    rim_width = property(_vehicle.dimension_rim_width_get, _vehicle.dimension_rim_width_set, doc=r"""rim_width : double""")

    def __init__(self):
        r"""__init__(dimension self) -> dimension"""
        _vehicle.dimension_swiginit(self, _vehicle.new_dimension())
    __swig_destroy__ = _vehicle.delete_dimension

# Register dimension in _vehicle:
_vehicle.dimension_swigregister(dimension)

class shape(object):
    r"""Proxy of C++ chrono::vehicle::shape class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    radial = property(_vehicle.shape_radial_get, _vehicle.shape_radial_set, doc=r"""radial : std::vector<(double,std::allocator<(double)>)>""")
    width = property(_vehicle.shape_width_get, _vehicle.shape_width_set, doc=r"""width : std::vector<(double,std::allocator<(double)>)>""")

    def __init__(self):
        r"""__init__(shape self) -> shape"""
        _vehicle.shape_swiginit(self, _vehicle.new_shape())
    __swig_destroy__ = _vehicle.delete_shape

# Register shape in _vehicle:
_vehicle.shape_swigregister(shape)

class vertical(object):
    r"""Proxy of C++ chrono::vehicle::vertical class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vertical_stiffness = property(_vehicle.vertical_vertical_stiffness_get, _vehicle.vertical_vertical_stiffness_set, doc=r"""vertical_stiffness : double""")
    vertical_damping = property(_vehicle.vertical_vertical_damping_get, _vehicle.vertical_vertical_damping_set, doc=r"""vertical_damping : double""")
    breff = property(_vehicle.vertical_breff_get, _vehicle.vertical_breff_set, doc=r"""breff : double""")
    dreff = property(_vehicle.vertical_dreff_get, _vehicle.vertical_dreff_set, doc=r"""dreff : double""")
    freff = property(_vehicle.vertical_freff_get, _vehicle.vertical_freff_set, doc=r"""freff : double""")
    fnomin = property(_vehicle.vertical_fnomin_get, _vehicle.vertical_fnomin_set, doc=r"""fnomin : double""")

    def __init__(self):
        r"""__init__(vertical self) -> vertical"""
        _vehicle.vertical_swiginit(self, _vehicle.new_vertical())
    __swig_destroy__ = _vehicle.delete_vertical

# Register vertical in _vehicle:
_vehicle.vertical_swigregister(vertical)

class long_slip_range(object):
    r"""Proxy of C++ chrono::vehicle::long_slip_range class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kpumin = property(_vehicle.long_slip_range_kpumin_get, _vehicle.long_slip_range_kpumin_set, doc=r"""kpumin : double""")
    kpumax = property(_vehicle.long_slip_range_kpumax_get, _vehicle.long_slip_range_kpumax_set, doc=r"""kpumax : double""")

    def __init__(self):
        r"""__init__(long_slip_range self) -> long_slip_range"""
        _vehicle.long_slip_range_swiginit(self, _vehicle.new_long_slip_range())
    __swig_destroy__ = _vehicle.delete_long_slip_range

# Register long_slip_range in _vehicle:
_vehicle.long_slip_range_swigregister(long_slip_range)

class slip_angle_range(object):
    r"""Proxy of C++ chrono::vehicle::slip_angle_range class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    alpmin = property(_vehicle.slip_angle_range_alpmin_get, _vehicle.slip_angle_range_alpmin_set, doc=r"""alpmin : double""")
    alpmax = property(_vehicle.slip_angle_range_alpmax_get, _vehicle.slip_angle_range_alpmax_set, doc=r"""alpmax : double""")

    def __init__(self):
        r"""__init__(slip_angle_range self) -> slip_angle_range"""
        _vehicle.slip_angle_range_swiginit(self, _vehicle.new_slip_angle_range())
    __swig_destroy__ = _vehicle.delete_slip_angle_range

# Register slip_angle_range in _vehicle:
_vehicle.slip_angle_range_swigregister(slip_angle_range)

class inclination_angle_range(object):
    r"""Proxy of C++ chrono::vehicle::inclination_angle_range class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cammin = property(_vehicle.inclination_angle_range_cammin_get, _vehicle.inclination_angle_range_cammin_set, doc=r"""cammin : double""")
    cammax = property(_vehicle.inclination_angle_range_cammax_get, _vehicle.inclination_angle_range_cammax_set, doc=r"""cammax : double""")

    def __init__(self):
        r"""__init__(inclination_angle_range self) -> inclination_angle_range"""
        _vehicle.inclination_angle_range_swiginit(self, _vehicle.new_inclination_angle_range())
    __swig_destroy__ = _vehicle.delete_inclination_angle_range

# Register inclination_angle_range in _vehicle:
_vehicle.inclination_angle_range_swigregister(inclination_angle_range)

class vertical_force_range(object):
    r"""Proxy of C++ chrono::vehicle::vertical_force_range class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fzmin = property(_vehicle.vertical_force_range_fzmin_get, _vehicle.vertical_force_range_fzmin_set, doc=r"""fzmin : double""")
    fzmax = property(_vehicle.vertical_force_range_fzmax_get, _vehicle.vertical_force_range_fzmax_set, doc=r"""fzmax : double""")

    def __init__(self):
        r"""__init__(vertical_force_range self) -> vertical_force_range"""
        _vehicle.vertical_force_range_swiginit(self, _vehicle.new_vertical_force_range())
    __swig_destroy__ = _vehicle.delete_vertical_force_range

# Register vertical_force_range in _vehicle:
_vehicle.vertical_force_range_swigregister(vertical_force_range)

class scaling_coefficients(object):
    r"""Proxy of C++ chrono::vehicle::scaling_coefficients class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lfzo = property(_vehicle.scaling_coefficients_lfzo_get, _vehicle.scaling_coefficients_lfzo_set, doc=r"""lfzo : double""")
    lcx = property(_vehicle.scaling_coefficients_lcx_get, _vehicle.scaling_coefficients_lcx_set, doc=r"""lcx : double""")
    lmux = property(_vehicle.scaling_coefficients_lmux_get, _vehicle.scaling_coefficients_lmux_set, doc=r"""lmux : double""")
    lex = property(_vehicle.scaling_coefficients_lex_get, _vehicle.scaling_coefficients_lex_set, doc=r"""lex : double""")
    lkx = property(_vehicle.scaling_coefficients_lkx_get, _vehicle.scaling_coefficients_lkx_set, doc=r"""lkx : double""")
    lhx = property(_vehicle.scaling_coefficients_lhx_get, _vehicle.scaling_coefficients_lhx_set, doc=r"""lhx : double""")
    lvx = property(_vehicle.scaling_coefficients_lvx_get, _vehicle.scaling_coefficients_lvx_set, doc=r"""lvx : double""")
    lgax = property(_vehicle.scaling_coefficients_lgax_get, _vehicle.scaling_coefficients_lgax_set, doc=r"""lgax : double""")
    lcy = property(_vehicle.scaling_coefficients_lcy_get, _vehicle.scaling_coefficients_lcy_set, doc=r"""lcy : double""")
    lmuy = property(_vehicle.scaling_coefficients_lmuy_get, _vehicle.scaling_coefficients_lmuy_set, doc=r"""lmuy : double""")
    ley = property(_vehicle.scaling_coefficients_ley_get, _vehicle.scaling_coefficients_ley_set, doc=r"""ley : double""")
    lky = property(_vehicle.scaling_coefficients_lky_get, _vehicle.scaling_coefficients_lky_set, doc=r"""lky : double""")
    lhy = property(_vehicle.scaling_coefficients_lhy_get, _vehicle.scaling_coefficients_lhy_set, doc=r"""lhy : double""")
    lvy = property(_vehicle.scaling_coefficients_lvy_get, _vehicle.scaling_coefficients_lvy_set, doc=r"""lvy : double""")
    lgay = property(_vehicle.scaling_coefficients_lgay_get, _vehicle.scaling_coefficients_lgay_set, doc=r"""lgay : double""")
    ltr = property(_vehicle.scaling_coefficients_ltr_get, _vehicle.scaling_coefficients_ltr_set, doc=r"""ltr : double""")
    lres = property(_vehicle.scaling_coefficients_lres_get, _vehicle.scaling_coefficients_lres_set, doc=r"""lres : double""")
    lgaz = property(_vehicle.scaling_coefficients_lgaz_get, _vehicle.scaling_coefficients_lgaz_set, doc=r"""lgaz : double""")
    lxal = property(_vehicle.scaling_coefficients_lxal_get, _vehicle.scaling_coefficients_lxal_set, doc=r"""lxal : double""")
    lyka = property(_vehicle.scaling_coefficients_lyka_get, _vehicle.scaling_coefficients_lyka_set, doc=r"""lyka : double""")
    lvyka = property(_vehicle.scaling_coefficients_lvyka_get, _vehicle.scaling_coefficients_lvyka_set, doc=r"""lvyka : double""")
    ls = property(_vehicle.scaling_coefficients_ls_get, _vehicle.scaling_coefficients_ls_set, doc=r"""ls : double""")
    lsgkp = property(_vehicle.scaling_coefficients_lsgkp_get, _vehicle.scaling_coefficients_lsgkp_set, doc=r"""lsgkp : double""")
    lsgal = property(_vehicle.scaling_coefficients_lsgal_get, _vehicle.scaling_coefficients_lsgal_set, doc=r"""lsgal : double""")
    lgyr = property(_vehicle.scaling_coefficients_lgyr_get, _vehicle.scaling_coefficients_lgyr_set, doc=r"""lgyr : double""")
    lmx = property(_vehicle.scaling_coefficients_lmx_get, _vehicle.scaling_coefficients_lmx_set, doc=r"""lmx : double""")
    lvmx = property(_vehicle.scaling_coefficients_lvmx_get, _vehicle.scaling_coefficients_lvmx_set, doc=r"""lvmx : double""")
    lmy = property(_vehicle.scaling_coefficients_lmy_get, _vehicle.scaling_coefficients_lmy_set, doc=r"""lmy : double""")

    def __init__(self):
        r"""__init__(scaling_coefficients self) -> scaling_coefficients"""
        _vehicle.scaling_coefficients_swiginit(self, _vehicle.new_scaling_coefficients())
    __swig_destroy__ = _vehicle.delete_scaling_coefficients

# Register scaling_coefficients in _vehicle:
_vehicle.scaling_coefficients_swigregister(scaling_coefficients)

class longitudinal_coefficients(object):
    r"""Proxy of C++ chrono::vehicle::longitudinal_coefficients class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pcx1 = property(_vehicle.longitudinal_coefficients_pcx1_get, _vehicle.longitudinal_coefficients_pcx1_set, doc=r"""pcx1 : double""")
    pdx1 = property(_vehicle.longitudinal_coefficients_pdx1_get, _vehicle.longitudinal_coefficients_pdx1_set, doc=r"""pdx1 : double""")
    pdx2 = property(_vehicle.longitudinal_coefficients_pdx2_get, _vehicle.longitudinal_coefficients_pdx2_set, doc=r"""pdx2 : double""")
    pdx3 = property(_vehicle.longitudinal_coefficients_pdx3_get, _vehicle.longitudinal_coefficients_pdx3_set, doc=r"""pdx3 : double""")
    pex1 = property(_vehicle.longitudinal_coefficients_pex1_get, _vehicle.longitudinal_coefficients_pex1_set, doc=r"""pex1 : double""")
    pex2 = property(_vehicle.longitudinal_coefficients_pex2_get, _vehicle.longitudinal_coefficients_pex2_set, doc=r"""pex2 : double""")
    pex3 = property(_vehicle.longitudinal_coefficients_pex3_get, _vehicle.longitudinal_coefficients_pex3_set, doc=r"""pex3 : double""")
    pex4 = property(_vehicle.longitudinal_coefficients_pex4_get, _vehicle.longitudinal_coefficients_pex4_set, doc=r"""pex4 : double""")
    pkx1 = property(_vehicle.longitudinal_coefficients_pkx1_get, _vehicle.longitudinal_coefficients_pkx1_set, doc=r"""pkx1 : double""")
    pkx2 = property(_vehicle.longitudinal_coefficients_pkx2_get, _vehicle.longitudinal_coefficients_pkx2_set, doc=r"""pkx2 : double""")
    pkx3 = property(_vehicle.longitudinal_coefficients_pkx3_get, _vehicle.longitudinal_coefficients_pkx3_set, doc=r"""pkx3 : double""")
    phx1 = property(_vehicle.longitudinal_coefficients_phx1_get, _vehicle.longitudinal_coefficients_phx1_set, doc=r"""phx1 : double""")
    phx2 = property(_vehicle.longitudinal_coefficients_phx2_get, _vehicle.longitudinal_coefficients_phx2_set, doc=r"""phx2 : double""")
    pvx1 = property(_vehicle.longitudinal_coefficients_pvx1_get, _vehicle.longitudinal_coefficients_pvx1_set, doc=r"""pvx1 : double""")
    pvx2 = property(_vehicle.longitudinal_coefficients_pvx2_get, _vehicle.longitudinal_coefficients_pvx2_set, doc=r"""pvx2 : double""")
    rbx1 = property(_vehicle.longitudinal_coefficients_rbx1_get, _vehicle.longitudinal_coefficients_rbx1_set, doc=r"""rbx1 : double""")
    rbx2 = property(_vehicle.longitudinal_coefficients_rbx2_get, _vehicle.longitudinal_coefficients_rbx2_set, doc=r"""rbx2 : double""")
    rcx1 = property(_vehicle.longitudinal_coefficients_rcx1_get, _vehicle.longitudinal_coefficients_rcx1_set, doc=r"""rcx1 : double""")
    rex1 = property(_vehicle.longitudinal_coefficients_rex1_get, _vehicle.longitudinal_coefficients_rex1_set, doc=r"""rex1 : double""")
    rex2 = property(_vehicle.longitudinal_coefficients_rex2_get, _vehicle.longitudinal_coefficients_rex2_set, doc=r"""rex2 : double""")
    rhx1 = property(_vehicle.longitudinal_coefficients_rhx1_get, _vehicle.longitudinal_coefficients_rhx1_set, doc=r"""rhx1 : double""")
    ptx1 = property(_vehicle.longitudinal_coefficients_ptx1_get, _vehicle.longitudinal_coefficients_ptx1_set, doc=r"""ptx1 : double""")
    ptx2 = property(_vehicle.longitudinal_coefficients_ptx2_get, _vehicle.longitudinal_coefficients_ptx2_set, doc=r"""ptx2 : double""")
    ptx3 = property(_vehicle.longitudinal_coefficients_ptx3_get, _vehicle.longitudinal_coefficients_ptx3_set, doc=r"""ptx3 : double""")

    def __init__(self):
        r"""__init__(longitudinal_coefficients self) -> longitudinal_coefficients"""
        _vehicle.longitudinal_coefficients_swiginit(self, _vehicle.new_longitudinal_coefficients())
    __swig_destroy__ = _vehicle.delete_longitudinal_coefficients

# Register longitudinal_coefficients in _vehicle:
_vehicle.longitudinal_coefficients_swigregister(longitudinal_coefficients)

class overturning_coefficients(object):
    r"""Proxy of C++ chrono::vehicle::overturning_coefficients class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    qsx1 = property(_vehicle.overturning_coefficients_qsx1_get, _vehicle.overturning_coefficients_qsx1_set, doc=r"""qsx1 : double""")
    qsx2 = property(_vehicle.overturning_coefficients_qsx2_get, _vehicle.overturning_coefficients_qsx2_set, doc=r"""qsx2 : double""")
    qsx3 = property(_vehicle.overturning_coefficients_qsx3_get, _vehicle.overturning_coefficients_qsx3_set, doc=r"""qsx3 : double""")

    def __init__(self):
        r"""__init__(overturning_coefficients self) -> overturning_coefficients"""
        _vehicle.overturning_coefficients_swiginit(self, _vehicle.new_overturning_coefficients())
    __swig_destroy__ = _vehicle.delete_overturning_coefficients

# Register overturning_coefficients in _vehicle:
_vehicle.overturning_coefficients_swigregister(overturning_coefficients)

class lateral_coefficients(object):
    r"""Proxy of C++ chrono::vehicle::lateral_coefficients class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pcy1 = property(_vehicle.lateral_coefficients_pcy1_get, _vehicle.lateral_coefficients_pcy1_set, doc=r"""pcy1 : double""")
    pdy1 = property(_vehicle.lateral_coefficients_pdy1_get, _vehicle.lateral_coefficients_pdy1_set, doc=r"""pdy1 : double""")
    pdy2 = property(_vehicle.lateral_coefficients_pdy2_get, _vehicle.lateral_coefficients_pdy2_set, doc=r"""pdy2 : double""")
    pdy3 = property(_vehicle.lateral_coefficients_pdy3_get, _vehicle.lateral_coefficients_pdy3_set, doc=r"""pdy3 : double""")
    pey1 = property(_vehicle.lateral_coefficients_pey1_get, _vehicle.lateral_coefficients_pey1_set, doc=r"""pey1 : double""")
    pey2 = property(_vehicle.lateral_coefficients_pey2_get, _vehicle.lateral_coefficients_pey2_set, doc=r"""pey2 : double""")
    pey3 = property(_vehicle.lateral_coefficients_pey3_get, _vehicle.lateral_coefficients_pey3_set, doc=r"""pey3 : double""")
    pey4 = property(_vehicle.lateral_coefficients_pey4_get, _vehicle.lateral_coefficients_pey4_set, doc=r"""pey4 : double""")
    pky1 = property(_vehicle.lateral_coefficients_pky1_get, _vehicle.lateral_coefficients_pky1_set, doc=r"""pky1 : double""")
    pky2 = property(_vehicle.lateral_coefficients_pky2_get, _vehicle.lateral_coefficients_pky2_set, doc=r"""pky2 : double""")
    pky3 = property(_vehicle.lateral_coefficients_pky3_get, _vehicle.lateral_coefficients_pky3_set, doc=r"""pky3 : double""")
    phy1 = property(_vehicle.lateral_coefficients_phy1_get, _vehicle.lateral_coefficients_phy1_set, doc=r"""phy1 : double""")
    phy2 = property(_vehicle.lateral_coefficients_phy2_get, _vehicle.lateral_coefficients_phy2_set, doc=r"""phy2 : double""")
    phy3 = property(_vehicle.lateral_coefficients_phy3_get, _vehicle.lateral_coefficients_phy3_set, doc=r"""phy3 : double""")
    pvy1 = property(_vehicle.lateral_coefficients_pvy1_get, _vehicle.lateral_coefficients_pvy1_set, doc=r"""pvy1 : double""")
    pvy2 = property(_vehicle.lateral_coefficients_pvy2_get, _vehicle.lateral_coefficients_pvy2_set, doc=r"""pvy2 : double""")
    pvy3 = property(_vehicle.lateral_coefficients_pvy3_get, _vehicle.lateral_coefficients_pvy3_set, doc=r"""pvy3 : double""")
    pvy4 = property(_vehicle.lateral_coefficients_pvy4_get, _vehicle.lateral_coefficients_pvy4_set, doc=r"""pvy4 : double""")
    rby1 = property(_vehicle.lateral_coefficients_rby1_get, _vehicle.lateral_coefficients_rby1_set, doc=r"""rby1 : double""")
    rby2 = property(_vehicle.lateral_coefficients_rby2_get, _vehicle.lateral_coefficients_rby2_set, doc=r"""rby2 : double""")
    rby3 = property(_vehicle.lateral_coefficients_rby3_get, _vehicle.lateral_coefficients_rby3_set, doc=r"""rby3 : double""")
    rcy1 = property(_vehicle.lateral_coefficients_rcy1_get, _vehicle.lateral_coefficients_rcy1_set, doc=r"""rcy1 : double""")
    rey1 = property(_vehicle.lateral_coefficients_rey1_get, _vehicle.lateral_coefficients_rey1_set, doc=r"""rey1 : double""")
    rey2 = property(_vehicle.lateral_coefficients_rey2_get, _vehicle.lateral_coefficients_rey2_set, doc=r"""rey2 : double""")
    rhy1 = property(_vehicle.lateral_coefficients_rhy1_get, _vehicle.lateral_coefficients_rhy1_set, doc=r"""rhy1 : double""")
    rhy2 = property(_vehicle.lateral_coefficients_rhy2_get, _vehicle.lateral_coefficients_rhy2_set, doc=r"""rhy2 : double""")
    rvy1 = property(_vehicle.lateral_coefficients_rvy1_get, _vehicle.lateral_coefficients_rvy1_set, doc=r"""rvy1 : double""")
    rvy2 = property(_vehicle.lateral_coefficients_rvy2_get, _vehicle.lateral_coefficients_rvy2_set, doc=r"""rvy2 : double""")
    rvy3 = property(_vehicle.lateral_coefficients_rvy3_get, _vehicle.lateral_coefficients_rvy3_set, doc=r"""rvy3 : double""")
    rvy4 = property(_vehicle.lateral_coefficients_rvy4_get, _vehicle.lateral_coefficients_rvy4_set, doc=r"""rvy4 : double""")
    rvy5 = property(_vehicle.lateral_coefficients_rvy5_get, _vehicle.lateral_coefficients_rvy5_set, doc=r"""rvy5 : double""")
    rvy6 = property(_vehicle.lateral_coefficients_rvy6_get, _vehicle.lateral_coefficients_rvy6_set, doc=r"""rvy6 : double""")
    pty1 = property(_vehicle.lateral_coefficients_pty1_get, _vehicle.lateral_coefficients_pty1_set, doc=r"""pty1 : double""")
    pty2 = property(_vehicle.lateral_coefficients_pty2_get, _vehicle.lateral_coefficients_pty2_set, doc=r"""pty2 : double""")

    def __init__(self):
        r"""__init__(lateral_coefficients self) -> lateral_coefficients"""
        _vehicle.lateral_coefficients_swiginit(self, _vehicle.new_lateral_coefficients())
    __swig_destroy__ = _vehicle.delete_lateral_coefficients

# Register lateral_coefficients in _vehicle:
_vehicle.lateral_coefficients_swigregister(lateral_coefficients)

class rolling_coefficients(object):
    r"""Proxy of C++ chrono::vehicle::rolling_coefficients class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    qsy1 = property(_vehicle.rolling_coefficients_qsy1_get, _vehicle.rolling_coefficients_qsy1_set, doc=r"""qsy1 : double""")
    qsy2 = property(_vehicle.rolling_coefficients_qsy2_get, _vehicle.rolling_coefficients_qsy2_set, doc=r"""qsy2 : double""")
    qsy3 = property(_vehicle.rolling_coefficients_qsy3_get, _vehicle.rolling_coefficients_qsy3_set, doc=r"""qsy3 : double""")
    qsy4 = property(_vehicle.rolling_coefficients_qsy4_get, _vehicle.rolling_coefficients_qsy4_set, doc=r"""qsy4 : double""")

    def __init__(self):
        r"""__init__(rolling_coefficients self) -> rolling_coefficients"""
        _vehicle.rolling_coefficients_swiginit(self, _vehicle.new_rolling_coefficients())
    __swig_destroy__ = _vehicle.delete_rolling_coefficients

# Register rolling_coefficients in _vehicle:
_vehicle.rolling_coefficients_swigregister(rolling_coefficients)

class aligning_coefficients(object):
    r"""Proxy of C++ chrono::vehicle::aligning_coefficients class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    qbz1 = property(_vehicle.aligning_coefficients_qbz1_get, _vehicle.aligning_coefficients_qbz1_set, doc=r"""qbz1 : double""")
    qbz2 = property(_vehicle.aligning_coefficients_qbz2_get, _vehicle.aligning_coefficients_qbz2_set, doc=r"""qbz2 : double""")
    qbz3 = property(_vehicle.aligning_coefficients_qbz3_get, _vehicle.aligning_coefficients_qbz3_set, doc=r"""qbz3 : double""")
    qbz4 = property(_vehicle.aligning_coefficients_qbz4_get, _vehicle.aligning_coefficients_qbz4_set, doc=r"""qbz4 : double""")
    qbz5 = property(_vehicle.aligning_coefficients_qbz5_get, _vehicle.aligning_coefficients_qbz5_set, doc=r"""qbz5 : double""")
    qbz9 = property(_vehicle.aligning_coefficients_qbz9_get, _vehicle.aligning_coefficients_qbz9_set, doc=r"""qbz9 : double""")
    qbz10 = property(_vehicle.aligning_coefficients_qbz10_get, _vehicle.aligning_coefficients_qbz10_set, doc=r"""qbz10 : double""")
    qcz1 = property(_vehicle.aligning_coefficients_qcz1_get, _vehicle.aligning_coefficients_qcz1_set, doc=r"""qcz1 : double""")
    qdz1 = property(_vehicle.aligning_coefficients_qdz1_get, _vehicle.aligning_coefficients_qdz1_set, doc=r"""qdz1 : double""")
    qdz2 = property(_vehicle.aligning_coefficients_qdz2_get, _vehicle.aligning_coefficients_qdz2_set, doc=r"""qdz2 : double""")
    qdz3 = property(_vehicle.aligning_coefficients_qdz3_get, _vehicle.aligning_coefficients_qdz3_set, doc=r"""qdz3 : double""")
    qdz4 = property(_vehicle.aligning_coefficients_qdz4_get, _vehicle.aligning_coefficients_qdz4_set, doc=r"""qdz4 : double""")
    qdz6 = property(_vehicle.aligning_coefficients_qdz6_get, _vehicle.aligning_coefficients_qdz6_set, doc=r"""qdz6 : double""")
    qdz7 = property(_vehicle.aligning_coefficients_qdz7_get, _vehicle.aligning_coefficients_qdz7_set, doc=r"""qdz7 : double""")
    qdz8 = property(_vehicle.aligning_coefficients_qdz8_get, _vehicle.aligning_coefficients_qdz8_set, doc=r"""qdz8 : double""")
    qdz9 = property(_vehicle.aligning_coefficients_qdz9_get, _vehicle.aligning_coefficients_qdz9_set, doc=r"""qdz9 : double""")
    qez1 = property(_vehicle.aligning_coefficients_qez1_get, _vehicle.aligning_coefficients_qez1_set, doc=r"""qez1 : double""")
    qez2 = property(_vehicle.aligning_coefficients_qez2_get, _vehicle.aligning_coefficients_qez2_set, doc=r"""qez2 : double""")
    qez3 = property(_vehicle.aligning_coefficients_qez3_get, _vehicle.aligning_coefficients_qez3_set, doc=r"""qez3 : double""")
    qez4 = property(_vehicle.aligning_coefficients_qez4_get, _vehicle.aligning_coefficients_qez4_set, doc=r"""qez4 : double""")
    qez5 = property(_vehicle.aligning_coefficients_qez5_get, _vehicle.aligning_coefficients_qez5_set, doc=r"""qez5 : double""")
    qhz1 = property(_vehicle.aligning_coefficients_qhz1_get, _vehicle.aligning_coefficients_qhz1_set, doc=r"""qhz1 : double""")
    qhz2 = property(_vehicle.aligning_coefficients_qhz2_get, _vehicle.aligning_coefficients_qhz2_set, doc=r"""qhz2 : double""")
    qhz3 = property(_vehicle.aligning_coefficients_qhz3_get, _vehicle.aligning_coefficients_qhz3_set, doc=r"""qhz3 : double""")
    qhz4 = property(_vehicle.aligning_coefficients_qhz4_get, _vehicle.aligning_coefficients_qhz4_set, doc=r"""qhz4 : double""")
    ssz1 = property(_vehicle.aligning_coefficients_ssz1_get, _vehicle.aligning_coefficients_ssz1_set, doc=r"""ssz1 : double""")
    ssz2 = property(_vehicle.aligning_coefficients_ssz2_get, _vehicle.aligning_coefficients_ssz2_set, doc=r"""ssz2 : double""")
    ssz3 = property(_vehicle.aligning_coefficients_ssz3_get, _vehicle.aligning_coefficients_ssz3_set, doc=r"""ssz3 : double""")
    ssz4 = property(_vehicle.aligning_coefficients_ssz4_get, _vehicle.aligning_coefficients_ssz4_set, doc=r"""ssz4 : double""")
    qtz1 = property(_vehicle.aligning_coefficients_qtz1_get, _vehicle.aligning_coefficients_qtz1_set, doc=r"""qtz1 : double""")
    mbelt = property(_vehicle.aligning_coefficients_mbelt_get, _vehicle.aligning_coefficients_mbelt_set, doc=r"""mbelt : double""")

    def __init__(self):
        r"""__init__(aligning_coefficients self) -> aligning_coefficients"""
        _vehicle.aligning_coefficients_swiginit(self, _vehicle.new_aligning_coefficients())
    __swig_destroy__ = _vehicle.delete_aligning_coefficients

# Register aligning_coefficients in _vehicle:
_vehicle.aligning_coefficients_swigregister(aligning_coefficients)

class Pac2002_data(object):
    r"""Proxy of C++ chrono::vehicle::Pac2002_data class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    model = property(_vehicle.Pac2002_data_model_get, _vehicle.Pac2002_data_model_set, doc=r"""model : chrono::vehicle::model""")
    dimension = property(_vehicle.Pac2002_data_dimension_get, _vehicle.Pac2002_data_dimension_set, doc=r"""dimension : chrono::vehicle::dimension""")
    shape = property(_vehicle.Pac2002_data_shape_get, _vehicle.Pac2002_data_shape_set, doc=r"""shape : chrono::vehicle::shape""")
    vertical = property(_vehicle.Pac2002_data_vertical_get, _vehicle.Pac2002_data_vertical_set, doc=r"""vertical : chrono::vehicle::vertical""")
    long_slip_range = property(_vehicle.Pac2002_data_long_slip_range_get, _vehicle.Pac2002_data_long_slip_range_set, doc=r"""long_slip_range : chrono::vehicle::long_slip_range""")
    slip_angle_range = property(_vehicle.Pac2002_data_slip_angle_range_get, _vehicle.Pac2002_data_slip_angle_range_set, doc=r"""slip_angle_range : chrono::vehicle::slip_angle_range""")
    inclination_angle_range = property(_vehicle.Pac2002_data_inclination_angle_range_get, _vehicle.Pac2002_data_inclination_angle_range_set, doc=r"""inclination_angle_range : chrono::vehicle::inclination_angle_range""")
    vertical_force_range = property(_vehicle.Pac2002_data_vertical_force_range_get, _vehicle.Pac2002_data_vertical_force_range_set, doc=r"""vertical_force_range : chrono::vehicle::vertical_force_range""")
    scaling = property(_vehicle.Pac2002_data_scaling_get, _vehicle.Pac2002_data_scaling_set, doc=r"""scaling : chrono::vehicle::scaling_coefficients""")
    longitudinal = property(_vehicle.Pac2002_data_longitudinal_get, _vehicle.Pac2002_data_longitudinal_set, doc=r"""longitudinal : chrono::vehicle::longitudinal_coefficients""")
    overturning = property(_vehicle.Pac2002_data_overturning_get, _vehicle.Pac2002_data_overturning_set, doc=r"""overturning : chrono::vehicle::overturning_coefficients""")
    lateral = property(_vehicle.Pac2002_data_lateral_get, _vehicle.Pac2002_data_lateral_set, doc=r"""lateral : chrono::vehicle::lateral_coefficients""")
    rolling = property(_vehicle.Pac2002_data_rolling_get, _vehicle.Pac2002_data_rolling_set, doc=r"""rolling : chrono::vehicle::rolling_coefficients""")
    aligning = property(_vehicle.Pac2002_data_aligning_get, _vehicle.Pac2002_data_aligning_set, doc=r"""aligning : chrono::vehicle::aligning_coefficients""")

    def __init__(self):
        r"""__init__(Pac2002_data self) -> Pac2002_data"""
        _vehicle.Pac2002_data_swiginit(self, _vehicle.new_Pac2002_data())
    __swig_destroy__ = _vehicle.delete_Pac2002_data

# Register Pac2002_data in _vehicle:
_vehicle.Pac2002_data_swigregister(Pac2002_data)

class pureLongCoefs(object):
    r"""Proxy of C++ chrono::vehicle::pureLongCoefs class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    S_Hx = property(_vehicle.pureLongCoefs_S_Hx_get, _vehicle.pureLongCoefs_S_Hx_set, doc=r"""S_Hx : double""")
    kappa_x = property(_vehicle.pureLongCoefs_kappa_x_get, _vehicle.pureLongCoefs_kappa_x_set, doc=r"""kappa_x : double""")
    mu_x = property(_vehicle.pureLongCoefs_mu_x_get, _vehicle.pureLongCoefs_mu_x_set, doc=r"""mu_x : double""")
    K_x = property(_vehicle.pureLongCoefs_K_x_get, _vehicle.pureLongCoefs_K_x_set, doc=r"""K_x : double""")
    B_x = property(_vehicle.pureLongCoefs_B_x_get, _vehicle.pureLongCoefs_B_x_set, doc=r"""B_x : double""")
    C_x = property(_vehicle.pureLongCoefs_C_x_get, _vehicle.pureLongCoefs_C_x_set, doc=r"""C_x : double""")
    D_x = property(_vehicle.pureLongCoefs_D_x_get, _vehicle.pureLongCoefs_D_x_set, doc=r"""D_x : double""")
    E_x = property(_vehicle.pureLongCoefs_E_x_get, _vehicle.pureLongCoefs_E_x_set, doc=r"""E_x : double""")
    F_x = property(_vehicle.pureLongCoefs_F_x_get, _vehicle.pureLongCoefs_F_x_set, doc=r"""F_x : double""")
    S_Vx = property(_vehicle.pureLongCoefs_S_Vx_get, _vehicle.pureLongCoefs_S_Vx_set, doc=r"""S_Vx : double""")

    def __init__(self):
        r"""__init__(pureLongCoefs self) -> pureLongCoefs"""
        _vehicle.pureLongCoefs_swiginit(self, _vehicle.new_pureLongCoefs())
    __swig_destroy__ = _vehicle.delete_pureLongCoefs

# Register pureLongCoefs in _vehicle:
_vehicle.pureLongCoefs_swigregister(pureLongCoefs)

class pureLatCoefs(object):
    r"""Proxy of C++ chrono::vehicle::pureLatCoefs class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    S_Hy = property(_vehicle.pureLatCoefs_S_Hy_get, _vehicle.pureLatCoefs_S_Hy_set, doc=r"""S_Hy : double""")
    alpha_y = property(_vehicle.pureLatCoefs_alpha_y_get, _vehicle.pureLatCoefs_alpha_y_set, doc=r"""alpha_y : double""")
    mu_y = property(_vehicle.pureLatCoefs_mu_y_get, _vehicle.pureLatCoefs_mu_y_set, doc=r"""mu_y : double""")
    K_y = property(_vehicle.pureLatCoefs_K_y_get, _vehicle.pureLatCoefs_K_y_set, doc=r"""K_y : double""")
    S_Vy = property(_vehicle.pureLatCoefs_S_Vy_get, _vehicle.pureLatCoefs_S_Vy_set, doc=r"""S_Vy : double""")
    B_y = property(_vehicle.pureLatCoefs_B_y_get, _vehicle.pureLatCoefs_B_y_set, doc=r"""B_y : double""")
    C_y = property(_vehicle.pureLatCoefs_C_y_get, _vehicle.pureLatCoefs_C_y_set, doc=r"""C_y : double""")
    D_y = property(_vehicle.pureLatCoefs_D_y_get, _vehicle.pureLatCoefs_D_y_set, doc=r"""D_y : double""")
    E_y = property(_vehicle.pureLatCoefs_E_y_get, _vehicle.pureLatCoefs_E_y_set, doc=r"""E_y : double""")

    def __init__(self):
        r"""__init__(pureLatCoefs self) -> pureLatCoefs"""
        _vehicle.pureLatCoefs_swiginit(self, _vehicle.new_pureLatCoefs())
    __swig_destroy__ = _vehicle.delete_pureLatCoefs

# Register pureLatCoefs in _vehicle:
_vehicle.pureLatCoefs_swigregister(pureLatCoefs)

class zetaCoefs(object):
    r"""Proxy of C++ chrono::vehicle::zetaCoefs class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    z0 = property(_vehicle.zetaCoefs_z0_get, _vehicle.zetaCoefs_z0_set, doc=r"""z0 : double""")
    z1 = property(_vehicle.zetaCoefs_z1_get, _vehicle.zetaCoefs_z1_set, doc=r"""z1 : double""")
    z2 = property(_vehicle.zetaCoefs_z2_get, _vehicle.zetaCoefs_z2_set, doc=r"""z2 : double""")
    z3 = property(_vehicle.zetaCoefs_z3_get, _vehicle.zetaCoefs_z3_set, doc=r"""z3 : double""")
    z4 = property(_vehicle.zetaCoefs_z4_get, _vehicle.zetaCoefs_z4_set, doc=r"""z4 : double""")
    z5 = property(_vehicle.zetaCoefs_z5_get, _vehicle.zetaCoefs_z5_set, doc=r"""z5 : double""")
    z6 = property(_vehicle.zetaCoefs_z6_get, _vehicle.zetaCoefs_z6_set, doc=r"""z6 : double""")
    z7 = property(_vehicle.zetaCoefs_z7_get, _vehicle.zetaCoefs_z7_set, doc=r"""z7 : double""")
    z8 = property(_vehicle.zetaCoefs_z8_get, _vehicle.zetaCoefs_z8_set, doc=r"""z8 : double""")

    def __init__(self):
        r"""__init__(zetaCoefs self) -> zetaCoefs"""
        _vehicle.zetaCoefs_swiginit(self, _vehicle.new_zetaCoefs())
    __swig_destroy__ = _vehicle.delete_zetaCoefs

# Register zetaCoefs in _vehicle:
_vehicle.zetaCoefs_swigregister(zetaCoefs)

class pureTorqueCoefs(object):
    r"""Proxy of C++ chrono::vehicle::pureTorqueCoefs class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    S_Hf = property(_vehicle.pureTorqueCoefs_S_Hf_get, _vehicle.pureTorqueCoefs_S_Hf_set, doc=r"""S_Hf : double""")
    alpha_r = property(_vehicle.pureTorqueCoefs_alpha_r_get, _vehicle.pureTorqueCoefs_alpha_r_set, doc=r"""alpha_r : double""")
    S_Ht = property(_vehicle.pureTorqueCoefs_S_Ht_get, _vehicle.pureTorqueCoefs_S_Ht_set, doc=r"""S_Ht : double""")
    alpha_t = property(_vehicle.pureTorqueCoefs_alpha_t_get, _vehicle.pureTorqueCoefs_alpha_t_set, doc=r"""alpha_t : double""")
    cosPAlpha = property(_vehicle.pureTorqueCoefs_cosPAlpha_get, _vehicle.pureTorqueCoefs_cosPAlpha_set, doc=r"""cosPAlpha : double""")
    K_y = property(_vehicle.pureTorqueCoefs_K_y_get, _vehicle.pureTorqueCoefs_K_y_set, doc=r"""K_y : double""")
    B_r = property(_vehicle.pureTorqueCoefs_B_r_get, _vehicle.pureTorqueCoefs_B_r_set, doc=r"""B_r : double""")
    C_r = property(_vehicle.pureTorqueCoefs_C_r_get, _vehicle.pureTorqueCoefs_C_r_set, doc=r"""C_r : double""")
    D_r = property(_vehicle.pureTorqueCoefs_D_r_get, _vehicle.pureTorqueCoefs_D_r_set, doc=r"""D_r : double""")
    B_t = property(_vehicle.pureTorqueCoefs_B_t_get, _vehicle.pureTorqueCoefs_B_t_set, doc=r"""B_t : double""")
    C_t = property(_vehicle.pureTorqueCoefs_C_t_get, _vehicle.pureTorqueCoefs_C_t_set, doc=r"""C_t : double""")
    D_t0 = property(_vehicle.pureTorqueCoefs_D_t0_get, _vehicle.pureTorqueCoefs_D_t0_set, doc=r"""D_t0 : double""")
    D_t = property(_vehicle.pureTorqueCoefs_D_t_get, _vehicle.pureTorqueCoefs_D_t_set, doc=r"""D_t : double""")
    E_t = property(_vehicle.pureTorqueCoefs_E_t_get, _vehicle.pureTorqueCoefs_E_t_set, doc=r"""E_t : double""")
    t = property(_vehicle.pureTorqueCoefs_t_get, _vehicle.pureTorqueCoefs_t_set, doc=r"""t : double""")
    MP_z = property(_vehicle.pureTorqueCoefs_MP_z_get, _vehicle.pureTorqueCoefs_MP_z_set, doc=r"""MP_z : double""")
    M_zr = property(_vehicle.pureTorqueCoefs_M_zr_get, _vehicle.pureTorqueCoefs_M_zr_set, doc=r"""M_zr : double""")

    def __init__(self):
        r"""__init__(pureTorqueCoefs self) -> pureTorqueCoefs"""
        _vehicle.pureTorqueCoefs_swiginit(self, _vehicle.new_pureTorqueCoefs())
    __swig_destroy__ = _vehicle.delete_pureTorqueCoefs

# Register pureTorqueCoefs in _vehicle:
_vehicle.pureTorqueCoefs_swigregister(pureTorqueCoefs)

class combinedLongCoefs(object):
    r"""Proxy of C++ chrono::vehicle::combinedLongCoefs class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    S_HxAlpha = property(_vehicle.combinedLongCoefs_S_HxAlpha_get, _vehicle.combinedLongCoefs_S_HxAlpha_set, doc=r"""S_HxAlpha : double""")
    alpha_S = property(_vehicle.combinedLongCoefs_alpha_S_get, _vehicle.combinedLongCoefs_alpha_S_set, doc=r"""alpha_S : double""")
    B_xAlpha = property(_vehicle.combinedLongCoefs_B_xAlpha_get, _vehicle.combinedLongCoefs_B_xAlpha_set, doc=r"""B_xAlpha : double""")
    C_xAlpha = property(_vehicle.combinedLongCoefs_C_xAlpha_get, _vehicle.combinedLongCoefs_C_xAlpha_set, doc=r"""C_xAlpha : double""")
    E_xAlpha = property(_vehicle.combinedLongCoefs_E_xAlpha_get, _vehicle.combinedLongCoefs_E_xAlpha_set, doc=r"""E_xAlpha : double""")
    G_xAlpha0 = property(_vehicle.combinedLongCoefs_G_xAlpha0_get, _vehicle.combinedLongCoefs_G_xAlpha0_set, doc=r"""G_xAlpha0 : double""")
    G_xAlpha = property(_vehicle.combinedLongCoefs_G_xAlpha_get, _vehicle.combinedLongCoefs_G_xAlpha_set, doc=r"""G_xAlpha : double""")

    def __init__(self):
        r"""__init__(combinedLongCoefs self) -> combinedLongCoefs"""
        _vehicle.combinedLongCoefs_swiginit(self, _vehicle.new_combinedLongCoefs())
    __swig_destroy__ = _vehicle.delete_combinedLongCoefs

# Register combinedLongCoefs in _vehicle:
_vehicle.combinedLongCoefs_swigregister(combinedLongCoefs)

class combinedLatCoefs(object):
    r"""Proxy of C++ chrono::vehicle::combinedLatCoefs class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    S_HyKappa = property(_vehicle.combinedLatCoefs_S_HyKappa_get, _vehicle.combinedLatCoefs_S_HyKappa_set, doc=r"""S_HyKappa : double""")
    kappa_S = property(_vehicle.combinedLatCoefs_kappa_S_get, _vehicle.combinedLatCoefs_kappa_S_set, doc=r"""kappa_S : double""")
    B_yKappa = property(_vehicle.combinedLatCoefs_B_yKappa_get, _vehicle.combinedLatCoefs_B_yKappa_set, doc=r"""B_yKappa : double""")
    C_yKappa = property(_vehicle.combinedLatCoefs_C_yKappa_get, _vehicle.combinedLatCoefs_C_yKappa_set, doc=r"""C_yKappa : double""")
    E_yKappa = property(_vehicle.combinedLatCoefs_E_yKappa_get, _vehicle.combinedLatCoefs_E_yKappa_set, doc=r"""E_yKappa : double""")
    D_VyKappa = property(_vehicle.combinedLatCoefs_D_VyKappa_get, _vehicle.combinedLatCoefs_D_VyKappa_set, doc=r"""D_VyKappa : double""")
    S_VyKappa = property(_vehicle.combinedLatCoefs_S_VyKappa_get, _vehicle.combinedLatCoefs_S_VyKappa_set, doc=r"""S_VyKappa : double""")
    G_yKappa0 = property(_vehicle.combinedLatCoefs_G_yKappa0_get, _vehicle.combinedLatCoefs_G_yKappa0_set, doc=r"""G_yKappa0 : double""")
    G_yKappa = property(_vehicle.combinedLatCoefs_G_yKappa_get, _vehicle.combinedLatCoefs_G_yKappa_set, doc=r"""G_yKappa : double""")

    def __init__(self):
        r"""__init__(combinedLatCoefs self) -> combinedLatCoefs"""
        _vehicle.combinedLatCoefs_swiginit(self, _vehicle.new_combinedLatCoefs())
    __swig_destroy__ = _vehicle.delete_combinedLatCoefs

# Register combinedLatCoefs in _vehicle:
_vehicle.combinedLatCoefs_swigregister(combinedLatCoefs)

class combinedTorqueCoefs(object):
    r"""Proxy of C++ chrono::vehicle::combinedTorqueCoefs class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cosPAlpha = property(_vehicle.combinedTorqueCoefs_cosPAlpha_get, _vehicle.combinedTorqueCoefs_cosPAlpha_set, doc=r"""cosPAlpha : double""")
    FP_y = property(_vehicle.combinedTorqueCoefs_FP_y_get, _vehicle.combinedTorqueCoefs_FP_y_set, doc=r"""FP_y : double""")
    s = property(_vehicle.combinedTorqueCoefs_s_get, _vehicle.combinedTorqueCoefs_s_set, doc=r"""s : double""")
    alpha_t_eq = property(_vehicle.combinedTorqueCoefs_alpha_t_eq_get, _vehicle.combinedTorqueCoefs_alpha_t_eq_set, doc=r"""alpha_t_eq : double""")
    alpha_r_eq = property(_vehicle.combinedTorqueCoefs_alpha_r_eq_get, _vehicle.combinedTorqueCoefs_alpha_r_eq_set, doc=r"""alpha_r_eq : double""")
    M_zr = property(_vehicle.combinedTorqueCoefs_M_zr_get, _vehicle.combinedTorqueCoefs_M_zr_set, doc=r"""M_zr : double""")
    t = property(_vehicle.combinedTorqueCoefs_t_get, _vehicle.combinedTorqueCoefs_t_set, doc=r"""t : double""")
    M_z_x = property(_vehicle.combinedTorqueCoefs_M_z_x_get, _vehicle.combinedTorqueCoefs_M_z_x_set, doc=r"""M_z_x : double""")
    M_z_y = property(_vehicle.combinedTorqueCoefs_M_z_y_get, _vehicle.combinedTorqueCoefs_M_z_y_set, doc=r"""M_z_y : double""")

    def __init__(self):
        r"""__init__(combinedTorqueCoefs self) -> combinedTorqueCoefs"""
        _vehicle.combinedTorqueCoefs_swiginit(self, _vehicle.new_combinedTorqueCoefs())
    __swig_destroy__ = _vehicle.delete_combinedTorqueCoefs

# Register combinedTorqueCoefs in _vehicle:
_vehicle.combinedTorqueCoefs_swigregister(combinedTorqueCoefs)

class relaxationL(object):
    r"""Proxy of C++ chrono::vehicle::relaxationL class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    C_Falpha = property(_vehicle.relaxationL_C_Falpha_get, _vehicle.relaxationL_C_Falpha_set, doc=r"""C_Falpha : double""")
    sigma_alpha = property(_vehicle.relaxationL_sigma_alpha_get, _vehicle.relaxationL_sigma_alpha_set, doc=r"""sigma_alpha : double""")
    C_Fkappa = property(_vehicle.relaxationL_C_Fkappa_get, _vehicle.relaxationL_C_Fkappa_set, doc=r"""C_Fkappa : double""")
    sigma_kappa = property(_vehicle.relaxationL_sigma_kappa_get, _vehicle.relaxationL_sigma_kappa_set, doc=r"""sigma_kappa : double""")
    C_Fgamma = property(_vehicle.relaxationL_C_Fgamma_get, _vehicle.relaxationL_C_Fgamma_set, doc=r"""C_Fgamma : double""")
    C_Fphi = property(_vehicle.relaxationL_C_Fphi_get, _vehicle.relaxationL_C_Fphi_set, doc=r"""C_Fphi : double""")

    def __init__(self):
        r"""__init__(relaxationL self) -> relaxationL"""
        _vehicle.relaxationL_swiginit(self, _vehicle.new_relaxationL())
    __swig_destroy__ = _vehicle.delete_relaxationL

# Register relaxationL in _vehicle:
_vehicle.relaxationL_swigregister(relaxationL)

class bessel(object):
    r"""Proxy of C++ chrono::vehicle::bessel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    u_Bessel = property(_vehicle.bessel_u_Bessel_get, _vehicle.bessel_u_Bessel_set, doc=r"""u_Bessel : double""")
    u_sigma = property(_vehicle.bessel_u_sigma_get, _vehicle.bessel_u_sigma_set, doc=r"""u_sigma : double""")
    v_Bessel = property(_vehicle.bessel_v_Bessel_get, _vehicle.bessel_v_Bessel_set, doc=r"""v_Bessel : double""")
    v_sigma = property(_vehicle.bessel_v_sigma_get, _vehicle.bessel_v_sigma_set, doc=r"""v_sigma : double""")

    def __init__(self):
        r"""__init__(bessel self) -> bessel"""
        _vehicle.bessel_swiginit(self, _vehicle.new_bessel())
    __swig_destroy__ = _vehicle.delete_bessel

# Register bessel in _vehicle:
_vehicle.bessel_swigregister(bessel)

class ChPac89Tire(ChTire):
    r"""Proxy of C++ chrono::vehicle::ChPac89Tire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChPac89Tire

    def GetTemplateName(self):
        r"""GetTemplateName(ChPac89Tire self) -> std::string"""
        return _vehicle.ChPac89Tire_GetTemplateName(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChPac89Tire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChPac89Tire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChPac89Tire self)"""
        return _vehicle.ChPac89Tire_RemoveVisualizationAssets(self)

    def GetRadius(self):
        r"""GetRadius(ChPac89Tire self) -> double"""
        return _vehicle.ChPac89Tire_GetRadius(self)

    def ReportTireForce(self, terrain):
        r"""ReportTireForce(ChPac89Tire self, ChTerrain terrain) -> TerrainForce"""
        return _vehicle.ChPac89Tire_ReportTireForce(self, terrain)

    def SetGammaLimit(self, gamma_limit):
        r"""SetGammaLimit(ChPac89Tire self, double gamma_limit)"""
        return _vehicle.ChPac89Tire_SetGammaLimit(self, gamma_limit)

    def GetWidth(self):
        r"""GetWidth(ChPac89Tire self) -> double"""
        return _vehicle.ChPac89Tire_GetWidth(self)

    def GetDeflection(self):
        r"""GetDeflection(ChPac89Tire self) -> double"""
        return _vehicle.ChPac89Tire_GetDeflection(self)

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(ChPac89Tire self) -> double"""
        return _vehicle.ChPac89Tire_GetVisualizationWidth(self)

    def GetSlipAngle_internal(self):
        r"""GetSlipAngle_internal(ChPac89Tire self) -> double"""
        return _vehicle.ChPac89Tire_GetSlipAngle_internal(self)

    def GetLongitudinalSlip_internal(self):
        r"""GetLongitudinalSlip_internal(ChPac89Tire self) -> double"""
        return _vehicle.ChPac89Tire_GetLongitudinalSlip_internal(self)

    def GetCamberAngle_internal(self):
        r"""GetCamberAngle_internal(ChPac89Tire self) -> double"""
        return _vehicle.ChPac89Tire_GetCamberAngle_internal(self)

# Register ChPac89Tire in _vehicle:
_vehicle.ChPac89Tire_swigregister(ChPac89Tire)

class ChLugreTire(ChTire):
    r"""Proxy of C++ chrono::vehicle::ChLugreTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChLugreTire

    def GetTemplateName(self):
        r"""GetTemplateName(ChLugreTire self) -> std::string"""
        return _vehicle.ChLugreTire_GetTemplateName(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChLugreTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChLugreTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChLugreTire self)"""
        return _vehicle.ChLugreTire_RemoveVisualizationAssets(self)

    def GetWidth(self):
        r"""GetWidth(ChLugreTire self) -> double"""
        return _vehicle.ChLugreTire_GetWidth(self)

    def ReportTireForce(self, terrain):
        r"""ReportTireForce(ChLugreTire self, ChTerrain terrain) -> TerrainForce"""
        return _vehicle.ChLugreTire_ReportTireForce(self, terrain)

# Register ChLugreTire in _vehicle:
_vehicle.ChLugreTire_swigregister(ChLugreTire)

class ChFialaTire(ChTire):
    r"""Proxy of C++ chrono::vehicle::ChFialaTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChFialaTire

    def GetTemplateName(self):
        r"""GetTemplateName(ChFialaTire self) -> std::string"""
        return _vehicle.ChFialaTire_GetTemplateName(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(ChFialaTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChFialaTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(ChFialaTire self)"""
        return _vehicle.ChFialaTire_RemoveVisualizationAssets(self)

    def GetRadius(self):
        r"""GetRadius(ChFialaTire self) -> double"""
        return _vehicle.ChFialaTire_GetRadius(self)

    def ReportTireForce(self, terrain):
        r"""ReportTireForce(ChFialaTire self, ChTerrain terrain) -> TerrainForce"""
        return _vehicle.ChFialaTire_ReportTireForce(self, terrain)

    def GetWidth(self):
        r"""GetWidth(ChFialaTire self) -> double"""
        return _vehicle.ChFialaTire_GetWidth(self)

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(ChFialaTire self) -> double"""
        return _vehicle.ChFialaTire_GetVisualizationWidth(self)

    def GetSlipAngle_internal(self):
        r"""GetSlipAngle_internal(ChFialaTire self) -> double"""
        return _vehicle.ChFialaTire_GetSlipAngle_internal(self)

    def GetLongitudinalSlip_internal(self):
        r"""GetLongitudinalSlip_internal(ChFialaTire self) -> double"""
        return _vehicle.ChFialaTire_GetLongitudinalSlip_internal(self)

    def GetCamberAngle_internal(self):
        r"""GetCamberAngle_internal(ChFialaTire self) -> double"""
        return _vehicle.ChFialaTire_GetCamberAngle_internal(self)

    def WritePlots(self, plFileName, plTireFormat):
        r"""WritePlots(ChFialaTire self, std::string const & plFileName, std::string const & plTireFormat)"""
        return _vehicle.ChFialaTire_WritePlots(self, plFileName, plTireFormat)

# Register ChFialaTire in _vehicle:
_vehicle.ChFialaTire_swigregister(ChFialaTire)

class TMeasyTire(ChTMeasyTire):
    r"""Proxy of C++ chrono::vehicle::TMeasyTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(TMeasyTire self, std::string const & filename) -> TMeasyTire
        __init__(TMeasyTire self, rapidjson::Document const & d) -> TMeasyTire
        """
        _vehicle.TMeasyTire_swiginit(self, _vehicle.new_TMeasyTire(*args))
    __swig_destroy__ = _vehicle.delete_TMeasyTire

    def SetTMeasyParams(self):
        r"""SetTMeasyParams(TMeasyTire self)"""
        return _vehicle.TMeasyTire_SetTMeasyParams(self)

    def GetMass(self):
        r"""GetMass(TMeasyTire self) -> double"""
        return _vehicle.TMeasyTire_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(TMeasyTire self) -> ChVectorD"""
        return _vehicle.TMeasyTire_GetInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(TMeasyTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.TMeasyTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(TMeasyTire self)"""
        return _vehicle.TMeasyTire_RemoveVisualizationAssets(self)

# Register TMeasyTire in _vehicle:
_vehicle.TMeasyTire_swigregister(TMeasyTire)

class RigidTire(ChRigidTire):
    r"""Proxy of C++ chrono::vehicle::RigidTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RigidTire self, std::string const & filename) -> RigidTire
        __init__(RigidTire self, rapidjson::Document const & d) -> RigidTire
        """
        _vehicle.RigidTire_swiginit(self, _vehicle.new_RigidTire(*args))
    __swig_destroy__ = _vehicle.delete_RigidTire

    def GetRadius(self):
        r"""GetRadius(RigidTire self) -> double"""
        return _vehicle.RigidTire_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(RigidTire self) -> double"""
        return _vehicle.RigidTire_GetWidth(self)

    def GetMass(self):
        r"""GetMass(RigidTire self) -> double"""
        return _vehicle.RigidTire_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(RigidTire self) -> ChVectorD"""
        return _vehicle.RigidTire_GetInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(RigidTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.RigidTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(RigidTire self)"""
        return _vehicle.RigidTire_RemoveVisualizationAssets(self)

# Register RigidTire in _vehicle:
_vehicle.RigidTire_swigregister(RigidTire)

class LugreTire(ChLugreTire):
    r"""Proxy of C++ chrono::vehicle::LugreTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(LugreTire self, std::string const & filename) -> LugreTire
        __init__(LugreTire self, rapidjson::Document const & d) -> LugreTire
        """
        _vehicle.LugreTire_swiginit(self, _vehicle.new_LugreTire(*args))
    __swig_destroy__ = _vehicle.delete_LugreTire

    def GetRadius(self):
        r"""GetRadius(LugreTire self) -> double"""
        return _vehicle.LugreTire_GetRadius(self)

    def GetNumDiscs(self):
        r"""GetNumDiscs(LugreTire self) -> int"""
        return _vehicle.LugreTire_GetNumDiscs(self)

    def GetDiscLocations(self):
        r"""GetDiscLocations(LugreTire self) -> double const *"""
        return _vehicle.LugreTire_GetDiscLocations(self)

    def GetNormalStiffness(self):
        r"""GetNormalStiffness(LugreTire self) -> double"""
        return _vehicle.LugreTire_GetNormalStiffness(self)

    def GetNormalDamping(self):
        r"""GetNormalDamping(LugreTire self) -> double"""
        return _vehicle.LugreTire_GetNormalDamping(self)

    def GetMass(self):
        r"""GetMass(LugreTire self) -> double"""
        return _vehicle.LugreTire_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(LugreTire self) -> ChVectorD"""
        return _vehicle.LugreTire_GetInertia(self)

    def SetLugreParams(self):
        r"""SetLugreParams(LugreTire self)"""
        return _vehicle.LugreTire_SetLugreParams(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(LugreTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.LugreTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(LugreTire self)"""
        return _vehicle.LugreTire_RemoveVisualizationAssets(self)

# Register LugreTire in _vehicle:
_vehicle.LugreTire_swigregister(LugreTire)

class FialaTire(ChFialaTire):
    r"""Proxy of C++ chrono::vehicle::FialaTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(FialaTire self, std::string const & filename) -> FialaTire
        __init__(FialaTire self, rapidjson::Document const & d) -> FialaTire
        """
        _vehicle.FialaTire_swiginit(self, _vehicle.new_FialaTire(*args))
    __swig_destroy__ = _vehicle.delete_FialaTire

    def GetNormalStiffnessForce(self, depth):
        r"""GetNormalStiffnessForce(FialaTire self, double depth) -> double"""
        return _vehicle.FialaTire_GetNormalStiffnessForce(self, depth)

    def GetNormalDampingForce(self, depth, velocity):
        r"""GetNormalDampingForce(FialaTire self, double depth, double velocity) -> double"""
        return _vehicle.FialaTire_GetNormalDampingForce(self, depth, velocity)

    def SetFialaParams(self):
        r"""SetFialaParams(FialaTire self)"""
        return _vehicle.FialaTire_SetFialaParams(self)

    def GetMass(self):
        r"""GetMass(FialaTire self) -> double"""
        return _vehicle.FialaTire_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(FialaTire self) -> ChVectorD"""
        return _vehicle.FialaTire_GetInertia(self)

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(FialaTire self) -> double"""
        return _vehicle.FialaTire_GetVisualizationWidth(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(FialaTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.FialaTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(FialaTire self)"""
        return _vehicle.FialaTire_RemoveVisualizationAssets(self)

# Register FialaTire in _vehicle:
_vehicle.FialaTire_swigregister(FialaTire)

class Generic_RigidTire(ChRigidTire):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_RigidTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_RigidTire self, std::string const & name) -> Generic_RigidTire"""
        _vehicle.Generic_RigidTire_swiginit(self, _vehicle.new_Generic_RigidTire(name))
    __swig_destroy__ = _vehicle.delete_Generic_RigidTire

    def GetRadius(self):
        r"""GetRadius(Generic_RigidTire self) -> double"""
        return _vehicle.Generic_RigidTire_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(Generic_RigidTire self) -> double"""
        return _vehicle.Generic_RigidTire_GetWidth(self)

    def GetMass(self):
        r"""GetMass(Generic_RigidTire self) -> double"""
        return _vehicle.Generic_RigidTire_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(Generic_RigidTire self) -> ChVectorD"""
        return _vehicle.Generic_RigidTire_GetInertia(self)

# Register Generic_RigidTire in _vehicle:
_vehicle.Generic_RigidTire_swigregister(Generic_RigidTire)

class Generic_RigidMeshTire(ChRigidTire):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_RigidMeshTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_RigidMeshTire self, std::string const & name) -> Generic_RigidMeshTire"""
        _vehicle.Generic_RigidMeshTire_swiginit(self, _vehicle.new_Generic_RigidMeshTire(name))
    __swig_destroy__ = _vehicle.delete_Generic_RigidMeshTire

    def GetRadius(self):
        r"""GetRadius(Generic_RigidMeshTire self) -> double"""
        return _vehicle.Generic_RigidMeshTire_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(Generic_RigidMeshTire self) -> double"""
        return _vehicle.Generic_RigidMeshTire_GetWidth(self)

    def GetMass(self):
        r"""GetMass(Generic_RigidMeshTire self) -> double"""
        return _vehicle.Generic_RigidMeshTire_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(Generic_RigidMeshTire self) -> ChVectorD"""
        return _vehicle.Generic_RigidMeshTire_GetInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(Generic_RigidMeshTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Generic_RigidMeshTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(Generic_RigidMeshTire self)"""
        return _vehicle.Generic_RigidMeshTire_RemoveVisualizationAssets(self)

# Register Generic_RigidMeshTire in _vehicle:
_vehicle.Generic_RigidMeshTire_swigregister(Generic_RigidMeshTire)

class Generic_FialaTire(ChFialaTire):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_FialaTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Generic_FialaTire self, std::string const & name) -> Generic_FialaTire"""
        _vehicle.Generic_FialaTire_swiginit(self, _vehicle.new_Generic_FialaTire(name))
    __swig_destroy__ = _vehicle.delete_Generic_FialaTire

    def GetNormalStiffnessForce(self, depth):
        r"""GetNormalStiffnessForce(Generic_FialaTire self, double depth) -> double"""
        return _vehicle.Generic_FialaTire_GetNormalStiffnessForce(self, depth)

    def GetNormalDampingForce(self, depth, velocity):
        r"""GetNormalDampingForce(Generic_FialaTire self, double depth, double velocity) -> double"""
        return _vehicle.Generic_FialaTire_GetNormalDampingForce(self, depth, velocity)

    def GetMass(self):
        r"""GetMass(Generic_FialaTire self) -> double"""
        return _vehicle.Generic_FialaTire_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(Generic_FialaTire self) -> ChVectorD"""
        return _vehicle.Generic_FialaTire_GetInertia(self)

    def SetFialaParams(self):
        r"""SetFialaParams(Generic_FialaTire self)"""
        return _vehicle.Generic_FialaTire_SetFialaParams(self)

# Register Generic_FialaTire in _vehicle:
_vehicle.Generic_FialaTire_swigregister(Generic_FialaTire)

class HMMWV_RigidTire(ChRigidTire):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_RigidTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, use_mesh=False):
        r"""__init__(HMMWV_RigidTire self, std::string const & name, bool use_mesh=False) -> HMMWV_RigidTire"""
        _vehicle.HMMWV_RigidTire_swiginit(self, _vehicle.new_HMMWV_RigidTire(name, use_mesh))
    __swig_destroy__ = _vehicle.delete_HMMWV_RigidTire

    def GetRadius(self):
        r"""GetRadius(HMMWV_RigidTire self) -> double"""
        return _vehicle.HMMWV_RigidTire_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(HMMWV_RigidTire self) -> double"""
        return _vehicle.HMMWV_RigidTire_GetWidth(self)

    def GetMass(self):
        r"""GetMass(HMMWV_RigidTire self) -> double"""
        return _vehicle.HMMWV_RigidTire_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(HMMWV_RigidTire self) -> ChVectorD"""
        return _vehicle.HMMWV_RigidTire_GetInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(HMMWV_RigidTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.HMMWV_RigidTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(HMMWV_RigidTire self)"""
        return _vehicle.HMMWV_RigidTire_RemoveVisualizationAssets(self)

# Register HMMWV_RigidTire in _vehicle:
_vehicle.HMMWV_RigidTire_swigregister(HMMWV_RigidTire)

class HMMWV_ReissnerTire(object):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_ReissnerTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_ReissnerTire self, std::string const & name) -> HMMWV_ReissnerTire"""
        _vehicle.HMMWV_ReissnerTire_swiginit(self, _vehicle.new_HMMWV_ReissnerTire(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_ReissnerTire

    def GetRadius(self):
        r"""GetRadius(HMMWV_ReissnerTire self) -> double"""
        return _vehicle.HMMWV_ReissnerTire_GetRadius(self)

    def GetRimRadius(self):
        r"""GetRimRadius(HMMWV_ReissnerTire self) -> double"""
        return _vehicle.HMMWV_ReissnerTire_GetRimRadius(self)

    def GetWidth(self):
        r"""GetWidth(HMMWV_ReissnerTire self) -> double"""
        return _vehicle.HMMWV_ReissnerTire_GetWidth(self)

    def GetDefaultPressure(self):
        r"""GetDefaultPressure(HMMWV_ReissnerTire self) -> double"""
        return _vehicle.HMMWV_ReissnerTire_GetDefaultPressure(self)

    def GetConnectedNodes(self):
        r"""GetConnectedNodes(HMMWV_ReissnerTire self) -> std::vector< std::shared_ptr< chrono::fea::ChNodeFEAbase >,std::allocator< std::shared_ptr< chrono::fea::ChNodeFEAbase > > >"""
        return _vehicle.HMMWV_ReissnerTire_GetConnectedNodes(self)

    def CreateMesh(self, wheel_frame, side):
        r"""CreateMesh(HMMWV_ReissnerTire self, ChFrameMovingD wheel_frame, chrono::vehicle::VehicleSide side)"""
        return _vehicle.HMMWV_ReissnerTire_CreateMesh(self, wheel_frame, side)

# Register HMMWV_ReissnerTire in _vehicle:
_vehicle.HMMWV_ReissnerTire_swigregister(HMMWV_ReissnerTire)

class HMMWV_Pac89Tire(ChPac89Tire):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_Pac89Tire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_Pac89Tire self, std::string const & name) -> HMMWV_Pac89Tire"""
        _vehicle.HMMWV_Pac89Tire_swiginit(self, _vehicle.new_HMMWV_Pac89Tire(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_Pac89Tire

    def GetNormalStiffnessForce(self, depth):
        r"""GetNormalStiffnessForce(HMMWV_Pac89Tire self, double depth) -> double"""
        return _vehicle.HMMWV_Pac89Tire_GetNormalStiffnessForce(self, depth)

    def GetNormalDampingForce(self, depth, velocity):
        r"""GetNormalDampingForce(HMMWV_Pac89Tire self, double depth, double velocity) -> double"""
        return _vehicle.HMMWV_Pac89Tire_GetNormalDampingForce(self, depth, velocity)

    def GetMass(self):
        r"""GetMass(HMMWV_Pac89Tire self) -> double"""
        return _vehicle.HMMWV_Pac89Tire_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(HMMWV_Pac89Tire self) -> ChVectorD"""
        return _vehicle.HMMWV_Pac89Tire_GetInertia(self)

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(HMMWV_Pac89Tire self) -> double"""
        return _vehicle.HMMWV_Pac89Tire_GetVisualizationWidth(self)

    def SetPac89Params(self):
        r"""SetPac89Params(HMMWV_Pac89Tire self)"""
        return _vehicle.HMMWV_Pac89Tire_SetPac89Params(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(HMMWV_Pac89Tire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.HMMWV_Pac89Tire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(HMMWV_Pac89Tire self)"""
        return _vehicle.HMMWV_Pac89Tire_RemoveVisualizationAssets(self)

# Register HMMWV_Pac89Tire in _vehicle:
_vehicle.HMMWV_Pac89Tire_swigregister(HMMWV_Pac89Tire)

class HMMWV_PacejkaTire(ChPacejkaTire):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_PacejkaTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_PacejkaTire self, std::string const & name) -> HMMWV_PacejkaTire"""
        _vehicle.HMMWV_PacejkaTire_swiginit(self, _vehicle.new_HMMWV_PacejkaTire(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_PacejkaTire

    def GetMass(self):
        r"""GetMass(HMMWV_PacejkaTire self) -> double"""
        return _vehicle.HMMWV_PacejkaTire_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(HMMWV_PacejkaTire self) -> ChVectorD"""
        return _vehicle.HMMWV_PacejkaTire_GetInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(HMMWV_PacejkaTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.HMMWV_PacejkaTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(HMMWV_PacejkaTire self)"""
        return _vehicle.HMMWV_PacejkaTire_RemoveVisualizationAssets(self)

# Register HMMWV_PacejkaTire in _vehicle:
_vehicle.HMMWV_PacejkaTire_swigregister(HMMWV_PacejkaTire)

class HMMWV_LugreTire(ChLugreTire):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_LugreTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_LugreTire self, std::string const & name) -> HMMWV_LugreTire"""
        _vehicle.HMMWV_LugreTire_swiginit(self, _vehicle.new_HMMWV_LugreTire(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_LugreTire

    def GetRadius(self):
        r"""GetRadius(HMMWV_LugreTire self) -> double"""
        return _vehicle.HMMWV_LugreTire_GetRadius(self)

    def GetMass(self):
        r"""GetMass(HMMWV_LugreTire self) -> double"""
        return _vehicle.HMMWV_LugreTire_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(HMMWV_LugreTire self) -> ChVectorD"""
        return _vehicle.HMMWV_LugreTire_GetInertia(self)

    def GetNumDiscs(self):
        r"""GetNumDiscs(HMMWV_LugreTire self) -> int"""
        return _vehicle.HMMWV_LugreTire_GetNumDiscs(self)

    def GetDiscLocations(self):
        r"""GetDiscLocations(HMMWV_LugreTire self) -> double const *"""
        return _vehicle.HMMWV_LugreTire_GetDiscLocations(self)

    def GetNormalStiffness(self):
        r"""GetNormalStiffness(HMMWV_LugreTire self) -> double"""
        return _vehicle.HMMWV_LugreTire_GetNormalStiffness(self)

    def GetNormalDamping(self):
        r"""GetNormalDamping(HMMWV_LugreTire self) -> double"""
        return _vehicle.HMMWV_LugreTire_GetNormalDamping(self)

    def SetLugreParams(self):
        r"""SetLugreParams(HMMWV_LugreTire self)"""
        return _vehicle.HMMWV_LugreTire_SetLugreParams(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(HMMWV_LugreTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.HMMWV_LugreTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(HMMWV_LugreTire self)"""
        return _vehicle.HMMWV_LugreTire_RemoveVisualizationAssets(self)

# Register HMMWV_LugreTire in _vehicle:
_vehicle.HMMWV_LugreTire_swigregister(HMMWV_LugreTire)

class HMMWV_FialaTire(ChFialaTire):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_FialaTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(HMMWV_FialaTire self, std::string const & name) -> HMMWV_FialaTire"""
        _vehicle.HMMWV_FialaTire_swiginit(self, _vehicle.new_HMMWV_FialaTire(name))
    __swig_destroy__ = _vehicle.delete_HMMWV_FialaTire

    def GetNormalStiffnessForce(self, depth):
        r"""GetNormalStiffnessForce(HMMWV_FialaTire self, double depth) -> double"""
        return _vehicle.HMMWV_FialaTire_GetNormalStiffnessForce(self, depth)

    def GetNormalDampingForce(self, depth, velocity):
        r"""GetNormalDampingForce(HMMWV_FialaTire self, double depth, double velocity) -> double"""
        return _vehicle.HMMWV_FialaTire_GetNormalDampingForce(self, depth, velocity)

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(HMMWV_FialaTire self) -> double"""
        return _vehicle.HMMWV_FialaTire_GetVisualizationWidth(self)

    def SetFialaParams(self):
        r"""SetFialaParams(HMMWV_FialaTire self)"""
        return _vehicle.HMMWV_FialaTire_SetFialaParams(self)

    def GetMass(self):
        r"""GetMass(HMMWV_FialaTire self) -> double"""
        return _vehicle.HMMWV_FialaTire_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(HMMWV_FialaTire self) -> ChVectorD"""
        return _vehicle.HMMWV_FialaTire_GetInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(HMMWV_FialaTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.HMMWV_FialaTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(HMMWV_FialaTire self)"""
        return _vehicle.HMMWV_FialaTire_RemoveVisualizationAssets(self)

# Register HMMWV_FialaTire in _vehicle:
_vehicle.HMMWV_FialaTire_swigregister(HMMWV_FialaTire)

class Sedan_TMeasyTire(ChTMeasyTire):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan_TMeasyTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(Sedan_TMeasyTire self, std::string const & name) -> Sedan_TMeasyTire"""
        _vehicle.Sedan_TMeasyTire_swiginit(self, _vehicle.new_Sedan_TMeasyTire(name))
    __swig_destroy__ = _vehicle.delete_Sedan_TMeasyTire

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(Sedan_TMeasyTire self) -> double"""
        return _vehicle.Sedan_TMeasyTire_GetVisualizationWidth(self)

    def SetTMeasyParams(self):
        r"""SetTMeasyParams(Sedan_TMeasyTire self)"""
        return _vehicle.Sedan_TMeasyTire_SetTMeasyParams(self)

    def GetMass(self):
        r"""GetMass(Sedan_TMeasyTire self) -> double"""
        return _vehicle.Sedan_TMeasyTire_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(Sedan_TMeasyTire self) -> ChVectorD"""
        return _vehicle.Sedan_TMeasyTire_GetInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(Sedan_TMeasyTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Sedan_TMeasyTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(Sedan_TMeasyTire self)"""
        return _vehicle.Sedan_TMeasyTire_RemoveVisualizationAssets(self)

    def GenerateCharacteristicPlots(self, dirname):
        r"""GenerateCharacteristicPlots(Sedan_TMeasyTire self, std::string const & dirname)"""
        return _vehicle.Sedan_TMeasyTire_GenerateCharacteristicPlots(self, dirname)

# Register Sedan_TMeasyTire in _vehicle:
_vehicle.Sedan_TMeasyTire_swigregister(Sedan_TMeasyTire)

class Sedan_RigidTire(ChRigidTire):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan_RigidTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, use_mesh=False):
        r"""__init__(Sedan_RigidTire self, std::string const & name, bool use_mesh=False) -> Sedan_RigidTire"""
        _vehicle.Sedan_RigidTire_swiginit(self, _vehicle.new_Sedan_RigidTire(name, use_mesh))
    __swig_destroy__ = _vehicle.delete_Sedan_RigidTire

    def GetRadius(self):
        r"""GetRadius(Sedan_RigidTire self) -> double"""
        return _vehicle.Sedan_RigidTire_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(Sedan_RigidTire self) -> double"""
        return _vehicle.Sedan_RigidTire_GetWidth(self)

    def GetMass(self):
        r"""GetMass(Sedan_RigidTire self) -> double"""
        return _vehicle.Sedan_RigidTire_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(Sedan_RigidTire self) -> ChVectorD"""
        return _vehicle.Sedan_RigidTire_GetInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(Sedan_RigidTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Sedan_RigidTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(Sedan_RigidTire self)"""
        return _vehicle.Sedan_RigidTire_RemoveVisualizationAssets(self)

# Register Sedan_RigidTire in _vehicle:
_vehicle.Sedan_RigidTire_swigregister(Sedan_RigidTire)

class CityBus_RigidTire(ChRigidTire):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_RigidTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, use_mesh=False):
        r"""__init__(CityBus_RigidTire self, std::string const & name, bool use_mesh=False) -> CityBus_RigidTire"""
        _vehicle.CityBus_RigidTire_swiginit(self, _vehicle.new_CityBus_RigidTire(name, use_mesh))
    __swig_destroy__ = _vehicle.delete_CityBus_RigidTire

    def GetRadius(self):
        r"""GetRadius(CityBus_RigidTire self) -> double"""
        return _vehicle.CityBus_RigidTire_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(CityBus_RigidTire self) -> double"""
        return _vehicle.CityBus_RigidTire_GetWidth(self)

    def GetMass(self):
        r"""GetMass(CityBus_RigidTire self) -> double"""
        return _vehicle.CityBus_RigidTire_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(CityBus_RigidTire self) -> ChVectorD"""
        return _vehicle.CityBus_RigidTire_GetInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(CityBus_RigidTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.CityBus_RigidTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(CityBus_RigidTire self)"""
        return _vehicle.CityBus_RigidTire_RemoveVisualizationAssets(self)

# Register CityBus_RigidTire in _vehicle:
_vehicle.CityBus_RigidTire_swigregister(CityBus_RigidTire)

class CityBus_TMeasyTire(ChTMeasyTire):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_TMeasyTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(CityBus_TMeasyTire self, std::string const & name) -> CityBus_TMeasyTire"""
        _vehicle.CityBus_TMeasyTire_swiginit(self, _vehicle.new_CityBus_TMeasyTire(name))
    __swig_destroy__ = _vehicle.delete_CityBus_TMeasyTire

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(CityBus_TMeasyTire self) -> double"""
        return _vehicle.CityBus_TMeasyTire_GetVisualizationWidth(self)

    def SetTMeasyParams(self):
        r"""SetTMeasyParams(CityBus_TMeasyTire self)"""
        return _vehicle.CityBus_TMeasyTire_SetTMeasyParams(self)

    def GetMass(self):
        r"""GetMass(CityBus_TMeasyTire self) -> double"""
        return _vehicle.CityBus_TMeasyTire_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(CityBus_TMeasyTire self) -> ChVectorD"""
        return _vehicle.CityBus_TMeasyTire_GetInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(CityBus_TMeasyTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.CityBus_TMeasyTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(CityBus_TMeasyTire self)"""
        return _vehicle.CityBus_TMeasyTire_RemoveVisualizationAssets(self)

    def GenerateCharacteristicPlots(self, dirname):
        r"""GenerateCharacteristicPlots(CityBus_TMeasyTire self, std::string const & dirname)"""
        return _vehicle.CityBus_TMeasyTire_GenerateCharacteristicPlots(self, dirname)

# Register CityBus_TMeasyTire in _vehicle:
_vehicle.CityBus_TMeasyTire_swigregister(CityBus_TMeasyTire)

class MAN_5t_TMeasyTire(ChTMeasyTire):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_TMeasyTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(MAN_5t_TMeasyTire self, std::string const & name) -> MAN_5t_TMeasyTire"""
        _vehicle.MAN_5t_TMeasyTire_swiginit(self, _vehicle.new_MAN_5t_TMeasyTire(name))
    __swig_destroy__ = _vehicle.delete_MAN_5t_TMeasyTire

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(MAN_5t_TMeasyTire self) -> double"""
        return _vehicle.MAN_5t_TMeasyTire_GetVisualizationWidth(self)

    def SetTMeasyParams(self):
        r"""SetTMeasyParams(MAN_5t_TMeasyTire self)"""
        return _vehicle.MAN_5t_TMeasyTire_SetTMeasyParams(self)

    def GetMass(self):
        r"""GetMass(MAN_5t_TMeasyTire self) -> double"""
        return _vehicle.MAN_5t_TMeasyTire_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(MAN_5t_TMeasyTire self) -> ChVectorD"""
        return _vehicle.MAN_5t_TMeasyTire_GetInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(MAN_5t_TMeasyTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_5t_TMeasyTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(MAN_5t_TMeasyTire self)"""
        return _vehicle.MAN_5t_TMeasyTire_RemoveVisualizationAssets(self)

    def GenerateCharacteristicPlots(self, dirname):
        r"""GenerateCharacteristicPlots(MAN_5t_TMeasyTire self, std::string const & dirname)"""
        return _vehicle.MAN_5t_TMeasyTire_GenerateCharacteristicPlots(self, dirname)

# Register MAN_5t_TMeasyTire in _vehicle:
_vehicle.MAN_5t_TMeasyTire_swigregister(MAN_5t_TMeasyTire)

class UAZBUS_TMeasyTireFront(ChTMeasyTire):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_TMeasyTireFront class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_TMeasyTireFront self, std::string const & name) -> UAZBUS_TMeasyTireFront"""
        _vehicle.UAZBUS_TMeasyTireFront_swiginit(self, _vehicle.new_UAZBUS_TMeasyTireFront(name))
    __swig_destroy__ = _vehicle.delete_UAZBUS_TMeasyTireFront

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(UAZBUS_TMeasyTireFront self) -> double"""
        return _vehicle.UAZBUS_TMeasyTireFront_GetVisualizationWidth(self)

    def SetTMeasyParams(self):
        r"""SetTMeasyParams(UAZBUS_TMeasyTireFront self)"""
        return _vehicle.UAZBUS_TMeasyTireFront_SetTMeasyParams(self)

    def GetMass(self):
        r"""GetMass(UAZBUS_TMeasyTireFront self) -> double"""
        return _vehicle.UAZBUS_TMeasyTireFront_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(UAZBUS_TMeasyTireFront self) -> ChVectorD"""
        return _vehicle.UAZBUS_TMeasyTireFront_GetInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(UAZBUS_TMeasyTireFront self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.UAZBUS_TMeasyTireFront_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(UAZBUS_TMeasyTireFront self)"""
        return _vehicle.UAZBUS_TMeasyTireFront_RemoveVisualizationAssets(self)

    def GenerateCharacteristicPlots(self, dirname):
        r"""GenerateCharacteristicPlots(UAZBUS_TMeasyTireFront self, std::string const & dirname)"""
        return _vehicle.UAZBUS_TMeasyTireFront_GenerateCharacteristicPlots(self, dirname)

# Register UAZBUS_TMeasyTireFront in _vehicle:
_vehicle.UAZBUS_TMeasyTireFront_swigregister(UAZBUS_TMeasyTireFront)

class UAZBUS_TMeasyTireRear(ChTMeasyTire):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_TMeasyTireRear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_TMeasyTireRear self, std::string const & name) -> UAZBUS_TMeasyTireRear"""
        _vehicle.UAZBUS_TMeasyTireRear_swiginit(self, _vehicle.new_UAZBUS_TMeasyTireRear(name))
    __swig_destroy__ = _vehicle.delete_UAZBUS_TMeasyTireRear

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(UAZBUS_TMeasyTireRear self) -> double"""
        return _vehicle.UAZBUS_TMeasyTireRear_GetVisualizationWidth(self)

    def SetTMeasyParams(self):
        r"""SetTMeasyParams(UAZBUS_TMeasyTireRear self)"""
        return _vehicle.UAZBUS_TMeasyTireRear_SetTMeasyParams(self)

    def GetMass(self):
        r"""GetMass(UAZBUS_TMeasyTireRear self) -> double"""
        return _vehicle.UAZBUS_TMeasyTireRear_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(UAZBUS_TMeasyTireRear self) -> ChVectorD"""
        return _vehicle.UAZBUS_TMeasyTireRear_GetInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(UAZBUS_TMeasyTireRear self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.UAZBUS_TMeasyTireRear_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(UAZBUS_TMeasyTireRear self)"""
        return _vehicle.UAZBUS_TMeasyTireRear_RemoveVisualizationAssets(self)

    def GenerateCharacteristicPlots(self, dirname):
        r"""GenerateCharacteristicPlots(UAZBUS_TMeasyTireRear self, std::string const & dirname)"""
        return _vehicle.UAZBUS_TMeasyTireRear_GenerateCharacteristicPlots(self, dirname)

# Register UAZBUS_TMeasyTireRear in _vehicle:
_vehicle.UAZBUS_TMeasyTireRear_swigregister(UAZBUS_TMeasyTireRear)

class UAZBUS_RigidTire(ChRigidTire):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_RigidTire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name, use_mesh=False):
        r"""__init__(UAZBUS_RigidTire self, std::string const & name, bool use_mesh=False) -> UAZBUS_RigidTire"""
        _vehicle.UAZBUS_RigidTire_swiginit(self, _vehicle.new_UAZBUS_RigidTire(name, use_mesh))
    __swig_destroy__ = _vehicle.delete_UAZBUS_RigidTire

    def GetRadius(self):
        r"""GetRadius(UAZBUS_RigidTire self) -> double"""
        return _vehicle.UAZBUS_RigidTire_GetRadius(self)

    def GetWidth(self):
        r"""GetWidth(UAZBUS_RigidTire self) -> double"""
        return _vehicle.UAZBUS_RigidTire_GetWidth(self)

    def GetMass(self):
        r"""GetMass(UAZBUS_RigidTire self) -> double"""
        return _vehicle.UAZBUS_RigidTire_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(UAZBUS_RigidTire self) -> ChVectorD"""
        return _vehicle.UAZBUS_RigidTire_GetInertia(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(UAZBUS_RigidTire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.UAZBUS_RigidTire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(UAZBUS_RigidTire self)"""
        return _vehicle.UAZBUS_RigidTire_RemoveVisualizationAssets(self)

# Register UAZBUS_RigidTire in _vehicle:
_vehicle.UAZBUS_RigidTire_swigregister(UAZBUS_RigidTire)

class UAZBUS_Pac02Tire(object):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_Pac02Tire class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name):
        r"""__init__(UAZBUS_Pac02Tire self, std::string const & name) -> UAZBUS_Pac02Tire"""
        _vehicle.UAZBUS_Pac02Tire_swiginit(self, _vehicle.new_UAZBUS_Pac02Tire(name))
    __swig_destroy__ = _vehicle.delete_UAZBUS_Pac02Tire

    def GetNormalStiffnessForce(self, depth):
        r"""GetNormalStiffnessForce(UAZBUS_Pac02Tire self, double depth) -> double"""
        return _vehicle.UAZBUS_Pac02Tire_GetNormalStiffnessForce(self, depth)

    def GetNormalDampingForce(self, depth, velocity):
        r"""GetNormalDampingForce(UAZBUS_Pac02Tire self, double depth, double velocity) -> double"""
        return _vehicle.UAZBUS_Pac02Tire_GetNormalDampingForce(self, depth, velocity)

    def GetMass(self):
        r"""GetMass(UAZBUS_Pac02Tire self) -> double"""
        return _vehicle.UAZBUS_Pac02Tire_GetMass(self)

    def GetInertia(self):
        r"""GetInertia(UAZBUS_Pac02Tire self) -> ChVectorD"""
        return _vehicle.UAZBUS_Pac02Tire_GetInertia(self)

    def GetVisualizationWidth(self):
        r"""GetVisualizationWidth(UAZBUS_Pac02Tire self) -> double"""
        return _vehicle.UAZBUS_Pac02Tire_GetVisualizationWidth(self)

    def SetPac02Params(self):
        r"""SetPac02Params(UAZBUS_Pac02Tire self)"""
        return _vehicle.UAZBUS_Pac02Tire_SetPac02Params(self)

    def AddVisualizationAssets(self, vis):
        r"""AddVisualizationAssets(UAZBUS_Pac02Tire self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.UAZBUS_Pac02Tire_AddVisualizationAssets(self, vis)

    def RemoveVisualizationAssets(self):
        r"""RemoveVisualizationAssets(UAZBUS_Pac02Tire self)"""
        return _vehicle.UAZBUS_Pac02Tire_RemoveVisualizationAssets(self)

# Register UAZBUS_Pac02Tire in _vehicle:
_vehicle.UAZBUS_Pac02Tire_swigregister(UAZBUS_Pac02Tire)


def CastToChTMeasyTire(in_obj):
    r"""CastToChTMeasyTire(std::shared_ptr< chrono::vehicle::ChTire > in_obj) -> std::shared_ptr< chrono::vehicle::ChTMeasyTire >"""
    return _vehicle.CastToChTMeasyTire(in_obj)

def CastToChRigidTire(in_obj):
    r"""CastToChRigidTire(std::shared_ptr< chrono::vehicle::ChTire > in_obj) -> std::shared_ptr< chrono::vehicle::ChRigidTire >"""
    return _vehicle.CastToChRigidTire(in_obj)

def CastToChReissnerTire(in_obj):
    r"""CastToChReissnerTire(std::shared_ptr< chrono::vehicle::ChTire > in_obj) -> std::shared_ptr< chrono::vehicle::ChReissnerTire >"""
    return _vehicle.CastToChReissnerTire(in_obj)

def CastToChPacejkaTire(in_obj):
    r"""CastToChPacejkaTire(std::shared_ptr< chrono::vehicle::ChTire > in_obj) -> std::shared_ptr< chrono::vehicle::ChPacejkaTire >"""
    return _vehicle.CastToChPacejkaTire(in_obj)

def CastToChPac89Tire(in_obj):
    r"""CastToChPac89Tire(std::shared_ptr< chrono::vehicle::ChTire > in_obj) -> std::shared_ptr< chrono::vehicle::ChPac89Tire >"""
    return _vehicle.CastToChPac89Tire(in_obj)

def CastToChLugreTire(in_obj):
    r"""CastToChLugreTire(std::shared_ptr< chrono::vehicle::ChTire > in_obj) -> std::shared_ptr< chrono::vehicle::ChLugreTire >"""
    return _vehicle.CastToChLugreTire(in_obj)

def CastToChFialaTire(in_obj):
    r"""CastToChFialaTire(std::shared_ptr< chrono::vehicle::ChTire > in_obj) -> std::shared_ptr< chrono::vehicle::ChFialaTire >"""
    return _vehicle.CastToChFialaTire(in_obj)
class ChAxle(object):
    r"""Proxy of C++ chrono::vehicle::ChAxle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChAxle self) -> ChAxle"""
        _vehicle.ChAxle_swiginit(self, _vehicle.new_ChAxle())
    __swig_destroy__ = _vehicle.delete_ChAxle

    def GetSuspensionLocation(self):
        r"""GetSuspensionLocation(ChAxle self) -> ChVectorD"""
        return _vehicle.ChAxle_GetSuspensionLocation(self)

    def SetOutput(self, state):
        r"""SetOutput(ChAxle self, bool state)"""
        return _vehicle.ChAxle_SetOutput(self, state)

    def Initialize(self, chassis, susp_location, arb_location, tierod_body, steering_index, wheel_separation=0, left_ang_vel=0, right_ang_vel=0):
        r"""Initialize(ChAxle self, std::shared_ptr< chrono::ChBodyAuxRef > chassis, ChVectorD susp_location, ChVectorD arb_location, std::shared_ptr< chrono::ChBody > tierod_body, int steering_index, double wheel_separation=0, double left_ang_vel=0, double right_ang_vel=0)"""
        return _vehicle.ChAxle_Initialize(self, chassis, susp_location, arb_location, tierod_body, steering_index, wheel_separation, left_ang_vel, right_ang_vel)

    def Synchronize(self, braking):
        r"""Synchronize(ChAxle self, double braking)"""
        return _vehicle.ChAxle_Synchronize(self, braking)

    def GetWheels(self):
        r"""GetWheels(ChAxle self) -> ChWheelList"""
        return _vehicle.ChAxle_GetWheels(self)

    def GetWheel(self, *args):
        r"""GetWheel(ChAxle self, chrono::vehicle::VehicleSide side, chrono::vehicle::WheelLocation location=SINGLE) -> std::shared_ptr< chrono::vehicle::ChWheel >"""
        return _vehicle.ChAxle_GetWheel(self, *args)
    m_suspension = property(_vehicle.ChAxle_m_suspension_get, _vehicle.ChAxle_m_suspension_set, doc=r"""m_suspension : std::shared_ptr<(chrono::vehicle::ChSuspension)>""")
    m_brake_left = property(_vehicle.ChAxle_m_brake_left_get, _vehicle.ChAxle_m_brake_left_set, doc=r"""m_brake_left : std::shared_ptr<(chrono::vehicle::ChBrake)>""")
    m_brake_right = property(_vehicle.ChAxle_m_brake_right_get, _vehicle.ChAxle_m_brake_right_set, doc=r"""m_brake_right : std::shared_ptr<(chrono::vehicle::ChBrake)>""")
    m_antirollbar = property(_vehicle.ChAxle_m_antirollbar_get, _vehicle.ChAxle_m_antirollbar_set, doc=r"""m_antirollbar : std::shared_ptr<(ChAntirollBar)>""")
    m_wheels = property(_vehicle.ChAxle_m_wheels_get, _vehicle.ChAxle_m_wheels_set, doc=r"""m_wheels : chrono::vehicle::ChWheelList""")

# Register ChAxle in _vehicle:
_vehicle.ChAxle_swigregister(ChAxle)

class ChWheeledVehicle(ChVehicle):
    r"""Proxy of C++ chrono::vehicle::ChWheeledVehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_ChWheeledVehicle

    def GetTemplateName(self):
        r"""GetTemplateName(ChWheeledVehicle self) -> std::string"""
        return _vehicle.ChWheeledVehicle_GetTemplateName(self)

    def GetPowertrain(self):
        r"""GetPowertrain(ChWheeledVehicle self) -> std::shared_ptr< chrono::vehicle::ChPowertrain >"""
        return _vehicle.ChWheeledVehicle_GetPowertrain(self)

    def GetAxles(self):
        r"""GetAxles(ChWheeledVehicle self) -> ChAxleList"""
        return _vehicle.ChWheeledVehicle_GetAxles(self)

    def GetAxle(self, id):
        r"""GetAxle(ChWheeledVehicle self, int id) -> std::shared_ptr< chrono::vehicle::ChAxle >"""
        return _vehicle.ChWheeledVehicle_GetAxle(self, id)

    def GetSuspension(self, id):
        r"""GetSuspension(ChWheeledVehicle self, int id) -> std::shared_ptr< chrono::vehicle::ChSuspension >"""
        return _vehicle.ChWheeledVehicle_GetSuspension(self, id)

    def GetSteering(self, id):
        r"""GetSteering(ChWheeledVehicle self, int id) -> std::shared_ptr< chrono::vehicle::ChSteering >"""
        return _vehicle.ChWheeledVehicle_GetSteering(self, id)

    def GetWheel(self, *args):
        r"""GetWheel(ChWheeledVehicle self, int axle, chrono::vehicle::VehicleSide side, chrono::vehicle::WheelLocation location=SINGLE) -> std::shared_ptr< chrono::vehicle::ChWheel >"""
        return _vehicle.ChWheeledVehicle_GetWheel(self, *args)

    def GetDriveline(self):
        r"""GetDriveline(ChWheeledVehicle self) -> std::shared_ptr< chrono::vehicle::ChDrivelineWV >"""
        return _vehicle.ChWheeledVehicle_GetDriveline(self)

    def GetVehicleMass(self):
        r"""GetVehicleMass(ChWheeledVehicle self) -> double"""
        return _vehicle.ChWheeledVehicle_GetVehicleMass(self)

    def GetVehicleCOMPos(self):
        r"""GetVehicleCOMPos(ChWheeledVehicle self) -> ChVectorD"""
        return _vehicle.ChWheeledVehicle_GetVehicleCOMPos(self)

    def GetDriveshaft(self):
        r"""GetDriveshaft(ChWheeledVehicle self) -> std::shared_ptr< chrono::ChShaft >"""
        return _vehicle.ChWheeledVehicle_GetDriveshaft(self)

    def GetDriveshaftSpeed(self):
        r"""GetDriveshaftSpeed(ChWheeledVehicle self) -> double"""
        return _vehicle.ChWheeledVehicle_GetDriveshaftSpeed(self)

    def GetNumberAxles(self):
        r"""GetNumberAxles(ChWheeledVehicle self) -> int"""
        return _vehicle.ChWheeledVehicle_GetNumberAxles(self)

    def GetSpindlePos(self, axle, side):
        r"""GetSpindlePos(ChWheeledVehicle self, int axle, chrono::vehicle::VehicleSide side) -> ChVectorD"""
        return _vehicle.ChWheeledVehicle_GetSpindlePos(self, axle, side)

    def GetSpindleRot(self, axle, side):
        r"""GetSpindleRot(ChWheeledVehicle self, int axle, chrono::vehicle::VehicleSide side) -> ChQuaternionD"""
        return _vehicle.ChWheeledVehicle_GetSpindleRot(self, axle, side)

    def GetSpindleLinVel(self, axle, side):
        r"""GetSpindleLinVel(ChWheeledVehicle self, int axle, chrono::vehicle::VehicleSide side) -> ChVectorD"""
        return _vehicle.ChWheeledVehicle_GetSpindleLinVel(self, axle, side)

    def GetSpindleAngVel(self, axle, side):
        r"""GetSpindleAngVel(ChWheeledVehicle self, int axle, chrono::vehicle::VehicleSide side) -> ChVectorD"""
        return _vehicle.ChWheeledVehicle_GetSpindleAngVel(self, axle, side)

    def GetSpindleOmega(self, axle, side):
        r"""GetSpindleOmega(ChWheeledVehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.ChWheeledVehicle_GetSpindleOmega(self, axle, side)

    def GetWheelbase(self):
        r"""GetWheelbase(ChWheeledVehicle self) -> double"""
        return _vehicle.ChWheeledVehicle_GetWheelbase(self)

    def GetWheeltrack(self, id):
        r"""GetWheeltrack(ChWheeledVehicle self, int id) -> double"""
        return _vehicle.ChWheeledVehicle_GetWheeltrack(self, id)

    def GetMinTurningRadius(self):
        r"""GetMinTurningRadius(ChWheeledVehicle self) -> double"""
        return _vehicle.ChWheeledVehicle_GetMinTurningRadius(self)

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(ChWheeledVehicle self) -> double"""
        return _vehicle.ChWheeledVehicle_GetMaxSteeringAngle(self)

    def InitializeTire(self, *args):
        r"""InitializeTire(ChWheeledVehicle self, std::shared_ptr< chrono::vehicle::ChTire > tire, std::shared_ptr< chrono::vehicle::ChWheel > wheel, chrono::vehicle::VisualizationType tire_vis=PRIMITIVES, chrono::vehicle::ChTire::CollisionType tire_coll=SINGLE_POINT)"""
        return _vehicle.ChWheeledVehicle_InitializeTire(self, *args)

    def InitializePowertrain(self, powertrain):
        r"""InitializePowertrain(ChWheeledVehicle self, std::shared_ptr< chrono::vehicle::ChPowertrain > powertrain)"""
        return _vehicle.ChWheeledVehicle_InitializePowertrain(self, powertrain)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(ChWheeledVehicle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChWheeledVehicle_SetSuspensionVisualizationType(self, vis)

    def SetSteeringVisualizationType(self, vis):
        r"""SetSteeringVisualizationType(ChWheeledVehicle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChWheeledVehicle_SetSteeringVisualizationType(self, vis)

    def SetWheelVisualizationType(self, vis):
        r"""SetWheelVisualizationType(ChWheeledVehicle self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.ChWheeledVehicle_SetWheelVisualizationType(self, vis)

    def SetChassisVehicleCollide(self, state):
        r"""SetChassisVehicleCollide(ChWheeledVehicle self, bool state)"""
        return _vehicle.ChWheeledVehicle_SetChassisVehicleCollide(self, state)

    def SetSuspensionOutput(self, id, state):
        r"""SetSuspensionOutput(ChWheeledVehicle self, int id, bool state)"""
        return _vehicle.ChWheeledVehicle_SetSuspensionOutput(self, id, state)

    def SetSteeringOutput(self, id, state):
        r"""SetSteeringOutput(ChWheeledVehicle self, int id, bool state)"""
        return _vehicle.ChWheeledVehicle_SetSteeringOutput(self, id, state)

    def SetAntirollbarOutput(self, id, state):
        r"""SetAntirollbarOutput(ChWheeledVehicle self, int id, bool state)"""
        return _vehicle.ChWheeledVehicle_SetAntirollbarOutput(self, id, state)

    def SetDrivelineOutput(self, state):
        r"""SetDrivelineOutput(ChWheeledVehicle self, bool state)"""
        return _vehicle.ChWheeledVehicle_SetDrivelineOutput(self, state)

    def Synchronize(self, time, driver_inputs, terrain):
        r"""Synchronize(ChWheeledVehicle self, double time, Inputs driver_inputs, ChTerrain terrain)"""
        return _vehicle.ChWheeledVehicle_Synchronize(self, time, driver_inputs, terrain)

    def Advance(self, step):
        r"""Advance(ChWheeledVehicle self, double step)"""
        return _vehicle.ChWheeledVehicle_Advance(self, step)

    def LockAxleDifferential(self, axle, lock):
        r"""LockAxleDifferential(ChWheeledVehicle self, int axle, bool lock)"""
        return _vehicle.ChWheeledVehicle_LockAxleDifferential(self, axle, lock)

    def LockCentralDifferential(self, which, lock):
        r"""LockCentralDifferential(ChWheeledVehicle self, int which, bool lock)"""
        return _vehicle.ChWheeledVehicle_LockCentralDifferential(self, which, lock)

    def LogConstraintViolations(self):
        r"""LogConstraintViolations(ChWheeledVehicle self)"""
        return _vehicle.ChWheeledVehicle_LogConstraintViolations(self)

    def ExportComponentList(self, *args):
        r"""
        ExportComponentList(ChWheeledVehicle self) -> std::string
        ExportComponentList(ChWheeledVehicle self, std::string const & filename)
        """
        return _vehicle.ChWheeledVehicle_ExportComponentList(self, *args)

# Register ChWheeledVehicle in _vehicle:
_vehicle.ChWheeledVehicle_swigregister(ChWheeledVehicle)

class WheeledVehicle(ChWheeledVehicle):
    r"""Proxy of C++ chrono::vehicle::WheeledVehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(WheeledVehicle self, std::string const & filename, chrono::ChMaterialSurface::ContactMethod contact_method=NSC) -> WheeledVehicle
        __init__(WheeledVehicle self, ChSystem system, std::string const & filename) -> WheeledVehicle
        """
        _vehicle.WheeledVehicle_swiginit(self, _vehicle.new_WheeledVehicle(*args))
    __swig_destroy__ = _vehicle.delete_WheeledVehicle

    def GetNumberAxles(self):
        r"""GetNumberAxles(WheeledVehicle self) -> int"""
        return _vehicle.WheeledVehicle_GetNumberAxles(self)

    def GetWheelbase(self):
        r"""GetWheelbase(WheeledVehicle self) -> double"""
        return _vehicle.WheeledVehicle_GetWheelbase(self)

    def GetMinTurningRadius(self):
        r"""GetMinTurningRadius(WheeledVehicle self) -> double"""
        return _vehicle.WheeledVehicle_GetMinTurningRadius(self)

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(WheeledVehicle self) -> double"""
        return _vehicle.WheeledVehicle_GetMaxSteeringAngle(self)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(WheeledVehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.WheeledVehicle_Initialize(self, chassisPos, chassisFwdVel)

# Register WheeledVehicle in _vehicle:
_vehicle.WheeledVehicle_swigregister(WheeledVehicle)

class Generic_Vehicle(ChWheeledVehicle):
    r"""Proxy of C++ chrono::vehicle::generic::Generic_Vehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(Generic_Vehicle self, bool const fixed, chrono::vehicle::SuspensionType suspType, chrono::ChMaterialSurface::ContactMethod contactMethod=NSC) -> Generic_Vehicle"""
        _vehicle.Generic_Vehicle_swiginit(self, _vehicle.new_Generic_Vehicle(*args))
    __swig_destroy__ = _vehicle.delete_Generic_Vehicle

    def GetNumberAxles(self):
        r"""GetNumberAxles(Generic_Vehicle self) -> int"""
        return _vehicle.Generic_Vehicle_GetNumberAxles(self)

    def GetWheelbase(self):
        r"""GetWheelbase(Generic_Vehicle self) -> double"""
        return _vehicle.Generic_Vehicle_GetWheelbase(self)

    def GetMinTurningRadius(self):
        r"""GetMinTurningRadius(Generic_Vehicle self) -> double"""
        return _vehicle.Generic_Vehicle_GetMinTurningRadius(self)

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(Generic_Vehicle self) -> double"""
        return _vehicle.Generic_Vehicle_GetMaxSteeringAngle(self)

    def GetSpringForce(self, axle, side):
        r"""GetSpringForce(Generic_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Generic_Vehicle_GetSpringForce(self, axle, side)

    def GetSpringLength(self, axle, side):
        r"""GetSpringLength(Generic_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Generic_Vehicle_GetSpringLength(self, axle, side)

    def GetSpringDeformation(self, axle, side):
        r"""GetSpringDeformation(Generic_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Generic_Vehicle_GetSpringDeformation(self, axle, side)

    def GetShockForce(self, axle, side):
        r"""GetShockForce(Generic_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Generic_Vehicle_GetShockForce(self, axle, side)

    def GetShockLength(self, axle, side):
        r"""GetShockLength(Generic_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Generic_Vehicle_GetShockLength(self, axle, side)

    def GetShockVelocity(self, axle, side):
        r"""GetShockVelocity(Generic_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Generic_Vehicle_GetShockVelocity(self, axle, side)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(Generic_Vehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.Generic_Vehicle_Initialize(self, chassisPos, chassisFwdVel)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(Generic_Vehicle self)"""
        return _vehicle.Generic_Vehicle_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(Generic_Vehicle self, int what)"""
        return _vehicle.Generic_Vehicle_DebugLog(self, what)

# Register Generic_Vehicle in _vehicle:
_vehicle.Generic_Vehicle_swigregister(Generic_Vehicle)

class HMMWV(object):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_HMMWV

    def SetContactMethod(self, val):
        r"""SetContactMethod(HMMWV self, chrono::ChMaterialSurface::ContactMethod val)"""
        return _vehicle.HMMWV_SetContactMethod(self, val)

    def SetChassisFixed(self, val):
        r"""SetChassisFixed(HMMWV self, bool val)"""
        return _vehicle.HMMWV_SetChassisFixed(self, val)

    def SetChassisCollisionType(self, val):
        r"""SetChassisCollisionType(HMMWV self, chrono::vehicle::ChassisCollisionType val)"""
        return _vehicle.HMMWV_SetChassisCollisionType(self, val)

    def SetDriveType(self, val):
        r"""SetDriveType(HMMWV self, chrono::vehicle::DrivelineType val)"""
        return _vehicle.HMMWV_SetDriveType(self, val)

    def SetPowertrainType(self, val):
        r"""SetPowertrainType(HMMWV self, chrono::vehicle::PowertrainModelType val)"""
        return _vehicle.HMMWV_SetPowertrainType(self, val)

    def SetTireType(self, val):
        r"""SetTireType(HMMWV self, chrono::vehicle::TireModelType val)"""
        return _vehicle.HMMWV_SetTireType(self, val)

    def SetTireCollisionType(self, collision_type):
        r"""SetTireCollisionType(HMMWV self, chrono::vehicle::ChTire::CollisionType collision_type)"""
        return _vehicle.HMMWV_SetTireCollisionType(self, collision_type)

    def SetInitPosition(self, pos):
        r"""SetInitPosition(HMMWV self, ChCoordsysD pos)"""
        return _vehicle.HMMWV_SetInitPosition(self, pos)

    def SetInitFwdVel(self, fwdVel):
        r"""SetInitFwdVel(HMMWV self, double fwdVel)"""
        return _vehicle.HMMWV_SetInitFwdVel(self, fwdVel)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(HMMWV self, std::vector< double,std::allocator< double > > const & omega)"""
        return _vehicle.HMMWV_SetInitWheelAngVel(self, omega)

    def SetTireStepSize(self, step_size):
        r"""SetTireStepSize(HMMWV self, double step_size)"""
        return _vehicle.HMMWV_SetTireStepSize(self, step_size)

    def GetSystem(self):
        r"""GetSystem(HMMWV self) -> ChSystem"""
        return _vehicle.HMMWV_GetSystem(self)

    def GetVehicle(self):
        r"""GetVehicle(HMMWV self) -> ChWheeledVehicle"""
        return _vehicle.HMMWV_GetVehicle(self)

    def GetChassis(self):
        r"""GetChassis(HMMWV self) -> std::shared_ptr< chrono::vehicle::ChChassis >"""
        return _vehicle.HMMWV_GetChassis(self)

    def GetChassisBody(self):
        r"""GetChassisBody(HMMWV self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _vehicle.HMMWV_GetChassisBody(self)

    def GetPowertrain(self):
        r"""GetPowertrain(HMMWV self) -> std::shared_ptr< chrono::vehicle::ChPowertrain >"""
        return _vehicle.HMMWV_GetPowertrain(self)

    def GetTotalMass(self):
        r"""GetTotalMass(HMMWV self) -> double"""
        return _vehicle.HMMWV_GetTotalMass(self)

    def Initialize(self):
        r"""Initialize(HMMWV self)"""
        return _vehicle.HMMWV_Initialize(self)

    def LockAxleDifferential(self, axle, lock):
        r"""LockAxleDifferential(HMMWV self, int axle, bool lock)"""
        return _vehicle.HMMWV_LockAxleDifferential(self, axle, lock)

    def LockCentralDifferential(self, which, lock):
        r"""LockCentralDifferential(HMMWV self, int which, bool lock)"""
        return _vehicle.HMMWV_LockCentralDifferential(self, which, lock)

    def SetAerodynamicDrag(self, Cd, area, air_density):
        r"""SetAerodynamicDrag(HMMWV self, double Cd, double area, double air_density)"""
        return _vehicle.HMMWV_SetAerodynamicDrag(self, Cd, area, air_density)

    def SetChassisVisualizationType(self, vis):
        r"""SetChassisVisualizationType(HMMWV self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.HMMWV_SetChassisVisualizationType(self, vis)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(HMMWV self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.HMMWV_SetSuspensionVisualizationType(self, vis)

    def SetSteeringVisualizationType(self, vis):
        r"""SetSteeringVisualizationType(HMMWV self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.HMMWV_SetSteeringVisualizationType(self, vis)

    def SetWheelVisualizationType(self, vis):
        r"""SetWheelVisualizationType(HMMWV self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.HMMWV_SetWheelVisualizationType(self, vis)

    def SetTireVisualizationType(self, vis):
        r"""SetTireVisualizationType(HMMWV self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.HMMWV_SetTireVisualizationType(self, vis)

    def Synchronize(self, time, driver_inputs, terrain):
        r"""Synchronize(HMMWV self, double time, Inputs driver_inputs, ChTerrain terrain)"""
        return _vehicle.HMMWV_Synchronize(self, time, driver_inputs, terrain)

    def Advance(self, step):
        r"""Advance(HMMWV self, double step)"""
        return _vehicle.HMMWV_Advance(self, step)

# Register HMMWV in _vehicle:
_vehicle.HMMWV_swigregister(HMMWV)

class HMMWV_Full(HMMWV):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_Full class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(HMMWV_Full self) -> HMMWV_Full
        __init__(HMMWV_Full self, ChSystem system) -> HMMWV_Full
        """
        _vehicle.HMMWV_Full_swiginit(self, _vehicle.new_HMMWV_Full(*args))

    def SetSteeringType(self, val):
        r"""SetSteeringType(HMMWV_Full self, chrono::vehicle::SteeringType val)"""
        return _vehicle.HMMWV_Full_SetSteeringType(self, val)

    def SetRigidSteeringColumn(self, val):
        r"""SetRigidSteeringColumn(HMMWV_Full self, bool val)"""
        return _vehicle.HMMWV_Full_SetRigidSteeringColumn(self, val)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(HMMWV_Full self)"""
        return _vehicle.HMMWV_Full_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(HMMWV_Full self, int what)"""
        return _vehicle.HMMWV_Full_DebugLog(self, what)
    __swig_destroy__ = _vehicle.delete_HMMWV_Full

# Register HMMWV_Full in _vehicle:
_vehicle.HMMWV_Full_swigregister(HMMWV_Full)

class HMMWV_Reduced(HMMWV):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_Reduced class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(HMMWV_Reduced self) -> HMMWV_Reduced
        __init__(HMMWV_Reduced self, ChSystem system) -> HMMWV_Reduced
        """
        _vehicle.HMMWV_Reduced_swiginit(self, _vehicle.new_HMMWV_Reduced(*args))
    __swig_destroy__ = _vehicle.delete_HMMWV_Reduced

# Register HMMWV_Reduced in _vehicle:
_vehicle.HMMWV_Reduced_swigregister(HMMWV_Reduced)

class HMMWV_Vehicle(ChWheeledVehicle):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_Vehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vehicle.delete_HMMWV_Vehicle

    def GetNumberAxles(self):
        r"""GetNumberAxles(HMMWV_Vehicle self) -> int"""
        return _vehicle.HMMWV_Vehicle_GetNumberAxles(self)

    def GetWheelbase(self):
        r"""GetWheelbase(HMMWV_Vehicle self) -> double"""
        return _vehicle.HMMWV_Vehicle_GetWheelbase(self)

    def GetMinTurningRadius(self):
        r"""GetMinTurningRadius(HMMWV_Vehicle self) -> double"""
        return _vehicle.HMMWV_Vehicle_GetMinTurningRadius(self)

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(HMMWV_Vehicle self) -> double"""
        return _vehicle.HMMWV_Vehicle_GetMaxSteeringAngle(self)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(HMMWV_Vehicle self, std::vector< double,std::allocator< double > > const & omega)"""
        return _vehicle.HMMWV_Vehicle_SetInitWheelAngVel(self, omega)

# Register HMMWV_Vehicle in _vehicle:
_vehicle.HMMWV_Vehicle_swigregister(HMMWV_Vehicle)

class HMMWV_VehicleReduced(HMMWV_Vehicle):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_VehicleReduced class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(HMMWV_VehicleReduced self, bool const fixed, chrono::vehicle::DrivelineType drive_type, chrono::ChMaterialSurface::ContactMethod contact_method, chrono::vehicle::ChassisCollisionType chassis_collision_type) -> HMMWV_VehicleReduced
        __init__(HMMWV_VehicleReduced self, ChSystem system, bool const fixed, chrono::vehicle::DrivelineType drive_type, chrono::vehicle::ChassisCollisionType chassis_collision_type) -> HMMWV_VehicleReduced
        """
        _vehicle.HMMWV_VehicleReduced_swiginit(self, _vehicle.new_HMMWV_VehicleReduced(*args))
    __swig_destroy__ = _vehicle.delete_HMMWV_VehicleReduced

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(HMMWV_VehicleReduced self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.HMMWV_VehicleReduced_Initialize(self, chassisPos, chassisFwdVel)

# Register HMMWV_VehicleReduced in _vehicle:
_vehicle.HMMWV_VehicleReduced_swigregister(HMMWV_VehicleReduced)

class HMMWV_VehicleFull(HMMWV_Vehicle):
    r"""Proxy of C++ chrono::vehicle::hmmwv::HMMWV_VehicleFull class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(HMMWV_VehicleFull self, bool const fixed, chrono::vehicle::DrivelineType drive_type, chrono::vehicle::SteeringType steering_type, bool rigid_steering_column, chrono::ChMaterialSurface::ContactMethod contact_method, chrono::vehicle::ChassisCollisionType chassis_collision_type) -> HMMWV_VehicleFull
        __init__(HMMWV_VehicleFull self, ChSystem system, bool const fixed, chrono::vehicle::DrivelineType drive_type, chrono::vehicle::SteeringType steering_type, bool rigid_steering_column, chrono::vehicle::ChassisCollisionType chassis_collision_type) -> HMMWV_VehicleFull
        """
        _vehicle.HMMWV_VehicleFull_swiginit(self, _vehicle.new_HMMWV_VehicleFull(*args))
    __swig_destroy__ = _vehicle.delete_HMMWV_VehicleFull

    def GetSpringForce(self, axle, side):
        r"""GetSpringForce(HMMWV_VehicleFull self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.HMMWV_VehicleFull_GetSpringForce(self, axle, side)

    def GetSpringLength(self, axle, side):
        r"""GetSpringLength(HMMWV_VehicleFull self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.HMMWV_VehicleFull_GetSpringLength(self, axle, side)

    def GetSpringDeformation(self, axle, side):
        r"""GetSpringDeformation(HMMWV_VehicleFull self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.HMMWV_VehicleFull_GetSpringDeformation(self, axle, side)

    def GetShockForce(self, axle, side):
        r"""GetShockForce(HMMWV_VehicleFull self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.HMMWV_VehicleFull_GetShockForce(self, axle, side)

    def GetShockLength(self, axle, side):
        r"""GetShockLength(HMMWV_VehicleFull self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.HMMWV_VehicleFull_GetShockLength(self, axle, side)

    def GetShockVelocity(self, axle, side):
        r"""GetShockVelocity(HMMWV_VehicleFull self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.HMMWV_VehicleFull_GetShockVelocity(self, axle, side)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(HMMWV_VehicleFull self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.HMMWV_VehicleFull_Initialize(self, chassisPos, chassisFwdVel)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(HMMWV_VehicleFull self)"""
        return _vehicle.HMMWV_VehicleFull_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(HMMWV_VehicleFull self, int what)"""
        return _vehicle.HMMWV_VehicleFull_DebugLog(self, what)

# Register HMMWV_VehicleFull in _vehicle:
_vehicle.HMMWV_VehicleFull_swigregister(HMMWV_VehicleFull)

class Sedan(object):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Sedan self) -> Sedan
        __init__(Sedan self, ChSystem system) -> Sedan
        """
        _vehicle.Sedan_swiginit(self, _vehicle.new_Sedan(*args))
    __swig_destroy__ = _vehicle.delete_Sedan

    def SetContactMethod(self, val):
        r"""SetContactMethod(Sedan self, chrono::ChMaterialSurface::ContactMethod val)"""
        return _vehicle.Sedan_SetContactMethod(self, val)

    def SetChassisFixed(self, val):
        r"""SetChassisFixed(Sedan self, bool val)"""
        return _vehicle.Sedan_SetChassisFixed(self, val)

    def SetChassisCollisionType(self, val):
        r"""SetChassisCollisionType(Sedan self, chrono::vehicle::ChassisCollisionType val)"""
        return _vehicle.Sedan_SetChassisCollisionType(self, val)

    def SetTireType(self, val):
        r"""SetTireType(Sedan self, chrono::vehicle::TireModelType val)"""
        return _vehicle.Sedan_SetTireType(self, val)

    def SetInitPosition(self, pos):
        r"""SetInitPosition(Sedan self, ChCoordsysD pos)"""
        return _vehicle.Sedan_SetInitPosition(self, pos)

    def SetInitFwdVel(self, fwdVel):
        r"""SetInitFwdVel(Sedan self, double fwdVel)"""
        return _vehicle.Sedan_SetInitFwdVel(self, fwdVel)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(Sedan self, std::vector< double,std::allocator< double > > const & omega)"""
        return _vehicle.Sedan_SetInitWheelAngVel(self, omega)

    def SetTireStepSize(self, step_size):
        r"""SetTireStepSize(Sedan self, double step_size)"""
        return _vehicle.Sedan_SetTireStepSize(self, step_size)

    def GetSystem(self):
        r"""GetSystem(Sedan self) -> ChSystem"""
        return _vehicle.Sedan_GetSystem(self)

    def GetVehicle(self):
        r"""GetVehicle(Sedan self) -> ChWheeledVehicle"""
        return _vehicle.Sedan_GetVehicle(self)

    def GetChassis(self):
        r"""GetChassis(Sedan self) -> std::shared_ptr< chrono::vehicle::ChChassis >"""
        return _vehicle.Sedan_GetChassis(self)

    def GetChassisBody(self):
        r"""GetChassisBody(Sedan self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _vehicle.Sedan_GetChassisBody(self)

    def GetPowertrain(self):
        r"""GetPowertrain(Sedan self) -> std::shared_ptr< chrono::vehicle::ChPowertrain >"""
        return _vehicle.Sedan_GetPowertrain(self)

    def GetTotalMass(self):
        r"""GetTotalMass(Sedan self) -> double"""
        return _vehicle.Sedan_GetTotalMass(self)

    def Initialize(self):
        r"""Initialize(Sedan self)"""
        return _vehicle.Sedan_Initialize(self)

    def LockAxleDifferential(self, axle, lock):
        r"""LockAxleDifferential(Sedan self, int axle, bool lock)"""
        return _vehicle.Sedan_LockAxleDifferential(self, axle, lock)

    def SetAerodynamicDrag(self, Cd, area, air_density):
        r"""SetAerodynamicDrag(Sedan self, double Cd, double area, double air_density)"""
        return _vehicle.Sedan_SetAerodynamicDrag(self, Cd, area, air_density)

    def SetChassisVisualizationType(self, vis):
        r"""SetChassisVisualizationType(Sedan self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Sedan_SetChassisVisualizationType(self, vis)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(Sedan self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Sedan_SetSuspensionVisualizationType(self, vis)

    def SetSteeringVisualizationType(self, vis):
        r"""SetSteeringVisualizationType(Sedan self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Sedan_SetSteeringVisualizationType(self, vis)

    def SetWheelVisualizationType(self, vis):
        r"""SetWheelVisualizationType(Sedan self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Sedan_SetWheelVisualizationType(self, vis)

    def SetTireVisualizationType(self, vis):
        r"""SetTireVisualizationType(Sedan self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.Sedan_SetTireVisualizationType(self, vis)

    def Synchronize(self, time, driver_inputs, terrain):
        r"""Synchronize(Sedan self, double time, Inputs driver_inputs, ChTerrain terrain)"""
        return _vehicle.Sedan_Synchronize(self, time, driver_inputs, terrain)

    def Advance(self, step):
        r"""Advance(Sedan self, double step)"""
        return _vehicle.Sedan_Advance(self, step)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(Sedan self)"""
        return _vehicle.Sedan_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(Sedan self, int what)"""
        return _vehicle.Sedan_DebugLog(self, what)

# Register Sedan in _vehicle:
_vehicle.Sedan_swigregister(Sedan)

class Sedan_Vehicle(ChWheeledVehicle):
    r"""Proxy of C++ chrono::vehicle::sedan::Sedan_Vehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Sedan_Vehicle self, bool const fixed=False, chrono::ChMaterialSurface::ContactMethod contact_method=NSC, chrono::vehicle::ChassisCollisionType chassis_collision_type=NONE) -> Sedan_Vehicle
        __init__(Sedan_Vehicle self, ChSystem system, bool const fixed=False, chrono::vehicle::ChassisCollisionType chassis_collision_type=NONE) -> Sedan_Vehicle
        """
        _vehicle.Sedan_Vehicle_swiginit(self, _vehicle.new_Sedan_Vehicle(*args))
    __swig_destroy__ = _vehicle.delete_Sedan_Vehicle

    def GetNumberAxles(self):
        r"""GetNumberAxles(Sedan_Vehicle self) -> int"""
        return _vehicle.Sedan_Vehicle_GetNumberAxles(self)

    def GetWheelbase(self):
        r"""GetWheelbase(Sedan_Vehicle self) -> double"""
        return _vehicle.Sedan_Vehicle_GetWheelbase(self)

    def GetMinTurningRadius(self):
        r"""GetMinTurningRadius(Sedan_Vehicle self) -> double"""
        return _vehicle.Sedan_Vehicle_GetMinTurningRadius(self)

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(Sedan_Vehicle self) -> double"""
        return _vehicle.Sedan_Vehicle_GetMaxSteeringAngle(self)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(Sedan_Vehicle self, std::vector< double,std::allocator< double > > const & omega)"""
        return _vehicle.Sedan_Vehicle_SetInitWheelAngVel(self, omega)

    def GetSpringForce(self, axle, side):
        r"""GetSpringForce(Sedan_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Sedan_Vehicle_GetSpringForce(self, axle, side)

    def GetSpringLength(self, axle, side):
        r"""GetSpringLength(Sedan_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Sedan_Vehicle_GetSpringLength(self, axle, side)

    def GetSpringDeformation(self, axle, side):
        r"""GetSpringDeformation(Sedan_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Sedan_Vehicle_GetSpringDeformation(self, axle, side)

    def GetShockForce(self, axle, side):
        r"""GetShockForce(Sedan_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Sedan_Vehicle_GetShockForce(self, axle, side)

    def GetShockLength(self, axle, side):
        r"""GetShockLength(Sedan_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Sedan_Vehicle_GetShockLength(self, axle, side)

    def GetShockVelocity(self, axle, side):
        r"""GetShockVelocity(Sedan_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.Sedan_Vehicle_GetShockVelocity(self, axle, side)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(Sedan_Vehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.Sedan_Vehicle_Initialize(self, chassisPos, chassisFwdVel)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(Sedan_Vehicle self)"""
        return _vehicle.Sedan_Vehicle_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(Sedan_Vehicle self, int what)"""
        return _vehicle.Sedan_Vehicle_DebugLog(self, what)

# Register Sedan_Vehicle in _vehicle:
_vehicle.Sedan_Vehicle_swigregister(Sedan_Vehicle)

class CityBus(object):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CityBus self) -> CityBus
        __init__(CityBus self, ChSystem system) -> CityBus
        """
        _vehicle.CityBus_swiginit(self, _vehicle.new_CityBus(*args))
    __swig_destroy__ = _vehicle.delete_CityBus

    def SetContactMethod(self, val):
        r"""SetContactMethod(CityBus self, chrono::ChMaterialSurface::ContactMethod val)"""
        return _vehicle.CityBus_SetContactMethod(self, val)

    def SetChassisFixed(self, val):
        r"""SetChassisFixed(CityBus self, bool val)"""
        return _vehicle.CityBus_SetChassisFixed(self, val)

    def SetChassisCollisionType(self, val):
        r"""SetChassisCollisionType(CityBus self, chrono::vehicle::ChassisCollisionType val)"""
        return _vehicle.CityBus_SetChassisCollisionType(self, val)

    def SetTireType(self, val):
        r"""SetTireType(CityBus self, chrono::vehicle::TireModelType val)"""
        return _vehicle.CityBus_SetTireType(self, val)

    def SetInitPosition(self, pos):
        r"""SetInitPosition(CityBus self, ChCoordsysD pos)"""
        return _vehicle.CityBus_SetInitPosition(self, pos)

    def SetInitFwdVel(self, fwdVel):
        r"""SetInitFwdVel(CityBus self, double fwdVel)"""
        return _vehicle.CityBus_SetInitFwdVel(self, fwdVel)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(CityBus self, std::vector< double,std::allocator< double > > const & omega)"""
        return _vehicle.CityBus_SetInitWheelAngVel(self, omega)

    def SetTireStepSize(self, step_size):
        r"""SetTireStepSize(CityBus self, double step_size)"""
        return _vehicle.CityBus_SetTireStepSize(self, step_size)

    def GetSystem(self):
        r"""GetSystem(CityBus self) -> ChSystem"""
        return _vehicle.CityBus_GetSystem(self)

    def GetVehicle(self):
        r"""GetVehicle(CityBus self) -> ChWheeledVehicle"""
        return _vehicle.CityBus_GetVehicle(self)

    def GetChassis(self):
        r"""GetChassis(CityBus self) -> std::shared_ptr< chrono::vehicle::ChChassis >"""
        return _vehicle.CityBus_GetChassis(self)

    def GetChassisBody(self):
        r"""GetChassisBody(CityBus self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _vehicle.CityBus_GetChassisBody(self)

    def GetPowertrain(self):
        r"""GetPowertrain(CityBus self) -> std::shared_ptr< chrono::vehicle::ChPowertrain >"""
        return _vehicle.CityBus_GetPowertrain(self)

    def GetTotalMass(self):
        r"""GetTotalMass(CityBus self) -> double"""
        return _vehicle.CityBus_GetTotalMass(self)

    def Initialize(self):
        r"""Initialize(CityBus self)"""
        return _vehicle.CityBus_Initialize(self)

    def SetAerodynamicDrag(self, Cd, area, air_density):
        r"""SetAerodynamicDrag(CityBus self, double Cd, double area, double air_density)"""
        return _vehicle.CityBus_SetAerodynamicDrag(self, Cd, area, air_density)

    def SetChassisVisualizationType(self, vis):
        r"""SetChassisVisualizationType(CityBus self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.CityBus_SetChassisVisualizationType(self, vis)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(CityBus self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.CityBus_SetSuspensionVisualizationType(self, vis)

    def SetSteeringVisualizationType(self, vis):
        r"""SetSteeringVisualizationType(CityBus self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.CityBus_SetSteeringVisualizationType(self, vis)

    def SetWheelVisualizationType(self, vis):
        r"""SetWheelVisualizationType(CityBus self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.CityBus_SetWheelVisualizationType(self, vis)

    def SetTireVisualizationType(self, vis):
        r"""SetTireVisualizationType(CityBus self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.CityBus_SetTireVisualizationType(self, vis)

    def Synchronize(self, time, driver_inputs, terrain):
        r"""Synchronize(CityBus self, double time, Inputs driver_inputs, ChTerrain terrain)"""
        return _vehicle.CityBus_Synchronize(self, time, driver_inputs, terrain)

    def Advance(self, step):
        r"""Advance(CityBus self, double step)"""
        return _vehicle.CityBus_Advance(self, step)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(CityBus self)"""
        return _vehicle.CityBus_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(CityBus self, int what)"""
        return _vehicle.CityBus_DebugLog(self, what)

# Register CityBus in _vehicle:
_vehicle.CityBus_swigregister(CityBus)

class CityBus_Vehicle(ChWheeledVehicle):
    r"""Proxy of C++ chrono::vehicle::citybus::CityBus_Vehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CityBus_Vehicle self, bool const fixed=False, chrono::ChMaterialSurface::ContactMethod contact_method=NSC, chrono::vehicle::ChassisCollisionType chassis_collision_type=NONE) -> CityBus_Vehicle
        __init__(CityBus_Vehicle self, ChSystem system, bool const fixed=False, chrono::vehicle::ChassisCollisionType chassis_collision_type=NONE) -> CityBus_Vehicle
        """
        _vehicle.CityBus_Vehicle_swiginit(self, _vehicle.new_CityBus_Vehicle(*args))
    __swig_destroy__ = _vehicle.delete_CityBus_Vehicle

    def GetNumberAxles(self):
        r"""GetNumberAxles(CityBus_Vehicle self) -> int"""
        return _vehicle.CityBus_Vehicle_GetNumberAxles(self)

    def GetWheelbase(self):
        r"""GetWheelbase(CityBus_Vehicle self) -> double"""
        return _vehicle.CityBus_Vehicle_GetWheelbase(self)

    def GetMinTurningRadius(self):
        r"""GetMinTurningRadius(CityBus_Vehicle self) -> double"""
        return _vehicle.CityBus_Vehicle_GetMinTurningRadius(self)

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(CityBus_Vehicle self) -> double"""
        return _vehicle.CityBus_Vehicle_GetMaxSteeringAngle(self)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(CityBus_Vehicle self, std::vector< double,std::allocator< double > > const & omega)"""
        return _vehicle.CityBus_Vehicle_SetInitWheelAngVel(self, omega)

    def GetSpringForce(self, axle, side):
        r"""GetSpringForce(CityBus_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.CityBus_Vehicle_GetSpringForce(self, axle, side)

    def GetSpringLength(self, axle, side):
        r"""GetSpringLength(CityBus_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.CityBus_Vehicle_GetSpringLength(self, axle, side)

    def GetSpringDeformation(self, axle, side):
        r"""GetSpringDeformation(CityBus_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.CityBus_Vehicle_GetSpringDeformation(self, axle, side)

    def GetShockForce(self, axle, side):
        r"""GetShockForce(CityBus_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.CityBus_Vehicle_GetShockForce(self, axle, side)

    def GetShockLength(self, axle, side):
        r"""GetShockLength(CityBus_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.CityBus_Vehicle_GetShockLength(self, axle, side)

    def GetShockVelocity(self, axle, side):
        r"""GetShockVelocity(CityBus_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.CityBus_Vehicle_GetShockVelocity(self, axle, side)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(CityBus_Vehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.CityBus_Vehicle_Initialize(self, chassisPos, chassisFwdVel)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(CityBus_Vehicle self)"""
        return _vehicle.CityBus_Vehicle_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(CityBus_Vehicle self, int what)"""
        return _vehicle.CityBus_Vehicle_DebugLog(self, what)

# Register CityBus_Vehicle in _vehicle:
_vehicle.CityBus_Vehicle_swigregister(CityBus_Vehicle)

class MAN_5t(object):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MAN_5t self) -> MAN_5t
        __init__(MAN_5t self, ChSystem system) -> MAN_5t
        """
        _vehicle.MAN_5t_swiginit(self, _vehicle.new_MAN_5t(*args))
    __swig_destroy__ = _vehicle.delete_MAN_5t

    def SetContactMethod(self, val):
        r"""SetContactMethod(MAN_5t self, chrono::ChMaterialSurface::ContactMethod val)"""
        return _vehicle.MAN_5t_SetContactMethod(self, val)

    def SetChassisFixed(self, val):
        r"""SetChassisFixed(MAN_5t self, bool val)"""
        return _vehicle.MAN_5t_SetChassisFixed(self, val)

    def SetChassisCollisionType(self, val):
        r"""SetChassisCollisionType(MAN_5t self, chrono::vehicle::ChassisCollisionType val)"""
        return _vehicle.MAN_5t_SetChassisCollisionType(self, val)

    def SetTireType(self, val):
        r"""SetTireType(MAN_5t self, chrono::vehicle::TireModelType val)"""
        return _vehicle.MAN_5t_SetTireType(self, val)

    def SetInitPosition(self, pos):
        r"""SetInitPosition(MAN_5t self, ChCoordsysD pos)"""
        return _vehicle.MAN_5t_SetInitPosition(self, pos)

    def SetInitFwdVel(self, fwdVel):
        r"""SetInitFwdVel(MAN_5t self, double fwdVel)"""
        return _vehicle.MAN_5t_SetInitFwdVel(self, fwdVel)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(MAN_5t self, std::vector< double,std::allocator< double > > const & omega)"""
        return _vehicle.MAN_5t_SetInitWheelAngVel(self, omega)

    def SetShaftBasedDrivetrain(self, val):
        r"""SetShaftBasedDrivetrain(MAN_5t self, bool val)"""
        return _vehicle.MAN_5t_SetShaftBasedDrivetrain(self, val)

    def SetTireStepSize(self, step_size):
        r"""SetTireStepSize(MAN_5t self, double step_size)"""
        return _vehicle.MAN_5t_SetTireStepSize(self, step_size)

    def GetSystem(self):
        r"""GetSystem(MAN_5t self) -> ChSystem"""
        return _vehicle.MAN_5t_GetSystem(self)

    def GetVehicle(self):
        r"""GetVehicle(MAN_5t self) -> ChWheeledVehicle"""
        return _vehicle.MAN_5t_GetVehicle(self)

    def GetChassis(self):
        r"""GetChassis(MAN_5t self) -> std::shared_ptr< chrono::vehicle::ChChassis >"""
        return _vehicle.MAN_5t_GetChassis(self)

    def GetChassisBody(self):
        r"""GetChassisBody(MAN_5t self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _vehicle.MAN_5t_GetChassisBody(self)

    def GetPowertrain(self):
        r"""GetPowertrain(MAN_5t self) -> std::shared_ptr< chrono::vehicle::ChPowertrain >"""
        return _vehicle.MAN_5t_GetPowertrain(self)

    def GetTotalMass(self):
        r"""GetTotalMass(MAN_5t self) -> double"""
        return _vehicle.MAN_5t_GetTotalMass(self)

    def Initialize(self):
        r"""Initialize(MAN_5t self)"""
        return _vehicle.MAN_5t_Initialize(self)

    def SetAerodynamicDrag(self, Cd, area, air_density):
        r"""SetAerodynamicDrag(MAN_5t self, double Cd, double area, double air_density)"""
        return _vehicle.MAN_5t_SetAerodynamicDrag(self, Cd, area, air_density)

    def SetChassisVisualizationType(self, vis):
        r"""SetChassisVisualizationType(MAN_5t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_5t_SetChassisVisualizationType(self, vis)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(MAN_5t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_5t_SetSuspensionVisualizationType(self, vis)

    def SetSteeringVisualizationType(self, vis):
        r"""SetSteeringVisualizationType(MAN_5t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_5t_SetSteeringVisualizationType(self, vis)

    def SetWheelVisualizationType(self, vis):
        r"""SetWheelVisualizationType(MAN_5t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_5t_SetWheelVisualizationType(self, vis)

    def SetTireVisualizationType(self, vis):
        r"""SetTireVisualizationType(MAN_5t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_5t_SetTireVisualizationType(self, vis)

    def Synchronize(self, time, driver_inputs, terrain):
        r"""Synchronize(MAN_5t self, double time, Inputs driver_inputs, ChTerrain terrain)"""
        return _vehicle.MAN_5t_Synchronize(self, time, driver_inputs, terrain)

    def Advance(self, step):
        r"""Advance(MAN_5t self, double step)"""
        return _vehicle.MAN_5t_Advance(self, step)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(MAN_5t self)"""
        return _vehicle.MAN_5t_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(MAN_5t self, int what)"""
        return _vehicle.MAN_5t_DebugLog(self, what)

# Register MAN_5t in _vehicle:
_vehicle.MAN_5t_swigregister(MAN_5t)

class MAN_7t(object):
    r"""Proxy of C++ chrono::vehicle::man::MAN_7t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MAN_7t self) -> MAN_7t
        __init__(MAN_7t self, ChSystem system) -> MAN_7t
        """
        _vehicle.MAN_7t_swiginit(self, _vehicle.new_MAN_7t(*args))
    __swig_destroy__ = _vehicle.delete_MAN_7t

    def SetContactMethod(self, val):
        r"""SetContactMethod(MAN_7t self, chrono::ChMaterialSurface::ContactMethod val)"""
        return _vehicle.MAN_7t_SetContactMethod(self, val)

    def SetChassisFixed(self, val):
        r"""SetChassisFixed(MAN_7t self, bool val)"""
        return _vehicle.MAN_7t_SetChassisFixed(self, val)

    def SetChassisCollisionType(self, val):
        r"""SetChassisCollisionType(MAN_7t self, chrono::vehicle::ChassisCollisionType val)"""
        return _vehicle.MAN_7t_SetChassisCollisionType(self, val)

    def SetTireType(self, val):
        r"""SetTireType(MAN_7t self, chrono::vehicle::TireModelType val)"""
        return _vehicle.MAN_7t_SetTireType(self, val)

    def SetInitPosition(self, pos):
        r"""SetInitPosition(MAN_7t self, ChCoordsysD pos)"""
        return _vehicle.MAN_7t_SetInitPosition(self, pos)

    def SetInitFwdVel(self, fwdVel):
        r"""SetInitFwdVel(MAN_7t self, double fwdVel)"""
        return _vehicle.MAN_7t_SetInitFwdVel(self, fwdVel)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(MAN_7t self, std::vector< double,std::allocator< double > > const & omega)"""
        return _vehicle.MAN_7t_SetInitWheelAngVel(self, omega)

    def SetShaftBasedDrivetrain(self, val):
        r"""SetShaftBasedDrivetrain(MAN_7t self, bool val)"""
        return _vehicle.MAN_7t_SetShaftBasedDrivetrain(self, val)

    def SetTireStepSize(self, step_size):
        r"""SetTireStepSize(MAN_7t self, double step_size)"""
        return _vehicle.MAN_7t_SetTireStepSize(self, step_size)

    def GetSystem(self):
        r"""GetSystem(MAN_7t self) -> ChSystem"""
        return _vehicle.MAN_7t_GetSystem(self)

    def GetVehicle(self):
        r"""GetVehicle(MAN_7t self) -> ChWheeledVehicle"""
        return _vehicle.MAN_7t_GetVehicle(self)

    def GetChassis(self):
        r"""GetChassis(MAN_7t self) -> std::shared_ptr< chrono::vehicle::ChChassis >"""
        return _vehicle.MAN_7t_GetChassis(self)

    def GetChassisBody(self):
        r"""GetChassisBody(MAN_7t self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _vehicle.MAN_7t_GetChassisBody(self)

    def GetPowertrain(self):
        r"""GetPowertrain(MAN_7t self) -> std::shared_ptr< chrono::vehicle::ChPowertrain >"""
        return _vehicle.MAN_7t_GetPowertrain(self)

    def GetTotalMass(self):
        r"""GetTotalMass(MAN_7t self) -> double"""
        return _vehicle.MAN_7t_GetTotalMass(self)

    def Initialize(self):
        r"""Initialize(MAN_7t self)"""
        return _vehicle.MAN_7t_Initialize(self)

    def SetAerodynamicDrag(self, Cd, area, air_density):
        r"""SetAerodynamicDrag(MAN_7t self, double Cd, double area, double air_density)"""
        return _vehicle.MAN_7t_SetAerodynamicDrag(self, Cd, area, air_density)

    def SetChassisVisualizationType(self, vis):
        r"""SetChassisVisualizationType(MAN_7t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_7t_SetChassisVisualizationType(self, vis)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(MAN_7t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_7t_SetSuspensionVisualizationType(self, vis)

    def SetSteeringVisualizationType(self, vis):
        r"""SetSteeringVisualizationType(MAN_7t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_7t_SetSteeringVisualizationType(self, vis)

    def SetWheelVisualizationType(self, vis):
        r"""SetWheelVisualizationType(MAN_7t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_7t_SetWheelVisualizationType(self, vis)

    def SetTireVisualizationType(self, vis):
        r"""SetTireVisualizationType(MAN_7t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_7t_SetTireVisualizationType(self, vis)

    def Synchronize(self, time, driver_inputs, terrain):
        r"""Synchronize(MAN_7t self, double time, Inputs driver_inputs, ChTerrain terrain)"""
        return _vehicle.MAN_7t_Synchronize(self, time, driver_inputs, terrain)

    def Advance(self, step):
        r"""Advance(MAN_7t self, double step)"""
        return _vehicle.MAN_7t_Advance(self, step)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(MAN_7t self)"""
        return _vehicle.MAN_7t_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(MAN_7t self, int what)"""
        return _vehicle.MAN_7t_DebugLog(self, what)

# Register MAN_7t in _vehicle:
_vehicle.MAN_7t_swigregister(MAN_7t)

class MAN_10t(object):
    r"""Proxy of C++ chrono::vehicle::man::MAN_10t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MAN_10t self) -> MAN_10t
        __init__(MAN_10t self, ChSystem system) -> MAN_10t
        """
        _vehicle.MAN_10t_swiginit(self, _vehicle.new_MAN_10t(*args))
    __swig_destroy__ = _vehicle.delete_MAN_10t

    def SetContactMethod(self, val):
        r"""SetContactMethod(MAN_10t self, chrono::ChMaterialSurface::ContactMethod val)"""
        return _vehicle.MAN_10t_SetContactMethod(self, val)

    def SetChassisFixed(self, val):
        r"""SetChassisFixed(MAN_10t self, bool val)"""
        return _vehicle.MAN_10t_SetChassisFixed(self, val)

    def SetChassisCollisionType(self, val):
        r"""SetChassisCollisionType(MAN_10t self, chrono::vehicle::ChassisCollisionType val)"""
        return _vehicle.MAN_10t_SetChassisCollisionType(self, val)

    def SetTireType(self, val):
        r"""SetTireType(MAN_10t self, chrono::vehicle::TireModelType val)"""
        return _vehicle.MAN_10t_SetTireType(self, val)

    def SetInitPosition(self, pos):
        r"""SetInitPosition(MAN_10t self, ChCoordsysD pos)"""
        return _vehicle.MAN_10t_SetInitPosition(self, pos)

    def SetInitFwdVel(self, fwdVel):
        r"""SetInitFwdVel(MAN_10t self, double fwdVel)"""
        return _vehicle.MAN_10t_SetInitFwdVel(self, fwdVel)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(MAN_10t self, std::vector< double,std::allocator< double > > const & omega)"""
        return _vehicle.MAN_10t_SetInitWheelAngVel(self, omega)

    def SetShaftBasedDrivetrain(self, val):
        r"""SetShaftBasedDrivetrain(MAN_10t self, bool val)"""
        return _vehicle.MAN_10t_SetShaftBasedDrivetrain(self, val)

    def SetTireStepSize(self, step_size):
        r"""SetTireStepSize(MAN_10t self, double step_size)"""
        return _vehicle.MAN_10t_SetTireStepSize(self, step_size)

    def GetSystem(self):
        r"""GetSystem(MAN_10t self) -> ChSystem"""
        return _vehicle.MAN_10t_GetSystem(self)

    def GetVehicle(self):
        r"""GetVehicle(MAN_10t self) -> ChWheeledVehicle"""
        return _vehicle.MAN_10t_GetVehicle(self)

    def GetChassis(self):
        r"""GetChassis(MAN_10t self) -> std::shared_ptr< chrono::vehicle::ChChassis >"""
        return _vehicle.MAN_10t_GetChassis(self)

    def GetChassisBody(self):
        r"""GetChassisBody(MAN_10t self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _vehicle.MAN_10t_GetChassisBody(self)

    def GetPowertrain(self):
        r"""GetPowertrain(MAN_10t self) -> std::shared_ptr< chrono::vehicle::ChPowertrain >"""
        return _vehicle.MAN_10t_GetPowertrain(self)

    def GetTotalMass(self):
        r"""GetTotalMass(MAN_10t self) -> double"""
        return _vehicle.MAN_10t_GetTotalMass(self)

    def Initialize(self):
        r"""Initialize(MAN_10t self)"""
        return _vehicle.MAN_10t_Initialize(self)

    def SetAerodynamicDrag(self, Cd, area, air_density):
        r"""SetAerodynamicDrag(MAN_10t self, double Cd, double area, double air_density)"""
        return _vehicle.MAN_10t_SetAerodynamicDrag(self, Cd, area, air_density)

    def SetChassisVisualizationType(self, vis):
        r"""SetChassisVisualizationType(MAN_10t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_10t_SetChassisVisualizationType(self, vis)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(MAN_10t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_10t_SetSuspensionVisualizationType(self, vis)

    def SetSteeringVisualizationType(self, vis):
        r"""SetSteeringVisualizationType(MAN_10t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_10t_SetSteeringVisualizationType(self, vis)

    def SetWheelVisualizationType(self, vis):
        r"""SetWheelVisualizationType(MAN_10t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_10t_SetWheelVisualizationType(self, vis)

    def SetTireVisualizationType(self, vis):
        r"""SetTireVisualizationType(MAN_10t self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.MAN_10t_SetTireVisualizationType(self, vis)

    def Synchronize(self, time, driver_inputs, terrain):
        r"""Synchronize(MAN_10t self, double time, Inputs driver_inputs, ChTerrain terrain)"""
        return _vehicle.MAN_10t_Synchronize(self, time, driver_inputs, terrain)

    def Advance(self, step):
        r"""Advance(MAN_10t self, double step)"""
        return _vehicle.MAN_10t_Advance(self, step)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(MAN_10t self)"""
        return _vehicle.MAN_10t_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(MAN_10t self, int what)"""
        return _vehicle.MAN_10t_DebugLog(self, what)

# Register MAN_10t in _vehicle:
_vehicle.MAN_10t_swigregister(MAN_10t)

class MAN_5t_Vehicle(ChWheeledVehicle):
    r"""Proxy of C++ chrono::vehicle::man::MAN_5t_Vehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MAN_5t_Vehicle self, bool const fixed=False, chrono::ChMaterialSurface::ContactMethod contact_method=NSC, chrono::vehicle::ChassisCollisionType chassis_collision_type=NONE, bool useShaftDrivetrain=True) -> MAN_5t_Vehicle
        __init__(MAN_5t_Vehicle self, ChSystem system, bool const fixed=False, chrono::vehicle::ChassisCollisionType chassis_collision_type=NONE, bool useShaftDrivetrain=True) -> MAN_5t_Vehicle
        """
        _vehicle.MAN_5t_Vehicle_swiginit(self, _vehicle.new_MAN_5t_Vehicle(*args))
    __swig_destroy__ = _vehicle.delete_MAN_5t_Vehicle

    def GetNumberAxles(self):
        r"""GetNumberAxles(MAN_5t_Vehicle self) -> int"""
        return _vehicle.MAN_5t_Vehicle_GetNumberAxles(self)

    def GetWheelbase(self):
        r"""GetWheelbase(MAN_5t_Vehicle self) -> double"""
        return _vehicle.MAN_5t_Vehicle_GetWheelbase(self)

    def GetMinTurningRadius(self):
        r"""GetMinTurningRadius(MAN_5t_Vehicle self) -> double"""
        return _vehicle.MAN_5t_Vehicle_GetMinTurningRadius(self)

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(MAN_5t_Vehicle self) -> double"""
        return _vehicle.MAN_5t_Vehicle_GetMaxSteeringAngle(self)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(MAN_5t_Vehicle self, std::vector< double,std::allocator< double > > const & omega)"""
        return _vehicle.MAN_5t_Vehicle_SetInitWheelAngVel(self, omega)

    def GetSpringForce(self, axle, side):
        r"""GetSpringForce(MAN_5t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_5t_Vehicle_GetSpringForce(self, axle, side)

    def GetSpringLength(self, axle, side):
        r"""GetSpringLength(MAN_5t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_5t_Vehicle_GetSpringLength(self, axle, side)

    def GetSpringDeformation(self, axle, side):
        r"""GetSpringDeformation(MAN_5t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_5t_Vehicle_GetSpringDeformation(self, axle, side)

    def GetShockForce(self, axle, side):
        r"""GetShockForce(MAN_5t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_5t_Vehicle_GetShockForce(self, axle, side)

    def GetShockLength(self, axle, side):
        r"""GetShockLength(MAN_5t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_5t_Vehicle_GetShockLength(self, axle, side)

    def GetShockVelocity(self, axle, side):
        r"""GetShockVelocity(MAN_5t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_5t_Vehicle_GetShockVelocity(self, axle, side)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(MAN_5t_Vehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.MAN_5t_Vehicle_Initialize(self, chassisPos, chassisFwdVel)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(MAN_5t_Vehicle self)"""
        return _vehicle.MAN_5t_Vehicle_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(MAN_5t_Vehicle self, int what)"""
        return _vehicle.MAN_5t_Vehicle_DebugLog(self, what)

# Register MAN_5t_Vehicle in _vehicle:
_vehicle.MAN_5t_Vehicle_swigregister(MAN_5t_Vehicle)

class MAN_7t_Vehicle(ChWheeledVehicle):
    r"""Proxy of C++ chrono::vehicle::man::MAN_7t_Vehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MAN_7t_Vehicle self, bool const fixed=False, chrono::ChMaterialSurface::ContactMethod contact_method=NSC, chrono::vehicle::ChassisCollisionType chassis_collision_type=NONE, bool useShaftDrivetrain=True) -> MAN_7t_Vehicle
        __init__(MAN_7t_Vehicle self, ChSystem system, bool const fixed=False, chrono::vehicle::ChassisCollisionType chassis_collision_type=NONE, bool useShaftDrivetrain=True) -> MAN_7t_Vehicle
        """
        _vehicle.MAN_7t_Vehicle_swiginit(self, _vehicle.new_MAN_7t_Vehicle(*args))
    __swig_destroy__ = _vehicle.delete_MAN_7t_Vehicle

    def GetNumberAxles(self):
        r"""GetNumberAxles(MAN_7t_Vehicle self) -> int"""
        return _vehicle.MAN_7t_Vehicle_GetNumberAxles(self)

    def GetWheelbase(self):
        r"""GetWheelbase(MAN_7t_Vehicle self) -> double"""
        return _vehicle.MAN_7t_Vehicle_GetWheelbase(self)

    def GetMinTurningRadius(self):
        r"""GetMinTurningRadius(MAN_7t_Vehicle self) -> double"""
        return _vehicle.MAN_7t_Vehicle_GetMinTurningRadius(self)

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(MAN_7t_Vehicle self) -> double"""
        return _vehicle.MAN_7t_Vehicle_GetMaxSteeringAngle(self)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(MAN_7t_Vehicle self, std::vector< double,std::allocator< double > > const & omega)"""
        return _vehicle.MAN_7t_Vehicle_SetInitWheelAngVel(self, omega)

    def GetSpringForce(self, axle, side):
        r"""GetSpringForce(MAN_7t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_7t_Vehicle_GetSpringForce(self, axle, side)

    def GetSpringLength(self, axle, side):
        r"""GetSpringLength(MAN_7t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_7t_Vehicle_GetSpringLength(self, axle, side)

    def GetSpringDeformation(self, axle, side):
        r"""GetSpringDeformation(MAN_7t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_7t_Vehicle_GetSpringDeformation(self, axle, side)

    def GetShockForce(self, axle, side):
        r"""GetShockForce(MAN_7t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_7t_Vehicle_GetShockForce(self, axle, side)

    def GetShockLength(self, axle, side):
        r"""GetShockLength(MAN_7t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_7t_Vehicle_GetShockLength(self, axle, side)

    def GetShockVelocity(self, axle, side):
        r"""GetShockVelocity(MAN_7t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_7t_Vehicle_GetShockVelocity(self, axle, side)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(MAN_7t_Vehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.MAN_7t_Vehicle_Initialize(self, chassisPos, chassisFwdVel)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(MAN_7t_Vehicle self)"""
        return _vehicle.MAN_7t_Vehicle_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(MAN_7t_Vehicle self, int what)"""
        return _vehicle.MAN_7t_Vehicle_DebugLog(self, what)

# Register MAN_7t_Vehicle in _vehicle:
_vehicle.MAN_7t_Vehicle_swigregister(MAN_7t_Vehicle)

class MAN_10t_Vehicle(ChWheeledVehicle):
    r"""Proxy of C++ chrono::vehicle::man::MAN_10t_Vehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MAN_10t_Vehicle self, bool const fixed=False, chrono::ChMaterialSurface::ContactMethod contact_method=NSC, chrono::vehicle::ChassisCollisionType chassis_collision_type=NONE, bool useShaftDrivetrain=True) -> MAN_10t_Vehicle
        __init__(MAN_10t_Vehicle self, ChSystem system, bool const fixed=False, chrono::vehicle::ChassisCollisionType chassis_collision_type=NONE, bool useShaftDrivetrain=True) -> MAN_10t_Vehicle
        """
        _vehicle.MAN_10t_Vehicle_swiginit(self, _vehicle.new_MAN_10t_Vehicle(*args))
    __swig_destroy__ = _vehicle.delete_MAN_10t_Vehicle

    def GetNumberAxles(self):
        r"""GetNumberAxles(MAN_10t_Vehicle self) -> int"""
        return _vehicle.MAN_10t_Vehicle_GetNumberAxles(self)

    def GetWheelbase(self):
        r"""GetWheelbase(MAN_10t_Vehicle self) -> double"""
        return _vehicle.MAN_10t_Vehicle_GetWheelbase(self)

    def GetMinTurningRadius(self):
        r"""GetMinTurningRadius(MAN_10t_Vehicle self) -> double"""
        return _vehicle.MAN_10t_Vehicle_GetMinTurningRadius(self)

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(MAN_10t_Vehicle self) -> double"""
        return _vehicle.MAN_10t_Vehicle_GetMaxSteeringAngle(self)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(MAN_10t_Vehicle self, std::vector< double,std::allocator< double > > const & omega)"""
        return _vehicle.MAN_10t_Vehicle_SetInitWheelAngVel(self, omega)

    def GetSpringForce(self, axle, side):
        r"""GetSpringForce(MAN_10t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_10t_Vehicle_GetSpringForce(self, axle, side)

    def GetSpringLength(self, axle, side):
        r"""GetSpringLength(MAN_10t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_10t_Vehicle_GetSpringLength(self, axle, side)

    def GetSpringDeformation(self, axle, side):
        r"""GetSpringDeformation(MAN_10t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_10t_Vehicle_GetSpringDeformation(self, axle, side)

    def GetShockForce(self, axle, side):
        r"""GetShockForce(MAN_10t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_10t_Vehicle_GetShockForce(self, axle, side)

    def GetShockLength(self, axle, side):
        r"""GetShockLength(MAN_10t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_10t_Vehicle_GetShockLength(self, axle, side)

    def GetShockVelocity(self, axle, side):
        r"""GetShockVelocity(MAN_10t_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.MAN_10t_Vehicle_GetShockVelocity(self, axle, side)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(MAN_10t_Vehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.MAN_10t_Vehicle_Initialize(self, chassisPos, chassisFwdVel)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(MAN_10t_Vehicle self)"""
        return _vehicle.MAN_10t_Vehicle_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(MAN_10t_Vehicle self, int what)"""
        return _vehicle.MAN_10t_Vehicle_DebugLog(self, what)

# Register MAN_10t_Vehicle in _vehicle:
_vehicle.MAN_10t_Vehicle_swigregister(MAN_10t_Vehicle)

class UAZBUS(object):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(UAZBUS self) -> UAZBUS
        __init__(UAZBUS self, ChSystem system) -> UAZBUS
        """
        _vehicle.UAZBUS_swiginit(self, _vehicle.new_UAZBUS(*args))
    __swig_destroy__ = _vehicle.delete_UAZBUS

    def SetContactMethod(self, val):
        r"""SetContactMethod(UAZBUS self, chrono::ChMaterialSurface::ContactMethod val)"""
        return _vehicle.UAZBUS_SetContactMethod(self, val)

    def SetChassisFixed(self, val):
        r"""SetChassisFixed(UAZBUS self, bool val)"""
        return _vehicle.UAZBUS_SetChassisFixed(self, val)

    def SetChassisCollisionType(self, val):
        r"""SetChassisCollisionType(UAZBUS self, chrono::vehicle::ChassisCollisionType val)"""
        return _vehicle.UAZBUS_SetChassisCollisionType(self, val)

    def SetTireType(self, val):
        r"""SetTireType(UAZBUS self, chrono::vehicle::TireModelType val)"""
        return _vehicle.UAZBUS_SetTireType(self, val)

    def SetInitPosition(self, pos):
        r"""SetInitPosition(UAZBUS self, ChCoordsysD pos)"""
        return _vehicle.UAZBUS_SetInitPosition(self, pos)

    def SetInitFwdVel(self, fwdVel):
        r"""SetInitFwdVel(UAZBUS self, double fwdVel)"""
        return _vehicle.UAZBUS_SetInitFwdVel(self, fwdVel)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(UAZBUS self, std::vector< double,std::allocator< double > > const & omega)"""
        return _vehicle.UAZBUS_SetInitWheelAngVel(self, omega)

    def SetTireStepSize(self, step_size):
        r"""SetTireStepSize(UAZBUS self, double step_size)"""
        return _vehicle.UAZBUS_SetTireStepSize(self, step_size)

    def GetSystem(self):
        r"""GetSystem(UAZBUS self) -> ChSystem"""
        return _vehicle.UAZBUS_GetSystem(self)

    def GetVehicle(self):
        r"""GetVehicle(UAZBUS self) -> ChWheeledVehicle"""
        return _vehicle.UAZBUS_GetVehicle(self)

    def GetChassis(self):
        r"""GetChassis(UAZBUS self) -> std::shared_ptr< chrono::vehicle::ChChassis >"""
        return _vehicle.UAZBUS_GetChassis(self)

    def GetChassisBody(self):
        r"""GetChassisBody(UAZBUS self) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _vehicle.UAZBUS_GetChassisBody(self)

    def GetPowertrain(self):
        r"""GetPowertrain(UAZBUS self) -> std::shared_ptr< chrono::vehicle::ChPowertrain >"""
        return _vehicle.UAZBUS_GetPowertrain(self)

    def GetTotalMass(self):
        r"""GetTotalMass(UAZBUS self) -> double"""
        return _vehicle.UAZBUS_GetTotalMass(self)

    def Initialize(self):
        r"""Initialize(UAZBUS self)"""
        return _vehicle.UAZBUS_Initialize(self)

    def LockAxleDifferential(self, axle, lock):
        r"""LockAxleDifferential(UAZBUS self, int axle, bool lock)"""
        return _vehicle.UAZBUS_LockAxleDifferential(self, axle, lock)

    def LockCentralDifferential(self, which, lock):
        r"""LockCentralDifferential(UAZBUS self, int which, bool lock)"""
        return _vehicle.UAZBUS_LockCentralDifferential(self, which, lock)

    def SetAerodynamicDrag(self, Cd, area, air_density):
        r"""SetAerodynamicDrag(UAZBUS self, double Cd, double area, double air_density)"""
        return _vehicle.UAZBUS_SetAerodynamicDrag(self, Cd, area, air_density)

    def SetChassisVisualizationType(self, vis):
        r"""SetChassisVisualizationType(UAZBUS self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.UAZBUS_SetChassisVisualizationType(self, vis)

    def SetSuspensionVisualizationType(self, vis):
        r"""SetSuspensionVisualizationType(UAZBUS self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.UAZBUS_SetSuspensionVisualizationType(self, vis)

    def SetSteeringVisualizationType(self, vis):
        r"""SetSteeringVisualizationType(UAZBUS self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.UAZBUS_SetSteeringVisualizationType(self, vis)

    def SetWheelVisualizationType(self, vis):
        r"""SetWheelVisualizationType(UAZBUS self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.UAZBUS_SetWheelVisualizationType(self, vis)

    def SetTireVisualizationType(self, vis):
        r"""SetTireVisualizationType(UAZBUS self, chrono::vehicle::VisualizationType vis)"""
        return _vehicle.UAZBUS_SetTireVisualizationType(self, vis)

    def Synchronize(self, time, driver_inputs, terrain):
        r"""Synchronize(UAZBUS self, double time, Inputs driver_inputs, ChTerrain terrain)"""
        return _vehicle.UAZBUS_Synchronize(self, time, driver_inputs, terrain)

    def Advance(self, step):
        r"""Advance(UAZBUS self, double step)"""
        return _vehicle.UAZBUS_Advance(self, step)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(UAZBUS self)"""
        return _vehicle.UAZBUS_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(UAZBUS self, int what)"""
        return _vehicle.UAZBUS_DebugLog(self, what)

# Register UAZBUS in _vehicle:
_vehicle.UAZBUS_swigregister(UAZBUS)

class UAZBUS_Vehicle(ChWheeledVehicle):
    r"""Proxy of C++ chrono::vehicle::uaz::UAZBUS_Vehicle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(UAZBUS_Vehicle self, bool const fixed=False, chrono::vehicle::SteeringType steering_model=PITMAN_ARM, chrono::ChMaterialSurface::ContactMethod contact_method=NSC, chrono::vehicle::ChassisCollisionType chassis_collision_type=NONE) -> UAZBUS_Vehicle
        __init__(UAZBUS_Vehicle self, ChSystem system, bool const fixed=False, chrono::vehicle::SteeringType steering_model=PITMAN_ARM, chrono::vehicle::ChassisCollisionType chassis_collision_type=NONE) -> UAZBUS_Vehicle
        """
        _vehicle.UAZBUS_Vehicle_swiginit(self, _vehicle.new_UAZBUS_Vehicle(*args))
    __swig_destroy__ = _vehicle.delete_UAZBUS_Vehicle

    def GetNumberAxles(self):
        r"""GetNumberAxles(UAZBUS_Vehicle self) -> int"""
        return _vehicle.UAZBUS_Vehicle_GetNumberAxles(self)

    def GetWheelbase(self):
        r"""GetWheelbase(UAZBUS_Vehicle self) -> double"""
        return _vehicle.UAZBUS_Vehicle_GetWheelbase(self)

    def GetMinTurningRadius(self):
        r"""GetMinTurningRadius(UAZBUS_Vehicle self) -> double"""
        return _vehicle.UAZBUS_Vehicle_GetMinTurningRadius(self)

    def GetMaxSteeringAngle(self):
        r"""GetMaxSteeringAngle(UAZBUS_Vehicle self) -> double"""
        return _vehicle.UAZBUS_Vehicle_GetMaxSteeringAngle(self)

    def SetInitWheelAngVel(self, omega):
        r"""SetInitWheelAngVel(UAZBUS_Vehicle self, std::vector< double,std::allocator< double > > const & omega)"""
        return _vehicle.UAZBUS_Vehicle_SetInitWheelAngVel(self, omega)

    def GetSpringForce(self, axle, side):
        r"""GetSpringForce(UAZBUS_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.UAZBUS_Vehicle_GetSpringForce(self, axle, side)

    def GetSpringLength(self, axle, side):
        r"""GetSpringLength(UAZBUS_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.UAZBUS_Vehicle_GetSpringLength(self, axle, side)

    def GetSpringDeformation(self, axle, side):
        r"""GetSpringDeformation(UAZBUS_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.UAZBUS_Vehicle_GetSpringDeformation(self, axle, side)

    def GetShockForce(self, axle, side):
        r"""GetShockForce(UAZBUS_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.UAZBUS_Vehicle_GetShockForce(self, axle, side)

    def GetShockLength(self, axle, side):
        r"""GetShockLength(UAZBUS_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.UAZBUS_Vehicle_GetShockLength(self, axle, side)

    def GetShockVelocity(self, axle, side):
        r"""GetShockVelocity(UAZBUS_Vehicle self, int axle, chrono::vehicle::VehicleSide side) -> double"""
        return _vehicle.UAZBUS_Vehicle_GetShockVelocity(self, axle, side)

    def Initialize(self, chassisPos, chassisFwdVel=0):
        r"""Initialize(UAZBUS_Vehicle self, ChCoordsysD chassisPos, double chassisFwdVel=0)"""
        return _vehicle.UAZBUS_Vehicle_Initialize(self, chassisPos, chassisFwdVel)

    def LogHardpointLocations(self):
        r"""LogHardpointLocations(UAZBUS_Vehicle self)"""
        return _vehicle.UAZBUS_Vehicle_LogHardpointLocations(self)

    def DebugLog(self, what):
        r"""DebugLog(UAZBUS_Vehicle self, int what)"""
        return _vehicle.UAZBUS_Vehicle_DebugLog(self, what)

# Register UAZBUS_Vehicle in _vehicle:
_vehicle.UAZBUS_Vehicle_swigregister(UAZBUS_Vehicle)



