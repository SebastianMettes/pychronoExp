# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _core
else:
    import _core

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _core.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _core.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _core.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _core.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _core.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _core.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _core.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _core.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _core.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _core.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _core.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _core.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _core.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _core.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _core.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _core.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _core.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _core:
_core.SwigPyIterator_swigregister(SwigPyIterator)

class int_ptr(object):
    r"""Proxy of C++ int_ptr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(int_ptr self) -> int_ptr"""
        _core.int_ptr_swiginit(self, _core.new_int_ptr())
    __swig_destroy__ = _core.delete_int_ptr

    def assign(self, value):
        r"""assign(int_ptr self, int value)"""
        return _core.int_ptr_assign(self, value)

    def value(self):
        r"""value(int_ptr self) -> int"""
        return _core.int_ptr_value(self)

    def cast(self):
        r"""cast(int_ptr self) -> int *"""
        return _core.int_ptr_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(int * t) -> int_ptr"""
        return _core.int_ptr_frompointer(t)

# Register int_ptr in _core:
_core.int_ptr_swigregister(int_ptr)

def int_ptr_frompointer(t):
    r"""int_ptr_frompointer(int * t) -> int_ptr"""
    return _core.int_ptr_frompointer(t)

class double_ptr(object):
    r"""Proxy of C++ double_ptr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(double_ptr self) -> double_ptr"""
        _core.double_ptr_swiginit(self, _core.new_double_ptr())
    __swig_destroy__ = _core.delete_double_ptr

    def assign(self, value):
        r"""assign(double_ptr self, double value)"""
        return _core.double_ptr_assign(self, value)

    def value(self):
        r"""value(double_ptr self) -> double"""
        return _core.double_ptr_value(self)

    def cast(self):
        r"""cast(double_ptr self) -> double *"""
        return _core.double_ptr_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(double * t) -> double_ptr"""
        return _core.double_ptr_frompointer(t)

# Register double_ptr in _core:
_core.double_ptr_swigregister(double_ptr)

def double_ptr_frompointer(t):
    r"""double_ptr_frompointer(double * t) -> double_ptr"""
    return _core.double_ptr_frompointer(t)

class float_ptr(object):
    r"""Proxy of C++ float_ptr class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(float_ptr self) -> float_ptr"""
        _core.float_ptr_swiginit(self, _core.new_float_ptr())
    __swig_destroy__ = _core.delete_float_ptr

    def assign(self, value):
        r"""assign(float_ptr self, float value)"""
        return _core.float_ptr_assign(self, value)

    def value(self):
        r"""value(float_ptr self) -> float"""
        return _core.float_ptr_value(self)

    def cast(self):
        r"""cast(float_ptr self) -> float *"""
        return _core.float_ptr_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(float * t) -> float_ptr"""
        return _core.float_ptr_frompointer(t)

# Register float_ptr in _core:
_core.float_ptr_swigregister(float_ptr)

def float_ptr_frompointer(t):
    r"""float_ptr_frompointer(float * t) -> float_ptr"""
    return _core.float_ptr_frompointer(t)

class ChException(object):
    r"""Proxy of C++ chrono::ChException class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChException self, std::string swhat) -> ChException
        __init__(ChException self, ChException right) -> ChException
        """
        _core.ChException_swiginit(self, _core.new_ChException(*args))
    __swig_destroy__ = _core.delete_ChException

    def what(self):
        r"""what(ChException self) -> char const *"""
        return _core.ChException_what(self)

# Register ChException in _core:
_core.ChException_swigregister(ChException)

class ChClassFactory(object):
    r"""Proxy of C++ chrono::ChClassFactory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChClassFactory self) -> ChClassFactory"""
        _core.ChClassFactory_swiginit(self, _core.new_ChClassFactory())
    __swig_destroy__ = _core.delete_ChClassFactory

    @staticmethod
    def ClassRegister(keyName, mregistration):
        r"""ClassRegister(std::string const & keyName, chrono::ChClassRegistrationBase * mregistration)"""
        return _core.ChClassFactory_ClassRegister(keyName, mregistration)

    @staticmethod
    def ClassUnregister(keyName):
        r"""ClassUnregister(std::string const & keyName)"""
        return _core.ChClassFactory_ClassUnregister(keyName)

    @staticmethod
    def IsClassRegistered(keyName):
        r"""IsClassRegistered(std::string const & keyName) -> bool"""
        return _core.ChClassFactory_IsClassRegistered(keyName)

    @staticmethod
    def GetClassTagName(mtype):
        r"""GetClassTagName(std::type_info const & mtype) -> std::string &"""
        return _core.ChClassFactory_GetClassTagName(mtype)

# Register ChClassFactory in _core:
_core.ChClassFactory_swigregister(ChClassFactory)

def ChClassFactory_ClassRegister(keyName, mregistration):
    r"""ChClassFactory_ClassRegister(std::string const & keyName, chrono::ChClassRegistrationBase * mregistration)"""
    return _core.ChClassFactory_ClassRegister(keyName, mregistration)

def ChClassFactory_ClassUnregister(keyName):
    r"""ChClassFactory_ClassUnregister(std::string const & keyName)"""
    return _core.ChClassFactory_ClassUnregister(keyName)

def ChClassFactory_IsClassRegistered(keyName):
    r"""ChClassFactory_IsClassRegistered(std::string const & keyName) -> bool"""
    return _core.ChClassFactory_IsClassRegistered(keyName)

def ChClassFactory_GetClassTagName(mtype):
    r"""ChClassFactory_GetClassTagName(std::type_info const & mtype) -> std::string &"""
    return _core.ChClassFactory_GetClassTagName(mtype)


def SetFirstIntID(val):
    r"""SetFirstIntID(int val)"""
    return _core.SetFirstIntID(val)

def GetUniqueIntID():
    r"""GetUniqueIntID() -> int"""
    return _core.GetUniqueIntID()

def SetChronoDataPath(path):
    r"""SetChronoDataPath(std::string const & path)"""
    return _core.SetChronoDataPath(path)

def GetChronoDataPath():
    r"""GetChronoDataPath() -> std::string const &"""
    return _core.GetChronoDataPath()

def GetChronoDataFile(filename):
    r"""GetChronoDataFile(std::string const & filename) -> std::string"""
    return _core.GetChronoDataFile(filename)

def SetChronoOutputPath(path):
    r"""SetChronoOutputPath(std::string const & path)"""
    return _core.SetChronoOutputPath(path)

def GetChronoOutputPath():
    r"""GetChronoOutputPath() -> std::string const &"""
    return _core.GetChronoOutputPath()
class ChMatrixDynamicD(object):
    r"""Proxy of C++ chrono::ChMatrixDynamic< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChMatrixDynamicD self) -> ChMatrixDynamicD
        __init__(ChMatrixDynamicD self, int r, int c) -> ChMatrixDynamicD
        """
        _core.ChMatrixDynamicD_swiginit(self, _core.new_ChMatrixDynamicD(*args))

    def getitem(self, i, j):
        r"""getitem(ChMatrixDynamicD self, int i, int j) -> double"""
        return _core.ChMatrixDynamicD_getitem(self, i, j)

    def setitem(self, i, j, v):
        r"""setitem(ChMatrixDynamicD self, int i, int j, double v)"""
        return _core.ChMatrixDynamicD_setitem(self, i, j, v)

    def GetRows(self):
        r"""GetRows(ChMatrixDynamicD self) -> int const"""
        return _core.ChMatrixDynamicD_GetRows(self)

    def GetColumns(self):
        r"""GetColumns(ChMatrixDynamicD self) -> int const"""
        return _core.ChMatrixDynamicD_GetColumns(self)

    def GetMatrixData(self, p):
        r"""GetMatrixData(ChMatrixDynamicD self, double * p)"""
        return _core.ChMatrixDynamicD_GetMatrixData(self, p)

    def SetMatr(self, mat):
        r"""SetMatr(ChMatrixDynamicD self, double * mat)"""
        return _core.ChMatrixDynamicD_SetMatr(self, mat)
    __swig_destroy__ = _core.delete_ChMatrixDynamicD

# Register ChMatrixDynamicD in _core:
_core.ChMatrixDynamicD_swigregister(ChMatrixDynamicD)

class ChVectorDynamicD(object):
    r"""Proxy of C++ chrono::ChVectorDynamic< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChVectorDynamicD self) -> ChVectorDynamicD
        __init__(ChVectorDynamicD self, int r) -> ChVectorDynamicD
        """
        _core.ChVectorDynamicD_swiginit(self, _core.new_ChVectorDynamicD(*args))

    def __getitem__(self, i):
        r"""__getitem__(ChVectorDynamicD self, int i) -> double"""
        return _core.ChVectorDynamicD___getitem__(self, i)

    def __setitem__(self, i, v):
        r"""__setitem__(ChVectorDynamicD self, int i, double v)"""
        return _core.ChVectorDynamicD___setitem__(self, i, v)

    def Size(self):
        r"""Size(ChVectorDynamicD self) -> int const"""
        return _core.ChVectorDynamicD_Size(self)

    def GetVectorData(self, p):
        r"""GetVectorData(ChVectorDynamicD self, double * p)"""
        return _core.ChVectorDynamicD_GetVectorData(self, p)

    def SetVect(self, numel):
        r"""SetVect(ChVectorDynamicD self, int numel)"""
        return _core.ChVectorDynamicD_SetVect(self, numel)
    __swig_destroy__ = _core.delete_ChVectorDynamicD

# Register ChVectorDynamicD in _core:
_core.ChVectorDynamicD_swigregister(ChVectorDynamicD)



def reshape(seq, rows, cols):
    return [list(u) for u in zip(*[iter(seq)] * cols)]

def GetMatr(self):
    cls = self.GetColumns()
    rws = self.GetRows()
    len = cls*rws
    lst = self.GetMatrixData(len)
    rs_list = reshape(lst, rws, cls)
    return rs_list

setattr(ChMatrixDynamicD, "GetMatr", GetMatr)

def GetVect(self):
    len = self.Size()
    lst = self.GetVectorData(len)
    rs_list = reshape(lst, len, 1)
    return rs_list

setattr(ChVectorDynamicD, "GetVect", GetVect)

def __matr_setitem(self,index,vals):
    row = index[0];
    col = index[1];
    if row>=self.GetRows() or row <0:
        raise NameError('Bad row. Setting value at [{0},{1}] in a {2}x{3} matrix'.format(row,col,self.GetRows(),self.GetColumns()))
    if col>=self.GetColumns() or col <0:
        raise NameError('Bad column. Setting value at [{0},{1}] in a {2}x{3} matrix'.format(row,col,self.GetRows(),self.GetColumns()))
    self.setitem(index[0],index[1],vals)

def __matr_getitem(self,index):
    row = index[0];
    col = index[1];
    if row>=self.GetRows() or row <0:
        raise NameError('Bad row. Getting value at [{0},{1}] in a {2}x{3} matrix'.format(row,col,self.GetRows(),self.GetColumns()))
    if col>=self.GetColumns() or col <0:
        raise NameError('Bad column. Getting value at [{0},{1}] in a {2}x{3} matrix'.format(row,col,self.GetRows(),self.GetColumns()))
    return self.getitem(index[0],index[1])

setattr(ChMatrixDynamicD, "__getitem__", __matr_getitem)
setattr(ChMatrixDynamicD, "__setitem__", __matr_setitem)


class ChMatrix_dense_version_tag(object):
    r"""Proxy of C++ chrono::ChMatrix_dense_version_tag class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChMatrix_dense_version_tag self) -> ChMatrix_dense_version_tag"""
        _core.ChMatrix_dense_version_tag_swiginit(self, _core.new_ChMatrix_dense_version_tag())
    __swig_destroy__ = _core.delete_ChMatrix_dense_version_tag

# Register ChMatrix_dense_version_tag in _core:
_core.ChMatrix_dense_version_tag_swigregister(ChMatrix_dense_version_tag)

EIGEN_MATRIXBASE_PLUGIN = _core.EIGEN_MATRIXBASE_PLUGIN

EIGEN_SPARSEMATRIX_PLUGIN = _core.EIGEN_SPARSEMATRIX_PLUGIN


def StreamOUTdenseMatlabFormat(A, stream):
    r"""StreamOUTdenseMatlabFormat(chrono::ChMatrixConstRef A, ChStreamOutAscii & stream)"""
    return _core.StreamOUTdenseMatlabFormat(A, stream)

def PasteMatrix(matrTo, matrFrom, insrow, inscol, overwrite=True):
    r"""PasteMatrix(chrono::ChSparseMatrix & matrTo, chrono::ChMatrixConstRef matrFrom, int insrow, int inscol, bool overwrite=True)"""
    return _core.PasteMatrix(matrTo, matrFrom, insrow, inscol, overwrite)

def StreamOUTsparseMatlabFormat(matr, mstream):
    r"""StreamOUTsparseMatlabFormat(chrono::ChSparseMatrix & matr, ChStreamOutAscii & mstream)"""
    return _core.StreamOUTsparseMatlabFormat(matr, mstream)

def StreamOUT(matr, stream):
    r"""StreamOUT(chrono::ChSparseMatrix & matr, ChStreamOutAscii & stream)"""
    return _core.StreamOUT(matr, stream)
class ChVectorD(object):
    r"""Proxy of C++ chrono::ChVector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChVectorD self) -> ChVectorD
        __init__(ChVectorD self, double x, double y, double z) -> ChVectorD
        __init__(ChVectorD self, double a) -> ChVectorD
        __init__(ChVectorD self, ChVectorD other) -> ChVectorD
        """
        _core.ChVectorD_swiginit(self, _core.new_ChVectorD(*args))

    def Set(self, *args):
        r"""
        Set(ChVectorD self, double x, double y, double z)
        Set(ChVectorD self, ChVectorD v)
        Set(ChVectorD self, double s)
        """
        return _core.ChVectorD_Set(self, *args)

    def SetNull(self):
        r"""SetNull(ChVectorD self)"""
        return _core.ChVectorD_SetNull(self)

    def IsNull(self):
        r"""IsNull(ChVectorD self) -> bool"""
        return _core.ChVectorD_IsNull(self)

    def Equals(self, *args):
        r"""
        Equals(ChVectorD self, ChVectorD other) -> bool
        Equals(ChVectorD self, ChVectorD other, double tol) -> bool
        """
        return _core.ChVectorD_Equals(self, *args)

    def Length(self):
        r"""Length(ChVectorD self) -> double"""
        return _core.ChVectorD_Length(self)

    def Length2(self):
        r"""Length2(ChVectorD self) -> double"""
        return _core.ChVectorD_Length2(self)

    def LengthInf(self):
        r"""LengthInf(ChVectorD self) -> double"""
        return _core.ChVectorD_LengthInf(self)

    def __pos__(self):
        r"""__pos__(ChVectorD self) -> ChVectorD"""
        return _core.ChVectorD___pos__(self)

    def __neg__(self):
        r"""__neg__(ChVectorD self) -> ChVectorD"""
        return _core.ChVectorD___neg__(self)

    def __add__(self, other):
        r"""__add__(ChVectorD self, ChVectorD other) -> ChVectorD"""
        return _core.ChVectorD___add__(self, other)

    def __iadd__(self, other):
        r"""__iadd__(ChVectorD self, ChVectorD other) -> ChVectorD"""
        return _core.ChVectorD___iadd__(self, other)

    def __sub__(self, other):
        r"""__sub__(ChVectorD self, ChVectorD other) -> ChVectorD"""
        return _core.ChVectorD___sub__(self, other)

    def __isub__(self, other):
        r"""__isub__(ChVectorD self, ChVectorD other) -> ChVectorD"""
        return _core.ChVectorD___isub__(self, other)

    def __mul__(self, *args):
        r"""
        __mul__(ChVectorD self, ChVectorD other) -> ChVectorD
        __mul__(ChVectorD self, double s) -> ChVectorD
        """
        return _core.ChVectorD___mul__(self, *args)

    def __imul__(self, *args):
        r"""
        __imul__(ChVectorD self, ChVectorD other) -> ChVectorD
        __imul__(ChVectorD self, double s) -> ChVectorD
        """
        return _core.ChVectorD___imul__(self, *args)

    def __truediv__(self, *args):
        return _core.ChVectorD___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _core.ChVectorD___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __xor__(self, other):
        r"""__xor__(ChVectorD self, ChVectorD other) -> double"""
        return _core.ChVectorD___xor__(self, other)

    def __mod__(self, other):
        r"""__mod__(ChVectorD self, ChVectorD other) -> ChVectorD"""
        return _core.ChVectorD___mod__(self, other)

    def __imod__(self, other):
        r"""__imod__(ChVectorD self, ChVectorD other) -> ChVectorD"""
        return _core.ChVectorD___imod__(self, other)

    def __le__(self, other):
        r"""__le__(ChVectorD self, ChVectorD other) -> bool"""
        return _core.ChVectorD___le__(self, other)

    def __ge__(self, other):
        r"""__ge__(ChVectorD self, ChVectorD other) -> bool"""
        return _core.ChVectorD___ge__(self, other)

    def __lt__(self, other):
        r"""__lt__(ChVectorD self, ChVectorD other) -> bool"""
        return _core.ChVectorD___lt__(self, other)

    def __gt__(self, other):
        r"""__gt__(ChVectorD self, ChVectorD other) -> bool"""
        return _core.ChVectorD___gt__(self, other)

    def __eq__(self, other):
        r"""__eq__(ChVectorD self, ChVectorD other) -> bool"""
        return _core.ChVectorD___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(ChVectorD self, ChVectorD other) -> bool"""
        return _core.ChVectorD___ne__(self, other)

    def Add(self, A, B):
        r"""Add(ChVectorD self, ChVectorD A, ChVectorD B)"""
        return _core.ChVectorD_Add(self, A, B)

    def Sub(self, A, B):
        r"""Sub(ChVectorD self, ChVectorD A, ChVectorD B)"""
        return _core.ChVectorD_Sub(self, A, B)

    def Mul(self, A, s):
        r"""Mul(ChVectorD self, ChVectorD A, double s)"""
        return _core.ChVectorD_Mul(self, A, s)

    def Scale(self, s):
        r"""Scale(ChVectorD self, double s)"""
        return _core.ChVectorD_Scale(self, s)

    def Cross(self, *args):
        r"""
        Cross(ChVectorD self, ChVectorD A, ChVectorD B)
        Cross(ChVectorD self, ChVectorD other) -> ChVectorD
        """
        return _core.ChVectorD_Cross(self, *args)

    def Dot(self, B):
        r"""Dot(ChVectorD self, ChVectorD B) -> double"""
        return _core.ChVectorD_Dot(self, B)

    def Normalize(self):
        r"""Normalize(ChVectorD self) -> bool"""
        return _core.ChVectorD_Normalize(self)

    def GetNormalized(self):
        r"""GetNormalized(ChVectorD self) -> ChVectorD"""
        return _core.ChVectorD_GetNormalized(self)

    def SetLength(self, s):
        r"""SetLength(ChVectorD self, double s)"""
        return _core.ChVectorD_SetLength(self, s)

    def DirToDxDyDz(self, *args):
        r"""DirToDxDyDz(ChVectorD self, ChVectorD Vx, ChVectorD Vy, ChVectorD Vz, ChVectorD Vsingular=chrono::ChVector< double >::ChVector< double >(0, 1, 0))"""
        return _core.ChVectorD_DirToDxDyDz(self, *args)

    def GetMaxComponent(self):
        r"""GetMaxComponent(ChVectorD self) -> int"""
        return _core.ChVectorD_GetMaxComponent(self)

    def GetOrthogonalVector(self):
        r"""GetOrthogonalVector(ChVectorD self) -> ChVectorD"""
        return _core.ChVectorD_GetOrthogonalVector(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChVectorD self, ChArchiveOut & marchive)"""
        return _core.ChVectorD_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChVectorD self, chrono::ChArchiveIn & marchive)"""
        return _core.ChVectorD_ArchiveIN(self, marchive)
    x = property(_core.ChVectorD_x_get, _core.ChVectorD_x_set, doc=r"""x : double""")
    y = property(_core.ChVectorD_y_get, _core.ChVectorD_y_set, doc=r"""y : double""")
    z = property(_core.ChVectorD_z_get, _core.ChVectorD_z_set, doc=r"""z : double""")

    def __str__(self):
        r"""__str__(ChVectorD self) -> char *"""
        return _core.ChVectorD___str__(self)

    def __rshift__(self, mframe):
        r"""__rshift__(ChVectorD self, ChFrameD mframe) -> ChVectorD"""
        return _core.ChVectorD___rshift__(self, mframe)
    __swig_destroy__ = _core.delete_ChVectorD

# Register ChVectorD in _core:
_core.ChVectorD_swigregister(ChVectorD)
cvar = _core.cvar
VNULL = cvar.VNULL
VECT_X = cvar.VECT_X
VECT_Y = cvar.VECT_Y
VECT_Z = cvar.VECT_Z

class ChVectorF(object):
    r"""Proxy of C++ chrono::ChVector< float > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChVectorF self) -> ChVectorF
        __init__(ChVectorF self, float x, float y, float z) -> ChVectorF
        __init__(ChVectorF self, float a) -> ChVectorF
        __init__(ChVectorF self, ChVectorF other) -> ChVectorF
        """
        _core.ChVectorF_swiginit(self, _core.new_ChVectorF(*args))

    def Set(self, *args):
        r"""
        Set(ChVectorF self, float x, float y, float z)
        Set(ChVectorF self, ChVectorF v)
        Set(ChVectorF self, float s)
        """
        return _core.ChVectorF_Set(self, *args)

    def SetNull(self):
        r"""SetNull(ChVectorF self)"""
        return _core.ChVectorF_SetNull(self)

    def IsNull(self):
        r"""IsNull(ChVectorF self) -> bool"""
        return _core.ChVectorF_IsNull(self)

    def Equals(self, *args):
        r"""
        Equals(ChVectorF self, ChVectorF other) -> bool
        Equals(ChVectorF self, ChVectorF other, float tol) -> bool
        """
        return _core.ChVectorF_Equals(self, *args)

    def Length(self):
        r"""Length(ChVectorF self) -> float"""
        return _core.ChVectorF_Length(self)

    def Length2(self):
        r"""Length2(ChVectorF self) -> float"""
        return _core.ChVectorF_Length2(self)

    def LengthInf(self):
        r"""LengthInf(ChVectorF self) -> float"""
        return _core.ChVectorF_LengthInf(self)

    def __pos__(self):
        r"""__pos__(ChVectorF self) -> ChVectorF"""
        return _core.ChVectorF___pos__(self)

    def __neg__(self):
        r"""__neg__(ChVectorF self) -> ChVectorF"""
        return _core.ChVectorF___neg__(self)

    def __add__(self, other):
        r"""__add__(ChVectorF self, ChVectorF other) -> ChVectorF"""
        return _core.ChVectorF___add__(self, other)

    def __iadd__(self, other):
        r"""__iadd__(ChVectorF self, ChVectorF other) -> ChVectorF"""
        return _core.ChVectorF___iadd__(self, other)

    def __sub__(self, other):
        r"""__sub__(ChVectorF self, ChVectorF other) -> ChVectorF"""
        return _core.ChVectorF___sub__(self, other)

    def __isub__(self, other):
        r"""__isub__(ChVectorF self, ChVectorF other) -> ChVectorF"""
        return _core.ChVectorF___isub__(self, other)

    def __mul__(self, *args):
        r"""
        __mul__(ChVectorF self, ChVectorF other) -> ChVectorF
        __mul__(ChVectorF self, float s) -> ChVectorF
        """
        return _core.ChVectorF___mul__(self, *args)

    def __imul__(self, *args):
        r"""
        __imul__(ChVectorF self, ChVectorF other) -> ChVectorF
        __imul__(ChVectorF self, float s) -> ChVectorF
        """
        return _core.ChVectorF___imul__(self, *args)

    def __truediv__(self, *args):
        return _core.ChVectorF___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _core.ChVectorF___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __xor__(self, other):
        r"""__xor__(ChVectorF self, ChVectorF other) -> float"""
        return _core.ChVectorF___xor__(self, other)

    def __mod__(self, other):
        r"""__mod__(ChVectorF self, ChVectorF other) -> ChVectorF"""
        return _core.ChVectorF___mod__(self, other)

    def __imod__(self, other):
        r"""__imod__(ChVectorF self, ChVectorF other) -> ChVectorF"""
        return _core.ChVectorF___imod__(self, other)

    def __le__(self, other):
        r"""__le__(ChVectorF self, ChVectorF other) -> bool"""
        return _core.ChVectorF___le__(self, other)

    def __ge__(self, other):
        r"""__ge__(ChVectorF self, ChVectorF other) -> bool"""
        return _core.ChVectorF___ge__(self, other)

    def __lt__(self, other):
        r"""__lt__(ChVectorF self, ChVectorF other) -> bool"""
        return _core.ChVectorF___lt__(self, other)

    def __gt__(self, other):
        r"""__gt__(ChVectorF self, ChVectorF other) -> bool"""
        return _core.ChVectorF___gt__(self, other)

    def __eq__(self, other):
        r"""__eq__(ChVectorF self, ChVectorF other) -> bool"""
        return _core.ChVectorF___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(ChVectorF self, ChVectorF other) -> bool"""
        return _core.ChVectorF___ne__(self, other)

    def Add(self, A, B):
        r"""Add(ChVectorF self, ChVectorF A, ChVectorF B)"""
        return _core.ChVectorF_Add(self, A, B)

    def Sub(self, A, B):
        r"""Sub(ChVectorF self, ChVectorF A, ChVectorF B)"""
        return _core.ChVectorF_Sub(self, A, B)

    def Mul(self, A, s):
        r"""Mul(ChVectorF self, ChVectorF A, float s)"""
        return _core.ChVectorF_Mul(self, A, s)

    def Scale(self, s):
        r"""Scale(ChVectorF self, float s)"""
        return _core.ChVectorF_Scale(self, s)

    def Cross(self, *args):
        r"""
        Cross(ChVectorF self, ChVectorF A, ChVectorF B)
        Cross(ChVectorF self, ChVectorF other) -> ChVectorF
        """
        return _core.ChVectorF_Cross(self, *args)

    def Dot(self, B):
        r"""Dot(ChVectorF self, ChVectorF B) -> float"""
        return _core.ChVectorF_Dot(self, B)

    def Normalize(self):
        r"""Normalize(ChVectorF self) -> bool"""
        return _core.ChVectorF_Normalize(self)

    def GetNormalized(self):
        r"""GetNormalized(ChVectorF self) -> ChVectorF"""
        return _core.ChVectorF_GetNormalized(self)

    def SetLength(self, s):
        r"""SetLength(ChVectorF self, float s)"""
        return _core.ChVectorF_SetLength(self, s)

    def DirToDxDyDz(self, *args):
        r"""DirToDxDyDz(ChVectorF self, ChVectorF Vx, ChVectorF Vy, ChVectorF Vz, ChVectorF Vsingular=chrono::ChVector< float >::ChVector< float >(0, 1, 0))"""
        return _core.ChVectorF_DirToDxDyDz(self, *args)

    def GetMaxComponent(self):
        r"""GetMaxComponent(ChVectorF self) -> int"""
        return _core.ChVectorF_GetMaxComponent(self)

    def GetOrthogonalVector(self):
        r"""GetOrthogonalVector(ChVectorF self) -> ChVectorF"""
        return _core.ChVectorF_GetOrthogonalVector(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChVectorF self, ChArchiveOut & marchive)"""
        return _core.ChVectorF_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChVectorF self, chrono::ChArchiveIn & marchive)"""
        return _core.ChVectorF_ArchiveIN(self, marchive)
    x = property(_core.ChVectorF_x_get, _core.ChVectorF_x_set, doc=r"""x : float""")
    y = property(_core.ChVectorF_y_get, _core.ChVectorF_y_set, doc=r"""y : float""")
    z = property(_core.ChVectorF_z_get, _core.ChVectorF_z_set, doc=r"""z : float""")
    __swig_destroy__ = _core.delete_ChVectorF

# Register ChVectorF in _core:
_core.ChVectorF_swigregister(ChVectorF)

class vector_ChVectorD(object):
    r"""Proxy of C++ std::vector< chrono::ChVector< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_ChVectorD self) -> SwigPyIterator"""
        return _core.vector_ChVectorD_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_ChVectorD self) -> bool"""
        return _core.vector_ChVectorD___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_ChVectorD self) -> bool"""
        return _core.vector_ChVectorD___bool__(self)

    def __len__(self):
        r"""__len__(vector_ChVectorD self) -> std::vector< chrono::ChVector< double > >::size_type"""
        return _core.vector_ChVectorD___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_ChVectorD self, std::vector< chrono::ChVector< double > >::difference_type i, std::vector< chrono::ChVector< double > >::difference_type j) -> vector_ChVectorD"""
        return _core.vector_ChVectorD___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_ChVectorD self, std::vector< chrono::ChVector< double > >::difference_type i, std::vector< chrono::ChVector< double > >::difference_type j)
        __setslice__(vector_ChVectorD self, std::vector< chrono::ChVector< double > >::difference_type i, std::vector< chrono::ChVector< double > >::difference_type j, vector_ChVectorD v)
        """
        return _core.vector_ChVectorD___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_ChVectorD self, std::vector< chrono::ChVector< double > >::difference_type i, std::vector< chrono::ChVector< double > >::difference_type j)"""
        return _core.vector_ChVectorD___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_ChVectorD self, std::vector< chrono::ChVector< double > >::difference_type i)
        __delitem__(vector_ChVectorD self, PySliceObject * slice)
        """
        return _core.vector_ChVectorD___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_ChVectorD self, PySliceObject * slice) -> vector_ChVectorD
        __getitem__(vector_ChVectorD self, std::vector< chrono::ChVector< double > >::difference_type i) -> ChVectorD
        """
        return _core.vector_ChVectorD___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_ChVectorD self, PySliceObject * slice, vector_ChVectorD v)
        __setitem__(vector_ChVectorD self, PySliceObject * slice)
        __setitem__(vector_ChVectorD self, std::vector< chrono::ChVector< double > >::difference_type i, ChVectorD x)
        """
        return _core.vector_ChVectorD___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_ChVectorD self) -> ChVectorD"""
        return _core.vector_ChVectorD_pop(self)

    def append(self, x):
        r"""append(vector_ChVectorD self, ChVectorD x)"""
        return _core.vector_ChVectorD_append(self, x)

    def empty(self):
        r"""empty(vector_ChVectorD self) -> bool"""
        return _core.vector_ChVectorD_empty(self)

    def size(self):
        r"""size(vector_ChVectorD self) -> std::vector< chrono::ChVector< double > >::size_type"""
        return _core.vector_ChVectorD_size(self)

    def swap(self, v):
        r"""swap(vector_ChVectorD self, vector_ChVectorD v)"""
        return _core.vector_ChVectorD_swap(self, v)

    def begin(self):
        r"""begin(vector_ChVectorD self) -> std::vector< chrono::ChVector< double > >::iterator"""
        return _core.vector_ChVectorD_begin(self)

    def end(self):
        r"""end(vector_ChVectorD self) -> std::vector< chrono::ChVector< double > >::iterator"""
        return _core.vector_ChVectorD_end(self)

    def rbegin(self):
        r"""rbegin(vector_ChVectorD self) -> std::vector< chrono::ChVector< double > >::reverse_iterator"""
        return _core.vector_ChVectorD_rbegin(self)

    def rend(self):
        r"""rend(vector_ChVectorD self) -> std::vector< chrono::ChVector< double > >::reverse_iterator"""
        return _core.vector_ChVectorD_rend(self)

    def clear(self):
        r"""clear(vector_ChVectorD self)"""
        return _core.vector_ChVectorD_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_ChVectorD self) -> std::vector< chrono::ChVector< double > >::allocator_type"""
        return _core.vector_ChVectorD_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_ChVectorD self)"""
        return _core.vector_ChVectorD_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_ChVectorD self, std::vector< chrono::ChVector< double > >::iterator pos) -> std::vector< chrono::ChVector< double > >::iterator
        erase(vector_ChVectorD self, std::vector< chrono::ChVector< double > >::iterator first, std::vector< chrono::ChVector< double > >::iterator last) -> std::vector< chrono::ChVector< double > >::iterator
        """
        return _core.vector_ChVectorD_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_ChVectorD self) -> vector_ChVectorD
        __init__(vector_ChVectorD self, vector_ChVectorD other) -> vector_ChVectorD
        __init__(vector_ChVectorD self, std::vector< chrono::ChVector< double > >::size_type size) -> vector_ChVectorD
        __init__(vector_ChVectorD self, std::vector< chrono::ChVector< double > >::size_type size, ChVectorD value) -> vector_ChVectorD
        """
        _core.vector_ChVectorD_swiginit(self, _core.new_vector_ChVectorD(*args))

    def push_back(self, x):
        r"""push_back(vector_ChVectorD self, ChVectorD x)"""
        return _core.vector_ChVectorD_push_back(self, x)

    def front(self):
        r"""front(vector_ChVectorD self) -> ChVectorD"""
        return _core.vector_ChVectorD_front(self)

    def back(self):
        r"""back(vector_ChVectorD self) -> ChVectorD"""
        return _core.vector_ChVectorD_back(self)

    def assign(self, n, x):
        r"""assign(vector_ChVectorD self, std::vector< chrono::ChVector< double > >::size_type n, ChVectorD x)"""
        return _core.vector_ChVectorD_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_ChVectorD self, std::vector< chrono::ChVector< double > >::size_type new_size)
        resize(vector_ChVectorD self, std::vector< chrono::ChVector< double > >::size_type new_size, ChVectorD x)
        """
        return _core.vector_ChVectorD_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_ChVectorD self, std::vector< chrono::ChVector< double > >::iterator pos, ChVectorD x) -> std::vector< chrono::ChVector< double > >::iterator
        insert(vector_ChVectorD self, std::vector< chrono::ChVector< double > >::iterator pos, std::vector< chrono::ChVector< double > >::size_type n, ChVectorD x)
        """
        return _core.vector_ChVectorD_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_ChVectorD self, std::vector< chrono::ChVector< double > >::size_type n)"""
        return _core.vector_ChVectorD_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_ChVectorD self) -> std::vector< chrono::ChVector< double > >::size_type"""
        return _core.vector_ChVectorD_capacity(self)
    __swig_destroy__ = _core.delete_vector_ChVectorD

# Register vector_ChVectorD in _core:
_core.vector_ChVectorD_swigregister(vector_ChVectorD)



VNULL  = ChVectorD(0,0,0)
VECT_X = ChVectorD(1,0,0)
VECT_Y = ChVectorD(0,1,0)
VECT_Z = ChVectorD(0,0,1)


AngleSet_ANGLE_AXIS = _core.AngleSet_ANGLE_AXIS

AngleSet_EULERO = _core.AngleSet_EULERO

AngleSet_CARDANO = _core.AngleSet_CARDANO

AngleSet_HPB = _core.AngleSet_HPB

AngleSet_RXYZ = _core.AngleSet_RXYZ

AngleSet_RODRIGUEZ = _core.AngleSet_RODRIGUEZ

AngleSet_QUATERNION = _core.AngleSet_QUATERNION


def Qlength(q):
    r"""Qlength(ChQuaternionD q) -> double"""
    return _core.Qlength(q)

def Qadd(qa, qb):
    r"""Qadd(ChQuaternionD qa, ChQuaternionD qb) -> ChQuaternionD"""
    return _core.Qadd(qa, qb)

def Qsub(qa, qb):
    r"""Qsub(ChQuaternionD qa, ChQuaternionD qb) -> ChQuaternionD"""
    return _core.Qsub(qa, qb)

def Qscale(q, fact):
    r"""Qscale(ChQuaternionD q, double fact) -> ChQuaternionD"""
    return _core.Qscale(q, fact)

def Qnorm(q):
    r"""Qnorm(ChQuaternionD q) -> ChQuaternionD"""
    return _core.Qnorm(q)

def Q_from_AngAxis(angle, axis):
    r"""Q_from_AngAxis(double angle, ChVectorD axis) -> ChQuaternionD"""
    return _core.Q_from_AngAxis(angle, axis)

def Q_from_Vect_to_Vect(fr_vect, to_vect):
    r"""Q_from_Vect_to_Vect(ChVectorD fr_vect, ChVectorD to_vect) -> ChQuaternionD"""
    return _core.Q_from_Vect_to_Vect(fr_vect, to_vect)

def Q_from_NasaAngles(RxRyRz):
    r"""Q_from_NasaAngles(ChVectorD RxRyRz) -> ChQuaternionD"""
    return _core.Q_from_NasaAngles(RxRyRz)

def Q_to_NasaAngles(mq):
    r"""Q_to_NasaAngles(ChQuaternionD mq) -> ChVectorD"""
    return _core.Q_to_NasaAngles(mq)

def Q_from_Euler123(RxRyRz):
    r"""Q_from_Euler123(ChVectorD RxRyRz) -> ChQuaternionD"""
    return _core.Q_from_Euler123(RxRyRz)

def Q_to_Euler123(mq):
    r"""Q_to_Euler123(ChQuaternionD mq) -> ChVectorD"""
    return _core.Q_to_Euler123(mq)

def Q_from_AngZ(angleZ):
    r"""Q_from_AngZ(double angleZ) -> ChQuaternionD"""
    return _core.Q_from_AngZ(angleZ)

def Q_from_AngX(angleX):
    r"""Q_from_AngX(double angleX) -> ChQuaternionD"""
    return _core.Q_from_AngX(angleX)

def Q_from_AngY(angleY):
    r"""Q_from_AngY(double angleY) -> ChQuaternionD"""
    return _core.Q_from_AngY(angleY)

def Q_to_AngAxis(quat, angle, axis):
    r"""Q_to_AngAxis(ChQuaternionD quat, double & angle, ChVectorD axis)"""
    return _core.Q_to_AngAxis(quat, angle, axis)

def Qdt_from_Wrel(w, q):
    r"""Qdt_from_Wrel(ChVectorD w, ChQuaternionD q) -> ChQuaternionD"""
    return _core.Qdt_from_Wrel(w, q)

def Qdt_from_Wabs(w, q):
    r"""Qdt_from_Wabs(ChVectorD w, ChQuaternionD q) -> ChQuaternionD"""
    return _core.Qdt_from_Wabs(w, q)

def Qdt_from_AngAxis(quat, angle_dt, axis):
    r"""Qdt_from_AngAxis(ChQuaternionD quat, double angle_dt, ChVectorD axis) -> ChQuaternionD"""
    return _core.Qdt_from_AngAxis(quat, angle_dt, axis)

def Qdtdt_from_Aabs(a, q, q_dt):
    r"""Qdtdt_from_Aabs(ChVectorD a, ChQuaternionD q, ChQuaternionD q_dt) -> ChQuaternionD"""
    return _core.Qdtdt_from_Aabs(a, q, q_dt)

def Qdtdt_from_Arel(a, q, q_dt):
    r"""Qdtdt_from_Arel(ChVectorD a, ChQuaternionD q, ChQuaternionD q_dt) -> ChQuaternionD"""
    return _core.Qdtdt_from_Arel(a, q, q_dt)

def Qdtdt_from_AngAxis(angle_dtdt, axis, q, q_dt):
    r"""Qdtdt_from_AngAxis(double angle_dtdt, ChVectorD axis, ChQuaternionD q, ChQuaternionD q_dt) -> ChQuaternionD"""
    return _core.Qdtdt_from_AngAxis(angle_dtdt, axis, q, q_dt)

def Qconjugate(q):
    r"""Qconjugate(ChQuaternionD q) -> ChQuaternionD"""
    return _core.Qconjugate(q)

def Qcross(qa, qb):
    r"""Qcross(ChQuaternionD qa, ChQuaternionD qb) -> ChQuaternionD"""
    return _core.Qcross(qa, qb)

def Qequal(qa, qb):
    r"""Qequal(ChQuaternionD qa, ChQuaternionD qb) -> bool"""
    return _core.Qequal(qa, qb)

def Qnotnull(qa):
    r"""Qnotnull(ChQuaternionD qa) -> bool"""
    return _core.Qnotnull(qa)

def ImmQ_complete(qimm):
    r"""ImmQ_complete(ChVectorD qimm) -> ChQuaternionD"""
    return _core.ImmQ_complete(qimm)

def ImmQ_dt_complete(mq, qimm_dt):
    r"""ImmQ_dt_complete(ChQuaternionD mq, ChVectorD qimm_dt) -> ChQuaternionD"""
    return _core.ImmQ_dt_complete(mq, qimm_dt)

def ImmQ_dtdt_complete(mq, mqdt, qimm_dtdt):
    r"""ImmQ_dtdt_complete(ChQuaternionD mq, ChQuaternionD mqdt, ChVectorD qimm_dtdt) -> ChQuaternionD"""
    return _core.ImmQ_dtdt_complete(mq, mqdt, qimm_dtdt)

def VaxisXfromQuat(quat):
    r"""VaxisXfromQuat(ChQuaternionD quat) -> ChVectorD"""
    return _core.VaxisXfromQuat(quat)

def Quat_to_Angle(angset, mquat):
    r"""Quat_to_Angle(chrono::AngleSet angset, ChQuaternionD mquat) -> ChVectorD"""
    return _core.Quat_to_Angle(angset, mquat)

def Angle_to_Angle(setfrom, setto, mangles):
    r"""Angle_to_Angle(chrono::AngleSet setfrom, chrono::AngleSet setto, ChVectorD mangles) -> ChVectorD"""
    return _core.Angle_to_Angle(setfrom, setto, mangles)

def Angle_to_Quat(angset, mangles):
    r"""Angle_to_Quat(chrono::AngleSet angset, ChVectorD mangles) -> ChQuaternionD"""
    return _core.Angle_to_Quat(angset, mangles)

def AngleDT_to_QuatDT(angset, mangles, q):
    r"""AngleDT_to_QuatDT(chrono::AngleSet angset, ChVectorD mangles, ChQuaternionD q) -> ChQuaternionD"""
    return _core.AngleDT_to_QuatDT(angset, mangles, q)

def AngleDTDT_to_QuatDTDT(angset, mangles, q):
    r"""AngleDTDT_to_QuatDTDT(chrono::AngleSet angset, ChVectorD mangles, ChQuaternionD q) -> ChQuaternionD"""
    return _core.AngleDTDT_to_QuatDTDT(angset, mangles, q)
class ChQuaternionD(object):
    r"""Proxy of C++ chrono::ChQuaternion< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChQuaternionD self) -> ChQuaternionD
        __init__(ChQuaternionD self, double e0, double e1, double e2, double e3) -> ChQuaternionD
        __init__(ChQuaternionD self, double s, ChVectorD v) -> ChQuaternionD
        __init__(ChQuaternionD self, ChQuaternionD other) -> ChQuaternionD
        """
        _core.ChQuaternionD_swiginit(self, _core.new_ChQuaternionD(*args))

    def Set(self, *args):
        r"""
        Set(ChQuaternionD self, double e0, double e1, double e2, double e3)
        Set(ChQuaternionD self, ChQuaternionD q)
        Set(ChQuaternionD self, double s)
        """
        return _core.ChQuaternionD_Set(self, *args)

    def SetNull(self):
        r"""SetNull(ChQuaternionD self)"""
        return _core.ChQuaternionD_SetNull(self)

    def SetUnit(self):
        r"""SetUnit(ChQuaternionD self)"""
        return _core.ChQuaternionD_SetUnit(self)

    def SetScalar(self, s):
        r"""SetScalar(ChQuaternionD self, double s)"""
        return _core.ChQuaternionD_SetScalar(self, s)

    def SetVector(self, v):
        r"""SetVector(ChQuaternionD self, ChVectorD v)"""
        return _core.ChQuaternionD_SetVector(self, v)

    def Equals(self, *args):
        r"""
        Equals(ChQuaternionD self, ChQuaternionD other) -> bool
        Equals(ChQuaternionD self, ChQuaternionD other, double tol) -> bool
        """
        return _core.ChQuaternionD_Equals(self, *args)

    def GetVector(self):
        r"""GetVector(ChQuaternionD self) -> ChVectorD"""
        return _core.ChQuaternionD_GetVector(self)

    def GetXaxis(self):
        r"""GetXaxis(ChQuaternionD self) -> ChVectorD"""
        return _core.ChQuaternionD_GetXaxis(self)

    def GetYaxis(self):
        r"""GetYaxis(ChQuaternionD self) -> ChVectorD"""
        return _core.ChQuaternionD_GetYaxis(self)

    def GetZaxis(self):
        r"""GetZaxis(ChQuaternionD self) -> ChVectorD"""
        return _core.ChQuaternionD_GetZaxis(self)

    def Length(self):
        r"""Length(ChQuaternionD self) -> double"""
        return _core.ChQuaternionD_Length(self)

    def Length2(self):
        r"""Length2(ChQuaternionD self) -> double"""
        return _core.ChQuaternionD_Length2(self)

    def LengthInf(self):
        r"""LengthInf(ChQuaternionD self) -> double"""
        return _core.ChQuaternionD_LengthInf(self)

    def __pos__(self):
        r"""__pos__(ChQuaternionD self) -> ChQuaternionD"""
        return _core.ChQuaternionD___pos__(self)

    def __neg__(self):
        r"""__neg__(ChQuaternionD self) -> ChQuaternionD"""
        return _core.ChQuaternionD___neg__(self)

    def __add__(self, other):
        r"""__add__(ChQuaternionD self, ChQuaternionD other) -> ChQuaternionD"""
        return _core.ChQuaternionD___add__(self, other)

    def __iadd__(self, other):
        r"""__iadd__(ChQuaternionD self, ChQuaternionD other) -> ChQuaternionD"""
        return _core.ChQuaternionD___iadd__(self, other)

    def __sub__(self, other):
        r"""__sub__(ChQuaternionD self, ChQuaternionD other) -> ChQuaternionD"""
        return _core.ChQuaternionD___sub__(self, other)

    def __isub__(self, other):
        r"""__isub__(ChQuaternionD self, ChQuaternionD other) -> ChQuaternionD"""
        return _core.ChQuaternionD___isub__(self, other)

    def __rshift__(self, other):
        r"""__rshift__(ChQuaternionD self, ChQuaternionD other) -> ChQuaternionD"""
        return _core.ChQuaternionD___rshift__(self, other)

    def __irshift__(self, other):
        r"""__irshift__(ChQuaternionD self, ChQuaternionD other) -> ChQuaternionD"""
        return _core.ChQuaternionD___irshift__(self, other)

    def __mul__(self, *args):
        r"""
        __mul__(ChQuaternionD self, ChQuaternionD other) -> ChQuaternionD
        __mul__(ChQuaternionD self, double s) -> ChQuaternionD
        """
        return _core.ChQuaternionD___mul__(self, *args)

    def __imul__(self, *args):
        r"""
        __imul__(ChQuaternionD self, ChQuaternionD other) -> ChQuaternionD
        __imul__(ChQuaternionD self, double s) -> ChQuaternionD
        """
        return _core.ChQuaternionD___imul__(self, *args)

    def __truediv__(self, *args):
        return _core.ChQuaternionD___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv__(self, *args):
        return _core.ChQuaternionD___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __mod__(self, other):
        r"""__mod__(ChQuaternionD self, ChQuaternionD other) -> ChQuaternionD"""
        return _core.ChQuaternionD___mod__(self, other)

    def __imod__(self, other):
        r"""__imod__(ChQuaternionD self, ChQuaternionD other) -> ChQuaternionD"""
        return _core.ChQuaternionD___imod__(self, other)

    def __xor__(self, other):
        r"""__xor__(ChQuaternionD self, ChQuaternionD other) -> double"""
        return _core.ChQuaternionD___xor__(self, other)

    def __le__(self, other):
        r"""__le__(ChQuaternionD self, ChQuaternionD other) -> bool"""
        return _core.ChQuaternionD___le__(self, other)

    def __ge__(self, other):
        r"""__ge__(ChQuaternionD self, ChQuaternionD other) -> bool"""
        return _core.ChQuaternionD___ge__(self, other)

    def __lt__(self, other):
        r"""__lt__(ChQuaternionD self, ChQuaternionD other) -> bool"""
        return _core.ChQuaternionD___lt__(self, other)

    def __gt__(self, other):
        r"""__gt__(ChQuaternionD self, ChQuaternionD other) -> bool"""
        return _core.ChQuaternionD___gt__(self, other)

    def __eq__(self, other):
        r"""__eq__(ChQuaternionD self, ChQuaternionD other) -> bool"""
        return _core.ChQuaternionD___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(ChQuaternionD self, ChQuaternionD other) -> bool"""
        return _core.ChQuaternionD___ne__(self, other)

    def Add(self, A, B):
        r"""Add(ChQuaternionD self, ChQuaternionD A, ChQuaternionD B)"""
        return _core.ChQuaternionD_Add(self, A, B)

    def Sub(self, A, B):
        r"""Sub(ChQuaternionD self, ChQuaternionD A, ChQuaternionD B)"""
        return _core.ChQuaternionD_Sub(self, A, B)

    def Cross(self, qa, qb):
        r"""Cross(ChQuaternionD self, ChQuaternionD qa, ChQuaternionD qb)"""
        return _core.ChQuaternionD_Cross(self, qa, qb)

    def Dot(self, B):
        r"""Dot(ChQuaternionD self, ChQuaternionD B) -> double"""
        return _core.ChQuaternionD_Dot(self, B)

    def Mul(self, A, s):
        r"""Mul(ChQuaternionD self, ChQuaternionD A, double s)"""
        return _core.ChQuaternionD_Mul(self, A, s)

    def Scale(self, s):
        r"""Scale(ChQuaternionD self, double s)"""
        return _core.ChQuaternionD_Scale(self, s)

    def Normalize(self):
        r"""Normalize(ChQuaternionD self) -> bool"""
        return _core.ChQuaternionD_Normalize(self)

    def GetNormalized(self):
        r"""GetNormalized(ChQuaternionD self) -> ChQuaternionD"""
        return _core.ChQuaternionD_GetNormalized(self)

    def Conjugate(self, *args):
        r"""
        Conjugate(ChQuaternionD self, ChQuaternionD A)
        Conjugate(ChQuaternionD self)
        """
        return _core.ChQuaternionD_Conjugate(self, *args)

    def GetConjugate(self):
        r"""GetConjugate(ChQuaternionD self) -> ChQuaternionD"""
        return _core.ChQuaternionD_GetConjugate(self)

    def GetInverse(self):
        r"""GetInverse(ChQuaternionD self) -> ChQuaternionD"""
        return _core.ChQuaternionD_GetInverse(self)

    def Rotate(self, A):
        r"""Rotate(ChQuaternionD self, ChVectorD A) -> ChVectorD"""
        return _core.ChQuaternionD_Rotate(self, A)

    def RotateBack(self, A):
        r"""RotateBack(ChQuaternionD self, ChVectorD A) -> ChVectorD"""
        return _core.ChQuaternionD_RotateBack(self, A)

    def Q_from_Rotv(self, angle_axis):
        r"""Q_from_Rotv(ChQuaternionD self, ChVectorD angle_axis)"""
        return _core.ChQuaternionD_Q_from_Rotv(self, angle_axis)

    def Q_to_Rotv(self):
        r"""Q_to_Rotv(ChQuaternionD self) -> ChVectorD"""
        return _core.ChQuaternionD_Q_to_Rotv(self)

    def Q_from_AngAxis(self, angle, axis):
        r"""Q_from_AngAxis(ChQuaternionD self, double angle, ChVectorD axis)"""
        return _core.ChQuaternionD_Q_from_AngAxis(self, angle, axis)

    def Q_from_AngX(self, angleX):
        r"""Q_from_AngX(ChQuaternionD self, double angleX)"""
        return _core.ChQuaternionD_Q_from_AngX(self, angleX)

    def Q_from_AngY(self, angleY):
        r"""Q_from_AngY(ChQuaternionD self, double angleY)"""
        return _core.ChQuaternionD_Q_from_AngY(self, angleY)

    def Q_from_AngZ(self, angleZ):
        r"""Q_from_AngZ(ChQuaternionD self, double angleZ)"""
        return _core.ChQuaternionD_Q_from_AngZ(self, angleZ)

    def Q_to_AngAxis(self, a_angle, a_axis):
        r"""Q_to_AngAxis(ChQuaternionD self, double & a_angle, ChVectorD a_axis)"""
        return _core.ChQuaternionD_Q_to_AngAxis(self, a_angle, a_axis)

    def Q_from_NasaAngles(self, ang):
        r"""Q_from_NasaAngles(ChQuaternionD self, ChVectorD ang)"""
        return _core.ChQuaternionD_Q_from_NasaAngles(self, ang)

    def Q_to_NasaAngles(self):
        r"""Q_to_NasaAngles(ChQuaternionD self) -> ChVectorD"""
        return _core.ChQuaternionD_Q_to_NasaAngles(self)

    def Q_from_Euler123(self, ang):
        r"""Q_from_Euler123(ChQuaternionD self, ChVectorD ang)"""
        return _core.ChQuaternionD_Q_from_Euler123(self, ang)

    def Q_to_Euler123(self):
        r"""Q_to_Euler123(ChQuaternionD self) -> ChVectorD"""
        return _core.ChQuaternionD_Q_to_Euler123(self)

    def Qdt_from_Wabs(self, w, q):
        r"""Qdt_from_Wabs(ChQuaternionD self, ChVectorD w, ChQuaternionD q)"""
        return _core.ChQuaternionD_Qdt_from_Wabs(self, w, q)

    def Qdt_from_Wrel(self, w, q):
        r"""Qdt_from_Wrel(ChQuaternionD self, ChVectorD w, ChQuaternionD q)"""
        return _core.ChQuaternionD_Qdt_from_Wrel(self, w, q)

    def Qdt_to_Wabs(self, w, q):
        r"""Qdt_to_Wabs(ChQuaternionD self, ChVectorD w, ChQuaternionD q)"""
        return _core.ChQuaternionD_Qdt_to_Wabs(self, w, q)

    def Qdt_to_Wrel(self, w, q):
        r"""Qdt_to_Wrel(ChQuaternionD self, ChVectorD w, ChQuaternionD q)"""
        return _core.ChQuaternionD_Qdt_to_Wrel(self, w, q)

    def Qdtdt_from_Aabs(self, a, q, q_dt):
        r"""Qdtdt_from_Aabs(ChQuaternionD self, ChVectorD a, ChQuaternionD q, ChQuaternionD q_dt)"""
        return _core.ChQuaternionD_Qdtdt_from_Aabs(self, a, q, q_dt)

    def Qdtdt_from_Arel(self, a, q, q_dt):
        r"""Qdtdt_from_Arel(ChQuaternionD self, ChVectorD a, ChQuaternionD q, ChQuaternionD q_dt)"""
        return _core.ChQuaternionD_Qdtdt_from_Arel(self, a, q, q_dt)

    def Qdt_from_AngAxis(self, q, angle_dt, axis):
        r"""Qdt_from_AngAxis(ChQuaternionD self, ChQuaternionD q, double angle_dt, ChVectorD axis)"""
        return _core.ChQuaternionD_Qdt_from_AngAxis(self, q, angle_dt, axis)

    def Qdtdt_from_AngAxis(self, q, q_dt, angle_dtdt, axis):
        r"""Qdtdt_from_AngAxis(ChQuaternionD self, ChQuaternionD q, ChQuaternionD q_dt, double angle_dtdt, ChVectorD axis)"""
        return _core.ChQuaternionD_Qdtdt_from_AngAxis(self, q, q_dt, angle_dtdt, axis)

    def ImmQ_complete(self, qimm):
        r"""ImmQ_complete(ChQuaternionD self, ChVectorD qimm)"""
        return _core.ChQuaternionD_ImmQ_complete(self, qimm)

    def ImmQ_dt_complete(self, q, qimm_dt):
        r"""ImmQ_dt_complete(ChQuaternionD self, ChQuaternionD q, ChVectorD qimm_dt)"""
        return _core.ChQuaternionD_ImmQ_dt_complete(self, q, qimm_dt)

    def ImmQ_dtdt_complete(self, q, qdt, qimm_dtdt):
        r"""ImmQ_dtdt_complete(ChQuaternionD self, ChQuaternionD q, ChQuaternionD qdt, ChVectorD qimm_dtdt)"""
        return _core.ChQuaternionD_ImmQ_dtdt_complete(self, q, qdt, qimm_dtdt)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChQuaternionD self, ChArchiveOut & marchive)"""
        return _core.ChQuaternionD_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChQuaternionD self, chrono::ChArchiveIn & marchive)"""
        return _core.ChQuaternionD_ArchiveIN(self, marchive)
    e0 = property(_core.ChQuaternionD_e0_get, _core.ChQuaternionD_e0_set, doc=r"""e0 : double""")
    e1 = property(_core.ChQuaternionD_e1_get, _core.ChQuaternionD_e1_set, doc=r"""e1 : double""")
    e2 = property(_core.ChQuaternionD_e2_get, _core.ChQuaternionD_e2_set, doc=r"""e2 : double""")
    e3 = property(_core.ChQuaternionD_e3_get, _core.ChQuaternionD_e3_set, doc=r"""e3 : double""")

    def __str__(self):
        r"""__str__(ChQuaternionD self) -> char *"""
        return _core.ChQuaternionD___str__(self)

    def __invert__(self):
        r"""__invert__(ChQuaternionD self) -> ChQuaternionD"""
        return _core.ChQuaternionD___invert__(self)
    __swig_destroy__ = _core.delete_ChQuaternionD

# Register ChQuaternionD in _core:
_core.ChQuaternionD_swigregister(ChQuaternionD)
QNULL = cvar.QNULL
QUNIT = cvar.QUNIT
Q_ROTATE_Y_TO_X = cvar.Q_ROTATE_Y_TO_X
Q_ROTATE_Y_TO_Z = cvar.Q_ROTATE_Y_TO_Z
Q_ROTATE_X_TO_Y = cvar.Q_ROTATE_X_TO_Y
Q_ROTATE_X_TO_Z = cvar.Q_ROTATE_X_TO_Z
Q_ROTATE_Z_TO_Y = cvar.Q_ROTATE_Z_TO_Y
Q_ROTATE_Z_TO_X = cvar.Q_ROTATE_Z_TO_X
Q_FLIP_AROUND_X = cvar.Q_FLIP_AROUND_X
Q_FLIP_AROUND_Y = cvar.Q_FLIP_AROUND_Y
Q_FLIP_AROUND_Z = cvar.Q_FLIP_AROUND_Z



QNULL  = ChQuaternionD(0,0,0,0)
QUNIT  = ChQuaternionD(1,0,0,0)

class ChBezierCurve(object):
    r"""Proxy of C++ chrono::ChBezierCurve class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChBezierCurve self, vector_ChVectorD points, vector_ChVectorD inCV, vector_ChVectorD outCV) -> ChBezierCurve
        __init__(ChBezierCurve self, vector_ChVectorD points) -> ChBezierCurve
        __init__(ChBezierCurve self) -> ChBezierCurve
        """
        _core.ChBezierCurve_swiginit(self, _core.new_ChBezierCurve(*args))
    __swig_destroy__ = _core.delete_ChBezierCurve

    def setPoints(self, points, inCV, outCV):
        r"""setPoints(ChBezierCurve self, vector_ChVectorD points, vector_ChVectorD inCV, vector_ChVectorD outCV)"""
        return _core.ChBezierCurve_setPoints(self, points, inCV, outCV)

    def getNumPoints(self):
        r"""getNumPoints(ChBezierCurve self) -> size_t"""
        return _core.ChBezierCurve_getNumPoints(self)

    def getPoint(self, i):
        r"""getPoint(ChBezierCurve self, size_t i) -> ChVectorD"""
        return _core.ChBezierCurve_getPoint(self, i)

    def eval(self, *args):
        r"""
        eval(ChBezierCurve self, double t) -> ChVectorD
        eval(ChBezierCurve self, size_t i, double t) -> ChVectorD
        """
        return _core.ChBezierCurve_eval(self, *args)

    def evalD(self, i, t):
        r"""evalD(ChBezierCurve self, size_t i, double t) -> ChVectorD"""
        return _core.ChBezierCurve_evalD(self, i, t)

    def evalDD(self, i, t):
        r"""evalDD(ChBezierCurve self, size_t i, double t) -> ChVectorD"""
        return _core.ChBezierCurve_evalDD(self, i, t)

    def calcClosestPoint(self, loc, i, t):
        r"""calcClosestPoint(ChBezierCurve self, ChVectorD loc, size_t i, double & t) -> ChVectorD"""
        return _core.ChBezierCurve_calcClosestPoint(self, loc, i, t)

    def write(self, filename):
        r"""write(ChBezierCurve self, std::string const & filename)"""
        return _core.ChBezierCurve_write(self, filename)

    @staticmethod
    def read(filename):
        r"""read(std::string const & filename) -> std::shared_ptr< chrono::ChBezierCurve >"""
        return _core.ChBezierCurve_read(filename)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChBezierCurve self, ChArchiveOut & marchive)"""
        return _core.ChBezierCurve_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChBezierCurve self, chrono::ChArchiveIn & marchive)"""
        return _core.ChBezierCurve_ArchiveIN(self, marchive)

# Register ChBezierCurve in _core:
_core.ChBezierCurve_swigregister(ChBezierCurve)

def ChBezierCurve_read(filename):
    r"""ChBezierCurve_read(std::string const & filename) -> std::shared_ptr< chrono::ChBezierCurve >"""
    return _core.ChBezierCurve_read(filename)

class ChBezierCurveTracker(object):
    r"""Proxy of C++ chrono::ChBezierCurveTracker class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, path, isClosedPath=False):
        r"""__init__(ChBezierCurveTracker self, std::shared_ptr< chrono::ChBezierCurve > path, bool isClosedPath=False) -> ChBezierCurveTracker"""
        _core.ChBezierCurveTracker_swiginit(self, _core.new_ChBezierCurveTracker(path, isClosedPath))
    __swig_destroy__ = _core.delete_ChBezierCurveTracker

    def reset(self, loc):
        r"""reset(ChBezierCurveTracker self, ChVectorD loc)"""
        return _core.ChBezierCurveTracker_reset(self, loc)

    def calcClosestPoint(self, *args):
        r"""
        calcClosestPoint(ChBezierCurveTracker self, ChVectorD loc, ChVectorD point) -> int
        calcClosestPoint(ChBezierCurveTracker self, ChVectorD loc, ChFrame< > & tnb, double & curvature) -> int
        """
        return _core.ChBezierCurveTracker_calcClosestPoint(self, *args)

    def setIsClosedPath(self, isClosedPath):
        r"""setIsClosedPath(ChBezierCurveTracker self, bool isClosedPath)"""
        return _core.ChBezierCurveTracker_setIsClosedPath(self, isClosedPath)

# Register ChBezierCurveTracker in _core:
_core.ChBezierCurveTracker_swigregister(ChBezierCurveTracker)

class ChMatrix33D(object):
    r"""Proxy of C++ chrono::ChMatrix33< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChMatrix33D self) -> ChMatrix33D
        __init__(ChMatrix33D self, double val) -> ChMatrix33D
        __init__(ChMatrix33D self, ChVectorD v) -> ChMatrix33D
        __init__(ChMatrix33D self, ChVectorD diag, ChVectorD off_diag) -> ChMatrix33D
        __init__(ChMatrix33D self, ChQuaternionD q) -> ChMatrix33D
        __init__(ChMatrix33D self, double angle, ChVectorD axis) -> ChMatrix33D
        __init__(ChMatrix33D self, ChVectorD X, ChVectorD Y, ChVectorD Z) -> ChMatrix33D
        """
        _core.ChMatrix33D_swiginit(self, _core.new_ChMatrix33D(*args))

    def __mul__(self, *args):
        r"""
        __mul__(ChMatrix33D self)
        __mul__(ChMatrix33D self, ChVectorD v) -> ChVectorD
        """
        return _core.ChMatrix33D___mul__(self, *args)

    def Set_A_quaternion(self, quat):
        r"""Set_A_quaternion(ChMatrix33D self, ChQuaternionD quat)"""
        return _core.ChMatrix33D_Set_A_quaternion(self, quat)

    def Set_A_Eulero(self, angles):
        r"""Set_A_Eulero(ChMatrix33D self, ChVectorD angles)"""
        return _core.ChMatrix33D_Set_A_Eulero(self, angles)

    def Set_A_Cardano(self, angles):
        r"""Set_A_Cardano(ChMatrix33D self, ChVectorD angles)"""
        return _core.ChMatrix33D_Set_A_Cardano(self, angles)

    def Set_A_Hpb(self, angles):
        r"""Set_A_Hpb(ChMatrix33D self, ChVectorD angles)"""
        return _core.ChMatrix33D_Set_A_Hpb(self, angles)

    def Set_A_Rxyz(self, xyz):
        r"""Set_A_Rxyz(ChMatrix33D self, ChVectorD xyz)"""
        return _core.ChMatrix33D_Set_A_Rxyz(self, xyz)

    def Set_A_Rodriguez(self, rod):
        r"""Set_A_Rodriguez(ChMatrix33D self, ChVectorD rod)"""
        return _core.ChMatrix33D_Set_A_Rodriguez(self, rod)

    def Set_A_axis(self, X, Y, Z):
        r"""Set_A_axis(ChMatrix33D self, ChVectorD X, ChVectorD Y, ChVectorD Z)"""
        return _core.ChMatrix33D_Set_A_axis(self, X, Y, Z)

    def Set_A_Xdir(self, *args):
        r"""Set_A_Xdir(ChMatrix33D self, ChVectorD Xdir, ChVectorD Vsingular=chrono::ChVector(0, 1, 0))"""
        return _core.ChMatrix33D_Set_A_Xdir(self, *args)

    def Get_A_Xaxis(self):
        r"""Get_A_Xaxis(ChMatrix33D self) -> ChVectorD"""
        return _core.ChMatrix33D_Get_A_Xaxis(self)

    def Get_A_Yaxis(self):
        r"""Get_A_Yaxis(ChMatrix33D self) -> ChVectorD"""
        return _core.ChMatrix33D_Get_A_Yaxis(self)

    def Get_A_Zaxis(self):
        r"""Get_A_Zaxis(ChMatrix33D self) -> ChVectorD"""
        return _core.ChMatrix33D_Get_A_Zaxis(self)

    def Get_A_quaternion(self):
        r"""Get_A_quaternion(ChMatrix33D self) -> ChQuaternionD"""
        return _core.ChMatrix33D_Get_A_quaternion(self)

    def Get_A_Eulero(self):
        r"""Get_A_Eulero(ChMatrix33D self) -> ChVectorD"""
        return _core.ChMatrix33D_Get_A_Eulero(self)

    def Get_A_Cardano(self):
        r"""Get_A_Cardano(ChMatrix33D self) -> ChVectorD"""
        return _core.ChMatrix33D_Get_A_Cardano(self)

    def Get_A_Hpb(self):
        r"""Get_A_Hpb(ChMatrix33D self) -> ChVectorD"""
        return _core.ChMatrix33D_Get_A_Hpb(self)

    def Get_A_Rxyz(self):
        r"""Get_A_Rxyz(ChMatrix33D self) -> ChVectorD"""
        return _core.ChMatrix33D_Get_A_Rxyz(self)

    def Get_A_Rodriguez(self):
        r"""Get_A_Rodriguez(ChMatrix33D self) -> ChVectorD"""
        return _core.ChMatrix33D_Get_A_Rodriguez(self)

    def GetAx(self):
        r"""GetAx(ChMatrix33D self) -> ChVectorD"""
        return _core.ChMatrix33D_GetAx(self)

    def SelfAdjointEigenSolve(self, evec, evals):
        r"""SelfAdjointEigenSolve(ChMatrix33D self, ChMatrix33D evec, chrono::ChVectorN< double,3 > & evals)"""
        return _core.ChMatrix33D_SelfAdjointEigenSolve(self, evec, evals)

    def getitem(self, i, j):
        r"""getitem(ChMatrix33D self, int i, int j) -> double"""
        return _core.ChMatrix33D_getitem(self, i, j)

    def setitem(self, i, j, v):
        r"""setitem(ChMatrix33D self, int i, int j, double v)"""
        return _core.ChMatrix33D_setitem(self, i, j, v)

    def GetRows(self):
        r"""GetRows(ChMatrix33D self) -> int const"""
        return _core.ChMatrix33D_GetRows(self)

    def GetColumns(self):
        r"""GetColumns(ChMatrix33D self) -> int const"""
        return _core.ChMatrix33D_GetColumns(self)
    __swig_destroy__ = _core.delete_ChMatrix33D

# Register ChMatrix33D in _core:
_core.ChMatrix33D_swigregister(ChMatrix33D)



def __matr33_setitem(self,index,vals):
    row = index[0];
    col = index[1];
    if row>=self.GetRows() or row <0:
        raise NameError('Bad row. Setting value at [{0},{1}] in a {2}x{3} matrix'.format(row,col,self.GetRows(),self.GetColumns()))
    if col>=self.GetColumns() or col <0:
        raise NameError('Bad column. Setting value at [{0},{1}] in a {2}x{3} matrix'.format(row,col,self.GetRows(),self.GetColumns()))
    self.setitem(index[0],index[1],vals)

def __matr33_getitem(self,index):
    row = index[0];
    col = index[1];
    if row>=self.GetRows() or row <0:
        raise NameError('Bad row. Getting value at [{0},{1}] in a {2}x{3} matrix'.format(row,col,self.GetRows(),self.GetColumns()))
    if col>=self.GetColumns() or col <0:
        raise NameError('Bad column. Getting value at [{0},{1}] in a {2}x{3} matrix'.format(row,col,self.GetRows(),self.GetColumns()))
    return self.getitem(index[0],index[1])

setattr(ChMatrix33D, "__getitem__", __matr33_getitem)
setattr(ChMatrix33D, "__setitem__", __matr33_setitem)

def SetMatr(self, l_in):
    if len(l_in)>3 or len(l_in[0])>3:
	    raise NameError('Wrong Input List. Must be 3x3')
    for i, li in enumerate(l_in):
        for j, lij in enumerate(li):
          self[i,j] = lij 

def GetMatr(self, ):
    l_out = []
    for i in range(3):
        irow = []
        for j in range(3):
          irow.append(self[i,j])
        l_out.append(irow)
    return l_out

setattr(ChMatrix33D, "SetMatr", SetMatr)
setattr(ChMatrix33D, "GetMatr", GetMatr)



def Force2Dcsys(cs):
    r"""Force2Dcsys(ChCoordsysD cs) -> ChCoordsysD"""
    return _core.Force2Dcsys(cs)
class ChCoordsysD(object):
    r"""Proxy of C++ chrono::ChCoordsys< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pos = property(_core.ChCoordsysD_pos_get, _core.ChCoordsysD_pos_set, doc=r"""pos : chrono::ChVector<(double)>""")
    rot = property(_core.ChCoordsysD_rot_get, _core.ChCoordsysD_rot_set, doc=r"""rot : chrono::ChQuaternion<(double)>""")

    def __init__(self, *args):
        r"""
        __init__(ChCoordsysD self) -> ChCoordsysD
        __init__(ChCoordsysD self, ChVectorD mv, ChQuaternionD mq=chrono::ChQuaternion(1, 0, 0, 0)) -> ChCoordsysD
        __init__(ChCoordsysD self, ChVectorD mv, double const alpha, ChVectorD mu) -> ChCoordsysD
        __init__(ChCoordsysD self, ChCoordsysD other) -> ChCoordsysD
        """
        _core.ChCoordsysD_swiginit(self, _core.new_ChCoordsysD(*args))

    def __le__(self, other):
        r"""__le__(ChCoordsysD self, ChCoordsysD other) -> bool"""
        return _core.ChCoordsysD___le__(self, other)

    def __ge__(self, other):
        r"""__ge__(ChCoordsysD self, ChCoordsysD other) -> bool"""
        return _core.ChCoordsysD___ge__(self, other)

    def __eq__(self, other):
        r"""__eq__(ChCoordsysD self, ChCoordsysD other) -> bool"""
        return _core.ChCoordsysD___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(ChCoordsysD self, ChCoordsysD other) -> bool"""
        return _core.ChCoordsysD___ne__(self, other)

    def __rshift__(self, Fb):
        r"""__rshift__(ChCoordsysD self, ChCoordsysD Fb) -> ChCoordsysD"""
        return _core.ChCoordsysD___rshift__(self, Fb)

    def __mul__(self, Fb):
        r"""__mul__(ChCoordsysD self, ChCoordsysD Fb) -> ChCoordsysD"""
        return _core.ChCoordsysD___mul__(self, Fb)

    def __truediv__(self, *args):
        return _core.ChCoordsysD___truediv__(self, *args)
    __div__ = __truediv__



    def __imul__(self, T):
        r"""__imul__(ChCoordsysD self, ChCoordsysD T) -> ChCoordsysD"""
        return _core.ChCoordsysD___imul__(self, T)

    def __irshift__(self, *args):
        r"""
        __irshift__(ChCoordsysD self, ChCoordsysD T) -> ChCoordsysD
        __irshift__(ChCoordsysD self, ChVectorD D) -> ChCoordsysD
        __irshift__(ChCoordsysD self, ChQuaternionD R) -> ChCoordsysD
        """
        return _core.ChCoordsysD___irshift__(self, *args)

    def Force2D(self):
        r"""Force2D(ChCoordsysD self)"""
        return _core.ChCoordsysD_Force2D(self)

    def Equals(self, *args):
        r"""
        Equals(ChCoordsysD self, ChCoordsysD other) -> bool
        Equals(ChCoordsysD self, ChCoordsysD other, double tol) -> bool
        """
        return _core.ChCoordsysD_Equals(self, *args)

    def SetIdentity(self):
        r"""SetIdentity(ChCoordsysD self)"""
        return _core.ChCoordsysD_SetIdentity(self)

    def ConcatenatePreTransformation(self, T):
        r"""ConcatenatePreTransformation(ChCoordsysD self, ChCoordsysD T)"""
        return _core.ChCoordsysD_ConcatenatePreTransformation(self, T)

    def ConcatenatePostTransformation(self, T):
        r"""ConcatenatePostTransformation(ChCoordsysD self, ChCoordsysD T)"""
        return _core.ChCoordsysD_ConcatenatePostTransformation(self, T)

    def TransformPointLocalToParent(self, local):
        r"""TransformPointLocalToParent(ChCoordsysD self, ChVectorD local) -> ChVectorD"""
        return _core.ChCoordsysD_TransformPointLocalToParent(self, local)

    def TransformPointParentToLocal(self, parent):
        r"""TransformPointParentToLocal(ChCoordsysD self, ChVectorD parent) -> ChVectorD"""
        return _core.ChCoordsysD_TransformPointParentToLocal(self, parent)

    def TransformDirectionLocalToParent(self, local):
        r"""TransformDirectionLocalToParent(ChCoordsysD self, ChVectorD local) -> ChVectorD"""
        return _core.ChCoordsysD_TransformDirectionLocalToParent(self, local)

    def TransformDirectionParentToLocal(self, parent):
        r"""TransformDirectionParentToLocal(ChCoordsysD self, ChVectorD parent) -> ChVectorD"""
        return _core.ChCoordsysD_TransformDirectionParentToLocal(self, parent)

    def TransformLocalToParent(self, *args):
        r"""
        TransformLocalToParent(ChCoordsysD self, ChVectorD local) -> ChVectorD
        TransformLocalToParent(ChCoordsysD self, ChCoordsysD local) -> ChCoordsysD
        """
        return _core.ChCoordsysD_TransformLocalToParent(self, *args)

    def TransformParentToLocal(self, *args):
        r"""
        TransformParentToLocal(ChCoordsysD self, ChVectorD parent) -> ChVectorD
        TransformParentToLocal(ChCoordsysD self, ChCoordsysD parent) -> ChCoordsysD
        """
        return _core.ChCoordsysD_TransformParentToLocal(self, *args)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChCoordsysD self, ChArchiveOut & marchive)"""
        return _core.ChCoordsysD_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChCoordsysD self, chrono::ChArchiveIn & marchive)"""
        return _core.ChCoordsysD_ArchiveIN(self, marchive)
    __swig_destroy__ = _core.delete_ChCoordsysD

# Register ChCoordsysD in _core:
_core.ChCoordsysD_swigregister(ChCoordsysD)
CSYSNULL = cvar.CSYSNULL
CSYSNORM = cvar.CSYSNORM

class ChFrameD(object):
    r"""Proxy of C++ chrono::ChFrame< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    coord = property(_core.ChFrameD_coord_get, _core.ChFrameD_coord_set, doc=r"""coord : chrono::ChCoordsys<(double)>""")
    Amatrix = property(_core.ChFrameD_Amatrix_get, _core.ChFrameD_Amatrix_set, doc=r"""Amatrix : chrono::ChMatrix33<(double)>""")

    def __init__(self, *args):
        r"""
        __init__(ChFrameD self, ChVectorD mv=chrono::ChVector(0, 0, 0), ChQuaternionD mq=chrono::ChQuaternion(1, 0, 0, 0)) -> ChFrameD
        __init__(ChFrameD self, ChVectorD mv, ChMatrix33D ma) -> ChFrameD
        __init__(ChFrameD self, ChCoordsysD mc) -> ChFrameD
        __init__(ChFrameD self, ChVectorD mv, double const alpha, ChVectorD mu) -> ChFrameD
        __init__(ChFrameD self, ChFrameD other) -> ChFrameD
        """
        _core.ChFrameD_swiginit(self, _core.new_ChFrameD(*args))
    __swig_destroy__ = _core.delete_ChFrameD

    def __eq__(self, other):
        r"""__eq__(ChFrameD self, ChFrameD other) -> bool"""
        return _core.ChFrameD___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(ChFrameD self, ChFrameD other) -> bool"""
        return _core.ChFrameD___ne__(self, other)

    def __rshift__(self, Fb):
        r"""__rshift__(ChFrameD self, ChFrameD Fb) -> ChFrameD"""
        return _core.ChFrameD___rshift__(self, Fb)

    def __mul__(self, *args):
        r"""
        __mul__(ChFrameD self, ChFrameD Fb) -> ChFrameD
        __mul__(ChFrameD self, ChVectorD V) -> ChVectorD
        """
        return _core.ChFrameD___mul__(self, *args)

    def __truediv__(self, *args):
        return _core.ChFrameD___truediv__(self, *args)
    __div__ = __truediv__



    def __imod__(self, T):
        r"""__imod__(ChFrameD self, ChFrameD T) -> ChFrameD"""
        return _core.ChFrameD___imod__(self, T)

    def __imul__(self, T):
        r"""__imul__(ChFrameD self, ChFrameD T) -> ChFrameD"""
        return _core.ChFrameD___imul__(self, T)

    def __irshift__(self, *args):
        r"""
        __irshift__(ChFrameD self, ChFrameD T) -> ChFrameD
        __irshift__(ChFrameD self, ChVectorD D) -> ChFrameD
        __irshift__(ChFrameD self, ChQuaternionD R) -> ChFrameD
        __irshift__(ChFrameD self, ChCoordsysD F) -> ChFrameD
        """
        return _core.ChFrameD___irshift__(self, *args)

    def GetCoord(self, *args):
        r"""
        GetCoord(ChFrameD self) -> ChCoordsysD
        GetCoord(ChFrameD self) -> ChCoordsysD
        """
        return _core.ChFrameD_GetCoord(self, *args)

    def GetPos(self, *args):
        r"""
        GetPos(ChFrameD self) -> ChVectorD
        GetPos(ChFrameD self) -> ChVectorD
        """
        return _core.ChFrameD_GetPos(self, *args)

    def GetRot(self, *args):
        r"""
        GetRot(ChFrameD self) -> ChQuaternionD
        GetRot(ChFrameD self) -> ChQuaternionD
        """
        return _core.ChFrameD_GetRot(self, *args)

    def GetA(self, *args):
        r"""
        GetA(ChFrameD self) -> ChMatrix33D
        GetA(ChFrameD self) -> ChMatrix33D
        """
        return _core.ChFrameD_GetA(self, *args)

    def GetRotAxis(self):
        r"""GetRotAxis(ChFrameD self) -> ChVectorD"""
        return _core.ChFrameD_GetRotAxis(self)

    def GetRotAngle(self):
        r"""GetRotAngle(ChFrameD self) -> double"""
        return _core.ChFrameD_GetRotAngle(self)

    def SetCoord(self, *args):
        r"""
        SetCoord(ChFrameD self, ChCoordsysD mcoord)
        SetCoord(ChFrameD self, ChVectorD mv, ChQuaternionD mq)
        """
        return _core.ChFrameD_SetCoord(self, *args)

    def SetRot(self, *args):
        r"""
        SetRot(ChFrameD self, ChQuaternionD mrot)
        SetRot(ChFrameD self, ChMatrix33D mA)
        """
        return _core.ChFrameD_SetRot(self, *args)

    def SetPos(self, mpos):
        r"""SetPos(ChFrameD self, ChVectorD mpos)"""
        return _core.ChFrameD_SetPos(self, mpos)

    def ConcatenatePreTransformation(self, T):
        r"""ConcatenatePreTransformation(ChFrameD self, ChFrameD T)"""
        return _core.ChFrameD_ConcatenatePreTransformation(self, T)

    def ConcatenatePostTransformation(self, T):
        r"""ConcatenatePostTransformation(ChFrameD self, ChFrameD T)"""
        return _core.ChFrameD_ConcatenatePostTransformation(self, T)

    def Move(self, *args):
        r"""
        Move(ChFrameD self, ChVectorD V)
        Move(ChFrameD self, ChCoordsysD VR)
        """
        return _core.ChFrameD_Move(self, *args)

    def TransformPointLocalToParent(self, local):
        r"""TransformPointLocalToParent(ChFrameD self, ChVectorD local) -> ChVectorD"""
        return _core.ChFrameD_TransformPointLocalToParent(self, local)

    def TransformPointParentToLocal(self, parent):
        r"""TransformPointParentToLocal(ChFrameD self, ChVectorD parent) -> ChVectorD"""
        return _core.ChFrameD_TransformPointParentToLocal(self, parent)

    def TransformLocalToParent(self, *args):
        r"""
        TransformLocalToParent(ChFrameD self, ChVectorD local) -> ChVectorD
        TransformLocalToParent(ChFrameD self, ChFrameD local, ChFrameD parent)
        """
        return _core.ChFrameD_TransformLocalToParent(self, *args)

    def TransformParentToLocal(self, *args):
        r"""
        TransformParentToLocal(ChFrameD self, ChVectorD parent) -> ChVectorD
        TransformParentToLocal(ChFrameD self, ChFrameD parent, ChFrameD local)
        """
        return _core.ChFrameD_TransformParentToLocal(self, *args)

    def TransformDirectionParentToLocal(self, mdirection):
        r"""TransformDirectionParentToLocal(ChFrameD self, ChVectorD mdirection) -> ChVectorD"""
        return _core.ChFrameD_TransformDirectionParentToLocal(self, mdirection)

    def TransformDirectionLocalToParent(self, mdirection):
        r"""TransformDirectionLocalToParent(ChFrameD self, ChVectorD mdirection) -> ChVectorD"""
        return _core.ChFrameD_TransformDirectionLocalToParent(self, mdirection)

    def Equals(self, *args):
        r"""
        Equals(ChFrameD self, ChFrameD other) -> bool
        Equals(ChFrameD self, ChFrameD other, double tol) -> bool
        """
        return _core.ChFrameD_Equals(self, *args)

    def Normalize(self):
        r"""Normalize(ChFrameD self)"""
        return _core.ChFrameD_Normalize(self)

    def SetIdentity(self):
        r"""SetIdentity(ChFrameD self)"""
        return _core.ChFrameD_SetIdentity(self)

    def Invert(self):
        r"""Invert(ChFrameD self)"""
        return _core.ChFrameD_Invert(self)

    def GetInverse(self):
        r"""GetInverse(ChFrameD self) -> ChFrameD"""
        return _core.ChFrameD_GetInverse(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChFrameD self, ChArchiveOut & marchive)"""
        return _core.ChFrameD_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChFrameD self, chrono::ChArchiveIn & marchive)"""
        return _core.ChFrameD_ArchiveIN(self, marchive)

# Register ChFrameD in _core:
_core.ChFrameD_swigregister(ChFrameD)

class ChFrameMovingD(ChFrameD):
    r"""Proxy of C++ chrono::ChFrameMoving< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    coord_dt = property(_core.ChFrameMovingD_coord_dt_get, _core.ChFrameMovingD_coord_dt_set, doc=r"""coord_dt : chrono::ChCoordsys<(double)>""")
    coord_dtdt = property(_core.ChFrameMovingD_coord_dtdt_get, _core.ChFrameMovingD_coord_dtdt_set, doc=r"""coord_dtdt : chrono::ChCoordsys<(double)>""")

    def __init__(self, *args):
        r"""
        __init__(ChFrameMovingD self, ChVectorD mv=chrono::ChVector(0, 0, 0), ChQuaternionD mq=chrono::ChQuaternion(1, 0, 0, 0)) -> ChFrameMovingD
        __init__(ChFrameMovingD self, ChVectorD mv, ChMatrix33D ma) -> ChFrameMovingD
        __init__(ChFrameMovingD self, ChCoordsysD mc) -> ChFrameMovingD
        __init__(ChFrameMovingD self, ChFrameD mc) -> ChFrameMovingD
        __init__(ChFrameMovingD self, ChFrameMovingD other) -> ChFrameMovingD
        """
        _core.ChFrameMovingD_swiginit(self, _core.new_ChFrameMovingD(*args))
    __swig_destroy__ = _core.delete_ChFrameMovingD

    def __eq__(self, other):
        r"""__eq__(ChFrameMovingD self, ChFrameMovingD other) -> bool"""
        return _core.ChFrameMovingD___eq__(self, other)

    def __ne__(self, other):
        r"""__ne__(ChFrameMovingD self, ChFrameMovingD other) -> bool"""
        return _core.ChFrameMovingD___ne__(self, other)

    def __rshift__(self, Fb):
        r"""__rshift__(ChFrameMovingD self, ChFrameMovingD Fb) -> ChFrameMovingD"""
        return _core.ChFrameMovingD___rshift__(self, Fb)

    def __mul__(self, Fb):
        r"""__mul__(ChFrameMovingD self, ChFrameMovingD Fb) -> ChFrameMovingD"""
        return _core.ChFrameMovingD___mul__(self, Fb)

    def __imod__(self, T):
        r"""__imod__(ChFrameMovingD self, ChFrameMovingD T) -> ChFrameMovingD"""
        return _core.ChFrameMovingD___imod__(self, T)

    def __imul__(self, T):
        r"""__imul__(ChFrameMovingD self, ChFrameMovingD T) -> ChFrameMovingD"""
        return _core.ChFrameMovingD___imul__(self, T)

    def __irshift__(self, *args):
        r"""
        __irshift__(ChFrameMovingD self, ChFrameMovingD T) -> ChFrameMovingD
        __irshift__(ChFrameMovingD self, ChVectorD D) -> ChFrameMovingD
        __irshift__(ChFrameMovingD self, ChQuaternionD R) -> ChFrameMovingD
        __irshift__(ChFrameMovingD self, ChCoordsysD F) -> ChFrameMovingD
        __irshift__(ChFrameMovingD self, ChFrameD F) -> ChFrameMovingD
        """
        return _core.ChFrameMovingD___irshift__(self, *args)

    def GetCoord_dt(self, *args):
        r"""
        GetCoord_dt(ChFrameMovingD self) -> ChCoordsysD
        GetCoord_dt(ChFrameMovingD self) -> ChCoordsysD
        """
        return _core.ChFrameMovingD_GetCoord_dt(self, *args)

    def GetCoord_dtdt(self, *args):
        r"""
        GetCoord_dtdt(ChFrameMovingD self) -> ChCoordsysD
        GetCoord_dtdt(ChFrameMovingD self) -> ChCoordsysD
        """
        return _core.ChFrameMovingD_GetCoord_dtdt(self, *args)

    def GetPos_dt(self, *args):
        r"""
        GetPos_dt(ChFrameMovingD self) -> ChVectorD
        GetPos_dt(ChFrameMovingD self) -> ChVectorD
        """
        return _core.ChFrameMovingD_GetPos_dt(self, *args)

    def GetPos_dtdt(self, *args):
        r"""
        GetPos_dtdt(ChFrameMovingD self) -> ChVectorD
        GetPos_dtdt(ChFrameMovingD self) -> ChVectorD
        """
        return _core.ChFrameMovingD_GetPos_dtdt(self, *args)

    def GetRot_dt(self, *args):
        r"""
        GetRot_dt(ChFrameMovingD self) -> ChQuaternionD
        GetRot_dt(ChFrameMovingD self) -> ChQuaternionD
        """
        return _core.ChFrameMovingD_GetRot_dt(self, *args)

    def GetRot_dtdt(self, *args):
        r"""
        GetRot_dtdt(ChFrameMovingD self) -> ChQuaternionD
        GetRot_dtdt(ChFrameMovingD self) -> ChQuaternionD
        """
        return _core.ChFrameMovingD_GetRot_dtdt(self, *args)

    def GetWvel_loc(self):
        r"""GetWvel_loc(ChFrameMovingD self) -> ChVectorD"""
        return _core.ChFrameMovingD_GetWvel_loc(self)

    def GetWvel_par(self):
        r"""GetWvel_par(ChFrameMovingD self) -> ChVectorD"""
        return _core.ChFrameMovingD_GetWvel_par(self)

    def GetWacc_loc(self):
        r"""GetWacc_loc(ChFrameMovingD self) -> ChVectorD"""
        return _core.ChFrameMovingD_GetWacc_loc(self)

    def GetWacc_par(self):
        r"""GetWacc_par(ChFrameMovingD self) -> ChVectorD"""
        return _core.ChFrameMovingD_GetWacc_par(self)

    def SetCoord_dt(self, mcoord_dt):
        r"""SetCoord_dt(ChFrameMovingD self, ChCoordsysD mcoord_dt)"""
        return _core.ChFrameMovingD_SetCoord_dt(self, mcoord_dt)

    def SetPos_dt(self, mvel):
        r"""SetPos_dt(ChFrameMovingD self, ChVectorD mvel)"""
        return _core.ChFrameMovingD_SetPos_dt(self, mvel)

    def SetRot_dt(self, mrot_dt):
        r"""SetRot_dt(ChFrameMovingD self, ChQuaternionD mrot_dt)"""
        return _core.ChFrameMovingD_SetRot_dt(self, mrot_dt)

    def SetWvel_loc(self, wl):
        r"""SetWvel_loc(ChFrameMovingD self, ChVectorD wl)"""
        return _core.ChFrameMovingD_SetWvel_loc(self, wl)

    def SetWvel_par(self, wp):
        r"""SetWvel_par(ChFrameMovingD self, ChVectorD wp)"""
        return _core.ChFrameMovingD_SetWvel_par(self, wp)

    def SetCoord_dtdt(self, mcoord_dtdt):
        r"""SetCoord_dtdt(ChFrameMovingD self, ChCoordsysD mcoord_dtdt)"""
        return _core.ChFrameMovingD_SetCoord_dtdt(self, mcoord_dtdt)

    def SetPos_dtdt(self, macc):
        r"""SetPos_dtdt(ChFrameMovingD self, ChVectorD macc)"""
        return _core.ChFrameMovingD_SetPos_dtdt(self, macc)

    def SetRot_dtdt(self, mrot_dtdt):
        r"""SetRot_dtdt(ChFrameMovingD self, ChQuaternionD mrot_dtdt)"""
        return _core.ChFrameMovingD_SetRot_dtdt(self, mrot_dtdt)

    def SetWacc_loc(self, al):
        r"""SetWacc_loc(ChFrameMovingD self, ChVectorD al)"""
        return _core.ChFrameMovingD_SetWacc_loc(self, al)

    def SetWacc_par(self, ap):
        r"""SetWacc_par(ChFrameMovingD self, ChVectorD ap)"""
        return _core.ChFrameMovingD_SetWacc_par(self, ap)

    def Compute_Adt(self, mA_dt):
        r"""Compute_Adt(ChFrameMovingD self, ChMatrix33D mA_dt)"""
        return _core.ChFrameMovingD_Compute_Adt(self, mA_dt)

    def Compute_Adtdt(self, mA_dtdt):
        r"""Compute_Adtdt(ChFrameMovingD self, ChMatrix33D mA_dtdt)"""
        return _core.ChFrameMovingD_Compute_Adtdt(self, mA_dtdt)

    def GetA_dt(self):
        r"""GetA_dt(ChFrameMovingD self) -> ChMatrix33D"""
        return _core.ChFrameMovingD_GetA_dt(self)

    def GetA_dtdt(self):
        r"""GetA_dtdt(ChFrameMovingD self) -> ChMatrix33D"""
        return _core.ChFrameMovingD_GetA_dtdt(self)

    def ConcatenatePreTransformation(self, T):
        r"""ConcatenatePreTransformation(ChFrameMovingD self, ChFrameMovingD T)"""
        return _core.ChFrameMovingD_ConcatenatePreTransformation(self, T)

    def ConcatenatePostTransformation(self, T):
        r"""ConcatenatePostTransformation(ChFrameMovingD self, ChFrameMovingD T)"""
        return _core.ChFrameMovingD_ConcatenatePostTransformation(self, T)

    def PointSpeedLocalToParent(self, *args):
        r"""
        PointSpeedLocalToParent(ChFrameMovingD self, ChVectorD localpos) -> ChVectorD
        PointSpeedLocalToParent(ChFrameMovingD self, ChVectorD localpos, ChVectorD localspeed) -> ChVectorD
        """
        return _core.ChFrameMovingD_PointSpeedLocalToParent(self, *args)

    def PointAccelerationLocalToParent(self, *args):
        r"""
        PointAccelerationLocalToParent(ChFrameMovingD self, ChVectorD localpos) -> ChVectorD
        PointAccelerationLocalToParent(ChFrameMovingD self, ChVectorD localpos, ChVectorD localspeed, ChVectorD localacc) -> ChVectorD
        """
        return _core.ChFrameMovingD_PointAccelerationLocalToParent(self, *args)

    def PointSpeedParentToLocal(self, parentpos, parentspeed):
        r"""PointSpeedParentToLocal(ChFrameMovingD self, ChVectorD parentpos, ChVectorD parentspeed) -> ChVectorD"""
        return _core.ChFrameMovingD_PointSpeedParentToLocal(self, parentpos, parentspeed)

    def PointAccelerationParentToLocal(self, parentpos, parentspeed, parentacc):
        r"""PointAccelerationParentToLocal(ChFrameMovingD self, ChVectorD parentpos, ChVectorD parentspeed, ChVectorD parentacc) -> ChVectorD"""
        return _core.ChFrameMovingD_PointAccelerationParentToLocal(self, parentpos, parentspeed, parentacc)

    def TransformLocalToParent(self, local, parent):
        r"""TransformLocalToParent(ChFrameMovingD self, ChFrameMovingD local, ChFrameMovingD parent)"""
        return _core.ChFrameMovingD_TransformLocalToParent(self, local, parent)

    def TransformParentToLocal(self, parent, local):
        r"""TransformParentToLocal(ChFrameMovingD self, ChFrameMovingD parent, ChFrameMovingD local)"""
        return _core.ChFrameMovingD_TransformParentToLocal(self, parent, local)

    def Equals(self, *args):
        r"""
        Equals(ChFrameMovingD self, ChFrameMovingD other) -> bool
        Equals(ChFrameMovingD self, ChFrameMovingD other, double tol) -> bool
        """
        return _core.ChFrameMovingD_Equals(self, *args)

    def Invert(self):
        r"""Invert(ChFrameMovingD self)"""
        return _core.ChFrameMovingD_Invert(self)

    def GetInverse(self):
        r"""GetInverse(ChFrameMovingD self) -> ChFrameMovingD"""
        return _core.ChFrameMovingD_GetInverse(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChFrameMovingD self, ChArchiveOut & marchive)"""
        return _core.ChFrameMovingD_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChFrameMovingD self, chrono::ChArchiveIn & marchive)"""
        return _core.ChFrameMovingD_ArchiveIN(self, marchive)

# Register ChFrameMovingD in _core:
_core.ChFrameMovingD_swigregister(ChFrameMovingD)

class ChStream(object):
    r"""Proxy of C++ chrono::ChStream class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CHFILE_NORMAL = _core.ChStream_CHFILE_NORMAL
    
    CHFILE_NOWRITE = _core.ChStream_CHFILE_NOWRITE
    
    CHFILE_SAFEWRITE = _core.ChStream_CHFILE_SAFEWRITE
    
    CHFILE_OPENLATER = _core.ChStream_CHFILE_OPENLATER
    
    CHSTREAM_OK = _core.ChStream_CHSTREAM_OK
    
    CHSTREAM_EOF = _core.ChStream_CHSTREAM_EOF
    
    CHSTREAM_FAIL = _core.ChStream_CHSTREAM_FAIL
    

    def __init__(self):
        r"""__init__(ChStream self) -> ChStream"""
        _core.ChStream_swiginit(self, _core.new_ChStream())
    __swig_destroy__ = _core.delete_ChStream

# Register ChStream in _core:
_core.ChStream_swigregister(ChStream)

class ChStreamOut(ChStream):
    r"""Proxy of C++ chrono::ChStreamOut class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChStreamOut

# Register ChStreamOut in _core:
_core.ChStreamOut_swigregister(ChStreamOut)

class ChStreamIn(ChStream):
    r"""Proxy of C++ chrono::ChStreamIn class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChStreamIn

    def End_of_stream(self):
        r"""End_of_stream(ChStreamIn self) -> bool"""
        return _core.ChStreamIn_End_of_stream(self)

# Register ChStreamIn in _core:
_core.ChStreamIn_swigregister(ChStreamIn)

class ChStreamOutAscii(ChStreamOut):
    r"""Proxy of C++ chrono::ChStreamOutAscii class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChStreamOutAscii

    def __lshift__(self, *args):
        r"""
        __lshift__(ChStreamOutAscii self, bool bVal) -> ChStreamOutAscii
        __lshift__(ChStreamOutAscii self, char tch) -> ChStreamOutAscii
        __lshift__(ChStreamOutAscii self, int const nVal) -> ChStreamOutAscii
        __lshift__(ChStreamOutAscii self, double const dVal) -> ChStreamOutAscii
        __lshift__(ChStreamOutAscii self, float const dVal) -> ChStreamOutAscii
        __lshift__(ChStreamOutAscii self, unsigned int unVal) -> ChStreamOutAscii
        __lshift__(ChStreamOutAscii self, char * str) -> ChStreamOutAscii
        __lshift__(ChStreamOutAscii self, char const * str) -> ChStreamOutAscii
        __lshift__(ChStreamOutAscii self, std::string & str) -> ChStreamOutAscii
        __lshift__(ChStreamOutAscii self, unsigned long unVal) -> ChStreamOutAscii
        __lshift__(ChStreamOutAscii self, unsigned long long unVal) -> ChStreamOutAscii
        """
        return _core.ChStreamOutAscii___lshift__(self, *args)

    def Format(self, formatString):
        r"""Format(ChStreamOutAscii self, char * formatString)"""
        return _core.ChStreamOutAscii_Format(self, formatString)

    def SetNumFormat(self, mf):
        r"""SetNumFormat(ChStreamOutAscii self, char const * mf)"""
        return _core.ChStreamOutAscii_SetNumFormat(self, mf)

    def GetNumFormat(self):
        r"""GetNumFormat(ChStreamOutAscii self) -> char *"""
        return _core.ChStreamOutAscii_GetNumFormat(self)

    def SetCommentTrailer(self, mt):
        r"""SetCommentTrailer(ChStreamOutAscii self, char * mt)"""
        return _core.ChStreamOutAscii_SetCommentTrailer(self, mt)

    def CR(self):
        r"""CR(ChStreamOutAscii self)"""
        return _core.ChStreamOutAscii_CR(self)

    def TAB(self):
        r"""TAB(ChStreamOutAscii self)"""
        return _core.ChStreamOutAscii_TAB(self)

    def Comment(self, m_string):
        r"""Comment(ChStreamOutAscii self, char [] m_string)"""
        return _core.ChStreamOutAscii_Comment(self, m_string)

    def Bar(self):
        r"""Bar(ChStreamOutAscii self)"""
        return _core.ChStreamOutAscii_Bar(self)

# Register ChStreamOutAscii in _core:
_core.ChStreamOutAscii_swigregister(ChStreamOutAscii)

class ChStreamInAscii(ChStreamIn):
    r"""Proxy of C++ chrono::ChStreamInAscii class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChStreamInAscii

    def __rshift__(self, *args):
        r"""
        __rshift__(ChStreamInAscii self, bool & bVal) -> ChStreamInAscii
        __rshift__(ChStreamInAscii self, char & tch) -> ChStreamInAscii
        __rshift__(ChStreamInAscii self, int & nVal) -> ChStreamInAscii
        __rshift__(ChStreamInAscii self, double & dVal) -> ChStreamInAscii
        __rshift__(ChStreamInAscii self, float & dVal) -> ChStreamInAscii
        __rshift__(ChStreamInAscii self, unsigned int & unVal) -> ChStreamInAscii
        __rshift__(ChStreamInAscii self, char * str) -> ChStreamInAscii
        __rshift__(ChStreamInAscii self, std::string & str) -> ChStreamInAscii
        """
        return _core.ChStreamInAscii___rshift__(self, *args)

    def SetNumFormat(self, mf):
        r"""SetNumFormat(ChStreamInAscii self, char const * mf)"""
        return _core.ChStreamInAscii_SetNumFormat(self, mf)

# Register ChStreamInAscii in _core:
_core.ChStreamInAscii_swigregister(ChStreamInAscii)

class ChBinaryArchive(object):
    r"""Proxy of C++ chrono::ChBinaryArchive class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChBinaryArchive self) -> ChBinaryArchive"""
        _core.ChBinaryArchive_swiginit(self, _core.new_ChBinaryArchive())
    __swig_destroy__ = _core.delete_ChBinaryArchive

    def IsBigEndianMachine(self):
        r"""IsBigEndianMachine(ChBinaryArchive self) -> bool"""
        return _core.ChBinaryArchive_IsBigEndianMachine(self)

    def Init(self):
        r"""Init(ChBinaryArchive self)"""
        return _core.ChBinaryArchive_Init(self)

    def PutPointer(self, object):
        r"""PutPointer(ChBinaryArchive self, void * object) -> int"""
        return _core.ChBinaryArchive_PutPointer(self, object)

# Register ChBinaryArchive in _core:
_core.ChBinaryArchive_swigregister(ChBinaryArchive)

class ChStreamOutBinary(ChStreamOut, ChBinaryArchive):
    r"""Proxy of C++ chrono::ChStreamOutBinary class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChStreamOutBinary

    def __lshift__(self, *args):
        r"""
        __lshift__(ChStreamOutBinary self, char Val) -> ChStreamOutBinary
        __lshift__(ChStreamOutBinary self, bool Val) -> ChStreamOutBinary
        __lshift__(ChStreamOutBinary self, int Val) -> ChStreamOutBinary
        __lshift__(ChStreamOutBinary self, unsigned int Val) -> ChStreamOutBinary
        __lshift__(ChStreamOutBinary self, double Val) -> ChStreamOutBinary
        __lshift__(ChStreamOutBinary self, float Val) -> ChStreamOutBinary
        __lshift__(ChStreamOutBinary self, std::string & str) -> ChStreamOutBinary
        __lshift__(ChStreamOutBinary self, long Val) -> ChStreamOutBinary
        __lshift__(ChStreamOutBinary self, unsigned long Val) -> ChStreamOutBinary
        __lshift__(ChStreamOutBinary self, unsigned long long Val) -> ChStreamOutBinary
        __lshift__(ChStreamOutBinary self, char const * str) -> ChStreamOutBinary
        __lshift__(ChStreamOutBinary self, char * str) -> ChStreamOutBinary
        """
        return _core.ChStreamOutBinary___lshift__(self, *args)

    def VersionWrite(self, mver):
        r"""VersionWrite(ChStreamOutBinary self, int mver)"""
        return _core.ChStreamOutBinary_VersionWrite(self, mver)

# Register ChStreamOutBinary in _core:
_core.ChStreamOutBinary_swigregister(ChStreamOutBinary)

class ChStreamInBinary(ChStreamIn, ChBinaryArchive):
    r"""Proxy of C++ chrono::ChStreamInBinary class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChStreamInBinary

    def __rshift__(self, *args):
        r"""
        __rshift__(ChStreamInBinary self, char & Val) -> ChStreamInBinary
        __rshift__(ChStreamInBinary self, bool & Val) -> ChStreamInBinary
        __rshift__(ChStreamInBinary self, int & Val) -> ChStreamInBinary
        __rshift__(ChStreamInBinary self, unsigned int & Val) -> ChStreamInBinary
        __rshift__(ChStreamInBinary self, double & Val) -> ChStreamInBinary
        __rshift__(ChStreamInBinary self, float & Val) -> ChStreamInBinary
        __rshift__(ChStreamInBinary self, long & Val) -> ChStreamInBinary
        __rshift__(ChStreamInBinary self, unsigned long & Val) -> ChStreamInBinary
        __rshift__(ChStreamInBinary self, unsigned long long & Val) -> ChStreamInBinary
        __rshift__(ChStreamInBinary self, std::string & str) -> ChStreamInBinary
        __rshift__(ChStreamInBinary self, char * str) -> ChStreamInBinary
        """
        return _core.ChStreamInBinary___rshift__(self, *args)

    def VersionRead(self):
        r"""VersionRead(ChStreamInBinary self) -> int"""
        return _core.ChStreamInBinary_VersionRead(self)

# Register ChStreamInBinary in _core:
_core.ChStreamInBinary_swigregister(ChStreamInBinary)

class ChStreamFile(object):
    r"""Proxy of C++ chrono::ChStreamFile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, filename, mmode):
        r"""__init__(ChStreamFile self, char const * filename, std::ios::openmode mmode) -> ChStreamFile"""
        _core.ChStreamFile_swiginit(self, _core.new_ChStreamFile(filename, mmode))
    __swig_destroy__ = _core.delete_ChStreamFile

    def Flush(self):
        r"""Flush(ChStreamFile self)"""
        return _core.ChStreamFile_Flush(self)

    def Write(self, data, n):
        r"""Write(ChStreamFile self, char const * data, size_t n)"""
        return _core.ChStreamFile_Write(self, data, n)

    def Read(self, data, n):
        r"""Read(ChStreamFile self, char * data, size_t n)"""
        return _core.ChStreamFile_Read(self, data, n)

    def End_of_stream(self):
        r"""End_of_stream(ChStreamFile self) -> bool"""
        return _core.ChStreamFile_End_of_stream(self)

    def GetFstream(self):
        r"""GetFstream(ChStreamFile self) -> std::fstream &"""
        return _core.ChStreamFile_GetFstream(self)

# Register ChStreamFile in _core:
_core.ChStreamFile_swigregister(ChStreamFile)

class ChStreamOstreamWrapper(object):
    r"""Proxy of C++ chrono::ChStreamOstreamWrapper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mfile):
        r"""__init__(ChStreamOstreamWrapper self, std::ostream * mfile) -> ChStreamOstreamWrapper"""
        _core.ChStreamOstreamWrapper_swiginit(self, _core.new_ChStreamOstreamWrapper(mfile))
    __swig_destroy__ = _core.delete_ChStreamOstreamWrapper

    def Write(self, data, n):
        r"""Write(ChStreamOstreamWrapper self, char const * data, size_t n)"""
        return _core.ChStreamOstreamWrapper_Write(self, data, n)

    def End_of_stream(self):
        r"""End_of_stream(ChStreamOstreamWrapper self) -> bool"""
        return _core.ChStreamOstreamWrapper_End_of_stream(self)

    def GetOstream(self):
        r"""GetOstream(ChStreamOstreamWrapper self) -> std::ostream *"""
        return _core.ChStreamOstreamWrapper_GetOstream(self)

# Register ChStreamOstreamWrapper in _core:
_core.ChStreamOstreamWrapper_swigregister(ChStreamOstreamWrapper)

class ChStreamIstreamWrapper(object):
    r"""Proxy of C++ chrono::ChStreamIstreamWrapper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mfile):
        r"""__init__(ChStreamIstreamWrapper self, std::istream * mfile) -> ChStreamIstreamWrapper"""
        _core.ChStreamIstreamWrapper_swiginit(self, _core.new_ChStreamIstreamWrapper(mfile))
    __swig_destroy__ = _core.delete_ChStreamIstreamWrapper

    def Read(self, data, n):
        r"""Read(ChStreamIstreamWrapper self, char * data, size_t n)"""
        return _core.ChStreamIstreamWrapper_Read(self, data, n)

    def End_of_stream(self):
        r"""End_of_stream(ChStreamIstreamWrapper self) -> bool"""
        return _core.ChStreamIstreamWrapper_End_of_stream(self)

    def GetIstream(self):
        r"""GetIstream(ChStreamIstreamWrapper self) -> std::istream *"""
        return _core.ChStreamIstreamWrapper_GetIstream(self)

# Register ChStreamIstreamWrapper in _core:
_core.ChStreamIstreamWrapper_swigregister(ChStreamIstreamWrapper)

class ChStreamVectorWrapper(object):
    r"""Proxy of C++ chrono::ChStreamVectorWrapper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mchars):
        r"""__init__(ChStreamVectorWrapper self, std::vector< char,std::allocator< char > > * mchars) -> ChStreamVectorWrapper"""
        _core.ChStreamVectorWrapper_swiginit(self, _core.new_ChStreamVectorWrapper(mchars))
    __swig_destroy__ = _core.delete_ChStreamVectorWrapper

    def Read(self, data, n):
        r"""Read(ChStreamVectorWrapper self, char * data, size_t n)"""
        return _core.ChStreamVectorWrapper_Read(self, data, n)

    def Write(self, data, n):
        r"""Write(ChStreamVectorWrapper self, char const * data, size_t n)"""
        return _core.ChStreamVectorWrapper_Write(self, data, n)

    def End_of_stream(self):
        r"""End_of_stream(ChStreamVectorWrapper self) -> bool"""
        return _core.ChStreamVectorWrapper_End_of_stream(self)

    def GetVector(self):
        r"""GetVector(ChStreamVectorWrapper self) -> std::vector< char,std::allocator< char > > *"""
        return _core.ChStreamVectorWrapper_GetVector(self)

    def Seek(self, position):
        r"""Seek(ChStreamVectorWrapper self, int position)"""
        return _core.ChStreamVectorWrapper_Seek(self, position)

# Register ChStreamVectorWrapper in _core:
_core.ChStreamVectorWrapper_swigregister(ChStreamVectorWrapper)

class ChStreamOutBinaryStream(ChStreamOstreamWrapper, ChStreamOutBinary):
    r"""Proxy of C++ chrono::ChStreamOutBinaryStream class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mfile):
        r"""__init__(ChStreamOutBinaryStream self, std::ostream * mfile) -> ChStreamOutBinaryStream"""
        _core.ChStreamOutBinaryStream_swiginit(self, _core.new_ChStreamOutBinaryStream(mfile))
    __swig_destroy__ = _core.delete_ChStreamOutBinaryStream

    def End_of_stream(self):
        r"""End_of_stream(ChStreamOutBinaryStream self) -> bool"""
        return _core.ChStreamOutBinaryStream_End_of_stream(self)

# Register ChStreamOutBinaryStream in _core:
_core.ChStreamOutBinaryStream_swigregister(ChStreamOutBinaryStream)

class ChStreamInBinaryStream(ChStreamIstreamWrapper, ChStreamInBinary):
    r"""Proxy of C++ chrono::ChStreamInBinaryStream class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mfile):
        r"""__init__(ChStreamInBinaryStream self, std::istream * mfile) -> ChStreamInBinaryStream"""
        _core.ChStreamInBinaryStream_swiginit(self, _core.new_ChStreamInBinaryStream(mfile))
    __swig_destroy__ = _core.delete_ChStreamInBinaryStream

    def End_of_stream(self):
        r"""End_of_stream(ChStreamInBinaryStream self) -> bool"""
        return _core.ChStreamInBinaryStream_End_of_stream(self)

# Register ChStreamInBinaryStream in _core:
_core.ChStreamInBinaryStream_swigregister(ChStreamInBinaryStream)

class ChStreamOutBinaryVector(ChStreamVectorWrapper, ChStreamOutBinary):
    r"""Proxy of C++ chrono::ChStreamOutBinaryVector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mchars):
        r"""__init__(ChStreamOutBinaryVector self, std::vector< char,std::allocator< char > > * mchars) -> ChStreamOutBinaryVector"""
        _core.ChStreamOutBinaryVector_swiginit(self, _core.new_ChStreamOutBinaryVector(mchars))
    __swig_destroy__ = _core.delete_ChStreamOutBinaryVector

    def End_of_stream(self):
        r"""End_of_stream(ChStreamOutBinaryVector self) -> bool"""
        return _core.ChStreamOutBinaryVector_End_of_stream(self)

# Register ChStreamOutBinaryVector in _core:
_core.ChStreamOutBinaryVector_swigregister(ChStreamOutBinaryVector)

class ChStreamInBinaryVector(ChStreamVectorWrapper, ChStreamInBinary):
    r"""Proxy of C++ chrono::ChStreamInBinaryVector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mchars):
        r"""__init__(ChStreamInBinaryVector self, std::vector< char,std::allocator< char > > * mchars) -> ChStreamInBinaryVector"""
        _core.ChStreamInBinaryVector_swiginit(self, _core.new_ChStreamInBinaryVector(mchars))
    __swig_destroy__ = _core.delete_ChStreamInBinaryVector

    def End_of_stream(self):
        r"""End_of_stream(ChStreamInBinaryVector self) -> bool"""
        return _core.ChStreamInBinaryVector_End_of_stream(self)

# Register ChStreamInBinaryVector in _core:
_core.ChStreamInBinaryVector_swigregister(ChStreamInBinaryVector)

class ChStreamOutAsciiVector(ChStreamVectorWrapper, ChStreamOutAscii):
    r"""Proxy of C++ chrono::ChStreamOutAsciiVector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mchars):
        r"""__init__(ChStreamOutAsciiVector self, std::vector< char,std::allocator< char > > * mchars) -> ChStreamOutAsciiVector"""
        _core.ChStreamOutAsciiVector_swiginit(self, _core.new_ChStreamOutAsciiVector(mchars))
    __swig_destroy__ = _core.delete_ChStreamOutAsciiVector

    def End_of_stream(self):
        r"""End_of_stream(ChStreamOutAsciiVector self) -> bool"""
        return _core.ChStreamOutAsciiVector_End_of_stream(self)

# Register ChStreamOutAsciiVector in _core:
_core.ChStreamOutAsciiVector_swigregister(ChStreamOutAsciiVector)

class ChStreamInAsciiVector(ChStreamVectorWrapper, ChStreamInAscii):
    r"""Proxy of C++ chrono::ChStreamInAsciiVector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mchars):
        r"""__init__(ChStreamInAsciiVector self, std::vector< char,std::allocator< char > > * mchars) -> ChStreamInAsciiVector"""
        _core.ChStreamInAsciiVector_swiginit(self, _core.new_ChStreamInAsciiVector(mchars))
    __swig_destroy__ = _core.delete_ChStreamInAsciiVector

    def End_of_stream(self):
        r"""End_of_stream(ChStreamInAsciiVector self) -> bool"""
        return _core.ChStreamInAsciiVector_End_of_stream(self)

# Register ChStreamInAsciiVector in _core:
_core.ChStreamInAsciiVector_swigregister(ChStreamInAsciiVector)

class ChStreamOutBinaryFile(ChStreamFile, ChStreamOutBinary):
    r"""Proxy of C++ chrono::ChStreamOutBinaryFile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChStreamOutBinaryFile self, char const * filename, std::ios::openmode mmode=std::ios::trunc) -> ChStreamOutBinaryFile"""
        _core.ChStreamOutBinaryFile_swiginit(self, _core.new_ChStreamOutBinaryFile(*args))
    __swig_destroy__ = _core.delete_ChStreamOutBinaryFile

# Register ChStreamOutBinaryFile in _core:
_core.ChStreamOutBinaryFile_swigregister(ChStreamOutBinaryFile)

class ChStreamOutAsciiFile(ChStreamFile, ChStreamOutAscii):
    r"""Proxy of C++ chrono::ChStreamOutAsciiFile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChStreamOutAsciiFile self, char const * filename, std::ios::openmode mmode=std::ios::trunc) -> ChStreamOutAsciiFile"""
        _core.ChStreamOutAsciiFile_swiginit(self, _core.new_ChStreamOutAsciiFile(*args))
    __swig_destroy__ = _core.delete_ChStreamOutAsciiFile

# Register ChStreamOutAsciiFile in _core:
_core.ChStreamOutAsciiFile_swigregister(ChStreamOutAsciiFile)

class ChStreamInBinaryFile(ChStreamFile, ChStreamInBinary):
    r"""Proxy of C++ chrono::ChStreamInBinaryFile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, filename):
        r"""__init__(ChStreamInBinaryFile self, char const * filename) -> ChStreamInBinaryFile"""
        _core.ChStreamInBinaryFile_swiginit(self, _core.new_ChStreamInBinaryFile(filename))
    __swig_destroy__ = _core.delete_ChStreamInBinaryFile

    def End_of_stream(self):
        r"""End_of_stream(ChStreamInBinaryFile self) -> bool"""
        return _core.ChStreamInBinaryFile_End_of_stream(self)

# Register ChStreamInBinaryFile in _core:
_core.ChStreamInBinaryFile_swigregister(ChStreamInBinaryFile)

class ChStreamInAsciiFile(ChStreamFile, ChStreamInAscii):
    r"""Proxy of C++ chrono::ChStreamInAsciiFile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, filename):
        r"""__init__(ChStreamInAsciiFile self, char const * filename) -> ChStreamInAsciiFile"""
        _core.ChStreamInAsciiFile_swiginit(self, _core.new_ChStreamInAsciiFile(filename))
    __swig_destroy__ = _core.delete_ChStreamInAsciiFile

    def End_of_stream(self):
        r"""End_of_stream(ChStreamInAsciiFile self) -> bool"""
        return _core.ChStreamInAsciiFile_End_of_stream(self)

# Register ChStreamInAsciiFile in _core:
_core.ChStreamInAsciiFile_swigregister(ChStreamInAsciiFile)

class ChLog(ChStreamOutAscii):
    r"""Proxy of C++ chrono::ChLog class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    CHERROR = _core.ChLog_CHERROR
    
    CHWARNING = _core.ChLog_CHWARNING
    
    CHMESSAGE = _core.ChLog_CHMESSAGE
    
    CHSTATUS = _core.ChLog_CHSTATUS
    
    CHQUIET = _core.ChLog_CHQUIET
    

    def Flush(self):
        r"""Flush(ChLog self)"""
        return _core.ChLog_Flush(self)

    def SetDefaultLevel(self, mlev):
        r"""SetDefaultLevel(ChLog self, chrono::ChLog::eChLogLevel mlev)"""
        return _core.ChLog_SetDefaultLevel(self, mlev)

    def SetCurrentLevel(self, mlev):
        r"""SetCurrentLevel(ChLog self, chrono::ChLog::eChLogLevel mlev)"""
        return _core.ChLog_SetCurrentLevel(self, mlev)

    def GetCurrentLevel(self):
        r"""GetCurrentLevel(ChLog self) -> chrono::ChLog::eChLogLevel"""
        return _core.ChLog_GetCurrentLevel(self)

    def RestoreDefaultLevel(self):
        r"""RestoreDefaultLevel(ChLog self)"""
        return _core.ChLog_RestoreDefaultLevel(self)

    def __sub__(self, mnewlev):
        r"""__sub__(ChLog self, chrono::ChLog::eChLogLevel mnewlev) -> ChLog"""
        return _core.ChLog___sub__(self, mnewlev)
    __swig_destroy__ = _core.delete_ChLog

# Register ChLog in _core:
_core.ChLog_swigregister(ChLog)

class ChLogConsole(ChLog, ChStreamOstreamWrapper):
    r"""Proxy of C++ chrono::ChLogConsole class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChLogConsole self) -> ChLogConsole"""
        _core.ChLogConsole_swiginit(self, _core.new_ChLogConsole())
    __swig_destroy__ = _core.delete_ChLogConsole

    def Output(self, data, n):
        r"""Output(ChLogConsole self, char const * data, size_t n)"""
        return _core.ChLogConsole_Output(self, data, n)

# Register ChLogConsole in _core:
_core.ChLogConsole_swigregister(ChLogConsole)


def GetLog():
    r"""GetLog() -> ChLog"""
    return _core.GetLog()

def SetLog(new_logobject):
    r"""SetLog(ChLog new_logobject)"""
    return _core.SetLog(new_logobject)

def SetLogDefault():
    r"""SetLogDefault()"""
    return _core.SetLogDefault()

def ChAtan2(mcos, msin):
    r"""ChAtan2(double mcos, double msin) -> double"""
    return _core.ChAtan2(mcos, msin)

def ChRandom():
    r"""ChRandom() -> double"""
    return _core.ChRandom()

def ChSetRandomSeed(newseed):
    r"""ChSetRandomSeed(long newseed)"""
    return _core.ChSetRandomSeed(newseed)

def ChNoise(x, amp, freq, octaves, amp_ratio):
    r"""ChNoise(double x, double amp, double freq, int octaves, double amp_ratio) -> double"""
    return _core.ChNoise(x, amp, freq, octaves, amp_ratio)

def ChMax(*args):
    r"""
    ChMax(int a, int b) -> int
    ChMax(double a, double b) -> double
    """
    return _core.ChMax(*args)

def ChMin(*args):
    r"""
    ChMin(int a, int b) -> int
    ChMin(double a, double b) -> double
    """
    return _core.ChMin(*args)

def ChSineStep(x, x1, y1, x2, y2):
    r"""ChSineStep(double x, double x1, double y1, double x2, double y2) -> double"""
    return _core.ChSineStep(x, x1, y1, x2, y2)

def ChPeriodicPar(u, closed):
    r"""ChPeriodicPar(double & u, int closed)"""
    return _core.ChPeriodicPar(u, closed)
class ChTimerD(object):
    r"""Proxy of C++ chrono::ChTimer< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChTimerD self) -> ChTimerD"""
        _core.ChTimerD_swiginit(self, _core.new_ChTimerD())

    def start(self):
        r"""start(ChTimerD self)"""
        return _core.ChTimerD_start(self)

    def stop(self):
        r"""stop(ChTimerD self)"""
        return _core.ChTimerD_stop(self)

    def reset(self):
        r"""reset(ChTimerD self)"""
        return _core.ChTimerD_reset(self)

    def GetTimeMilliseconds(self):
        r"""GetTimeMilliseconds(ChTimerD self) -> unsigned long long"""
        return _core.ChTimerD_GetTimeMilliseconds(self)

    def GetTimeMillisecondsIntermediate(self):
        r"""GetTimeMillisecondsIntermediate(ChTimerD self) -> unsigned long long"""
        return _core.ChTimerD_GetTimeMillisecondsIntermediate(self)

    def GetTimeMicroseconds(self):
        r"""GetTimeMicroseconds(ChTimerD self) -> unsigned long long"""
        return _core.ChTimerD_GetTimeMicroseconds(self)

    def GetTimeMicrosecondsIntermediate(self):
        r"""GetTimeMicrosecondsIntermediate(ChTimerD self) -> unsigned long long"""
        return _core.ChTimerD_GetTimeMicrosecondsIntermediate(self)

    def GetTimeSeconds(self):
        r"""GetTimeSeconds(ChTimerD self) -> double"""
        return _core.ChTimerD_GetTimeSeconds(self)

    def GetTimeSecondsIntermediate(self):
        r"""GetTimeSecondsIntermediate(ChTimerD self) -> double"""
        return _core.ChTimerD_GetTimeSecondsIntermediate(self)

    def __call__(self):
        r"""__call__(ChTimerD self) -> double"""
        return _core.ChTimerD___call__(self)
    __swig_destroy__ = _core.delete_ChTimerD

# Register ChTimerD in _core:
_core.ChTimerD_swigregister(ChTimerD)
CH_C_PI = cvar.CH_C_PI
CH_C_PI_2 = cvar.CH_C_PI_2
CH_C_PI_4 = cvar.CH_C_PI_4
CH_C_1_PI = cvar.CH_C_1_PI
CH_C_2PI = cvar.CH_C_2PI
CH_C_RAD_TO_DEG = cvar.CH_C_RAD_TO_DEG
CH_C_DEG_TO_RAD = cvar.CH_C_DEG_TO_RAD
CH_C_SQRT_2 = cvar.CH_C_SQRT_2
CH_C_SQRT_1_2 = cvar.CH_C_SQRT_1_2
CH_C_E = cvar.CH_C_E
CH_C_LOG2E = cvar.CH_C_LOG2E
CH_C_LOG10E = cvar.CH_C_LOG10E
CH_C_LN2 = cvar.CH_C_LN2
CH_C_LN10 = cvar.CH_C_LN10
BDF_STEP_HIGH = cvar.BDF_STEP_HIGH
BDF_STEP_LOW = cvar.BDF_STEP_LOW

class ChRealtimeStepTimer(ChTimerD):
    r"""Proxy of C++ chrono::ChRealtimeStepTimer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChRealtimeStepTimer self) -> ChRealtimeStepTimer"""
        _core.ChRealtimeStepTimer_swiginit(self, _core.new_ChRealtimeStepTimer())

    def Spin(self, step):
        r"""Spin(ChRealtimeStepTimer self, double step)"""
        return _core.ChRealtimeStepTimer_Spin(self, step)

    def SuggestSimulationStep(self, *args):
        r"""SuggestSimulationStep(ChRealtimeStepTimer self, double max_step=0.02, double min_step=std::numeric_limits< double >::epsilon()) -> double"""
        return _core.ChRealtimeStepTimer_SuggestSimulationStep(self, *args)
    __swig_destroy__ = _core.delete_ChRealtimeStepTimer

# Register ChRealtimeStepTimer in _core:
_core.ChRealtimeStepTimer_swigregister(ChRealtimeStepTimer)

class ChTransformD(object):
    r"""Proxy of C++ chrono::ChTransform< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def TransformParentToLocal(*args):
        r"""
        TransformParentToLocal(ChVectorD parent, ChVectorD origin, ChMatrix33D alignment) -> ChVectorD
        TransformParentToLocal(ChVectorD parent, ChVectorD origin, ChQuaternionD alignment) -> ChVectorD
        """
        return _core.ChTransformD_TransformParentToLocal(*args)

    @staticmethod
    def TransformLocalToParent(*args):
        r"""
        TransformLocalToParent(ChVectorD local, ChVectorD origin, ChMatrix33D alignment) -> ChVectorD
        TransformLocalToParent(ChVectorD local, ChVectorD origin, ChQuaternionD alignment) -> ChVectorD
        """
        return _core.ChTransformD_TransformLocalToParent(*args)

    def __init__(self):
        r"""__init__(ChTransformD self) -> ChTransformD"""
        _core.ChTransformD_swiginit(self, _core.new_ChTransformD())
    __swig_destroy__ = _core.delete_ChTransformD

# Register ChTransformD in _core:
_core.ChTransformD_swigregister(ChTransformD)

def ChTransformD_TransformParentToLocal(*args):
    r"""
    ChTransformD_TransformParentToLocal(ChVectorD parent, ChVectorD origin, ChMatrix33D alignment) -> ChVectorD
    ChTransformD_TransformParentToLocal(ChVectorD parent, ChVectorD origin, ChQuaternionD alignment) -> ChVectorD
    """
    return _core.ChTransformD_TransformParentToLocal(*args)

def ChTransformD_TransformLocalToParent(*args):
    r"""
    ChTransformD_TransformLocalToParent(ChVectorD local, ChVectorD origin, ChMatrix33D alignment) -> ChVectorD
    ChTransformD_TransformLocalToParent(ChVectorD local, ChVectorD origin, ChQuaternionD alignment) -> ChVectorD
    """
    return _core.ChTransformD_TransformLocalToParent(*args)

class ChFunction(object):
    r"""Proxy of C++ chrono::ChFunction class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FUNCT_CUSTOM = _core.ChFunction_FUNCT_CUSTOM
    
    FUNCT_CONST = _core.ChFunction_FUNCT_CONST
    
    FUNCT_CONSTACC = _core.ChFunction_FUNCT_CONSTACC
    
    FUNCT_DERIVE = _core.ChFunction_FUNCT_DERIVE
    
    FUNCT_FILLET3 = _core.ChFunction_FUNCT_FILLET3
    
    FUNCT_INTEGRATE = _core.ChFunction_FUNCT_INTEGRATE
    
    FUNCT_MATLAB = _core.ChFunction_FUNCT_MATLAB
    
    FUNCT_MIRROR = _core.ChFunction_FUNCT_MIRROR
    
    FUNCT_MOCAP = _core.ChFunction_FUNCT_MOCAP
    
    FUNCT_NOISE = _core.ChFunction_FUNCT_NOISE
    
    FUNCT_OPERATION = _core.ChFunction_FUNCT_OPERATION
    
    FUNCT_OSCILLOSCOPE = _core.ChFunction_FUNCT_OSCILLOSCOPE
    
    FUNCT_POLY = _core.ChFunction_FUNCT_POLY
    
    FUNCT_POLY345 = _core.ChFunction_FUNCT_POLY345
    
    FUNCT_RAMP = _core.ChFunction_FUNCT_RAMP
    
    FUNCT_RECORDER = _core.ChFunction_FUNCT_RECORDER
    
    FUNCT_REPEAT = _core.ChFunction_FUNCT_REPEAT
    
    FUNCT_SEQUENCE = _core.ChFunction_FUNCT_SEQUENCE
    
    FUNCT_SIGMA = _core.ChFunction_FUNCT_SIGMA
    
    FUNCT_SINE = _core.ChFunction_FUNCT_SINE
    
    FUNCT_LAMBDA = _core.ChFunction_FUNCT_LAMBDA
    

    def __init__(self, *args):
        r"""
        __init__(ChFunction self) -> ChFunction
        __init__(ChFunction self, ChFunction other) -> ChFunction
        """
        if self.__class__ == ChFunction:
            _self = None
        else:
            _self = self
        _core.ChFunction_swiginit(self, _core.new_ChFunction(_self, *args))
    __swig_destroy__ = _core.delete_ChFunction

    def Get_Type(self):
        r"""Get_Type(ChFunction self) -> chrono::ChFunction::FunctionType"""
        return _core.ChFunction_Get_Type(self)

    def Get_y(self, x):
        r"""Get_y(ChFunction self, double x) -> double"""
        return _core.ChFunction_Get_y(self, x)

    def Get_y_dx(self, x):
        r"""Get_y_dx(ChFunction self, double x) -> double"""
        return _core.ChFunction_Get_y_dx(self, x)

    def Get_y_dxdx(self, x):
        r"""Get_y_dxdx(ChFunction self, double x) -> double"""
        return _core.ChFunction_Get_y_dxdx(self, x)

    def Get_weight(self, x):
        r"""Get_weight(ChFunction self, double x) -> double"""
        return _core.ChFunction_Get_weight(self, x)

    def Estimate_x_range(self, xmin, xmax):
        r"""Estimate_x_range(ChFunction self, double & xmin, double & xmax)"""
        return _core.ChFunction_Estimate_x_range(self, xmin, xmax)

    def Estimate_y_range(self, xmin, xmax, ymin, ymax, derivate):
        r"""Estimate_y_range(ChFunction self, double xmin, double xmax, double & ymin, double & ymax, int derivate)"""
        return _core.ChFunction_Estimate_y_range(self, xmin, xmax, ymin, ymax, derivate)

    def Get_y_dN(self, x, derivate):
        r"""Get_y_dN(ChFunction self, double x, int derivate) -> double"""
        return _core.ChFunction_Get_y_dN(self, x, derivate)

    def Update(self, x):
        r"""Update(ChFunction self, double const x)"""
        return _core.ChFunction_Update(self, x)

    def Compute_max(self, xmin, xmax, sampling_step, derivate):
        r"""Compute_max(ChFunction self, double xmin, double xmax, double sampling_step, int derivate) -> double"""
        return _core.ChFunction_Compute_max(self, xmin, xmax, sampling_step, derivate)

    def Compute_min(self, xmin, xmax, sampling_step, derivate):
        r"""Compute_min(ChFunction self, double xmin, double xmax, double sampling_step, int derivate) -> double"""
        return _core.ChFunction_Compute_min(self, xmin, xmax, sampling_step, derivate)

    def Compute_mean(self, xmin, xmax, sampling_step, derivate):
        r"""Compute_mean(ChFunction self, double xmin, double xmax, double sampling_step, int derivate) -> double"""
        return _core.ChFunction_Compute_mean(self, xmin, xmax, sampling_step, derivate)

    def Compute_sqrmean(self, xmin, xmax, sampling_step, derivate):
        r"""Compute_sqrmean(ChFunction self, double xmin, double xmax, double sampling_step, int derivate) -> double"""
        return _core.ChFunction_Compute_sqrmean(self, xmin, xmax, sampling_step, derivate)

    def Compute_int(self, xmin, xmax, sampling_step, derivate):
        r"""Compute_int(ChFunction self, double xmin, double xmax, double sampling_step, int derivate) -> double"""
        return _core.ChFunction_Compute_int(self, xmin, xmax, sampling_step, derivate)

    def Get_Ca_pos(self):
        r"""Get_Ca_pos(ChFunction self) -> double"""
        return _core.ChFunction_Get_Ca_pos(self)

    def Get_Ca_neg(self):
        r"""Get_Ca_neg(ChFunction self) -> double"""
        return _core.ChFunction_Get_Ca_neg(self)

    def Get_Cv(self):
        r"""Get_Cv(ChFunction self) -> double"""
        return _core.ChFunction_Get_Cv(self)

    def HandleNumber(self):
        r"""HandleNumber(ChFunction self) -> int"""
        return _core.ChFunction_HandleNumber(self)

    def HandleAccess(self, handle_id, mx, my, set_mode):
        r"""HandleAccess(ChFunction self, int handle_id, double mx, double my, bool set_mode) -> bool"""
        return _core.ChFunction_HandleAccess(self, handle_id, mx, my, set_mode)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChFunction self, ChArchiveOut & marchive)"""
        return _core.ChFunction_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChFunction self, chrono::ChArchiveIn & marchive)"""
        return _core.ChFunction_ArchiveIN(self, marchive)

    def FilePostscriptPlot(self, m_file, plotY, plotDY, plotDDY):
        r"""FilePostscriptPlot(ChFunction self, ChFile_ps * m_file, int plotY, int plotDY, int plotDDY) -> int"""
        return _core.ChFunction_FilePostscriptPlot(self, m_file, plotY, plotDY, plotDDY)

    def FileAsciiPairsSave(self, m_file, xmin=0, xmax=1, msamples=200):
        r"""FileAsciiPairsSave(ChFunction self, ChStreamOutAscii m_file, double xmin=0, double xmax=1, int msamples=200) -> int"""
        return _core.ChFunction_FileAsciiPairsSave(self, m_file, xmin, xmax, msamples)
    def __disown__(self):
        self.this.disown()
        _core.disown_ChFunction(self)
        return weakref.proxy(self)

# Register ChFunction in _core:
_core.ChFunction_swigregister(ChFunction)

class ChFunction_Const(ChFunction):
    r"""Proxy of C++ chrono::ChFunction_Const class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChFunction_Const self) -> ChFunction_Const
        __init__(ChFunction_Const self, double y_constant) -> ChFunction_Const
        __init__(ChFunction_Const self, ChFunction_Const other) -> ChFunction_Const
        """
        _core.ChFunction_Const_swiginit(self, _core.new_ChFunction_Const(*args))
    __swig_destroy__ = _core.delete_ChFunction_Const

    def Get_Type(self):
        r"""Get_Type(ChFunction_Const self) -> chrono::ChFunction::FunctionType"""
        return _core.ChFunction_Const_Get_Type(self)

    def Get_y(self, x):
        r"""Get_y(ChFunction_Const self, double x) -> double"""
        return _core.ChFunction_Const_Get_y(self, x)

    def Get_y_dx(self, x):
        r"""Get_y_dx(ChFunction_Const self, double x) -> double"""
        return _core.ChFunction_Const_Get_y_dx(self, x)

    def Get_y_dxdx(self, x):
        r"""Get_y_dxdx(ChFunction_Const self, double x) -> double"""
        return _core.ChFunction_Const_Get_y_dxdx(self, x)

    def Set_yconst(self, y_constant):
        r"""Set_yconst(ChFunction_Const self, double y_constant)"""
        return _core.ChFunction_Const_Set_yconst(self, y_constant)

    def Get_yconst(self):
        r"""Get_yconst(ChFunction_Const self) -> double"""
        return _core.ChFunction_Const_Get_yconst(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChFunction_Const self, ChArchiveOut & marchive)"""
        return _core.ChFunction_Const_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChFunction_Const self, chrono::ChArchiveIn & marchive)"""
        return _core.ChFunction_Const_ArchiveIN(self, marchive)

# Register ChFunction_Const in _core:
_core.ChFunction_Const_swigregister(ChFunction_Const)

class ChFunction_ConstAcc(ChFunction):
    r"""Proxy of C++ chrono::ChFunction_ConstAcc class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChFunction_ConstAcc self) -> ChFunction_ConstAcc
        __init__(ChFunction_ConstAcc self, double m_h, double m_av, double m_aw, double m_end) -> ChFunction_ConstAcc
        __init__(ChFunction_ConstAcc self, ChFunction_ConstAcc other) -> ChFunction_ConstAcc
        """
        _core.ChFunction_ConstAcc_swiginit(self, _core.new_ChFunction_ConstAcc(*args))
    __swig_destroy__ = _core.delete_ChFunction_ConstAcc

    def Get_Type(self):
        r"""Get_Type(ChFunction_ConstAcc self) -> chrono::ChFunction::FunctionType"""
        return _core.ChFunction_ConstAcc_Get_Type(self)

    def Get_y(self, x):
        r"""Get_y(ChFunction_ConstAcc self, double x) -> double"""
        return _core.ChFunction_ConstAcc_Get_y(self, x)

    def Get_y_dx(self, x):
        r"""Get_y_dx(ChFunction_ConstAcc self, double x) -> double"""
        return _core.ChFunction_ConstAcc_Get_y_dx(self, x)

    def Get_y_dxdx(self, x):
        r"""Get_y_dxdx(ChFunction_ConstAcc self, double x) -> double"""
        return _core.ChFunction_ConstAcc_Get_y_dxdx(self, x)

    def Set_end(self, m_end):
        r"""Set_end(ChFunction_ConstAcc self, double m_end)"""
        return _core.ChFunction_ConstAcc_Set_end(self, m_end)

    def Set_av(self, m_av):
        r"""Set_av(ChFunction_ConstAcc self, double m_av)"""
        return _core.ChFunction_ConstAcc_Set_av(self, m_av)

    def Set_aw(self, m_aw):
        r"""Set_aw(ChFunction_ConstAcc self, double m_aw)"""
        return _core.ChFunction_ConstAcc_Set_aw(self, m_aw)

    def Set_h(self, m_h):
        r"""Set_h(ChFunction_ConstAcc self, double m_h)"""
        return _core.ChFunction_ConstAcc_Set_h(self, m_h)

    def Set_avw(self, m_av, m_aw):
        r"""Set_avw(ChFunction_ConstAcc self, double m_av, double m_aw)"""
        return _core.ChFunction_ConstAcc_Set_avw(self, m_av, m_aw)

    def Get_end(self):
        r"""Get_end(ChFunction_ConstAcc self) -> double"""
        return _core.ChFunction_ConstAcc_Get_end(self)

    def Get_av(self):
        r"""Get_av(ChFunction_ConstAcc self) -> double"""
        return _core.ChFunction_ConstAcc_Get_av(self)

    def Get_aw(self):
        r"""Get_aw(ChFunction_ConstAcc self) -> double"""
        return _core.ChFunction_ConstAcc_Get_aw(self)

    def Get_h(self):
        r"""Get_h(ChFunction_ConstAcc self) -> double"""
        return _core.ChFunction_ConstAcc_Get_h(self)

    def Get_Ca_pos(self):
        r"""Get_Ca_pos(ChFunction_ConstAcc self) -> double"""
        return _core.ChFunction_ConstAcc_Get_Ca_pos(self)

    def Get_Ca_neg(self):
        r"""Get_Ca_neg(ChFunction_ConstAcc self) -> double"""
        return _core.ChFunction_ConstAcc_Get_Ca_neg(self)

    def Get_Cv(self):
        r"""Get_Cv(ChFunction_ConstAcc self) -> double"""
        return _core.ChFunction_ConstAcc_Get_Cv(self)

    def Estimate_x_range(self, xmin, xmax):
        r"""Estimate_x_range(ChFunction_ConstAcc self, double & xmin, double & xmax)"""
        return _core.ChFunction_ConstAcc_Estimate_x_range(self, xmin, xmax)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChFunction_ConstAcc self, ChArchiveOut & marchive)"""
        return _core.ChFunction_ConstAcc_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChFunction_ConstAcc self, chrono::ChArchiveIn & marchive)"""
        return _core.ChFunction_ConstAcc_ArchiveIN(self, marchive)

# Register ChFunction_ConstAcc in _core:
_core.ChFunction_ConstAcc_swigregister(ChFunction_ConstAcc)

class ChFunction_Derive(ChFunction):
    r"""Proxy of C++ chrono::ChFunction_Derive class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChFunction_Derive self) -> ChFunction_Derive
        __init__(ChFunction_Derive self, ChFunction_Derive other) -> ChFunction_Derive
        """
        _core.ChFunction_Derive_swiginit(self, _core.new_ChFunction_Derive(*args))
    __swig_destroy__ = _core.delete_ChFunction_Derive

    def Get_Type(self):
        r"""Get_Type(ChFunction_Derive self) -> chrono::ChFunction::FunctionType"""
        return _core.ChFunction_Derive_Get_Type(self)

    def Get_y(self, x):
        r"""Get_y(ChFunction_Derive self, double x) -> double"""
        return _core.ChFunction_Derive_Get_y(self, x)

    def Set_order(self, m_order):
        r"""Set_order(ChFunction_Derive self, int m_order)"""
        return _core.ChFunction_Derive_Set_order(self, m_order)

    def Get_order(self):
        r"""Get_order(ChFunction_Derive self) -> int"""
        return _core.ChFunction_Derive_Get_order(self)

    def Set_fa(self, m_fa):
        r"""Set_fa(ChFunction_Derive self, std::shared_ptr< chrono::ChFunction > m_fa)"""
        return _core.ChFunction_Derive_Set_fa(self, m_fa)

    def Get_fa(self):
        r"""Get_fa(ChFunction_Derive self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChFunction_Derive_Get_fa(self)

    def Estimate_x_range(self, xmin, xmax):
        r"""Estimate_x_range(ChFunction_Derive self, double & xmin, double & xmax)"""
        return _core.ChFunction_Derive_Estimate_x_range(self, xmin, xmax)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChFunction_Derive self, ChArchiveOut & marchive)"""
        return _core.ChFunction_Derive_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChFunction_Derive self, chrono::ChArchiveIn & marchive)"""
        return _core.ChFunction_Derive_ArchiveIN(self, marchive)

# Register ChFunction_Derive in _core:
_core.ChFunction_Derive_swigregister(ChFunction_Derive)

class ChFunction_Fillet3(ChFunction):
    r"""Proxy of C++ chrono::ChFunction_Fillet3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChFunction_Fillet3 self) -> ChFunction_Fillet3
        __init__(ChFunction_Fillet3 self, ChFunction_Fillet3 other) -> ChFunction_Fillet3
        """
        _core.ChFunction_Fillet3_swiginit(self, _core.new_ChFunction_Fillet3(*args))
    __swig_destroy__ = _core.delete_ChFunction_Fillet3

    def Get_Type(self):
        r"""Get_Type(ChFunction_Fillet3 self) -> chrono::ChFunction::FunctionType"""
        return _core.ChFunction_Fillet3_Get_Type(self)

    def Get_y(self, x):
        r"""Get_y(ChFunction_Fillet3 self, double x) -> double"""
        return _core.ChFunction_Fillet3_Get_y(self, x)

    def Get_y_dx(self, x):
        r"""Get_y_dx(ChFunction_Fillet3 self, double x) -> double"""
        return _core.ChFunction_Fillet3_Get_y_dx(self, x)

    def Get_y_dxdx(self, x):
        r"""Get_y_dxdx(ChFunction_Fillet3 self, double x) -> double"""
        return _core.ChFunction_Fillet3_Get_y_dxdx(self, x)

    def Set_end(self, m_end):
        r"""Set_end(ChFunction_Fillet3 self, double m_end)"""
        return _core.ChFunction_Fillet3_Set_end(self, m_end)

    def Get_end(self):
        r"""Get_end(ChFunction_Fillet3 self) -> double"""
        return _core.ChFunction_Fillet3_Get_end(self)

    def SetupCoefficients(self):
        r"""SetupCoefficients(ChFunction_Fillet3 self)"""
        return _core.ChFunction_Fillet3_SetupCoefficients(self)

    def Set_y1(self, my1):
        r"""Set_y1(ChFunction_Fillet3 self, double my1)"""
        return _core.ChFunction_Fillet3_Set_y1(self, my1)

    def Set_y2(self, my2):
        r"""Set_y2(ChFunction_Fillet3 self, double my2)"""
        return _core.ChFunction_Fillet3_Set_y2(self, my2)

    def Set_dy1(self, mdy1):
        r"""Set_dy1(ChFunction_Fillet3 self, double mdy1)"""
        return _core.ChFunction_Fillet3_Set_dy1(self, mdy1)

    def Set_dy2(self, mdy2):
        r"""Set_dy2(ChFunction_Fillet3 self, double mdy2)"""
        return _core.ChFunction_Fillet3_Set_dy2(self, mdy2)

    def Get_y1(self):
        r"""Get_y1(ChFunction_Fillet3 self) -> double"""
        return _core.ChFunction_Fillet3_Get_y1(self)

    def Get_y2(self):
        r"""Get_y2(ChFunction_Fillet3 self) -> double"""
        return _core.ChFunction_Fillet3_Get_y2(self)

    def Get_dy1(self):
        r"""Get_dy1(ChFunction_Fillet3 self) -> double"""
        return _core.ChFunction_Fillet3_Get_dy1(self)

    def Get_dy2(self):
        r"""Get_dy2(ChFunction_Fillet3 self) -> double"""
        return _core.ChFunction_Fillet3_Get_dy2(self)

    def Estimate_x_range(self, xmin, xmax):
        r"""Estimate_x_range(ChFunction_Fillet3 self, double & xmin, double & xmax)"""
        return _core.ChFunction_Fillet3_Estimate_x_range(self, xmin, xmax)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChFunction_Fillet3 self, ChArchiveOut & marchive)"""
        return _core.ChFunction_Fillet3_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChFunction_Fillet3 self, chrono::ChArchiveIn & marchive)"""
        return _core.ChFunction_Fillet3_ArchiveIN(self, marchive)

# Register ChFunction_Fillet3 in _core:
_core.ChFunction_Fillet3_swigregister(ChFunction_Fillet3)

class ChFunction_Integrate(ChFunction):
    r"""Proxy of C++ chrono::ChFunction_Integrate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChFunction_Integrate self) -> ChFunction_Integrate
        __init__(ChFunction_Integrate self, ChFunction_Integrate other) -> ChFunction_Integrate
        """
        _core.ChFunction_Integrate_swiginit(self, _core.new_ChFunction_Integrate(*args))
    __swig_destroy__ = _core.delete_ChFunction_Integrate

    def Get_Type(self):
        r"""Get_Type(ChFunction_Integrate self) -> chrono::ChFunction::FunctionType"""
        return _core.ChFunction_Integrate_Get_Type(self)

    def Get_y(self, x):
        r"""Get_y(ChFunction_Integrate self, double x) -> double"""
        return _core.ChFunction_Integrate_Get_y(self, x)

    def ComputeIntegral(self):
        r"""ComputeIntegral(ChFunction_Integrate self)"""
        return _core.ChFunction_Integrate_ComputeIntegral(self)

    def Set_order(self, m_order):
        r"""Set_order(ChFunction_Integrate self, int m_order)"""
        return _core.ChFunction_Integrate_Set_order(self, m_order)

    def Get_order(self):
        r"""Get_order(ChFunction_Integrate self) -> int"""
        return _core.ChFunction_Integrate_Get_order(self)

    def Set_num_samples(self, m_samples):
        r"""Set_num_samples(ChFunction_Integrate self, int m_samples)"""
        return _core.ChFunction_Integrate_Set_num_samples(self, m_samples)

    def Get_num_samples(self):
        r"""Get_num_samples(ChFunction_Integrate self) -> int"""
        return _core.ChFunction_Integrate_Get_num_samples(self)

    def Set_C_start(self, m_val):
        r"""Set_C_start(ChFunction_Integrate self, double m_val)"""
        return _core.ChFunction_Integrate_Set_C_start(self, m_val)

    def Get_C_start(self):
        r"""Get_C_start(ChFunction_Integrate self) -> double"""
        return _core.ChFunction_Integrate_Get_C_start(self)

    def Set_x_start(self, m_val):
        r"""Set_x_start(ChFunction_Integrate self, double m_val)"""
        return _core.ChFunction_Integrate_Set_x_start(self, m_val)

    def Get_x_start(self):
        r"""Get_x_start(ChFunction_Integrate self) -> double"""
        return _core.ChFunction_Integrate_Get_x_start(self)

    def Set_x_end(self, m_val):
        r"""Set_x_end(ChFunction_Integrate self, double m_val)"""
        return _core.ChFunction_Integrate_Set_x_end(self, m_val)

    def Get_x_end(self):
        r"""Get_x_end(ChFunction_Integrate self) -> double"""
        return _core.ChFunction_Integrate_Get_x_end(self)

    def Set_fa(self, m_fa):
        r"""Set_fa(ChFunction_Integrate self, std::shared_ptr< chrono::ChFunction > m_fa)"""
        return _core.ChFunction_Integrate_Set_fa(self, m_fa)

    def Get_fa(self):
        r"""Get_fa(ChFunction_Integrate self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChFunction_Integrate_Get_fa(self)

    def Estimate_x_range(self, xmin, xmax):
        r"""Estimate_x_range(ChFunction_Integrate self, double & xmin, double & xmax)"""
        return _core.ChFunction_Integrate_Estimate_x_range(self, xmin, xmax)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChFunction_Integrate self, ChArchiveOut & marchive)"""
        return _core.ChFunction_Integrate_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChFunction_Integrate self, chrono::ChArchiveIn & marchive)"""
        return _core.ChFunction_Integrate_ArchiveIN(self, marchive)

# Register ChFunction_Integrate in _core:
_core.ChFunction_Integrate_swigregister(ChFunction_Integrate)

class ChFunction_Mirror(ChFunction):
    r"""Proxy of C++ chrono::ChFunction_Mirror class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChFunction_Mirror self) -> ChFunction_Mirror
        __init__(ChFunction_Mirror self, ChFunction_Mirror other) -> ChFunction_Mirror
        """
        _core.ChFunction_Mirror_swiginit(self, _core.new_ChFunction_Mirror(*args))
    __swig_destroy__ = _core.delete_ChFunction_Mirror

    def Get_Type(self):
        r"""Get_Type(ChFunction_Mirror self) -> chrono::ChFunction::FunctionType"""
        return _core.ChFunction_Mirror_Get_Type(self)

    def Get_y(self, x):
        r"""Get_y(ChFunction_Mirror self, double x) -> double"""
        return _core.ChFunction_Mirror_Get_y(self, x)

    def Set_mirror_axis(self, m_axis):
        r"""Set_mirror_axis(ChFunction_Mirror self, double m_axis)"""
        return _core.ChFunction_Mirror_Set_mirror_axis(self, m_axis)

    def Get_mirror_axis(self):
        r"""Get_mirror_axis(ChFunction_Mirror self) -> double"""
        return _core.ChFunction_Mirror_Get_mirror_axis(self)

    def Set_fa(self, m_fa):
        r"""Set_fa(ChFunction_Mirror self, std::shared_ptr< chrono::ChFunction > m_fa)"""
        return _core.ChFunction_Mirror_Set_fa(self, m_fa)

    def Get_fa(self):
        r"""Get_fa(ChFunction_Mirror self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChFunction_Mirror_Get_fa(self)

    def Estimate_x_range(self, xmin, xmax):
        r"""Estimate_x_range(ChFunction_Mirror self, double & xmin, double & xmax)"""
        return _core.ChFunction_Mirror_Estimate_x_range(self, xmin, xmax)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChFunction_Mirror self, ChArchiveOut & marchive)"""
        return _core.ChFunction_Mirror_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChFunction_Mirror self, chrono::ChArchiveIn & marchive)"""
        return _core.ChFunction_Mirror_ArchiveIN(self, marchive)

# Register ChFunction_Mirror in _core:
_core.ChFunction_Mirror_swigregister(ChFunction_Mirror)

class ChFunction_Mocap(ChFunction):
    r"""Proxy of C++ chrono::ChFunction_Mocap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChFunction_Mocap self) -> ChFunction_Mocap
        __init__(ChFunction_Mocap self, int m_samples, double freq) -> ChFunction_Mocap
        __init__(ChFunction_Mocap self, ChFunction_Mocap other) -> ChFunction_Mocap
        """
        _core.ChFunction_Mocap_swiginit(self, _core.new_ChFunction_Mocap(*args))
    __swig_destroy__ = _core.delete_ChFunction_Mocap

    def Get_Type(self):
        r"""Get_Type(ChFunction_Mocap self) -> chrono::ChFunction::FunctionType"""
        return _core.ChFunction_Mocap_Get_Type(self)

    def Get_y(self, x):
        r"""Get_y(ChFunction_Mocap self, double x) -> double"""
        return _core.ChFunction_Mocap_Get_y(self, x)

    def Get_y_dx(self, x):
        r"""Get_y_dx(ChFunction_Mocap self, double x) -> double"""
        return _core.ChFunction_Mocap_Get_y_dx(self, x)

    def Get_y_dxdx(self, x):
        r"""Get_y_dxdx(ChFunction_Mocap self, double x) -> double"""
        return _core.ChFunction_Mocap_Get_y_dxdx(self, x)

    def Set_samp_freq(self, m_fr):
        r"""Set_samp_freq(ChFunction_Mocap self, double m_fr)"""
        return _core.ChFunction_Mocap_Set_samp_freq(self, m_fr)

    def Set_samples(self, m_samples):
        r"""Set_samples(ChFunction_Mocap self, int m_samples)"""
        return _core.ChFunction_Mocap_Set_samples(self, m_samples)

    def Get_samp_freq(self):
        r"""Get_samp_freq(ChFunction_Mocap self) -> double"""
        return _core.ChFunction_Mocap_Get_samp_freq(self)

    def Get_samples(self):
        r"""Get_samples(ChFunction_Mocap self) -> int"""
        return _core.ChFunction_Mocap_Get_samples(self)

    def Get_timetot(self):
        r"""Get_timetot(ChFunction_Mocap self) -> double"""
        return _core.ChFunction_Mocap_Get_timetot(self)

    def Get_timeslice(self):
        r"""Get_timeslice(ChFunction_Mocap self) -> double"""
        return _core.ChFunction_Mocap_Get_timeslice(self)

    def Get_array_y(self):
        r"""Get_array_y(ChFunction_Mocap self) -> chrono::ChArray< > const &"""
        return _core.ChFunction_Mocap_Get_array_y(self)

    def Get_array_y_dt(self):
        r"""Get_array_y_dt(ChFunction_Mocap self) -> chrono::ChArray< > const &"""
        return _core.ChFunction_Mocap_Get_array_y_dt(self)

    def Get_array_y_dtdt(self):
        r"""Get_array_y_dtdt(ChFunction_Mocap self) -> chrono::ChArray< > const &"""
        return _core.ChFunction_Mocap_Get_array_y_dtdt(self)

    def Set_array_y(self, m_array_y):
        r"""Set_array_y(ChFunction_Mocap self, chrono::ChArray< > const & m_array_y)"""
        return _core.ChFunction_Mocap_Set_array_y(self, m_array_y)

    def Set_array_y_dt(self, m_array_y_dt):
        r"""Set_array_y_dt(ChFunction_Mocap self, chrono::ChArray< > const & m_array_y_dt)"""
        return _core.ChFunction_Mocap_Set_array_y_dt(self, m_array_y_dt)

    def Set_array_y_dtdt(self, m_array_y_dtdt):
        r"""Set_array_y_dtdt(ChFunction_Mocap self, chrono::ChArray< > const & m_array_y_dtdt)"""
        return _core.ChFunction_Mocap_Set_array_y_dtdt(self, m_array_y_dtdt)

    def Parse_array_AOA(self):
        r"""Parse_array_AOA(ChFunction_Mocap self) -> bool"""
        return _core.ChFunction_Mocap_Parse_array_AOA(self)

    def Parse_array_Elite(self):
        r"""Parse_array_Elite(ChFunction_Mocap self) -> bool"""
        return _core.ChFunction_Mocap_Parse_array_Elite(self)

    def Estimate_x_range(self, xmin, xmax):
        r"""Estimate_x_range(ChFunction_Mocap self, double & xmin, double & xmax)"""
        return _core.ChFunction_Mocap_Estimate_x_range(self, xmin, xmax)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChFunction_Mocap self, ChArchiveOut & marchive)"""
        return _core.ChFunction_Mocap_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChFunction_Mocap self, chrono::ChArchiveIn & marchive)"""
        return _core.ChFunction_Mocap_ArchiveIN(self, marchive)

# Register ChFunction_Mocap in _core:
_core.ChFunction_Mocap_swigregister(ChFunction_Mocap)

class ChFunction_Noise(ChFunction):
    r"""Proxy of C++ chrono::ChFunction_Noise class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChFunction_Noise self) -> ChFunction_Noise
        __init__(ChFunction_Noise self, ChFunction_Noise other) -> ChFunction_Noise
        """
        _core.ChFunction_Noise_swiginit(self, _core.new_ChFunction_Noise(*args))
    __swig_destroy__ = _core.delete_ChFunction_Noise

    def Get_Type(self):
        r"""Get_Type(ChFunction_Noise self) -> chrono::ChFunction::FunctionType"""
        return _core.ChFunction_Noise_Get_Type(self)

    def Get_y(self, x):
        r"""Get_y(ChFunction_Noise self, double x) -> double"""
        return _core.ChFunction_Noise_Get_y(self, x)

    def Set_Amp(self, mamp):
        r"""Set_Amp(ChFunction_Noise self, double mamp)"""
        return _core.ChFunction_Noise_Set_Amp(self, mamp)

    def Get_Amp(self):
        r"""Get_Amp(ChFunction_Noise self) -> double"""
        return _core.ChFunction_Noise_Get_Amp(self)

    def Set_Freq(self, mf):
        r"""Set_Freq(ChFunction_Noise self, double mf)"""
        return _core.ChFunction_Noise_Set_Freq(self, mf)

    def Get_Freq(self):
        r"""Get_Freq(ChFunction_Noise self) -> double"""
        return _core.ChFunction_Noise_Get_Freq(self)

    def Set_AmpRatio(self, ma):
        r"""Set_AmpRatio(ChFunction_Noise self, double ma)"""
        return _core.ChFunction_Noise_Set_AmpRatio(self, ma)

    def Get_AmpRatio(self):
        r"""Get_AmpRatio(ChFunction_Noise self) -> double"""
        return _core.ChFunction_Noise_Get_AmpRatio(self)

    def Set_Octaves(self, mo):
        r"""Set_Octaves(ChFunction_Noise self, int mo)"""
        return _core.ChFunction_Noise_Set_Octaves(self, mo)

    def Get_Octaves(self):
        r"""Get_Octaves(ChFunction_Noise self) -> int"""
        return _core.ChFunction_Noise_Get_Octaves(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChFunction_Noise self, ChArchiveOut & marchive)"""
        return _core.ChFunction_Noise_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChFunction_Noise self, chrono::ChArchiveIn & marchive)"""
        return _core.ChFunction_Noise_ArchiveIN(self, marchive)

# Register ChFunction_Noise in _core:
_core.ChFunction_Noise_swigregister(ChFunction_Noise)

class ChFunction_Operation(ChFunction):
    r"""Proxy of C++ chrono::ChFunction_Operation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChFunction_Operation self) -> ChFunction_Operation
        __init__(ChFunction_Operation self, ChFunction_Operation other) -> ChFunction_Operation
        """
        _core.ChFunction_Operation_swiginit(self, _core.new_ChFunction_Operation(*args))
    __swig_destroy__ = _core.delete_ChFunction_Operation
    ChOP_ADD = _core.ChFunction_Operation_ChOP_ADD
    
    ChOP_SUB = _core.ChFunction_Operation_ChOP_SUB
    
    ChOP_MUL = _core.ChFunction_Operation_ChOP_MUL
    
    ChOP_DIV = _core.ChFunction_Operation_ChOP_DIV
    
    ChOP_POW = _core.ChFunction_Operation_ChOP_POW
    
    ChOP_MAX = _core.ChFunction_Operation_ChOP_MAX
    
    ChOP_MIN = _core.ChFunction_Operation_ChOP_MIN
    
    ChOP_MODULO = _core.ChFunction_Operation_ChOP_MODULO
    
    ChOP_FABS = _core.ChFunction_Operation_ChOP_FABS
    
    ChOP_FUNCT = _core.ChFunction_Operation_ChOP_FUNCT
    

    def Get_Type(self):
        r"""Get_Type(ChFunction_Operation self) -> chrono::ChFunction::FunctionType"""
        return _core.ChFunction_Operation_Get_Type(self)

    def Get_y(self, x):
        r"""Get_y(ChFunction_Operation self, double x) -> double"""
        return _core.ChFunction_Operation_Get_y(self, x)

    def Set_optype(self, m_op):
        r"""Set_optype(ChFunction_Operation self, chrono::ChFunction_Operation::eChOperation m_op)"""
        return _core.ChFunction_Operation_Set_optype(self, m_op)

    def Get_optype(self):
        r"""Get_optype(ChFunction_Operation self) -> chrono::ChFunction_Operation::eChOperation"""
        return _core.ChFunction_Operation_Get_optype(self)

    def Set_fa(self, m_fa):
        r"""Set_fa(ChFunction_Operation self, std::shared_ptr< chrono::ChFunction > m_fa)"""
        return _core.ChFunction_Operation_Set_fa(self, m_fa)

    def Get_fa(self):
        r"""Get_fa(ChFunction_Operation self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChFunction_Operation_Get_fa(self)

    def Set_fb(self, m_fb):
        r"""Set_fb(ChFunction_Operation self, std::shared_ptr< chrono::ChFunction > m_fb)"""
        return _core.ChFunction_Operation_Set_fb(self, m_fb)

    def Get_fb(self):
        r"""Get_fb(ChFunction_Operation self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChFunction_Operation_Get_fb(self)

    def Estimate_x_range(self, xmin, xmax):
        r"""Estimate_x_range(ChFunction_Operation self, double & xmin, double & xmax)"""
        return _core.ChFunction_Operation_Estimate_x_range(self, xmin, xmax)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChFunction_Operation self, ChArchiveOut & marchive)"""
        return _core.ChFunction_Operation_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChFunction_Operation self, chrono::ChArchiveIn & marchive)"""
        return _core.ChFunction_Operation_ArchiveIN(self, marchive)

# Register ChFunction_Operation in _core:
_core.ChFunction_Operation_swigregister(ChFunction_Operation)

class ChFunction_Oscilloscope(ChFunction):
    r"""Proxy of C++ chrono::ChFunction_Oscilloscope class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChFunction_Oscilloscope self) -> ChFunction_Oscilloscope
        __init__(ChFunction_Oscilloscope self, ChFunction_Oscilloscope other) -> ChFunction_Oscilloscope
        """
        _core.ChFunction_Oscilloscope_swiginit(self, _core.new_ChFunction_Oscilloscope(*args))
    __swig_destroy__ = _core.delete_ChFunction_Oscilloscope

    def Get_Type(self):
        r"""Get_Type(ChFunction_Oscilloscope self) -> chrono::ChFunction::FunctionType"""
        return _core.ChFunction_Oscilloscope_Get_Type(self)

    def Get_y(self, x):
        r"""Get_y(ChFunction_Oscilloscope self, double x) -> double"""
        return _core.ChFunction_Oscilloscope_Get_y(self, x)

    def AddLastPoint(self, mx, my):
        r"""AddLastPoint(ChFunction_Oscilloscope self, double mx, double my)"""
        return _core.ChFunction_Oscilloscope_AddLastPoint(self, mx, my)

    def Reset(self):
        r"""Reset(ChFunction_Oscilloscope self)"""
        return _core.ChFunction_Oscilloscope_Reset(self)

    def GetPointList(self):
        r"""GetPointList(ChFunction_Oscilloscope self) -> std::list< double > &"""
        return _core.ChFunction_Oscilloscope_GetPointList(self)

    def Get_dx(self):
        r"""Get_dx(ChFunction_Oscilloscope self) -> double"""
        return _core.ChFunction_Oscilloscope_Get_dx(self)

    def Set_dx(self, mdx):
        r"""Set_dx(ChFunction_Oscilloscope self, double mdx)"""
        return _core.ChFunction_Oscilloscope_Set_dx(self, mdx)

    def Get_max_amount(self):
        r"""Get_max_amount(ChFunction_Oscilloscope self) -> int"""
        return _core.ChFunction_Oscilloscope_Get_max_amount(self)

    def Set_max_amount(self, mnum):
        r"""Set_max_amount(ChFunction_Oscilloscope self, int mnum)"""
        return _core.ChFunction_Oscilloscope_Set_max_amount(self, mnum)

    def Get_amount(self):
        r"""Get_amount(ChFunction_Oscilloscope self) -> double"""
        return _core.ChFunction_Oscilloscope_Get_amount(self)

    def Estimate_x_range(self, xmin, xmax):
        r"""Estimate_x_range(ChFunction_Oscilloscope self, double & xmin, double & xmax)"""
        return _core.ChFunction_Oscilloscope_Estimate_x_range(self, xmin, xmax)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChFunction_Oscilloscope self, ChArchiveOut & marchive)"""
        return _core.ChFunction_Oscilloscope_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChFunction_Oscilloscope self, chrono::ChArchiveIn & marchive)"""
        return _core.ChFunction_Oscilloscope_ArchiveIN(self, marchive)

# Register ChFunction_Oscilloscope in _core:
_core.ChFunction_Oscilloscope_swigregister(ChFunction_Oscilloscope)

class ChFunction_Poly(ChFunction):
    r"""Proxy of C++ chrono::ChFunction_Poly class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChFunction_Poly self) -> ChFunction_Poly
        __init__(ChFunction_Poly self, ChFunction_Poly other) -> ChFunction_Poly
        """
        _core.ChFunction_Poly_swiginit(self, _core.new_ChFunction_Poly(*args))
    __swig_destroy__ = _core.delete_ChFunction_Poly

    def Get_Type(self):
        r"""Get_Type(ChFunction_Poly self) -> chrono::ChFunction::FunctionType"""
        return _core.ChFunction_Poly_Get_Type(self)

    def Get_y(self, x):
        r"""Get_y(ChFunction_Poly self, double x) -> double"""
        return _core.ChFunction_Poly_Get_y(self, x)

    def Get_y_dx(self, x):
        r"""Get_y_dx(ChFunction_Poly self, double x) -> double"""
        return _core.ChFunction_Poly_Get_y_dx(self, x)

    def Get_y_dxdx(self, x):
        r"""Get_y_dxdx(ChFunction_Poly self, double x) -> double"""
        return _core.ChFunction_Poly_Get_y_dxdx(self, x)

    def Set_coeff(self, m_coeff, m_ind):
        r"""Set_coeff(ChFunction_Poly self, double m_coeff, int m_ind)"""
        return _core.ChFunction_Poly_Set_coeff(self, m_coeff, m_ind)

    def Set_order(self, m_order):
        r"""Set_order(ChFunction_Poly self, int m_order)"""
        return _core.ChFunction_Poly_Set_order(self, m_order)

    def Get_coeff(self, m_ind):
        r"""Get_coeff(ChFunction_Poly self, int m_ind) -> double"""
        return _core.ChFunction_Poly_Get_coeff(self, m_ind)

    def Get_order(self):
        r"""Get_order(ChFunction_Poly self) -> int"""
        return _core.ChFunction_Poly_Get_order(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChFunction_Poly self, ChArchiveOut & marchive)"""
        return _core.ChFunction_Poly_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChFunction_Poly self, chrono::ChArchiveIn & marchive)"""
        return _core.ChFunction_Poly_ArchiveIN(self, marchive)

# Register ChFunction_Poly in _core:
_core.ChFunction_Poly_swigregister(ChFunction_Poly)

class ChFunction_Poly345(ChFunction):
    r"""Proxy of C++ chrono::ChFunction_Poly345 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChFunction_Poly345 self) -> ChFunction_Poly345
        __init__(ChFunction_Poly345 self, double m_h, double m_end) -> ChFunction_Poly345
        __init__(ChFunction_Poly345 self, ChFunction_Poly345 other) -> ChFunction_Poly345
        """
        _core.ChFunction_Poly345_swiginit(self, _core.new_ChFunction_Poly345(*args))
    __swig_destroy__ = _core.delete_ChFunction_Poly345

    def Get_Type(self):
        r"""Get_Type(ChFunction_Poly345 self) -> chrono::ChFunction::FunctionType"""
        return _core.ChFunction_Poly345_Get_Type(self)

    def Get_y(self, x):
        r"""Get_y(ChFunction_Poly345 self, double x) -> double"""
        return _core.ChFunction_Poly345_Get_y(self, x)

    def Get_y_dx(self, x):
        r"""Get_y_dx(ChFunction_Poly345 self, double x) -> double"""
        return _core.ChFunction_Poly345_Get_y_dx(self, x)

    def Get_y_dxdx(self, x):
        r"""Get_y_dxdx(ChFunction_Poly345 self, double x) -> double"""
        return _core.ChFunction_Poly345_Get_y_dxdx(self, x)

    def Set_end(self, m_end):
        r"""Set_end(ChFunction_Poly345 self, double m_end)"""
        return _core.ChFunction_Poly345_Set_end(self, m_end)

    def Set_h(self, m_h):
        r"""Set_h(ChFunction_Poly345 self, double m_h)"""
        return _core.ChFunction_Poly345_Set_h(self, m_h)

    def Get_end(self):
        r"""Get_end(ChFunction_Poly345 self) -> double"""
        return _core.ChFunction_Poly345_Get_end(self)

    def Get_h(self):
        r"""Get_h(ChFunction_Poly345 self) -> double"""
        return _core.ChFunction_Poly345_Get_h(self)

    def Get_Ca_pos(self):
        r"""Get_Ca_pos(ChFunction_Poly345 self) -> double"""
        return _core.ChFunction_Poly345_Get_Ca_pos(self)

    def Get_Ca_neg(self):
        r"""Get_Ca_neg(ChFunction_Poly345 self) -> double"""
        return _core.ChFunction_Poly345_Get_Ca_neg(self)

    def Get_Cv(self):
        r"""Get_Cv(ChFunction_Poly345 self) -> double"""
        return _core.ChFunction_Poly345_Get_Cv(self)

    def Estimate_x_range(self, xmin, xmax):
        r"""Estimate_x_range(ChFunction_Poly345 self, double & xmin, double & xmax)"""
        return _core.ChFunction_Poly345_Estimate_x_range(self, xmin, xmax)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChFunction_Poly345 self, ChArchiveOut & marchive)"""
        return _core.ChFunction_Poly345_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChFunction_Poly345 self, chrono::ChArchiveIn & marchive)"""
        return _core.ChFunction_Poly345_ArchiveIN(self, marchive)

# Register ChFunction_Poly345 in _core:
_core.ChFunction_Poly345_swigregister(ChFunction_Poly345)

class ChFunction_Ramp(ChFunction):
    r"""Proxy of C++ chrono::ChFunction_Ramp class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChFunction_Ramp self) -> ChFunction_Ramp
        __init__(ChFunction_Ramp self, double m_y0, double m_ang) -> ChFunction_Ramp
        __init__(ChFunction_Ramp self, ChFunction_Ramp other) -> ChFunction_Ramp
        """
        _core.ChFunction_Ramp_swiginit(self, _core.new_ChFunction_Ramp(*args))
    __swig_destroy__ = _core.delete_ChFunction_Ramp

    def Get_Type(self):
        r"""Get_Type(ChFunction_Ramp self) -> chrono::ChFunction::FunctionType"""
        return _core.ChFunction_Ramp_Get_Type(self)

    def Get_y(self, x):
        r"""Get_y(ChFunction_Ramp self, double x) -> double"""
        return _core.ChFunction_Ramp_Get_y(self, x)

    def Get_y_dx(self, x):
        r"""Get_y_dx(ChFunction_Ramp self, double x) -> double"""
        return _core.ChFunction_Ramp_Get_y_dx(self, x)

    def Get_y_dxdx(self, x):
        r"""Get_y_dxdx(ChFunction_Ramp self, double x) -> double"""
        return _core.ChFunction_Ramp_Get_y_dxdx(self, x)

    def Set_y0(self, m_y0):
        r"""Set_y0(ChFunction_Ramp self, double m_y0)"""
        return _core.ChFunction_Ramp_Set_y0(self, m_y0)

    def Get_y0(self):
        r"""Get_y0(ChFunction_Ramp self) -> double"""
        return _core.ChFunction_Ramp_Get_y0(self)

    def Set_ang(self, m_ang):
        r"""Set_ang(ChFunction_Ramp self, double m_ang)"""
        return _core.ChFunction_Ramp_Set_ang(self, m_ang)

    def Get_ang(self):
        r"""Get_ang(ChFunction_Ramp self) -> double"""
        return _core.ChFunction_Ramp_Get_ang(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChFunction_Ramp self, ChArchiveOut & marchive)"""
        return _core.ChFunction_Ramp_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChFunction_Ramp self, chrono::ChArchiveIn & marchive)"""
        return _core.ChFunction_Ramp_ArchiveIN(self, marchive)

# Register ChFunction_Ramp in _core:
_core.ChFunction_Ramp_swigregister(ChFunction_Ramp)

class ChRecPoint(object):
    r"""Proxy of C++ chrono::ChRecPoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_core.ChRecPoint_x_get, _core.ChRecPoint_x_set, doc=r"""x : double""")
    y = property(_core.ChRecPoint_y_get, _core.ChRecPoint_y_set, doc=r"""y : double""")
    w = property(_core.ChRecPoint_w_get, _core.ChRecPoint_w_set, doc=r"""w : double""")

    def __init__(self, *args):
        r"""
        __init__(ChRecPoint self) -> ChRecPoint
        __init__(ChRecPoint self, double mx, double my, double mw) -> ChRecPoint
        """
        _core.ChRecPoint_swiginit(self, _core.new_ChRecPoint(*args))

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChRecPoint self, ChArchiveOut & marchive)"""
        return _core.ChRecPoint_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChRecPoint self, chrono::ChArchiveIn & marchive)"""
        return _core.ChRecPoint_ArchiveIN(self, marchive)
    __swig_destroy__ = _core.delete_ChRecPoint

# Register ChRecPoint in _core:
_core.ChRecPoint_swigregister(ChRecPoint)

class ChFunction_Recorder(ChFunction):
    r"""Proxy of C++ chrono::ChFunction_Recorder class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChFunction_Recorder self) -> ChFunction_Recorder
        __init__(ChFunction_Recorder self, ChFunction_Recorder other) -> ChFunction_Recorder
        """
        _core.ChFunction_Recorder_swiginit(self, _core.new_ChFunction_Recorder(*args))
    __swig_destroy__ = _core.delete_ChFunction_Recorder

    def Get_Type(self):
        r"""Get_Type(ChFunction_Recorder self) -> chrono::ChFunction::FunctionType"""
        return _core.ChFunction_Recorder_Get_Type(self)

    def Get_y(self, x):
        r"""Get_y(ChFunction_Recorder self, double x) -> double"""
        return _core.ChFunction_Recorder_Get_y(self, x)

    def Get_y_dx(self, x):
        r"""Get_y_dx(ChFunction_Recorder self, double x) -> double"""
        return _core.ChFunction_Recorder_Get_y_dx(self, x)

    def Get_y_dxdx(self, x):
        r"""Get_y_dxdx(ChFunction_Recorder self, double x) -> double"""
        return _core.ChFunction_Recorder_Get_y_dxdx(self, x)

    def AddPoint(self, mx, my, mw=1):
        r"""AddPoint(ChFunction_Recorder self, double mx, double my, double mw=1)"""
        return _core.ChFunction_Recorder_AddPoint(self, mx, my, mw)

    def Reset(self):
        r"""Reset(ChFunction_Recorder self)"""
        return _core.ChFunction_Recorder_Reset(self)

    def GetPoints(self):
        r"""GetPoints(ChFunction_Recorder self) -> std::list< chrono::ChRecPoint > const &"""
        return _core.ChFunction_Recorder_GetPoints(self)

    def Estimate_x_range(self, xmin, xmax):
        r"""Estimate_x_range(ChFunction_Recorder self, double & xmin, double & xmax)"""
        return _core.ChFunction_Recorder_Estimate_x_range(self, xmin, xmax)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChFunction_Recorder self, ChArchiveOut & marchive)"""
        return _core.ChFunction_Recorder_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChFunction_Recorder self, chrono::ChArchiveIn & marchive)"""
        return _core.ChFunction_Recorder_ArchiveIN(self, marchive)

# Register ChFunction_Recorder in _core:
_core.ChFunction_Recorder_swigregister(ChFunction_Recorder)

class ChFunction_Repeat(ChFunction):
    r"""Proxy of C++ chrono::ChFunction_Repeat class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChFunction_Repeat self) -> ChFunction_Repeat
        __init__(ChFunction_Repeat self, ChFunction_Repeat other) -> ChFunction_Repeat
        """
        _core.ChFunction_Repeat_swiginit(self, _core.new_ChFunction_Repeat(*args))
    __swig_destroy__ = _core.delete_ChFunction_Repeat

    def Get_Type(self):
        r"""Get_Type(ChFunction_Repeat self) -> chrono::ChFunction::FunctionType"""
        return _core.ChFunction_Repeat_Get_Type(self)

    def Get_y(self, x):
        r"""Get_y(ChFunction_Repeat self, double x) -> double"""
        return _core.ChFunction_Repeat_Get_y(self, x)

    def Set_window_start(self, m_v):
        r"""Set_window_start(ChFunction_Repeat self, double m_v)"""
        return _core.ChFunction_Repeat_Set_window_start(self, m_v)

    def Get_window_start(self):
        r"""Get_window_start(ChFunction_Repeat self) -> double"""
        return _core.ChFunction_Repeat_Get_window_start(self)

    def Set_window_length(self, m_v):
        r"""Set_window_length(ChFunction_Repeat self, double m_v)"""
        return _core.ChFunction_Repeat_Set_window_length(self, m_v)

    def Get_window_length(self):
        r"""Get_window_length(ChFunction_Repeat self) -> double"""
        return _core.ChFunction_Repeat_Get_window_length(self)

    def Set_window_phase(self, m_v):
        r"""Set_window_phase(ChFunction_Repeat self, double m_v)"""
        return _core.ChFunction_Repeat_Set_window_phase(self, m_v)

    def Get_window_phase(self):
        r"""Get_window_phase(ChFunction_Repeat self) -> double"""
        return _core.ChFunction_Repeat_Get_window_phase(self)

    def Set_fa(self, m_fa):
        r"""Set_fa(ChFunction_Repeat self, std::shared_ptr< chrono::ChFunction > m_fa)"""
        return _core.ChFunction_Repeat_Set_fa(self, m_fa)

    def Get_fa(self):
        r"""Get_fa(ChFunction_Repeat self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChFunction_Repeat_Get_fa(self)

    def Estimate_x_range(self, xmin, xmax):
        r"""Estimate_x_range(ChFunction_Repeat self, double & xmin, double & xmax)"""
        return _core.ChFunction_Repeat_Estimate_x_range(self, xmin, xmax)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChFunction_Repeat self, ChArchiveOut & marchive)"""
        return _core.ChFunction_Repeat_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChFunction_Repeat self, chrono::ChArchiveIn & marchive)"""
        return _core.ChFunction_Repeat_ArchiveIN(self, marchive)

# Register ChFunction_Repeat in _core:
_core.ChFunction_Repeat_swigregister(ChFunction_Repeat)

class ChFseqNode(object):
    r"""Proxy of C++ chrono::ChFseqNode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fx = property(_core.ChFseqNode_fx_get, _core.ChFseqNode_fx_set, doc=r"""fx : std::shared_ptr<(chrono::ChFunction)>""")
    duration = property(_core.ChFseqNode_duration_get, _core.ChFseqNode_duration_set, doc=r"""duration : double""")
    weight = property(_core.ChFseqNode_weight_get, _core.ChFseqNode_weight_set, doc=r"""weight : double""")
    t_start = property(_core.ChFseqNode_t_start_get, _core.ChFseqNode_t_start_set, doc=r"""t_start : double""")
    t_end = property(_core.ChFseqNode_t_end_get, _core.ChFseqNode_t_end_set, doc=r"""t_end : double""")
    Iy = property(_core.ChFseqNode_Iy_get, _core.ChFseqNode_Iy_set, doc=r"""Iy : double""")
    Iydt = property(_core.ChFseqNode_Iydt_get, _core.ChFseqNode_Iydt_set, doc=r"""Iydt : double""")
    Iydtdt = property(_core.ChFseqNode_Iydtdt_get, _core.ChFseqNode_Iydtdt_set, doc=r"""Iydtdt : double""")
    y_cont = property(_core.ChFseqNode_y_cont_get, _core.ChFseqNode_y_cont_set, doc=r"""y_cont : bool""")
    ydt_cont = property(_core.ChFseqNode_ydt_cont_get, _core.ChFseqNode_ydt_cont_set, doc=r"""ydt_cont : bool""")
    ydtdt_cont = property(_core.ChFseqNode_ydtdt_cont_get, _core.ChFseqNode_ydtdt_cont_set, doc=r"""ydtdt_cont : bool""")

    def SetDuration(self, mdur):
        r"""SetDuration(ChFseqNode self, double mdur)"""
        return _core.ChFseqNode_SetDuration(self, mdur)

    def SetTend(self, mt_end):
        r"""SetTend(ChFseqNode self, double mt_end)"""
        return _core.ChFseqNode_SetTend(self, mt_end)

    def __init__(self, *args):
        r"""
        __init__(ChFseqNode self) -> ChFseqNode
        __init__(ChFseqNode self, std::shared_ptr< chrono::ChFunction > myfx, double mdur) -> ChFseqNode
        __init__(ChFseqNode self, ChFseqNode other) -> ChFseqNode
        """
        _core.ChFseqNode_swiginit(self, _core.new_ChFseqNode(*args))
    __swig_destroy__ = _core.delete_ChFseqNode

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChFseqNode self, ChArchiveOut & marchive)"""
        return _core.ChFseqNode_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChFseqNode self, chrono::ChArchiveIn & marchive)"""
        return _core.ChFseqNode_ArchiveIN(self, marchive)

# Register ChFseqNode in _core:
_core.ChFseqNode_swigregister(ChFseqNode)

class ChFunction_Sequence(ChFunction):
    r"""Proxy of C++ chrono::ChFunction_Sequence class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChFunction_Sequence self) -> ChFunction_Sequence
        __init__(ChFunction_Sequence self, ChFunction_Sequence other) -> ChFunction_Sequence
        """
        _core.ChFunction_Sequence_swiginit(self, _core.new_ChFunction_Sequence(*args))
    __swig_destroy__ = _core.delete_ChFunction_Sequence

    def Get_Type(self):
        r"""Get_Type(ChFunction_Sequence self) -> chrono::ChFunction::FunctionType"""
        return _core.ChFunction_Sequence_Get_Type(self)

    def Get_y(self, x):
        r"""Get_y(ChFunction_Sequence self, double x) -> double"""
        return _core.ChFunction_Sequence_Get_y(self, x)

    def Get_y_dx(self, x):
        r"""Get_y_dx(ChFunction_Sequence self, double x) -> double"""
        return _core.ChFunction_Sequence_Get_y_dx(self, x)

    def Get_y_dxdx(self, x):
        r"""Get_y_dxdx(ChFunction_Sequence self, double x) -> double"""
        return _core.ChFunction_Sequence_Get_y_dxdx(self, x)

    def Set_start(self, m_start):
        r"""Set_start(ChFunction_Sequence self, double m_start)"""
        return _core.ChFunction_Sequence_Set_start(self, m_start)

    def Get_start(self):
        r"""Get_start(ChFunction_Sequence self) -> double"""
        return _core.ChFunction_Sequence_Get_start(self)

    def Get_list(self):
        r"""Get_list(ChFunction_Sequence self) -> std::list< chrono::ChFseqNode > &"""
        return _core.ChFunction_Sequence_Get_list(self)

    def Setup(self):
        r"""Setup(ChFunction_Sequence self)"""
        return _core.ChFunction_Sequence_Setup(self)

    def InsertFunct(self, myfx, duration, weight=1, c0=False, c1=False, c2=False, position=-1):
        r"""InsertFunct(ChFunction_Sequence self, std::shared_ptr< chrono::ChFunction > myfx, double duration, double weight=1, bool c0=False, bool c1=False, bool c2=False, int position=-1) -> bool"""
        return _core.ChFunction_Sequence_InsertFunct(self, myfx, duration, weight, c0, c1, c2, position)

    def KillFunct(self, position):
        r"""KillFunct(ChFunction_Sequence self, int position) -> bool"""
        return _core.ChFunction_Sequence_KillFunct(self, position)

    def GetNthFunction(self, position):
        r"""GetNthFunction(ChFunction_Sequence self, int position) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChFunction_Sequence_GetNthFunction(self, position)

    def GetNthNode(self, position):
        r"""GetNthNode(ChFunction_Sequence self, int position) -> ChFseqNode"""
        return _core.ChFunction_Sequence_GetNthNode(self, position)

    def GetNthDuration(self, position):
        r"""GetNthDuration(ChFunction_Sequence self, int position) -> double"""
        return _core.ChFunction_Sequence_GetNthDuration(self, position)

    def Get_weight(self, x):
        r"""Get_weight(ChFunction_Sequence self, double x) -> double"""
        return _core.ChFunction_Sequence_Get_weight(self, x)

    def Estimate_x_range(self, xmin, xmax):
        r"""Estimate_x_range(ChFunction_Sequence self, double & xmin, double & xmax)"""
        return _core.ChFunction_Sequence_Estimate_x_range(self, xmin, xmax)

    def HandleNumber(self):
        r"""HandleNumber(ChFunction_Sequence self) -> int"""
        return _core.ChFunction_Sequence_HandleNumber(self)

    def HandleAccess(self, handle_id, mx, my, set_mode):
        r"""HandleAccess(ChFunction_Sequence self, int handle_id, double mx, double my, bool set_mode) -> bool"""
        return _core.ChFunction_Sequence_HandleAccess(self, handle_id, mx, my, set_mode)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChFunction_Sequence self, ChArchiveOut & marchive)"""
        return _core.ChFunction_Sequence_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChFunction_Sequence self, chrono::ChArchiveIn & marchive)"""
        return _core.ChFunction_Sequence_ArchiveIN(self, marchive)

# Register ChFunction_Sequence in _core:
_core.ChFunction_Sequence_swigregister(ChFunction_Sequence)

class ChFunction_Sigma(ChFunction):
    r"""Proxy of C++ chrono::ChFunction_Sigma class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChFunction_Sigma self) -> ChFunction_Sigma
        __init__(ChFunction_Sigma self, double m_amp, double m_start, double m_end) -> ChFunction_Sigma
        __init__(ChFunction_Sigma self, ChFunction_Sigma other) -> ChFunction_Sigma
        """
        _core.ChFunction_Sigma_swiginit(self, _core.new_ChFunction_Sigma(*args))
    __swig_destroy__ = _core.delete_ChFunction_Sigma

    def Get_Type(self):
        r"""Get_Type(ChFunction_Sigma self) -> chrono::ChFunction::FunctionType"""
        return _core.ChFunction_Sigma_Get_Type(self)

    def Get_y(self, x):
        r"""Get_y(ChFunction_Sigma self, double x) -> double"""
        return _core.ChFunction_Sigma_Get_y(self, x)

    def Get_y_dx(self, x):
        r"""Get_y_dx(ChFunction_Sigma self, double x) -> double"""
        return _core.ChFunction_Sigma_Get_y_dx(self, x)

    def Get_y_dxdx(self, x):
        r"""Get_y_dxdx(ChFunction_Sigma self, double x) -> double"""
        return _core.ChFunction_Sigma_Get_y_dxdx(self, x)

    def Set_start(self, m_start):
        r"""Set_start(ChFunction_Sigma self, double m_start)"""
        return _core.ChFunction_Sigma_Set_start(self, m_start)

    def Set_end(self, m_end):
        r"""Set_end(ChFunction_Sigma self, double m_end)"""
        return _core.ChFunction_Sigma_Set_end(self, m_end)

    def Set_amp(self, m_amp):
        r"""Set_amp(ChFunction_Sigma self, double m_amp)"""
        return _core.ChFunction_Sigma_Set_amp(self, m_amp)

    def Get_start(self):
        r"""Get_start(ChFunction_Sigma self) -> double"""
        return _core.ChFunction_Sigma_Get_start(self)

    def Get_end(self):
        r"""Get_end(ChFunction_Sigma self) -> double"""
        return _core.ChFunction_Sigma_Get_end(self)

    def Get_amp(self):
        r"""Get_amp(ChFunction_Sigma self) -> double"""
        return _core.ChFunction_Sigma_Get_amp(self)

    def Get_Ca_pos(self):
        r"""Get_Ca_pos(ChFunction_Sigma self) -> double"""
        return _core.ChFunction_Sigma_Get_Ca_pos(self)

    def Get_Ca_neg(self):
        r"""Get_Ca_neg(ChFunction_Sigma self) -> double"""
        return _core.ChFunction_Sigma_Get_Ca_neg(self)

    def Get_Cv(self):
        r"""Get_Cv(ChFunction_Sigma self) -> double"""
        return _core.ChFunction_Sigma_Get_Cv(self)

    def Estimate_x_range(self, xmin, xmax):
        r"""Estimate_x_range(ChFunction_Sigma self, double & xmin, double & xmax)"""
        return _core.ChFunction_Sigma_Estimate_x_range(self, xmin, xmax)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChFunction_Sigma self, ChArchiveOut & marchive)"""
        return _core.ChFunction_Sigma_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChFunction_Sigma self, chrono::ChArchiveIn & marchive)"""
        return _core.ChFunction_Sigma_ArchiveIN(self, marchive)

# Register ChFunction_Sigma in _core:
_core.ChFunction_Sigma_swigregister(ChFunction_Sigma)

class ChFunction_Sine(ChFunction):
    r"""Proxy of C++ chrono::ChFunction_Sine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChFunction_Sine self) -> ChFunction_Sine
        __init__(ChFunction_Sine self, double m_phase, double m_freq, double m_amp) -> ChFunction_Sine
        __init__(ChFunction_Sine self, ChFunction_Sine other) -> ChFunction_Sine
        """
        _core.ChFunction_Sine_swiginit(self, _core.new_ChFunction_Sine(*args))
    __swig_destroy__ = _core.delete_ChFunction_Sine

    def Get_Type(self):
        r"""Get_Type(ChFunction_Sine self) -> chrono::ChFunction::FunctionType"""
        return _core.ChFunction_Sine_Get_Type(self)

    def Get_y(self, x):
        r"""Get_y(ChFunction_Sine self, double x) -> double"""
        return _core.ChFunction_Sine_Get_y(self, x)

    def Get_y_dx(self, x):
        r"""Get_y_dx(ChFunction_Sine self, double x) -> double"""
        return _core.ChFunction_Sine_Get_y_dx(self, x)

    def Get_y_dxdx(self, x):
        r"""Get_y_dxdx(ChFunction_Sine self, double x) -> double"""
        return _core.ChFunction_Sine_Get_y_dxdx(self, x)

    def Set_phase(self, m_phase):
        r"""Set_phase(ChFunction_Sine self, double m_phase)"""
        return _core.ChFunction_Sine_Set_phase(self, m_phase)

    def Set_freq(self, m_freq):
        r"""Set_freq(ChFunction_Sine self, double m_freq)"""
        return _core.ChFunction_Sine_Set_freq(self, m_freq)

    def Set_w(self, m_w):
        r"""Set_w(ChFunction_Sine self, double m_w)"""
        return _core.ChFunction_Sine_Set_w(self, m_w)

    def Set_amp(self, m_amp):
        r"""Set_amp(ChFunction_Sine self, double m_amp)"""
        return _core.ChFunction_Sine_Set_amp(self, m_amp)

    def Get_phase(self):
        r"""Get_phase(ChFunction_Sine self) -> double"""
        return _core.ChFunction_Sine_Get_phase(self)

    def Get_freq(self):
        r"""Get_freq(ChFunction_Sine self) -> double"""
        return _core.ChFunction_Sine_Get_freq(self)

    def Get_w(self):
        r"""Get_w(ChFunction_Sine self) -> double"""
        return _core.ChFunction_Sine_Get_w(self)

    def Get_amp(self):
        r"""Get_amp(ChFunction_Sine self) -> double"""
        return _core.ChFunction_Sine_Get_amp(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChFunction_Sine self, ChArchiveOut & marchive)"""
        return _core.ChFunction_Sine_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChFunction_Sine self, chrono::ChArchiveIn & marchive)"""
        return _core.ChFunction_Sine_ArchiveIN(self, marchive)

# Register ChFunction_Sine in _core:
_core.ChFunction_Sine_swigregister(ChFunction_Sine)

class ChGeometry(object):
    r"""Proxy of C++ chrono::geometry::ChGeometry class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    NONE = _core.ChGeometry_NONE
    
    SPHERE = _core.ChGeometry_SPHERE
    
    BOX = _core.ChGeometry_BOX
    
    CYLINDER = _core.ChGeometry_CYLINDER
    
    TRIANGLE = _core.ChGeometry_TRIANGLE
    
    CAPSULE = _core.ChGeometry_CAPSULE
    
    CONE = _core.ChGeometry_CONE
    
    LINE = _core.ChGeometry_LINE
    
    LINE_ARC = _core.ChGeometry_LINE_ARC
    
    LINE_BEZIER = _core.ChGeometry_LINE_BEZIER
    
    LINE_CAM = _core.ChGeometry_LINE_CAM
    
    LINE_PATH = _core.ChGeometry_LINE_PATH
    
    LINE_POLY = _core.ChGeometry_LINE_POLY
    
    LINE_SEGMENT = _core.ChGeometry_LINE_SEGMENT
    
    ROUNDED_BOX = _core.ChGeometry_ROUNDED_BOX
    
    ROUNDED_CYLINDER = _core.ChGeometry_ROUNDED_CYLINDER
    
    ROUNDED_CONE = _core.ChGeometry_ROUNDED_CONE
    
    TRIANGLEMESH = _core.ChGeometry_TRIANGLEMESH
    
    TRIANGLEMESH_CONNECTED = _core.ChGeometry_TRIANGLEMESH_CONNECTED
    
    TRIANGLEMESH_SOUP = _core.ChGeometry_TRIANGLEMESH_SOUP
    
    __swig_destroy__ = _core.delete_ChGeometry

    def Clone(self):
        r"""Clone(ChGeometry self) -> ChGeometry"""
        return _core.ChGeometry_Clone(self)

    def GetClassType(self):
        r"""GetClassType(ChGeometry self) -> chrono::geometry::ChGeometry::GeometryType"""
        return _core.ChGeometry_GetClassType(self)

    def GetBoundingBox(self, xmin, xmax, ymin, ymax, zmin, zmax, Rot=None):
        r"""GetBoundingBox(ChGeometry self, double & xmin, double & xmax, double & ymin, double & ymax, double & zmin, double & zmax, ChMatrix33D Rot=None)"""
        return _core.ChGeometry_GetBoundingBox(self, xmin, xmax, ymin, ymax, zmin, zmax, Rot)

    def InflateBoundingBox(self, xmin, xmax, ymin, ymax, zmin, zmax, Rot=None):
        r"""InflateBoundingBox(ChGeometry self, double & xmin, double & xmax, double & ymin, double & ymax, double & zmin, double & zmax, ChMatrix33D Rot=None)"""
        return _core.ChGeometry_InflateBoundingBox(self, xmin, xmax, ymin, ymax, zmin, zmax, Rot)

    def Size(self):
        r"""Size(ChGeometry self) -> double"""
        return _core.ChGeometry_Size(self)

    def Baricenter(self):
        r"""Baricenter(ChGeometry self) -> ChVectorD"""
        return _core.ChGeometry_Baricenter(self)

    def CovarianceMatrix(self, C):
        r"""CovarianceMatrix(ChGeometry self, ChMatrix33D C)"""
        return _core.ChGeometry_CovarianceMatrix(self, C)

    def GetManifoldDimension(self):
        r"""GetManifoldDimension(ChGeometry self) -> int"""
        return _core.ChGeometry_GetManifoldDimension(self)

    def Update(self):
        r"""Update(ChGeometry self)"""
        return _core.ChGeometry_Update(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChGeometry self, ChArchiveOut & marchive)"""
        return _core.ChGeometry_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChGeometry self, chrono::ChArchiveIn & marchive)"""
        return _core.ChGeometry_ArchiveIN(self, marchive)

# Register ChGeometry in _core:
_core.ChGeometry_swigregister(ChGeometry)

class ChLine(ChGeometry):
    r"""Proxy of C++ chrono::geometry::ChLine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChLine

    def GetClassType(self):
        r"""GetClassType(ChLine self) -> chrono::geometry::ChGeometry::GeometryType"""
        return _core.ChLine_GetClassType(self)

    def Evaluate(self, pos, parU):
        r"""Evaluate(ChLine self, ChVectorD pos, double const parU)"""
        return _core.ChLine_Evaluate(self, pos, parU)

    def Derive(self, dir, parU):
        r"""Derive(ChLine self, ChVectorD dir, double const parU)"""
        return _core.ChLine_Derive(self, dir, parU)

    def Get_closed(self):
        r"""Get_closed(ChLine self) -> bool"""
        return _core.ChLine_Get_closed(self)

    def Set_closed(self, mc):
        r"""Set_closed(ChLine self, bool mc)"""
        return _core.ChLine_Set_closed(self, mc)

    def Get_complexity(self):
        r"""Get_complexity(ChLine self) -> int"""
        return _core.ChLine_Get_complexity(self)

    def Set_complexity(self, mc):
        r"""Set_complexity(ChLine self, int mc)"""
        return _core.ChLine_Set_complexity(self, mc)

    def GetManifoldDimension(self):
        r"""GetManifoldDimension(ChLine self) -> int"""
        return _core.ChLine_GetManifoldDimension(self)

    def FindNearestLinePoint(self, point, resU, approxU, tol):
        r"""FindNearestLinePoint(ChLine self, ChVectorD point, double & resU, double approxU, double tol) -> bool"""
        return _core.ChLine_FindNearestLinePoint(self, point, resU, approxU, tol)

    def Length(self, sampling):
        r"""Length(ChLine self, int sampling) -> double"""
        return _core.ChLine_Length(self, sampling)

    def GetEndA(self):
        r"""GetEndA(ChLine self) -> ChVectorD"""
        return _core.ChLine_GetEndA(self)

    def GetEndB(self):
        r"""GetEndB(ChLine self) -> ChVectorD"""
        return _core.ChLine_GetEndB(self)

    def CurveCurveDist(self, compline, samples):
        r"""CurveCurveDist(ChLine self, ChLine compline, int samples) -> double"""
        return _core.ChLine_CurveCurveDist(self, compline, samples)

    def CurveSegmentDist(self, complinesegm, samples):
        r"""CurveSegmentDist(ChLine self, ChLine complinesegm, int samples) -> double"""
        return _core.ChLine_CurveSegmentDist(self, complinesegm, samples)

    def CurveCurveDistMax(self, compline, samples):
        r"""CurveCurveDistMax(ChLine self, ChLine compline, int samples) -> double"""
        return _core.ChLine_CurveCurveDistMax(self, compline, samples)

    def CurveSegmentDistMax(self, complinesegm, samples):
        r"""CurveSegmentDistMax(ChLine self, ChLine complinesegm, int samples) -> double"""
        return _core.ChLine_CurveSegmentDistMax(self, complinesegm, samples)

    def DrawPostscript(self, mfle, markpoints, bezier_interpolate):
        r"""DrawPostscript(ChLine self, ChFile_ps * mfle, int markpoints, int bezier_interpolate) -> bool"""
        return _core.ChLine_DrawPostscript(self, mfle, markpoints, bezier_interpolate)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLine self, ChArchiveOut & marchive)"""
        return _core.ChLine_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLine self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLine_ArchiveIN(self, marchive)

# Register ChLine in _core:
_core.ChLine_swigregister(ChLine)

class ChVolume(ChGeometry):
    r"""Proxy of C++ chrono::geometry::ChVolume class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChVolume

    def Evaluate(self, pos, parU, parV, parW):
        r"""Evaluate(ChVolume self, ChVectorD pos, double const parU, double const parV, double const parW)"""
        return _core.ChVolume_Evaluate(self, pos, parU, parV, parW)

    def Get_closed_U(self):
        r"""Get_closed_U(ChVolume self) -> bool"""
        return _core.ChVolume_Get_closed_U(self)

    def Get_closed_V(self):
        r"""Get_closed_V(ChVolume self) -> bool"""
        return _core.ChVolume_Get_closed_V(self)

    def Get_closed_W(self):
        r"""Get_closed_W(ChVolume self) -> bool"""
        return _core.ChVolume_Get_closed_W(self)

    def GetManifoldDimension(self):
        r"""GetManifoldDimension(ChVolume self) -> int"""
        return _core.ChVolume_GetManifoldDimension(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChVolume self, ChArchiveOut & marchive)"""
        return _core.ChVolume_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChVolume self, chrono::ChArchiveIn & marchive)"""
        return _core.ChVolume_ArchiveIN(self, marchive)

# Register ChVolume in _core:
_core.ChVolume_swigregister(ChVolume)

class ChSurface(ChGeometry):
    r"""Proxy of C++ chrono::geometry::ChSurface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChSurface

    def Evaluate(self, pos, parU, parV):
        r"""Evaluate(ChSurface self, ChVectorD pos, double const parU, double const parV)"""
        return _core.ChSurface_Evaluate(self, pos, parU, parV)

    def Normal(self, dir, parU, parV):
        r"""Normal(ChSurface self, ChVectorD dir, double const parU, double const parV)"""
        return _core.ChSurface_Normal(self, dir, parU, parV)

    def Get_closed_U(self):
        r"""Get_closed_U(ChSurface self) -> bool"""
        return _core.ChSurface_Get_closed_U(self)

    def Get_closed_V(self):
        r"""Get_closed_V(ChSurface self) -> bool"""
        return _core.ChSurface_Get_closed_V(self)

    def GetManifoldDimension(self):
        r"""GetManifoldDimension(ChSurface self) -> int"""
        return _core.ChSurface_GetManifoldDimension(self)

    def IsWireframe(self):
        r"""IsWireframe(ChSurface self) -> bool"""
        return _core.ChSurface_IsWireframe(self)

    def SetWireframe(self, mw):
        r"""SetWireframe(ChSurface self, bool mw)"""
        return _core.ChSurface_SetWireframe(self, mw)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChSurface self, ChArchiveOut & marchive)"""
        return _core.ChSurface_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChSurface self, chrono::ChArchiveIn & marchive)"""
        return _core.ChSurface_ArchiveIN(self, marchive)

# Register ChSurface in _core:
_core.ChSurface_swigregister(ChSurface)

class ChBox(ChVolume):
    r"""Proxy of C++ chrono::geometry::ChBox class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Rot = property(_core.ChBox_Rot_get, _core.ChBox_Rot_set, doc=r"""Rot : chrono::ChMatrix33<()>""")
    Pos = property(_core.ChBox_Pos_get, _core.ChBox_Pos_set, doc=r"""Pos : chrono::ChVector<()>""")
    Size = property(_core.ChBox_Size_get, _core.ChBox_Size_set, doc=r"""Size : chrono::ChVector<()>""")

    def __init__(self, *args):
        r"""
        __init__(ChBox self) -> ChBox
        __init__(ChBox self, ChVectorD mpos, ChMatrix33D mrot, ChVectorD mlengths) -> ChBox
        __init__(ChBox self, ChVectorD mC0, ChVectorD mC1, ChVectorD mC2, ChVectorD mC3) -> ChBox
        __init__(ChBox self, ChBox source) -> ChBox
        """
        _core.ChBox_swiginit(self, _core.new_ChBox(*args))

    def Clone(self):
        r"""Clone(ChBox self) -> ChBox"""
        return _core.ChBox_Clone(self)

    def GetClassType(self):
        r"""GetClassType(ChBox self) -> chrono::geometry::ChGeometry::GeometryType"""
        return _core.ChBox_GetClassType(self)

    def GetBoundingBox(self, xmin, xmax, ymin, ymax, zmin, zmax, bbRot=None):
        r"""GetBoundingBox(ChBox self, double & xmin, double & xmax, double & ymin, double & ymax, double & zmin, double & zmax, ChMatrix33D bbRot=None)"""
        return _core.ChBox_GetBoundingBox(self, xmin, xmax, ymin, ymax, zmin, zmax, bbRot)

    def Baricenter(self):
        r"""Baricenter(ChBox self) -> ChVectorD"""
        return _core.ChBox_Baricenter(self)

    def CovarianceMatrix(self, C):
        r"""CovarianceMatrix(ChBox self, ChMatrix33D C)"""
        return _core.ChBox_CovarianceMatrix(self, C)

    def Evaluate(self, pos, parU, parV, parW):
        r"""Evaluate(ChBox self, ChVectorD pos, double const parU, double const parV, double const parW)"""
        return _core.ChBox_Evaluate(self, pos, parU, parV, parW)

    def GetManifoldDimension(self):
        r"""GetManifoldDimension(ChBox self) -> int"""
        return _core.ChBox_GetManifoldDimension(self)

    def GetRotm(self):
        r"""GetRotm(ChBox self) -> ChMatrix33D"""
        return _core.ChBox_GetRotm(self)

    def GetPos(self):
        r"""GetPos(ChBox self) -> ChVectorD"""
        return _core.ChBox_GetPos(self)

    def GetSize(self):
        r"""GetSize(ChBox self) -> ChVectorD"""
        return _core.ChBox_GetSize(self)

    def GetLengths(self):
        r"""GetLengths(ChBox self) -> ChVectorD"""
        return _core.ChBox_GetLengths(self)

    def SetLengths(self, mlen):
        r"""SetLengths(ChBox self, ChVectorD mlen)"""
        return _core.ChBox_SetLengths(self, mlen)

    def GetP1(self):
        r"""GetP1(ChBox self) -> ChVectorD"""
        return _core.ChBox_GetP1(self)

    def GetP2(self):
        r"""GetP2(ChBox self) -> ChVectorD"""
        return _core.ChBox_GetP2(self)

    def GetP3(self):
        r"""GetP3(ChBox self) -> ChVectorD"""
        return _core.ChBox_GetP3(self)

    def GetP4(self):
        r"""GetP4(ChBox self) -> ChVectorD"""
        return _core.ChBox_GetP4(self)

    def GetP5(self):
        r"""GetP5(ChBox self) -> ChVectorD"""
        return _core.ChBox_GetP5(self)

    def GetP6(self):
        r"""GetP6(ChBox self) -> ChVectorD"""
        return _core.ChBox_GetP6(self)

    def GetP7(self):
        r"""GetP7(ChBox self) -> ChVectorD"""
        return _core.ChBox_GetP7(self)

    def GetP8(self):
        r"""GetP8(ChBox self) -> ChVectorD"""
        return _core.ChBox_GetP8(self)

    def GetPn(self, ipoint):
        r"""GetPn(ChBox self, int ipoint) -> ChVectorD"""
        return _core.ChBox_GetPn(self, ipoint)

    def GetVolume(self):
        r"""GetVolume(ChBox self) -> double"""
        return _core.ChBox_GetVolume(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChBox self, ChArchiveOut & marchive)"""
        return _core.ChBox_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChBox self, chrono::ChArchiveIn & marchive)"""
        return _core.ChBox_ArchiveIN(self, marchive)
    __swig_destroy__ = _core.delete_ChBox

# Register ChBox in _core:
_core.ChBox_swigregister(ChBox)

class ChSphere(ChGeometry):
    r"""Proxy of C++ chrono::geometry::ChSphere class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    center = property(_core.ChSphere_center_get, _core.ChSphere_center_set, doc=r"""center : chrono::ChVector<()>""")
    rad = property(_core.ChSphere_rad_get, _core.ChSphere_rad_set, doc=r"""rad : double""")

    def __init__(self, *args):
        r"""
        __init__(ChSphere self) -> ChSphere
        __init__(ChSphere self, ChVectorD mc, double mrad) -> ChSphere
        __init__(ChSphere self, ChSphere source) -> ChSphere
        """
        _core.ChSphere_swiginit(self, _core.new_ChSphere(*args))
    __swig_destroy__ = _core.delete_ChSphere

    def Clone(self):
        r"""Clone(ChSphere self) -> ChSphere"""
        return _core.ChSphere_Clone(self)

    def GetClassType(self):
        r"""GetClassType(ChSphere self) -> chrono::geometry::ChGeometry::GeometryType"""
        return _core.ChSphere_GetClassType(self)

    def GetBoundingBox(self, xmin, xmax, ymin, ymax, zmin, zmax, Rot=None):
        r"""GetBoundingBox(ChSphere self, double & xmin, double & xmax, double & ymin, double & ymax, double & zmin, double & zmax, ChMatrix33D Rot=None)"""
        return _core.ChSphere_GetBoundingBox(self, xmin, xmax, ymin, ymax, zmin, zmax, Rot)

    def Baricenter(self):
        r"""Baricenter(ChSphere self) -> ChVectorD"""
        return _core.ChSphere_Baricenter(self)

    def CovarianceMatrix(self, C):
        r"""CovarianceMatrix(ChSphere self, ChMatrix33D C)"""
        return _core.ChSphere_CovarianceMatrix(self, C)

    def GetManifoldDimension(self):
        r"""GetManifoldDimension(ChSphere self) -> int"""
        return _core.ChSphere_GetManifoldDimension(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChSphere self, ChArchiveOut & marchive)"""
        return _core.ChSphere_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChSphere self, chrono::ChArchiveIn & marchive)"""
        return _core.ChSphere_ArchiveIN(self, marchive)

# Register ChSphere in _core:
_core.ChSphere_swigregister(ChSphere)

class ChCylinder(ChGeometry):
    r"""Proxy of C++ chrono::geometry::ChCylinder class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    p1 = property(_core.ChCylinder_p1_get, _core.ChCylinder_p1_set, doc=r"""p1 : chrono::ChVector<()>""")
    p2 = property(_core.ChCylinder_p2_get, _core.ChCylinder_p2_set, doc=r"""p2 : chrono::ChVector<()>""")
    rad = property(_core.ChCylinder_rad_get, _core.ChCylinder_rad_set, doc=r"""rad : double""")

    def __init__(self, *args):
        r"""
        __init__(ChCylinder self) -> ChCylinder
        __init__(ChCylinder self, ChVectorD mp1, ChVectorD mp2, double mrad) -> ChCylinder
        __init__(ChCylinder self, ChCylinder source) -> ChCylinder
        """
        _core.ChCylinder_swiginit(self, _core.new_ChCylinder(*args))
    __swig_destroy__ = _core.delete_ChCylinder

    def Clone(self):
        r"""Clone(ChCylinder self) -> ChCylinder"""
        return _core.ChCylinder_Clone(self)

    def GetClassType(self):
        r"""GetClassType(ChCylinder self) -> chrono::geometry::ChGeometry::GeometryType"""
        return _core.ChCylinder_GetClassType(self)

    def GetBoundingBox(self, xmin, xmax, ymin, ymax, zmin, zmax, Rot=None):
        r"""GetBoundingBox(ChCylinder self, double & xmin, double & xmax, double & ymin, double & ymax, double & zmin, double & zmax, ChMatrix33D Rot=None)"""
        return _core.ChCylinder_GetBoundingBox(self, xmin, xmax, ymin, ymax, zmin, zmax, Rot)

    def Baricenter(self):
        r"""Baricenter(ChCylinder self) -> ChVectorD"""
        return _core.ChCylinder_Baricenter(self)

    def CovarianceMatrix(self, C):
        r"""CovarianceMatrix(ChCylinder self, ChMatrix33D C)"""
        return _core.ChCylinder_CovarianceMatrix(self, C)

    def GetManifoldDimension(self):
        r"""GetManifoldDimension(ChCylinder self) -> int"""
        return _core.ChCylinder_GetManifoldDimension(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChCylinder self, ChArchiveOut & marchive)"""
        return _core.ChCylinder_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChCylinder self, chrono::ChArchiveIn & marchive)"""
        return _core.ChCylinder_ArchiveIN(self, marchive)

# Register ChCylinder in _core:
_core.ChCylinder_swigregister(ChCylinder)

class ChCapsule(ChGeometry):
    r"""Proxy of C++ chrono::geometry::ChCapsule class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    center = property(_core.ChCapsule_center_get, _core.ChCapsule_center_set, doc=r"""center : chrono::ChVector<()>""")
    rad = property(_core.ChCapsule_rad_get, _core.ChCapsule_rad_set, doc=r"""rad : double""")
    hlen = property(_core.ChCapsule_hlen_get, _core.ChCapsule_hlen_set, doc=r"""hlen : double""")

    def __init__(self, *args):
        r"""
        __init__(ChCapsule self) -> ChCapsule
        __init__(ChCapsule self, ChVectorD mcenter, double mrad, double mhlen) -> ChCapsule
        __init__(ChCapsule self, ChCapsule source) -> ChCapsule
        """
        _core.ChCapsule_swiginit(self, _core.new_ChCapsule(*args))
    __swig_destroy__ = _core.delete_ChCapsule

    def Clone(self):
        r"""Clone(ChCapsule self) -> ChCapsule"""
        return _core.ChCapsule_Clone(self)

    def GetClassType(self):
        r"""GetClassType(ChCapsule self) -> chrono::geometry::ChGeometry::GeometryType"""
        return _core.ChCapsule_GetClassType(self)

    def GetBoundingBox(self, xmin, xmax, ymin, ymax, zmin, zmax, Rot=None):
        r"""GetBoundingBox(ChCapsule self, double & xmin, double & xmax, double & ymin, double & ymax, double & zmin, double & zmax, ChMatrix33D Rot=None)"""
        return _core.ChCapsule_GetBoundingBox(self, xmin, xmax, ymin, ymax, zmin, zmax, Rot)

    def Baricenter(self):
        r"""Baricenter(ChCapsule self) -> ChVectorD"""
        return _core.ChCapsule_Baricenter(self)

    def CovarianceMatrix(self, C):
        r"""CovarianceMatrix(ChCapsule self, ChMatrix33D C)"""
        return _core.ChCapsule_CovarianceMatrix(self, C)

    def GetManifoldDimension(self):
        r"""GetManifoldDimension(ChCapsule self) -> int"""
        return _core.ChCapsule_GetManifoldDimension(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChCapsule self, ChArchiveOut & marchive)"""
        return _core.ChCapsule_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChCapsule self, chrono::ChArchiveIn & marchive)"""
        return _core.ChCapsule_ArchiveIN(self, marchive)

# Register ChCapsule in _core:
_core.ChCapsule_swigregister(ChCapsule)

class ChCone(ChGeometry):
    r"""Proxy of C++ chrono::geometry::ChCone class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    center = property(_core.ChCone_center_get, _core.ChCone_center_set, doc=r"""center : chrono::ChVector<()>""")
    rad = property(_core.ChCone_rad_get, _core.ChCone_rad_set, doc=r"""rad : chrono::ChVector<()>""")

    def __init__(self, *args):
        r"""
        __init__(ChCone self) -> ChCone
        __init__(ChCone self, ChVectorD mc, ChVectorD mrad) -> ChCone
        __init__(ChCone self, ChCone source) -> ChCone
        """
        _core.ChCone_swiginit(self, _core.new_ChCone(*args))
    __swig_destroy__ = _core.delete_ChCone

    def Clone(self):
        r"""Clone(ChCone self) -> ChCone"""
        return _core.ChCone_Clone(self)

    def GetClassType(self):
        r"""GetClassType(ChCone self) -> chrono::geometry::ChGeometry::GeometryType"""
        return _core.ChCone_GetClassType(self)

    def GetBoundingBox(self, xmin, xmax, ymin, ymax, zmin, zmax, Rot=None):
        r"""GetBoundingBox(ChCone self, double & xmin, double & xmax, double & ymin, double & ymax, double & zmin, double & zmax, ChMatrix33D Rot=None)"""
        return _core.ChCone_GetBoundingBox(self, xmin, xmax, ymin, ymax, zmin, zmax, Rot)

    def Baricenter(self):
        r"""Baricenter(ChCone self) -> ChVectorD"""
        return _core.ChCone_Baricenter(self)

    def CovarianceMatrix(self, C):
        r"""CovarianceMatrix(ChCone self, ChMatrix33D C)"""
        return _core.ChCone_CovarianceMatrix(self, C)

    def GetManifoldDimension(self):
        r"""GetManifoldDimension(ChCone self) -> int"""
        return _core.ChCone_GetManifoldDimension(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChCone self, ChArchiveOut & marchive)"""
        return _core.ChCone_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChCone self, chrono::ChArchiveIn & marchive)"""
        return _core.ChCone_ArchiveIN(self, marchive)

# Register ChCone in _core:
_core.ChCone_swigregister(ChCone)

class ChEllipsoid(ChGeometry):
    r"""Proxy of C++ chrono::geometry::ChEllipsoid class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    center = property(_core.ChEllipsoid_center_get, _core.ChEllipsoid_center_set, doc=r"""center : chrono::ChVector<()>""")
    rad = property(_core.ChEllipsoid_rad_get, _core.ChEllipsoid_rad_set, doc=r"""rad : chrono::ChVector<()>""")

    def __init__(self, *args):
        r"""
        __init__(ChEllipsoid self) -> ChEllipsoid
        __init__(ChEllipsoid self, ChVectorD mc, ChVectorD mrad) -> ChEllipsoid
        __init__(ChEllipsoid self, ChEllipsoid source) -> ChEllipsoid
        """
        _core.ChEllipsoid_swiginit(self, _core.new_ChEllipsoid(*args))
    __swig_destroy__ = _core.delete_ChEllipsoid

    def Clone(self):
        r"""Clone(ChEllipsoid self) -> ChEllipsoid"""
        return _core.ChEllipsoid_Clone(self)

    def GetClassType(self):
        r"""GetClassType(ChEllipsoid self) -> chrono::geometry::ChGeometry::GeometryType"""
        return _core.ChEllipsoid_GetClassType(self)

    def GetBoundingBox(self, xmin, xmax, ymin, ymax, zmin, zmax, Rot=None):
        r"""GetBoundingBox(ChEllipsoid self, double & xmin, double & xmax, double & ymin, double & ymax, double & zmin, double & zmax, ChMatrix33D Rot=None)"""
        return _core.ChEllipsoid_GetBoundingBox(self, xmin, xmax, ymin, ymax, zmin, zmax, Rot)

    def Baricenter(self):
        r"""Baricenter(ChEllipsoid self) -> ChVectorD"""
        return _core.ChEllipsoid_Baricenter(self)

    def CovarianceMatrix(self, C):
        r"""CovarianceMatrix(ChEllipsoid self, ChMatrix33D C)"""
        return _core.ChEllipsoid_CovarianceMatrix(self, C)

    def GetManifoldDimension(self):
        r"""GetManifoldDimension(ChEllipsoid self) -> int"""
        return _core.ChEllipsoid_GetManifoldDimension(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChEllipsoid self, ChArchiveOut & marchive)"""
        return _core.ChEllipsoid_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChEllipsoid self, chrono::ChArchiveIn & marchive)"""
        return _core.ChEllipsoid_ArchiveIN(self, marchive)

# Register ChEllipsoid in _core:
_core.ChEllipsoid_swigregister(ChEllipsoid)

class ChLineArc(ChLine):
    r"""Proxy of C++ chrono::geometry::ChLineArc class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    origin = property(_core.ChLineArc_origin_get, _core.ChLineArc_origin_set, doc=r"""origin : chrono::ChCoordsys<()>""")
    radius = property(_core.ChLineArc_radius_get, _core.ChLineArc_radius_set, doc=r"""radius : double""")
    angle1 = property(_core.ChLineArc_angle1_get, _core.ChLineArc_angle1_set, doc=r"""angle1 : double""")
    angle2 = property(_core.ChLineArc_angle2_get, _core.ChLineArc_angle2_set, doc=r"""angle2 : double""")
    counterclockwise = property(_core.ChLineArc_counterclockwise_get, _core.ChLineArc_counterclockwise_set, doc=r"""counterclockwise : bool""")

    def __init__(self, *args):
        r"""
        __init__(ChLineArc self, ChCoordsysD morigin=CSYSNULL, double const mradius=1, double const mangle1=CH_C_2PI, double const mangle2=0, bool const mcounterclockwise=False) -> ChLineArc
        __init__(ChLineArc self, ChLineArc source) -> ChLineArc
        """
        _core.ChLineArc_swiginit(self, _core.new_ChLineArc(*args))
    __swig_destroy__ = _core.delete_ChLineArc

    def Clone(self):
        r"""Clone(ChLineArc self) -> ChLineArc"""
        return _core.ChLineArc_Clone(self)

    def GetClassType(self):
        r"""GetClassType(ChLineArc self) -> chrono::geometry::ChGeometry::GeometryType"""
        return _core.ChLineArc_GetClassType(self)

    def Get_complexity(self):
        r"""Get_complexity(ChLineArc self) -> int"""
        return _core.ChLineArc_Get_complexity(self)

    def Evaluate(self, pos, parU):
        r"""Evaluate(ChLineArc self, ChVectorD pos, double const parU)"""
        return _core.ChLineArc_Evaluate(self, pos, parU)

    def Length(self, sampling):
        r"""Length(ChLineArc self, int sampling) -> double"""
        return _core.ChLineArc_Length(self, sampling)

    def SetCounterclockwise(self, mcc):
        r"""SetCounterclockwise(ChLineArc self, bool mcc)"""
        return _core.ChLineArc_SetCounterclockwise(self, mcc)

    def SetAngle1deg(self, a1):
        r"""SetAngle1deg(ChLineArc self, double a1)"""
        return _core.ChLineArc_SetAngle1deg(self, a1)

    def SetAngle2deg(self, a2):
        r"""SetAngle2deg(ChLineArc self, double a2)"""
        return _core.ChLineArc_SetAngle2deg(self, a2)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLineArc self, ChArchiveOut & marchive)"""
        return _core.ChLineArc_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLineArc self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLineArc_ArchiveIN(self, marchive)

# Register ChLineArc in _core:
_core.ChLineArc_swigregister(ChLineArc)

class ChLineSegment(ChLine):
    r"""Proxy of C++ chrono::geometry::ChLineSegment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pA = property(_core.ChLineSegment_pA_get, _core.ChLineSegment_pA_set, doc=r"""pA : chrono::ChVector<()>""")
    pB = property(_core.ChLineSegment_pB_get, _core.ChLineSegment_pB_set, doc=r"""pB : chrono::ChVector<()>""")

    def __init__(self, *args):
        r"""
        __init__(ChLineSegment self, ChVectorD mA=VNULL, ChVectorD mB=VNULL) -> ChLineSegment
        __init__(ChLineSegment self, ChLineSegment source) -> ChLineSegment
        """
        _core.ChLineSegment_swiginit(self, _core.new_ChLineSegment(*args))
    __swig_destroy__ = _core.delete_ChLineSegment

    def Clone(self):
        r"""Clone(ChLineSegment self) -> ChLineSegment"""
        return _core.ChLineSegment_Clone(self)

    def GetClassType(self):
        r"""GetClassType(ChLineSegment self) -> chrono::geometry::ChGeometry::GeometryType"""
        return _core.ChLineSegment_GetClassType(self)

    def Get_complexity(self):
        r"""Get_complexity(ChLineSegment self) -> int"""
        return _core.ChLineSegment_Get_complexity(self)

    def Evaluate(self, pos, parU):
        r"""Evaluate(ChLineSegment self, ChVectorD pos, double const parU)"""
        return _core.ChLineSegment_Evaluate(self, pos, parU)

    def Length(self, sampling):
        r"""Length(ChLineSegment self, int sampling) -> double"""
        return _core.ChLineSegment_Length(self, sampling)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLineSegment self, ChArchiveOut & marchive)"""
        return _core.ChLineSegment_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLineSegment self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLineSegment_ArchiveIN(self, marchive)

# Register ChLineSegment in _core:
_core.ChLineSegment_swigregister(ChLineSegment)

class ChLineNurbs(ChLine):
    r"""Proxy of C++ chrono::geometry::ChLineNurbs class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    points = property(_core.ChLineNurbs_points_get, _core.ChLineNurbs_points_set, doc=r"""points : std::vector<(chrono::ChVector<()>,std::allocator<(chrono::ChVector<(double)>)>)>""")
    weights = property(_core.ChLineNurbs_weights_get, _core.ChLineNurbs_weights_set, doc=r"""weights : chrono::ChVectorDynamic<()>""")
    knots = property(_core.ChLineNurbs_knots_get, _core.ChLineNurbs_knots_set, doc=r"""knots : chrono::ChVectorDynamic<()>""")
    p = property(_core.ChLineNurbs_p_get, _core.ChLineNurbs_p_set, doc=r"""p : int""")

    def __init__(self, *args):
        r"""
        __init__(ChLineNurbs self) -> ChLineNurbs
        __init__(ChLineNurbs self, int morder, vector_ChVectorD mpoints, ChVectorDynamicD mknots=None, ChVectorDynamicD weights=None) -> ChLineNurbs
        __init__(ChLineNurbs self, ChLineNurbs source) -> ChLineNurbs
        """
        _core.ChLineNurbs_swiginit(self, _core.new_ChLineNurbs(*args))
    __swig_destroy__ = _core.delete_ChLineNurbs

    def Clone(self):
        r"""Clone(ChLineNurbs self) -> ChLineNurbs"""
        return _core.ChLineNurbs_Clone(self)

    def Get_complexity(self):
        r"""Get_complexity(ChLineNurbs self) -> int"""
        return _core.ChLineNurbs_Get_complexity(self)

    def Evaluate(self, pos, parU):
        r"""Evaluate(ChLineNurbs self, ChVectorD pos, double const parU)"""
        return _core.ChLineNurbs_Evaluate(self, pos, parU)

    def Derive(self, dir, parU):
        r"""Derive(ChLineNurbs self, ChVectorD dir, double const parU)"""
        return _core.ChLineNurbs_Derive(self, dir, parU)

    def ComputeUfromKnotU(self, u):
        r"""ComputeUfromKnotU(ChLineNurbs self, double const u) -> double"""
        return _core.ChLineNurbs_ComputeUfromKnotU(self, u)

    def ComputeKnotUfromU(self, U):
        r"""ComputeKnotUfromU(ChLineNurbs self, double const U) -> double"""
        return _core.ChLineNurbs_ComputeKnotUfromU(self, U)

    def Points(self):
        r"""Points(ChLineNurbs self) -> vector_ChVectorD"""
        return _core.ChLineNurbs_Points(self)

    def Weights(self):
        r"""Weights(ChLineNurbs self) -> ChVectorDynamicD"""
        return _core.ChLineNurbs_Weights(self)

    def Knots(self):
        r"""Knots(ChLineNurbs self) -> ChVectorDynamicD"""
        return _core.ChLineNurbs_Knots(self)

    def GetOrder(self):
        r"""GetOrder(ChLineNurbs self) -> int"""
        return _core.ChLineNurbs_GetOrder(self)

    def SetupData(self, morder, mpoints, mknots=None, weights=None):
        r"""SetupData(ChLineNurbs self, int morder, vector_ChVectorD mpoints, ChVectorDynamicD mknots=None, ChVectorDynamicD weights=None)"""
        return _core.ChLineNurbs_SetupData(self, morder, mpoints, mknots, weights)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLineNurbs self, ChArchiveOut & marchive)"""
        return _core.ChLineNurbs_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLineNurbs self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLineNurbs_ArchiveIN(self, marchive)

# Register ChLineNurbs in _core:
_core.ChLineNurbs_swigregister(ChLineNurbs)

class ChLinePath(ChLine):
    r"""Proxy of C++ chrono::geometry::ChLinePath class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lines = property(_core.ChLinePath_lines_get, _core.ChLinePath_lines_set, doc=r"""lines : std::vector<(std::shared_ptr<(chrono::geometry::ChLine)>,std::allocator<(std::shared_ptr<(chrono::geometry::ChLine)>)>)>""")
    end_times = property(_core.ChLinePath_end_times_get, _core.ChLinePath_end_times_set, doc=r"""end_times : std::vector<(double,std::allocator<(double)>)>""")
    durations = property(_core.ChLinePath_durations_get, _core.ChLinePath_durations_set, doc=r"""durations : std::vector<(double,std::allocator<(double)>)>""")

    def __init__(self, *args):
        r"""
        __init__(ChLinePath self) -> ChLinePath
        __init__(ChLinePath self, ChLinePath source) -> ChLinePath
        """
        _core.ChLinePath_swiginit(self, _core.new_ChLinePath(*args))
    __swig_destroy__ = _core.delete_ChLinePath

    def Clone(self):
        r"""Clone(ChLinePath self) -> ChLinePath"""
        return _core.ChLinePath_Clone(self)

    def GetClassType(self):
        r"""GetClassType(ChLinePath self) -> chrono::geometry::ChGeometry::GeometryType"""
        return _core.ChLinePath_GetClassType(self)

    def Get_complexity(self):
        r"""Get_complexity(ChLinePath self) -> int"""
        return _core.ChLinePath_Get_complexity(self)

    def Length(self, sampling):
        r"""Length(ChLinePath self, int sampling) -> double"""
        return _core.ChLinePath_Length(self, sampling)

    def Evaluate(self, pos, parU):
        r"""Evaluate(ChLinePath self, ChVectorD pos, double const parU)"""
        return _core.ChLinePath_Evaluate(self, pos, parU)

    def GetEndA(self):
        r"""GetEndA(ChLinePath self) -> ChVectorD"""
        return _core.ChLinePath_GetEndA(self)

    def GetEndB(self):
        r"""GetEndB(ChLinePath self) -> ChVectorD"""
        return _core.ChLinePath_GetEndB(self)

    def GetSubLinesCount(self):
        r"""GetSubLinesCount(ChLinePath self) -> size_t"""
        return _core.ChLinePath_GetSubLinesCount(self)

    def GetSubLineN(self, n):
        r"""GetSubLineN(ChLinePath self, size_t n) -> std::shared_ptr< chrono::geometry::ChLine >"""
        return _core.ChLinePath_GetSubLineN(self, n)

    def GetSubLineDurationN(self, n):
        r"""GetSubLineDurationN(ChLinePath self, size_t n) -> double"""
        return _core.ChLinePath_GetSubLineDurationN(self, n)

    def SetSubLineDurationN(self, n, mduration):
        r"""SetSubLineDurationN(ChLinePath self, size_t n, double mduration)"""
        return _core.ChLinePath_SetSubLineDurationN(self, n, mduration)

    def AddSubLine(self, *args):
        r"""
        AddSubLine(ChLinePath self, std::shared_ptr< chrono::geometry::ChLine > mline, double duration=1)
        AddSubLine(ChLinePath self, ChLine mline, double duration=1)
        """
        return _core.ChLinePath_AddSubLine(self, *args)

    def InsertSubLine(self, *args):
        r"""
        InsertSubLine(ChLinePath self, size_t n, std::shared_ptr< chrono::geometry::ChLine > mline, double duration=1)
        InsertSubLine(ChLinePath self, size_t n, ChLine mline, double duration=1)
        """
        return _core.ChLinePath_InsertSubLine(self, *args)

    def EraseSubLine(self, n):
        r"""EraseSubLine(ChLinePath self, size_t n)"""
        return _core.ChLinePath_EraseSubLine(self, n)

    def GetPathDuration(self):
        r"""GetPathDuration(ChLinePath self) -> double"""
        return _core.ChLinePath_GetPathDuration(self)

    def SetPathDuration(self, mUduration):
        r"""SetPathDuration(ChLinePath self, double mUduration)"""
        return _core.ChLinePath_SetPathDuration(self, mUduration)

    def GetContinuityMaxError(self):
        r"""GetContinuityMaxError(ChLinePath self) -> double"""
        return _core.ChLinePath_GetContinuityMaxError(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinePath self, ChArchiveOut & marchive)"""
        return _core.ChLinePath_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinePath self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinePath_ArchiveIN(self, marchive)

# Register ChLinePath in _core:
_core.ChLinePath_swigregister(ChLinePath)

class ChLinePoly(ChLine):
    r"""Proxy of C++ chrono::geometry::ChLinePoly class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinePoly self, int mnumpoints=1) -> ChLinePoly
        __init__(ChLinePoly self, ChLinePoly source) -> ChLinePoly
        """
        _core.ChLinePoly_swiginit(self, _core.new_ChLinePoly(*args))
    __swig_destroy__ = _core.delete_ChLinePoly

    def Clone(self):
        r"""Clone(ChLinePoly self) -> ChLinePoly"""
        return _core.ChLinePoly_Clone(self)

    def GetClassType(self):
        r"""GetClassType(ChLinePoly self) -> chrono::geometry::ChGeometry::GeometryType"""
        return _core.ChLinePoly_GetClassType(self)

    def Get_complexity(self):
        r"""Get_complexity(ChLinePoly self) -> int"""
        return _core.ChLinePoly_Get_complexity(self)

    def Set_complexity(self, mc):
        r"""Set_complexity(ChLinePoly self, int mc)"""
        return _core.ChLinePoly_Set_complexity(self, mc)

    def Evaluate(self, pos, parU):
        r"""Evaluate(ChLinePoly self, ChVectorD pos, double const parU)"""
        return _core.ChLinePoly_Evaluate(self, pos, parU)

    def Length(self, sampling):
        r"""Length(ChLinePoly self, int sampling) -> double"""
        return _core.ChLinePoly_Length(self, sampling)

    def DrawPostscript(self, mfle, markpoints, bezier_interpolate):
        r"""DrawPostscript(ChLinePoly self, ChFile_ps * mfle, int markpoints, int bezier_interpolate) -> bool"""
        return _core.ChLinePoly_DrawPostscript(self, mfle, markpoints, bezier_interpolate)

    def Get_numpoints(self):
        r"""Get_numpoints(ChLinePoly self) -> size_t"""
        return _core.ChLinePoly_Get_numpoints(self)

    def Get_degree(self):
        r"""Get_degree(ChLinePoly self) -> int"""
        return _core.ChLinePoly_Get_degree(self)

    def Get_point(self, mnum):
        r"""Get_point(ChLinePoly self, size_t mnum) -> ChVectorD"""
        return _core.ChLinePoly_Get_point(self, mnum)

    def Set_point(self, mnum, mpoint):
        r"""Set_point(ChLinePoly self, int mnum, ChVectorD mpoint) -> bool"""
        return _core.ChLinePoly_Set_point(self, mnum, mpoint)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinePoly self, ChArchiveOut & marchive)"""
        return _core.ChLinePoly_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinePoly self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinePoly_ArchiveIN(self, marchive)

# Register ChLinePoly in _core:
_core.ChLinePoly_swigregister(ChLinePoly)

class ChLineBezier(ChLine):
    r"""Proxy of C++ chrono::geometry::ChLineBezier class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLineBezier self) -> ChLineBezier
        __init__(ChLineBezier self, std::shared_ptr< chrono::ChBezierCurve > path) -> ChLineBezier
        __init__(ChLineBezier self, std::string const & filename) -> ChLineBezier
        __init__(ChLineBezier self, ChLineBezier source) -> ChLineBezier
        """
        _core.ChLineBezier_swiginit(self, _core.new_ChLineBezier(*args))
    __swig_destroy__ = _core.delete_ChLineBezier

    def Clone(self):
        r"""Clone(ChLineBezier self) -> ChLineBezier"""
        return _core.ChLineBezier_Clone(self)

    def GetClassType(self):
        r"""GetClassType(ChLineBezier self) -> chrono::geometry::ChGeometry::GeometryType"""
        return _core.ChLineBezier_GetClassType(self)

    def Set_closed(self, mc):
        r"""Set_closed(ChLineBezier self, bool mc)"""
        return _core.ChLineBezier_Set_closed(self, mc)

    def Set_complexity(self, mc):
        r"""Set_complexity(ChLineBezier self, int mc)"""
        return _core.ChLineBezier_Set_complexity(self, mc)

    def Evaluate(self, pos, parU):
        r"""Evaluate(ChLineBezier self, ChVectorD pos, double const parU)"""
        return _core.ChLineBezier_Evaluate(self, pos, parU)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLineBezier self, ChArchiveOut & marchive)"""
        return _core.ChLineBezier_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLineBezier self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLineBezier_ArchiveIN(self, marchive)

# Register ChLineBezier in _core:
_core.ChLineBezier_swigregister(ChLineBezier)

class ChLineBspline(ChLine):
    r"""Proxy of C++ chrono::geometry::ChLineBspline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    points = property(_core.ChLineBspline_points_get, _core.ChLineBspline_points_set, doc=r"""points : std::vector<(chrono::ChVector<()>,std::allocator<(chrono::ChVector<(double)>)>)>""")
    knots = property(_core.ChLineBspline_knots_get, _core.ChLineBspline_knots_set, doc=r"""knots : chrono::ChVectorDynamic<()>""")
    p = property(_core.ChLineBspline_p_get, _core.ChLineBspline_p_set, doc=r"""p : int""")
    closed = property(_core.ChLineBspline_closed_get, _core.ChLineBspline_closed_set, doc=r"""closed : bool""")

    def __init__(self, *args):
        r"""
        __init__(ChLineBspline self) -> ChLineBspline
        __init__(ChLineBspline self, int morder, vector_ChVectorD mpoints, ChVectorDynamicD mknots=None) -> ChLineBspline
        __init__(ChLineBspline self, ChLineBspline source) -> ChLineBspline
        """
        _core.ChLineBspline_swiginit(self, _core.new_ChLineBspline(*args))
    __swig_destroy__ = _core.delete_ChLineBspline

    def Clone(self):
        r"""Clone(ChLineBspline self) -> ChLineBspline"""
        return _core.ChLineBspline_Clone(self)

    def Get_complexity(self):
        r"""Get_complexity(ChLineBspline self) -> int"""
        return _core.ChLineBspline_Get_complexity(self)

    def Evaluate(self, pos, parU):
        r"""Evaluate(ChLineBspline self, ChVectorD pos, double const parU)"""
        return _core.ChLineBspline_Evaluate(self, pos, parU)

    def Derive(self, dir, parU):
        r"""Derive(ChLineBspline self, ChVectorD dir, double const parU)"""
        return _core.ChLineBspline_Derive(self, dir, parU)

    def ComputeUfromKnotU(self, u):
        r"""ComputeUfromKnotU(ChLineBspline self, double const u) -> double"""
        return _core.ChLineBspline_ComputeUfromKnotU(self, u)

    def ComputeKnotUfromU(self, U):
        r"""ComputeKnotUfromU(ChLineBspline self, double const U) -> double"""
        return _core.ChLineBspline_ComputeKnotUfromU(self, U)

    def Points(self):
        r"""Points(ChLineBspline self) -> vector_ChVectorD"""
        return _core.ChLineBspline_Points(self)

    def Knots(self):
        r"""Knots(ChLineBspline self) -> ChVectorDynamicD"""
        return _core.ChLineBspline_Knots(self)

    def GetOrder(self):
        r"""GetOrder(ChLineBspline self) -> int"""
        return _core.ChLineBspline_GetOrder(self)

    def SetupData(self, morder, mpoints, mknots=None):
        r"""SetupData(ChLineBspline self, int morder, vector_ChVectorD mpoints, ChVectorDynamicD mknots=None)"""
        return _core.ChLineBspline_SetupData(self, morder, mpoints, mknots)

    def SetClosed(self, mc):
        r"""SetClosed(ChLineBspline self, bool mc)"""
        return _core.ChLineBspline_SetClosed(self, mc)

    def GetClosed(self):
        r"""GetClosed(ChLineBspline self) -> bool"""
        return _core.ChLineBspline_GetClosed(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLineBspline self, ChArchiveOut & marchive)"""
        return _core.ChLineBspline_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLineBspline self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLineBspline_ArchiveIN(self, marchive)

# Register ChLineBspline in _core:
_core.ChLineBspline_swigregister(ChLineBspline)

CAM_TYPE_SLIDEFOLLOWER = _core.CAM_TYPE_SLIDEFOLLOWER

CAM_TYPE_ROTATEFOLLOWER = _core.CAM_TYPE_ROTATEFOLLOWER

CAM_TYPE_ECCENTRICFOLLOWER = _core.CAM_TYPE_ECCENTRICFOLLOWER

CAM_TYPE_FLAT = _core.CAM_TYPE_FLAT

CAM_TYPE_FLATOSCILLATE = _core.CAM_TYPE_FLATOSCILLATE

class ChLineCam(ChLine):
    r"""Proxy of C++ chrono::geometry::ChLineCam class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLineCam self) -> ChLineCam
        __init__(ChLineCam self, ChLineCam source) -> ChLineCam
        """
        _core.ChLineCam_swiginit(self, _core.new_ChLineCam(*args))
    __swig_destroy__ = _core.delete_ChLineCam

    def Clone(self):
        r"""Clone(ChLineCam self) -> ChLineCam"""
        return _core.ChLineCam_Clone(self)

    def GetClassType(self):
        r"""GetClassType(ChLineCam self) -> chrono::geometry::ChGeometry::GeometryType"""
        return _core.ChLineCam_GetClassType(self)

    def Get_closed(self):
        r"""Get_closed(ChLineCam self) -> bool"""
        return _core.ChLineCam_Get_closed(self)

    def Set_closed(self, mc):
        r"""Set_closed(ChLineCam self, bool mc)"""
        return _core.ChLineCam_Set_closed(self, mc)

    def Set_Phase(self, mf):
        r"""Set_Phase(ChLineCam self, double mf)"""
        return _core.ChLineCam_Set_Phase(self, mf)

    def Get_Phase(self):
        r"""Get_Phase(ChLineCam self) -> double"""
        return _core.ChLineCam_Get_Phase(self)

    def Set_Rb(self, mrb):
        r"""Set_Rb(ChLineCam self, double mrb)"""
        return _core.ChLineCam_Set_Rb(self, mrb)

    def Get_Rb(self):
        r"""Get_Rb(ChLineCam self) -> double"""
        return _core.ChLineCam_Get_Rb(self)

    def Set_Rr(self, mrr):
        r"""Set_Rr(ChLineCam self, double mrr)"""
        return _core.ChLineCam_Set_Rr(self, mrr)

    def Get_Rr(self):
        r"""Get_Rr(ChLineCam self) -> double"""
        return _core.ChLineCam_Get_Rr(self)

    def Set_motion_law(self, mlaw):
        r"""Set_motion_law(ChLineCam self, std::shared_ptr< chrono::ChFunction > mlaw)"""
        return _core.ChLineCam_Set_motion_law(self, mlaw)

    def Get_motion_law(self):
        r"""Get_motion_law(ChLineCam self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLineCam_Get_motion_law(self)

    def Set_type(self, mt):
        r"""Set_type(ChLineCam self, chrono::geometry::eChCamType mt)"""
        return _core.ChLineCam_Set_type(self, mt)

    def Get_type(self):
        r"""Get_type(ChLineCam self) -> chrono::geometry::eChCamType"""
        return _core.ChLineCam_Get_type(self)

    def Set_center(self, mc):
        r"""Set_center(ChLineCam self, ChVectorD mc)"""
        return _core.ChLineCam_Set_center(self, mc)

    def Get_center(self):
        r"""Get_center(ChLineCam self) -> ChVectorD"""
        return _core.ChLineCam_Get_center(self)

    def Set_Negative(self, val):
        r"""Set_Negative(ChLineCam self, bool val)"""
        return _core.ChLineCam_Set_Negative(self, val)

    def Get_Negative(self):
        r"""Get_Negative(ChLineCam self) -> bool"""
        return _core.ChLineCam_Get_Negative(self)

    def Set_Internal(self, val):
        r"""Set_Internal(ChLineCam self, bool val)"""
        return _core.ChLineCam_Set_Internal(self, val)

    def Get_Internal(self):
        r"""Get_Internal(ChLineCam self) -> bool"""
        return _core.ChLineCam_Get_Internal(self)

    def Set_rotating_follower(self, mp, md, mb0):
        r"""Set_rotating_follower(ChLineCam self, double mp, double md, double mb0)"""
        return _core.ChLineCam_Set_rotating_follower(self, mp, md, mb0)

    def Get_p(self):
        r"""Get_p(ChLineCam self) -> double"""
        return _core.ChLineCam_Get_p(self)

    def Get_d(self):
        r"""Get_d(ChLineCam self) -> double"""
        return _core.ChLineCam_Get_d(self)

    def Get_b0(self):
        r"""Get_b0(ChLineCam self) -> double"""
        return _core.ChLineCam_Get_b0(self)

    def Set_sliding_eccentrical(self, me):
        r"""Set_sliding_eccentrical(ChLineCam self, double me)"""
        return _core.ChLineCam_Set_sliding_eccentrical(self, me)

    def Get_e(self):
        r"""Get_e(ChLineCam self) -> double"""
        return _core.ChLineCam_Get_e(self)

    def Get_s(self):
        r"""Get_s(ChLineCam self) -> double"""
        return _core.ChLineCam_Get_s(self)

    def Set_flat_oscillate(self, me, md, mb0):
        r"""Set_flat_oscillate(ChLineCam self, double me, double md, double mb0)"""
        return _core.ChLineCam_Set_flat_oscillate(self, me, md, mb0)

    def EvaluateCamPoint(self, par, res, g, q):
        r"""EvaluateCamPoint(ChLineCam self, double par, ChVectorD res, double & g, double & q)"""
        return _core.ChLineCam_EvaluateCamPoint(self, par, res, g, q)

    def Evaluate(self, pos, parU):
        r"""Evaluate(ChLineCam self, ChVectorD pos, double const parU)"""
        return _core.ChLineCam_Evaluate(self, pos, parU)

    def Get_weight(self, par):
        r"""Get_weight(ChLineCam self, double par) -> double"""
        return _core.ChLineCam_Get_weight(self, par)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLineCam self, ChArchiveOut & marchive)"""
        return _core.ChLineCam_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLineCam self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLineCam_ArchiveIN(self, marchive)

# Register ChLineCam in _core:
_core.ChLineCam_swigregister(ChLineCam)

class ChTriangle(ChGeometry):
    r"""Proxy of C++ chrono::geometry::ChTriangle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    p1 = property(_core.ChTriangle_p1_get, _core.ChTriangle_p1_set, doc=r"""p1 : chrono::ChVector<()>""")
    p2 = property(_core.ChTriangle_p2_get, _core.ChTriangle_p2_set, doc=r"""p2 : chrono::ChVector<()>""")
    p3 = property(_core.ChTriangle_p3_get, _core.ChTriangle_p3_set, doc=r"""p3 : chrono::ChVector<()>""")

    def __init__(self, *args):
        r"""
        __init__(ChTriangle self) -> ChTriangle
        __init__(ChTriangle self, ChVectorD mp1, ChVectorD mp2, ChVectorD mp3) -> ChTriangle
        __init__(ChTriangle self, ChTriangle source) -> ChTriangle
        """
        _core.ChTriangle_swiginit(self, _core.new_ChTriangle(*args))
    __swig_destroy__ = _core.delete_ChTriangle

    def Clone(self):
        r"""Clone(ChTriangle self) -> ChTriangle"""
        return _core.ChTriangle_Clone(self)

    def GetClassType(self):
        r"""GetClassType(ChTriangle self) -> chrono::geometry::ChGeometry::GeometryType"""
        return _core.ChTriangle_GetClassType(self)

    def GetBoundingBox(self, xmin, xmax, ymin, ymax, zmin, zmax, Rot=None):
        r"""GetBoundingBox(ChTriangle self, double & xmin, double & xmax, double & ymin, double & ymax, double & zmin, double & zmax, ChMatrix33D Rot=None)"""
        return _core.ChTriangle_GetBoundingBox(self, xmin, xmax, ymin, ymax, zmin, zmax, Rot)

    def Baricenter(self):
        r"""Baricenter(ChTriangle self) -> ChVectorD"""
        return _core.ChTriangle_Baricenter(self)

    def CovarianceMatrix(self, C):
        r"""CovarianceMatrix(ChTriangle self, ChMatrix33D C)"""
        return _core.ChTriangle_CovarianceMatrix(self, C)

    def GetManifoldDimension(self):
        r"""GetManifoldDimension(ChTriangle self) -> int"""
        return _core.ChTriangle_GetManifoldDimension(self)

    def IsDegenerated(self):
        r"""IsDegenerated(ChTriangle self) -> bool"""
        return _core.ChTriangle_IsDegenerated(self)

    def Normal(self, N):
        r"""Normal(ChTriangle self, ChVectorD N) -> bool"""
        return _core.ChTriangle_Normal(self, N)

    def GetNormal(self):
        r"""GetNormal(ChTriangle self) -> ChVectorD"""
        return _core.ChTriangle_GetNormal(self)

    def PointTriangleDistance(self, *args):
        r"""
        PointTriangleDistance(ChTriangle self, ChVectorD B, ChVectorD A1, ChVectorD A2, ChVectorD A3, double & mu, double & mv, bool & is_into, ChVectorD Bprojected) -> double
        PointTriangleDistance(ChTriangle self, ChVectorD B, double & mu, double & mv, bool & is_into, ChVectorD Bprojected) -> double
        """
        return _core.ChTriangle_PointTriangleDistance(self, *args)

    @staticmethod
    def PointLineDistance(p, dA, dB, mu, is_insegment):
        r"""PointLineDistance(ChVectorD p, ChVectorD dA, ChVectorD dB, double & mu, bool & is_insegment) -> double"""
        return _core.ChTriangle_PointLineDistance(p, dA, dB, mu, is_insegment)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChTriangle self, ChArchiveOut & marchive)"""
        return _core.ChTriangle_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChTriangle self, chrono::ChArchiveIn & marchive)"""
        return _core.ChTriangle_ArchiveIN(self, marchive)

# Register ChTriangle in _core:
_core.ChTriangle_swigregister(ChTriangle)

def ChTriangle_PointLineDistance(p, dA, dB, mu, is_insegment):
    r"""ChTriangle_PointLineDistance(ChVectorD p, ChVectorD dA, ChVectorD dB, double & mu, bool & is_insegment) -> double"""
    return _core.ChTriangle_PointLineDistance(p, dA, dB, mu, is_insegment)

class ChTriangleMesh(ChGeometry):
    r"""Proxy of C++ chrono::geometry::ChTriangleMesh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChTriangleMesh

    def addTriangle(self, *args):
        r"""
        addTriangle(ChTriangleMesh self, ChVectorD vertex0, ChVectorD vertex1, ChVectorD vertex2)
        addTriangle(ChTriangleMesh self, ChTriangle atriangle)
        """
        return _core.ChTriangleMesh_addTriangle(self, *args)

    def getNumTriangles(self):
        r"""getNumTriangles(ChTriangleMesh self) -> int"""
        return _core.ChTriangleMesh_getNumTriangles(self)

    def getTriangle(self, index):
        r"""getTriangle(ChTriangleMesh self, int index) -> ChTriangle"""
        return _core.ChTriangleMesh_getTriangle(self, index)

    def Clear(self):
        r"""Clear(ChTriangleMesh self)"""
        return _core.ChTriangleMesh_Clear(self)

    def Transform(self, *args):
        r"""
        Transform(ChTriangleMesh self, ChVectorD displ, ChMatrix33D rotscale)
        Transform(ChTriangleMesh self, ChVectorD displ, ChQuaternionD mquat=chrono::ChQuaternion< double >(1, 0, 0, 0))
        """
        return _core.ChTriangleMesh_Transform(self, *args)

    def GetClassType(self):
        r"""GetClassType(ChTriangleMesh self) -> chrono::geometry::ChGeometry::GeometryType"""
        return _core.ChTriangleMesh_GetClassType(self)

    def GetBoundingBox(self, xmin, xmax, ymin, ymax, zmin, zmax, Rot=None):
        r"""GetBoundingBox(ChTriangleMesh self, double & xmin, double & xmax, double & ymin, double & ymax, double & zmin, double & zmax, ChMatrix33D Rot=None)"""
        return _core.ChTriangleMesh_GetBoundingBox(self, xmin, xmax, ymin, ymax, zmin, zmax, Rot)

    def CovarianceMatrix(self, C):
        r"""CovarianceMatrix(ChTriangleMesh self, ChMatrix33D C)"""
        return _core.ChTriangleMesh_CovarianceMatrix(self, C)

    def GetManifoldDimension(self):
        r"""GetManifoldDimension(ChTriangleMesh self) -> int"""
        return _core.ChTriangleMesh_GetManifoldDimension(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChTriangleMesh self, ChArchiveOut & marchive)"""
        return _core.ChTriangleMesh_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChTriangleMesh self, chrono::ChArchiveIn & marchive)"""
        return _core.ChTriangleMesh_ArchiveIN(self, marchive)

# Register ChTriangleMesh in _core:
_core.ChTriangleMesh_swigregister(ChTriangleMesh)

class ChTriangleMeshSoup(ChTriangleMesh):
    r"""Proxy of C++ chrono::geometry::ChTriangleMeshSoup class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChTriangleMeshSoup self) -> ChTriangleMeshSoup
        __init__(ChTriangleMeshSoup self, ChTriangleMeshSoup source) -> ChTriangleMeshSoup
        """
        _core.ChTriangleMeshSoup_swiginit(self, _core.new_ChTriangleMeshSoup(*args))

    def Clone(self):
        r"""Clone(ChTriangleMeshSoup self) -> ChTriangleMeshSoup"""
        return _core.ChTriangleMeshSoup_Clone(self)

    def Triangle(self, index):
        r"""Triangle(ChTriangleMeshSoup self, int index) -> ChTriangle"""
        return _core.ChTriangleMeshSoup_Triangle(self, index)

    def addTriangle(self, *args):
        r"""
        addTriangle(ChTriangleMeshSoup self, ChVectorD vertex0, ChVectorD vertex1, ChVectorD vertex2)
        addTriangle(ChTriangleMeshSoup self, ChTriangle atriangle)
        """
        return _core.ChTriangleMeshSoup_addTriangle(self, *args)

    def getNumTriangles(self):
        r"""getNumTriangles(ChTriangleMeshSoup self) -> int"""
        return _core.ChTriangleMeshSoup_getNumTriangles(self)

    def getTriangle(self, index):
        r"""getTriangle(ChTriangleMeshSoup self, int index) -> ChTriangle"""
        return _core.ChTriangleMeshSoup_getTriangle(self, index)

    def Clear(self):
        r"""Clear(ChTriangleMeshSoup self)"""
        return _core.ChTriangleMeshSoup_Clear(self)

    def Transform(self, displ, rotscale):
        r"""Transform(ChTriangleMeshSoup self, ChVectorD displ, ChMatrix33D rotscale)"""
        return _core.ChTriangleMeshSoup_Transform(self, displ, rotscale)

    def GetClassType(self):
        r"""GetClassType(ChTriangleMeshSoup self) -> chrono::geometry::ChGeometry::GeometryType"""
        return _core.ChTriangleMeshSoup_GetClassType(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChTriangleMeshSoup self, ChArchiveOut & marchive)"""
        return _core.ChTriangleMeshSoup_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChTriangleMeshSoup self, chrono::ChArchiveIn & marchive)"""
        return _core.ChTriangleMeshSoup_ArchiveIN(self, marchive)
    __swig_destroy__ = _core.delete_ChTriangleMeshSoup

# Register ChTriangleMeshSoup in _core:
_core.ChTriangleMeshSoup_swigregister(ChTriangleMeshSoup)

class ChTriangleMeshConnected(ChTriangleMesh):
    r"""Proxy of C++ chrono::geometry::ChTriangleMeshConnected class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_vertices = property(_core.ChTriangleMeshConnected_m_vertices_get, _core.ChTriangleMeshConnected_m_vertices_set, doc=r"""m_vertices : std::vector<(chrono::ChVector<(double)>,std::allocator<(chrono::ChVector<(double)>)>)>""")
    m_normals = property(_core.ChTriangleMeshConnected_m_normals_get, _core.ChTriangleMeshConnected_m_normals_set, doc=r"""m_normals : std::vector<(chrono::ChVector<(double)>,std::allocator<(chrono::ChVector<(double)>)>)>""")
    m_UV = property(_core.ChTriangleMeshConnected_m_UV_get, _core.ChTriangleMeshConnected_m_UV_set, doc=r"""m_UV : std::vector<(chrono::ChVector<(double)>,std::allocator<(chrono::ChVector<(double)>)>)>""")
    m_colors = property(_core.ChTriangleMeshConnected_m_colors_get, _core.ChTriangleMeshConnected_m_colors_set, doc=r"""m_colors : std::vector<(chrono::ChVector<(float)>,std::allocator<(chrono::ChVector<(float)>)>)>""")
    m_face_v_indices = property(_core.ChTriangleMeshConnected_m_face_v_indices_get, _core.ChTriangleMeshConnected_m_face_v_indices_set, doc=r"""m_face_v_indices : std::vector<(chrono::ChVector<(int)>,std::allocator<(chrono::ChVector<(int)>)>)>""")
    m_face_n_indices = property(_core.ChTriangleMeshConnected_m_face_n_indices_get, _core.ChTriangleMeshConnected_m_face_n_indices_set, doc=r"""m_face_n_indices : std::vector<(chrono::ChVector<(int)>,std::allocator<(chrono::ChVector<(int)>)>)>""")
    m_face_uv_indices = property(_core.ChTriangleMeshConnected_m_face_uv_indices_get, _core.ChTriangleMeshConnected_m_face_uv_indices_set, doc=r"""m_face_uv_indices : std::vector<(chrono::ChVector<(int)>,std::allocator<(chrono::ChVector<(int)>)>)>""")
    m_face_col_indices = property(_core.ChTriangleMeshConnected_m_face_col_indices_get, _core.ChTriangleMeshConnected_m_face_col_indices_set, doc=r"""m_face_col_indices : std::vector<(chrono::ChVector<(int)>,std::allocator<(chrono::ChVector<(int)>)>)>""")
    m_filename = property(_core.ChTriangleMeshConnected_m_filename_get, _core.ChTriangleMeshConnected_m_filename_set, doc=r"""m_filename : std::string""")

    def __init__(self, *args):
        r"""
        __init__(ChTriangleMeshConnected self) -> ChTriangleMeshConnected
        __init__(ChTriangleMeshConnected self, ChTriangleMeshConnected source) -> ChTriangleMeshConnected
        """
        _core.ChTriangleMeshConnected_swiginit(self, _core.new_ChTriangleMeshConnected(*args))
    __swig_destroy__ = _core.delete_ChTriangleMeshConnected

    def Clone(self):
        r"""Clone(ChTriangleMeshConnected self) -> ChTriangleMeshConnected"""
        return _core.ChTriangleMeshConnected_Clone(self)

    def getCoordsVertices(self):
        r"""getCoordsVertices(ChTriangleMeshConnected self) -> vector_ChVectorD"""
        return _core.ChTriangleMeshConnected_getCoordsVertices(self)

    def getCoordsNormals(self):
        r"""getCoordsNormals(ChTriangleMeshConnected self) -> vector_ChVectorD"""
        return _core.ChTriangleMeshConnected_getCoordsNormals(self)

    def getCoordsUV(self):
        r"""getCoordsUV(ChTriangleMeshConnected self) -> vector_ChVectorD"""
        return _core.ChTriangleMeshConnected_getCoordsUV(self)

    def getCoordsColors(self):
        r"""getCoordsColors(ChTriangleMeshConnected self) -> std::vector< chrono::ChVector< float >,std::allocator< chrono::ChVector< float > > > &"""
        return _core.ChTriangleMeshConnected_getCoordsColors(self)

    def getIndicesVertexes(self):
        r"""getIndicesVertexes(ChTriangleMeshConnected self) -> std::vector< chrono::ChVector< int >,std::allocator< chrono::ChVector< int > > > &"""
        return _core.ChTriangleMeshConnected_getIndicesVertexes(self)

    def getIndicesNormals(self):
        r"""getIndicesNormals(ChTriangleMeshConnected self) -> std::vector< chrono::ChVector< int >,std::allocator< chrono::ChVector< int > > > &"""
        return _core.ChTriangleMeshConnected_getIndicesNormals(self)

    def getIndicesUV(self):
        r"""getIndicesUV(ChTriangleMeshConnected self) -> std::vector< chrono::ChVector< int >,std::allocator< chrono::ChVector< int > > > &"""
        return _core.ChTriangleMeshConnected_getIndicesUV(self)

    def getIndicesColors(self):
        r"""getIndicesColors(ChTriangleMeshConnected self) -> std::vector< chrono::ChVector< int >,std::allocator< chrono::ChVector< int > > > &"""
        return _core.ChTriangleMeshConnected_getIndicesColors(self)

    def LoadWavefrontMesh(self, filename, load_normals=True, load_uv=False):
        r"""LoadWavefrontMesh(ChTriangleMeshConnected self, std::string filename, bool load_normals=True, bool load_uv=False)"""
        return _core.ChTriangleMeshConnected_LoadWavefrontMesh(self, filename, load_normals, load_uv)

    @staticmethod
    def WriteWavefront(filename, meshes):
        r"""WriteWavefront(std::string const & filename, std::vector< chrono::geometry::ChTriangleMeshConnected,std::allocator< chrono::geometry::ChTriangleMeshConnected > > & meshes)"""
        return _core.ChTriangleMeshConnected_WriteWavefront(filename, meshes)

    @staticmethod
    def Merge(meshes):
        r"""Merge(std::vector< chrono::geometry::ChTriangleMeshConnected,std::allocator< chrono::geometry::ChTriangleMeshConnected > > & meshes) -> ChTriangleMeshConnected"""
        return _core.ChTriangleMeshConnected_Merge(meshes)

    def addTriangle(self, *args):
        r"""
        addTriangle(ChTriangleMeshConnected self, ChVectorD vertex0, ChVectorD vertex1, ChVectorD vertex2)
        addTriangle(ChTriangleMeshConnected self, ChTriangle atriangle)
        """
        return _core.ChTriangleMeshConnected_addTriangle(self, *args)

    def getNumTriangles(self):
        r"""getNumTriangles(ChTriangleMeshConnected self) -> int"""
        return _core.ChTriangleMeshConnected_getNumTriangles(self)

    def getTriangle(self, index):
        r"""getTriangle(ChTriangleMeshConnected self, int index) -> ChTriangle"""
        return _core.ChTriangleMeshConnected_getTriangle(self, index)

    def Clear(self):
        r"""Clear(ChTriangleMeshConnected self)"""
        return _core.ChTriangleMeshConnected_Clear(self)

    def ComputeMassProperties(self, bodyCoords, mass, center, inertia):
        r"""ComputeMassProperties(ChTriangleMeshConnected self, bool bodyCoords, double & mass, ChVectorD center, ChMatrix33D inertia)"""
        return _core.ChTriangleMeshConnected_ComputeMassProperties(self, bodyCoords, mass, center, inertia)

    def GetFileName(self):
        r"""GetFileName(ChTriangleMeshConnected self) -> std::string"""
        return _core.ChTriangleMeshConnected_GetFileName(self)

    def Transform(self, displ, rotscale):
        r"""Transform(ChTriangleMeshConnected self, ChVectorD displ, ChMatrix33D rotscale)"""
        return _core.ChTriangleMeshConnected_Transform(self, displ, rotscale)

    def ComputeNeighbouringTriangleMap(self, tri_map):
        r"""ComputeNeighbouringTriangleMap(ChTriangleMeshConnected self, std::vector< std::array< int,4 >,std::allocator< std::array< int,4 > > > & tri_map) -> bool"""
        return _core.ChTriangleMeshConnected_ComputeNeighbouringTriangleMap(self, tri_map)

    def ComputeWingedEdges(self, winged_edges, allow_single_wing=True):
        r"""ComputeWingedEdges(ChTriangleMeshConnected self, std::map< std::pair< int,int >,std::pair< int,int > > & winged_edges, bool allow_single_wing=True) -> bool"""
        return _core.ChTriangleMeshConnected_ComputeWingedEdges(self, winged_edges, allow_single_wing)

    def RepairDuplicateVertexes(self, tolerance=1e-18):
        r"""RepairDuplicateVertexes(ChTriangleMeshConnected self, double const tolerance=1e-18) -> int"""
        return _core.ChTriangleMeshConnected_RepairDuplicateVertexes(self, tolerance)

    def MakeOffset(self, offset):
        r"""MakeOffset(ChTriangleMeshConnected self, double const offset) -> bool"""
        return _core.ChTriangleMeshConnected_MakeOffset(self, offset)

    def GetTriangleEdgeIndexes(self, indexes, it, nedge, unique):
        r"""GetTriangleEdgeIndexes(ChTriangleMeshConnected self, std::vector< chrono::ChVector< int >,std::allocator< chrono::ChVector< int > > > const & indexes, int it, int nedge, bool unique) -> std::pair< int,int >"""
        return _core.ChTriangleMeshConnected_GetTriangleEdgeIndexes(self, indexes, it, nedge, unique)

    def SplitEdge(self, itA, itB, neA, neB, itA_1, itA_2, itB_1, itB_2, tri_map, aux_data_double, aux_data_int, aux_data_bool, aux_data_vect):
        r"""SplitEdge(ChTriangleMeshConnected self, int itA, int itB, int neA, int neB, int & itA_1, int & itA_2, int & itB_1, int & itB_2, std::vector< std::array< int,4 >,std::allocator< std::array< int,4 > > > & tri_map, std::vector< std::vector< double,std::allocator< double > > *,std::allocator< std::vector< double,std::allocator< double > > * > > & aux_data_double, std::vector< std::vector< int,std::allocator< int > > *,std::allocator< std::vector< int,std::allocator< int > > * > > & aux_data_int, std::vector< std::vector< bool,std::allocator< bool > > *,std::allocator< std::vector< bool,std::allocator< bool > > * > > & aux_data_bool, std::vector< std::vector< chrono::ChVector< >,std::allocator< chrono::ChVector< > > > *,std::allocator< std::vector< chrono::ChVector< double >,std::allocator< chrono::ChVector< double > > > * > > & aux_data_vect) -> bool"""
        return _core.ChTriangleMeshConnected_SplitEdge(self, itA, itB, neA, neB, itA_1, itA_2, itB_1, itB_2, tri_map, aux_data_double, aux_data_int, aux_data_bool, aux_data_vect)

    def RefineMeshEdges(self, marked_tris, edge_maxlen, criterion, atri_map, aux_data_double, aux_data_int, aux_data_bool, aux_data_vect):
        r"""RefineMeshEdges(ChTriangleMeshConnected self, std::vector< int,std::allocator< int > > & marked_tris, double edge_maxlen, ChRefineEdgeCriterion criterion, std::vector< std::array< int,4 >,std::allocator< std::array< int,4 > > > * atri_map, std::vector< std::vector< double,std::allocator< double > > *,std::allocator< std::vector< double,std::allocator< double > > * > > & aux_data_double, std::vector< std::vector< int,std::allocator< int > > *,std::allocator< std::vector< int,std::allocator< int > > * > > & aux_data_int, std::vector< std::vector< bool,std::allocator< bool > > *,std::allocator< std::vector< bool,std::allocator< bool > > * > > & aux_data_bool, std::vector< std::vector< chrono::ChVector< double >,std::allocator< chrono::ChVector< double > > > *,std::allocator< std::vector< chrono::ChVector< double >,std::allocator< chrono::ChVector< double > > > * > > & aux_data_vect)"""
        return _core.ChTriangleMeshConnected_RefineMeshEdges(self, marked_tris, edge_maxlen, criterion, atri_map, aux_data_double, aux_data_int, aux_data_bool, aux_data_vect)

    def GetClassType(self):
        r"""GetClassType(ChTriangleMeshConnected self) -> chrono::geometry::ChGeometry::GeometryType"""
        return _core.ChTriangleMeshConnected_GetClassType(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChTriangleMeshConnected self, ChArchiveOut & marchive)"""
        return _core.ChTriangleMeshConnected_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChTriangleMeshConnected self, chrono::ChArchiveIn & marchive)"""
        return _core.ChTriangleMeshConnected_ArchiveIN(self, marchive)

# Register ChTriangleMeshConnected in _core:
_core.ChTriangleMeshConnected_swigregister(ChTriangleMeshConnected)

def ChTriangleMeshConnected_WriteWavefront(filename, meshes):
    r"""ChTriangleMeshConnected_WriteWavefront(std::string const & filename, std::vector< chrono::geometry::ChTriangleMeshConnected,std::allocator< chrono::geometry::ChTriangleMeshConnected > > & meshes)"""
    return _core.ChTriangleMeshConnected_WriteWavefront(filename, meshes)

def ChTriangleMeshConnected_Merge(meshes):
    r"""ChTriangleMeshConnected_Merge(std::vector< chrono::geometry::ChTriangleMeshConnected,std::allocator< chrono::geometry::ChTriangleMeshConnected > > & meshes) -> ChTriangleMeshConnected"""
    return _core.ChTriangleMeshConnected_Merge(meshes)

class ChRefineEdgeCriterion(object):
    r"""Proxy of C++ chrono::geometry::ChTriangleMeshConnected::ChRefineEdgeCriterion class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChRefineEdgeCriterion

    def ComputeLength(self, vert_a, vert_b, mmesh):
        r"""ComputeLength(ChRefineEdgeCriterion self, int const vert_a, int const vert_b, ChTriangleMeshConnected mmesh) -> double"""
        return _core.ChRefineEdgeCriterion_ComputeLength(self, vert_a, vert_b, mmesh)

# Register ChRefineEdgeCriterion in _core:
_core.ChRefineEdgeCriterion_swigregister(ChRefineEdgeCriterion)

class ChSurfaceNurbs(ChSurface):
    r"""Proxy of C++ chrono::geometry::ChSurfaceNurbs class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    points = property(_core.ChSurfaceNurbs_points_get, _core.ChSurfaceNurbs_points_set, doc=r"""points : chrono::ChMatrixDynamic<(chrono::ChVector<()>)>""")
    weights = property(_core.ChSurfaceNurbs_weights_get, _core.ChSurfaceNurbs_weights_set, doc=r"""weights : chrono::ChMatrixDynamic<()>""")
    knots_u = property(_core.ChSurfaceNurbs_knots_u_get, _core.ChSurfaceNurbs_knots_u_set, doc=r"""knots_u : chrono::ChVectorDynamic<()>""")
    knots_v = property(_core.ChSurfaceNurbs_knots_v_get, _core.ChSurfaceNurbs_knots_v_set, doc=r"""knots_v : chrono::ChVectorDynamic<()>""")
    p_u = property(_core.ChSurfaceNurbs_p_u_get, _core.ChSurfaceNurbs_p_u_set, doc=r"""p_u : int""")
    p_v = property(_core.ChSurfaceNurbs_p_v_get, _core.ChSurfaceNurbs_p_v_set, doc=r"""p_v : int""")

    def __init__(self, *args):
        r"""
        __init__(ChSurfaceNurbs self) -> ChSurfaceNurbs
        __init__(ChSurfaceNurbs self, int morder_u, int morder_v, chrono::ChMatrixDynamic< chrono::ChVector< double > > & mpoints, ChVectorDynamicD mknots_u=None, ChVectorDynamicD mknots_v=None, ChMatrixDynamicD weights=None) -> ChSurfaceNurbs
        __init__(ChSurfaceNurbs self, ChSurfaceNurbs source) -> ChSurfaceNurbs
        """
        _core.ChSurfaceNurbs_swiginit(self, _core.new_ChSurfaceNurbs(*args))
    __swig_destroy__ = _core.delete_ChSurfaceNurbs

    def Clone(self):
        r"""Clone(ChSurfaceNurbs self) -> ChSurfaceNurbs"""
        return _core.ChSurfaceNurbs_Clone(self)

    def Evaluate(self, pos, parU, parV):
        r"""Evaluate(ChSurfaceNurbs self, ChVectorD pos, double const parU, double const parV)"""
        return _core.ChSurfaceNurbs_Evaluate(self, pos, parU, parV)

    def ComputeUfromKnotU(self, u):
        r"""ComputeUfromKnotU(ChSurfaceNurbs self, double const u) -> double"""
        return _core.ChSurfaceNurbs_ComputeUfromKnotU(self, u)

    def ComputeKnotUfromU(self, U):
        r"""ComputeKnotUfromU(ChSurfaceNurbs self, double const U) -> double"""
        return _core.ChSurfaceNurbs_ComputeKnotUfromU(self, U)

    def ComputeVfromKnotV(self, v):
        r"""ComputeVfromKnotV(ChSurfaceNurbs self, double const v) -> double"""
        return _core.ChSurfaceNurbs_ComputeVfromKnotV(self, v)

    def ComputeKnotVfromV(self, V):
        r"""ComputeKnotVfromV(ChSurfaceNurbs self, double const V) -> double"""
        return _core.ChSurfaceNurbs_ComputeKnotVfromV(self, V)

    def Points(self):
        r"""Points(ChSurfaceNurbs self) -> chrono::ChMatrixDynamic< chrono::ChVector< > > &"""
        return _core.ChSurfaceNurbs_Points(self)

    def Weights(self):
        r"""Weights(ChSurfaceNurbs self) -> ChMatrixDynamicD"""
        return _core.ChSurfaceNurbs_Weights(self)

    def Knots_u(self):
        r"""Knots_u(ChSurfaceNurbs self) -> ChVectorDynamicD"""
        return _core.ChSurfaceNurbs_Knots_u(self)

    def Knots_v(self):
        r"""Knots_v(ChSurfaceNurbs self) -> ChVectorDynamicD"""
        return _core.ChSurfaceNurbs_Knots_v(self)

    def GetOrder_u(self):
        r"""GetOrder_u(ChSurfaceNurbs self) -> int"""
        return _core.ChSurfaceNurbs_GetOrder_u(self)

    def GetOrder_v(self):
        r"""GetOrder_v(ChSurfaceNurbs self) -> int"""
        return _core.ChSurfaceNurbs_GetOrder_v(self)

    def SetupData(self, morder_u, morder_v, mpoints, mknots_u=None, mknots_v=None, weights=None):
        r"""SetupData(ChSurfaceNurbs self, int morder_u, int morder_v, chrono::ChMatrixDynamic< chrono::ChVector< double > > & mpoints, ChVectorDynamicD mknots_u=None, ChVectorDynamicD mknots_v=None, ChMatrixDynamicD weights=None)"""
        return _core.ChSurfaceNurbs_SetupData(self, morder_u, morder_v, mpoints, mknots_u, mknots_v, weights)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChSurfaceNurbs self, ChArchiveOut & marchive)"""
        return _core.ChSurfaceNurbs_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChSurfaceNurbs self, chrono::ChArchiveIn & marchive)"""
        return _core.ChSurfaceNurbs_ArchiveIN(self, marchive)

# Register ChSurfaceNurbs in _core:
_core.ChSurfaceNurbs_swigregister(ChSurfaceNurbs)

SPHERE = _core.SPHERE

ELLIPSOID = _core.ELLIPSOID

BOX = _core.BOX

CYLINDER = _core.CYLINDER

CONVEXHULL = _core.CONVEXHULL

TRIANGLEMESH = _core.TRIANGLEMESH

BARREL = _core.BARREL

CAPSULE = _core.CAPSULE

CONE = _core.CONE

ROUNDEDBOX = _core.ROUNDEDBOX

ROUNDEDCYL = _core.ROUNDEDCYL

ROUNDEDCONE = _core.ROUNDEDCONE

CONVEX = _core.CONVEX

TETRAHEDRON = _core.TETRAHEDRON

class ChCollisionModel(object):
    r"""Proxy of C++ chrono::collision::ChCollisionModel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChCollisionModel self) -> ChCollisionModel"""
        if self.__class__ == ChCollisionModel:
            _self = None
        else:
            _self = self
        _core.ChCollisionModel_swiginit(self, _core.new_ChCollisionModel(_self, ))
    __swig_destroy__ = _core.delete_ChCollisionModel

    def ClearModel(self):
        r"""ClearModel(ChCollisionModel self) -> int"""
        return _core.ChCollisionModel_ClearModel(self)

    def BuildModel(self):
        r"""BuildModel(ChCollisionModel self) -> int"""
        return _core.ChCollisionModel_BuildModel(self)

    def AddSphere(self, *args):
        r"""AddSphere(ChCollisionModel self, double radius, ChVectorD pos=chrono::ChVector< double >()) -> bool"""
        return _core.ChCollisionModel_AddSphere(self, *args)

    def AddEllipsoid(self, *args):
        r"""AddEllipsoid(ChCollisionModel self, double rx, double ry, double rz, ChVectorD pos=chrono::ChVector< double >(), ChMatrix33D rot=chrono::ChMatrix33< double >(1)) -> bool"""
        return _core.ChCollisionModel_AddEllipsoid(self, *args)

    def AddBox(self, *args):
        r"""AddBox(ChCollisionModel self, double hx, double hy, double hz, ChVectorD pos=chrono::ChVector< double >(), ChMatrix33D rot=chrono::ChMatrix33< double >(1)) -> bool"""
        return _core.ChCollisionModel_AddBox(self, *args)

    def AddCylinder(self, *args):
        r"""AddCylinder(ChCollisionModel self, double rx, double rz, double hy, ChVectorD pos=chrono::ChVector< double >(), ChMatrix33D rot=chrono::ChMatrix33< double >(1)) -> bool"""
        return _core.ChCollisionModel_AddCylinder(self, *args)

    def AddCone(self, *args):
        r"""AddCone(ChCollisionModel self, double rx, double rz, double hy, ChVectorD pos=chrono::ChVector< double >(), ChMatrix33D rot=chrono::ChMatrix33< double >(1)) -> bool"""
        return _core.ChCollisionModel_AddCone(self, *args)

    def AddCapsule(self, *args):
        r"""AddCapsule(ChCollisionModel self, double radius, double hlen, ChVectorD pos=chrono::ChVector< double >(), ChMatrix33D rot=chrono::ChMatrix33< double >(1)) -> bool"""
        return _core.ChCollisionModel_AddCapsule(self, *args)

    def AddRoundedBox(self, *args):
        r"""AddRoundedBox(ChCollisionModel self, double hx, double hy, double hz, double sphere_r, ChVectorD pos=chrono::ChVector< double >(), ChMatrix33D rot=chrono::ChMatrix33< double >(1)) -> bool"""
        return _core.ChCollisionModel_AddRoundedBox(self, *args)

    def AddRoundedCylinder(self, *args):
        r"""AddRoundedCylinder(ChCollisionModel self, double rx, double rz, double hy, double sphere_r, ChVectorD pos=chrono::ChVector< double >(), ChMatrix33D rot=chrono::ChMatrix33< double >(1)) -> bool"""
        return _core.ChCollisionModel_AddRoundedCylinder(self, *args)

    def AddRoundedCone(self, *args):
        r"""AddRoundedCone(ChCollisionModel self, double rx, double rz, double hy, double sphere_r, ChVectorD pos=chrono::ChVector< double >(), ChMatrix33D rot=chrono::ChMatrix33< double >(1)) -> bool"""
        return _core.ChCollisionModel_AddRoundedCone(self, *args)

    def AddConvexHull(self, *args):
        r"""AddConvexHull(ChCollisionModel self, vector_ChVectorD pointlist, ChVectorD pos=chrono::ChVector< double >(), ChMatrix33D rot=chrono::ChMatrix33< double >(1)) -> bool"""
        return _core.ChCollisionModel_AddConvexHull(self, *args)

    def AddTriangleMesh(self, *args):
        r"""AddTriangleMesh(ChCollisionModel self, std::shared_ptr< chrono::geometry::ChTriangleMesh > trimesh, bool is_static, bool is_convex, ChVectorD pos=chrono::ChVector< double >(), ChMatrix33D rot=chrono::ChMatrix33< double >(1), double sphereswept_thickness=0.0) -> bool"""
        return _core.ChCollisionModel_AddTriangleMesh(self, *args)

    def AddBarrel(self, *args):
        r"""AddBarrel(ChCollisionModel self, double Y_low, double Y_high, double R_vert, double R_hor, double R_offset, ChVectorD pos=chrono::ChVector< double >(), ChMatrix33D rot=chrono::ChMatrix33< double >(1)) -> bool"""
        return _core.ChCollisionModel_AddBarrel(self, *args)

    def Add2Dpath(self, *args):
        r"""Add2Dpath(ChCollisionModel self, std::shared_ptr< chrono::geometry::ChLinePath > mpath, ChVectorD pos=chrono::ChVector< double >(), ChMatrix33D rot=chrono::ChMatrix33< double >(1), double const thickness=0.001) -> bool"""
        return _core.ChCollisionModel_Add2Dpath(self, *args)

    def AddPoint(self, *args):
        r"""AddPoint(ChCollisionModel self, double radius=0, ChVectorD pos=chrono::ChVector< double >()) -> bool"""
        return _core.ChCollisionModel_AddPoint(self, *args)

    def AddCopyOfAnotherModel(self, another):
        r"""AddCopyOfAnotherModel(ChCollisionModel self, ChCollisionModel another) -> bool"""
        return _core.ChCollisionModel_AddCopyOfAnotherModel(self, another)

    def AddConvexHullsFromFile(self, *args):
        r"""AddConvexHullsFromFile(ChCollisionModel self, ChStreamInAscii mstream, ChVectorD pos=chrono::ChVector< double >(), ChMatrix33D rot=chrono::ChMatrix33< double >(1)) -> bool"""
        return _core.ChCollisionModel_AddConvexHullsFromFile(self, *args)

    def GetContactable(self):
        r"""GetContactable(ChCollisionModel self) -> ChContactable *"""
        return _core.ChCollisionModel_GetContactable(self)

    def SetContactable(self, mc):
        r"""SetContactable(ChCollisionModel self, ChContactable * mc)"""
        return _core.ChCollisionModel_SetContactable(self, mc)

    def GetPhysicsItem(self):
        r"""GetPhysicsItem(ChCollisionModel self) -> ChPhysicsItem"""
        return _core.ChCollisionModel_GetPhysicsItem(self)

    def SyncPosition(self):
        r"""SyncPosition(ChCollisionModel self)"""
        return _core.ChCollisionModel_SyncPosition(self)

    def SetFamily(self, mfamily):
        r"""SetFamily(ChCollisionModel self, int mfamily)"""
        return _core.ChCollisionModel_SetFamily(self, mfamily)

    def GetFamily(self):
        r"""GetFamily(ChCollisionModel self) -> int"""
        return _core.ChCollisionModel_GetFamily(self)

    def SetFamilyMaskNoCollisionWithFamily(self, mfamily):
        r"""SetFamilyMaskNoCollisionWithFamily(ChCollisionModel self, int mfamily)"""
        return _core.ChCollisionModel_SetFamilyMaskNoCollisionWithFamily(self, mfamily)

    def SetFamilyMaskDoCollisionWithFamily(self, mfamily):
        r"""SetFamilyMaskDoCollisionWithFamily(ChCollisionModel self, int mfamily)"""
        return _core.ChCollisionModel_SetFamilyMaskDoCollisionWithFamily(self, mfamily)

    def GetFamilyMaskDoesCollisionWithFamily(self, mfamily):
        r"""GetFamilyMaskDoesCollisionWithFamily(ChCollisionModel self, int mfamily) -> bool"""
        return _core.ChCollisionModel_GetFamilyMaskDoesCollisionWithFamily(self, mfamily)

    def GetFamilyGroup(self):
        r"""GetFamilyGroup(ChCollisionModel self) -> short"""
        return _core.ChCollisionModel_GetFamilyGroup(self)

    def SetFamilyGroup(self, group):
        r"""SetFamilyGroup(ChCollisionModel self, short group)"""
        return _core.ChCollisionModel_SetFamilyGroup(self, group)

    def GetFamilyMask(self):
        r"""GetFamilyMask(ChCollisionModel self) -> short"""
        return _core.ChCollisionModel_GetFamilyMask(self)

    def SetFamilyMask(self, mask):
        r"""SetFamilyMask(ChCollisionModel self, short mask)"""
        return _core.ChCollisionModel_SetFamilyMask(self, mask)

    def SetSafeMargin(self, amargin):
        r"""SetSafeMargin(ChCollisionModel self, double amargin)"""
        return _core.ChCollisionModel_SetSafeMargin(self, amargin)

    def GetSafeMargin(self):
        r"""GetSafeMargin(ChCollisionModel self) -> float"""
        return _core.ChCollisionModel_GetSafeMargin(self)

    def SetEnvelope(self, amargin):
        r"""SetEnvelope(ChCollisionModel self, double amargin)"""
        return _core.ChCollisionModel_SetEnvelope(self, amargin)

    def GetEnvelope(self):
        r"""GetEnvelope(ChCollisionModel self) -> float"""
        return _core.ChCollisionModel_GetEnvelope(self)

    @staticmethod
    def SetDefaultSuggestedEnvelope(menv):
        r"""SetDefaultSuggestedEnvelope(double menv)"""
        return _core.ChCollisionModel_SetDefaultSuggestedEnvelope(menv)

    @staticmethod
    def SetDefaultSuggestedMargin(mmargin):
        r"""SetDefaultSuggestedMargin(double mmargin)"""
        return _core.ChCollisionModel_SetDefaultSuggestedMargin(mmargin)

    @staticmethod
    def GetDefaultSuggestedEnvelope():
        r"""GetDefaultSuggestedEnvelope() -> double"""
        return _core.ChCollisionModel_GetDefaultSuggestedEnvelope()

    @staticmethod
    def GetDefaultSuggestedMargin():
        r"""GetDefaultSuggestedMargin() -> double"""
        return _core.ChCollisionModel_GetDefaultSuggestedMargin()

    def GetAABB(self, bbmin, bbmax):
        r"""GetAABB(ChCollisionModel self, ChVectorD bbmin, ChVectorD bbmax)"""
        return _core.ChCollisionModel_GetAABB(self, bbmin, bbmax)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChCollisionModel self, ChArchiveOut & marchive)"""
        return _core.ChCollisionModel_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChCollisionModel self, chrono::ChArchiveIn & marchive)"""
        return _core.ChCollisionModel_ArchiveIN(self, marchive)

    def GetSuggestedFullMargin(self):
        r"""GetSuggestedFullMargin(ChCollisionModel self) -> float"""
        return _core.ChCollisionModel_GetSuggestedFullMargin(self)
    def __disown__(self):
        self.this.disown()
        _core.disown_ChCollisionModel(self)
        return weakref.proxy(self)

# Register ChCollisionModel in _core:
_core.ChCollisionModel_swigregister(ChCollisionModel)

def ChCollisionModel_SetDefaultSuggestedEnvelope(menv):
    r"""ChCollisionModel_SetDefaultSuggestedEnvelope(double menv)"""
    return _core.ChCollisionModel_SetDefaultSuggestedEnvelope(menv)

def ChCollisionModel_SetDefaultSuggestedMargin(mmargin):
    r"""ChCollisionModel_SetDefaultSuggestedMargin(double mmargin)"""
    return _core.ChCollisionModel_SetDefaultSuggestedMargin(mmargin)

def ChCollisionModel_GetDefaultSuggestedEnvelope():
    r"""ChCollisionModel_GetDefaultSuggestedEnvelope() -> double"""
    return _core.ChCollisionModel_GetDefaultSuggestedEnvelope()

def ChCollisionModel_GetDefaultSuggestedMargin():
    r"""ChCollisionModel_GetDefaultSuggestedMargin() -> double"""
    return _core.ChCollisionModel_GetDefaultSuggestedMargin()

class ChCollisionUtils(object):
    r"""Proxy of C++ chrono::collision::ChCollisionUtils class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def LineLineIntersect(p1, p2, p3, p4, pa, pb, mua, mub):
        r"""LineLineIntersect(ChVectorD p1, ChVectorD p2, ChVectorD p3, ChVectorD p4, ChVectorD pa, ChVectorD pb, double * mua, double * mub) -> bool"""
        return _core.ChCollisionUtils_LineLineIntersect(p1, p2, p3, p4, pa, pb, mua, mub)

    @staticmethod
    def PointLineDistance(p, dA, dB, mu, is_insegment):
        r"""PointLineDistance(ChVectorD p, ChVectorD dA, ChVectorD dB, double & mu, int & is_insegment) -> double"""
        return _core.ChCollisionUtils_PointLineDistance(p, dA, dB, mu, is_insegment)

    @staticmethod
    def PointTriangleDistance(B, A1, A2, A3, mu, mv, is_into, Bprojected):
        r"""PointTriangleDistance(ChVectorD B, ChVectorD A1, ChVectorD A2, ChVectorD A3, double & mu, double & mv, int & is_into, ChVectorD Bprojected) -> double"""
        return _core.ChCollisionUtils_PointTriangleDistance(B, A1, A2, A3, mu, mv, is_into, Bprojected)

    def __init__(self):
        r"""__init__(ChCollisionUtils self) -> ChCollisionUtils"""
        _core.ChCollisionUtils_swiginit(self, _core.new_ChCollisionUtils())
    __swig_destroy__ = _core.delete_ChCollisionUtils

# Register ChCollisionUtils in _core:
_core.ChCollisionUtils_swigregister(ChCollisionUtils)

def ChCollisionUtils_LineLineIntersect(p1, p2, p3, p4, pa, pb, mua, mub):
    r"""ChCollisionUtils_LineLineIntersect(ChVectorD p1, ChVectorD p2, ChVectorD p3, ChVectorD p4, ChVectorD pa, ChVectorD pb, double * mua, double * mub) -> bool"""
    return _core.ChCollisionUtils_LineLineIntersect(p1, p2, p3, p4, pa, pb, mua, mub)

def ChCollisionUtils_PointLineDistance(p, dA, dB, mu, is_insegment):
    r"""ChCollisionUtils_PointLineDistance(ChVectorD p, ChVectorD dA, ChVectorD dB, double & mu, int & is_insegment) -> double"""
    return _core.ChCollisionUtils_PointLineDistance(p, dA, dB, mu, is_insegment)

def ChCollisionUtils_PointTriangleDistance(B, A1, A2, A3, mu, mv, is_into, Bprojected):
    r"""ChCollisionUtils_PointTriangleDistance(ChVectorD B, ChVectorD A1, ChVectorD A2, ChVectorD A3, double & mu, double & mv, int & is_into, ChVectorD Bprojected) -> double"""
    return _core.ChCollisionUtils_PointTriangleDistance(B, A1, A2, A3, mu, mv, is_into, Bprojected)

class ChConvexHullLibraryWrapper(object):
    r"""Proxy of C++ chrono::collision::ChConvexHullLibraryWrapper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChConvexHullLibraryWrapper self) -> ChConvexHullLibraryWrapper"""
        _core.ChConvexHullLibraryWrapper_swiginit(self, _core.new_ChConvexHullLibraryWrapper())

    def ComputeHull(self, points, vshape):
        r"""ComputeHull(ChConvexHullLibraryWrapper self, vector_ChVectorD points, ChTriangleMeshConnected vshape)"""
        return _core.ChConvexHullLibraryWrapper_ComputeHull(self, points, vshape)
    __swig_destroy__ = _core.delete_ChConvexHullLibraryWrapper

# Register ChConvexHullLibraryWrapper in _core:
_core.ChConvexHullLibraryWrapper_swigregister(ChConvexHullLibraryWrapper)

class ChCollisionSystem(object):
    r"""Proxy of C++ chrono::collision::ChCollisionSystem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChCollisionSystem

    def Clear(self):
        r"""Clear(ChCollisionSystem self)"""
        return _core.ChCollisionSystem_Clear(self)

    def Add(self, model):
        r"""Add(ChCollisionSystem self, ChCollisionModel model)"""
        return _core.ChCollisionSystem_Add(self, model)

    def Remove(self, model):
        r"""Remove(ChCollisionSystem self, ChCollisionModel model)"""
        return _core.ChCollisionSystem_Remove(self, model)

    def Run(self):
        r"""Run(ChCollisionSystem self)"""
        return _core.ChCollisionSystem_Run(self)

    def GetTimerCollisionBroad(self):
        r"""GetTimerCollisionBroad(ChCollisionSystem self) -> double"""
        return _core.ChCollisionSystem_GetTimerCollisionBroad(self)

    def GetTimerCollisionNarrow(self):
        r"""GetTimerCollisionNarrow(ChCollisionSystem self) -> double"""
        return _core.ChCollisionSystem_GetTimerCollisionNarrow(self)

    def ResetTimers(self):
        r"""ResetTimers(ChCollisionSystem self)"""
        return _core.ChCollisionSystem_ResetTimers(self)

    def ReportContacts(self, mcontactcontainer):
        r"""ReportContacts(ChCollisionSystem self, ChContactContainer mcontactcontainer)"""
        return _core.ChCollisionSystem_ReportContacts(self, mcontactcontainer)

    def ReportProximities(self, mproximitycontainer):
        r"""ReportProximities(ChCollisionSystem self, ChProximityContainer mproximitycontainer)"""
        return _core.ChCollisionSystem_ReportProximities(self, mproximitycontainer)

    def RegisterBroadphaseCallback(self, callback):
        r"""RegisterBroadphaseCallback(ChCollisionSystem self, BroadphaseCallback callback)"""
        return _core.ChCollisionSystem_RegisterBroadphaseCallback(self, callback)

    def RegisterNarrowphaseCallback(self, callback):
        r"""RegisterNarrowphaseCallback(ChCollisionSystem self, NarrowphaseCallback callback)"""
        return _core.ChCollisionSystem_RegisterNarrowphaseCallback(self, callback)

    def RayHit(self, *args):
        r"""
        RayHit(ChCollisionSystem self, ChVectorD _from, ChVectorD to, ChRayhitResult mresult) -> bool
        RayHit(ChCollisionSystem self, ChVectorD _from, ChVectorD to, ChCollisionModel model, ChRayhitResult mresult) -> bool
        """
        return _core.ChCollisionSystem_RayHit(self, *args)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChCollisionSystem self, ChArchiveOut & marchive)"""
        return _core.ChCollisionSystem_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChCollisionSystem self, chrono::ChArchiveIn & marchive)"""
        return _core.ChCollisionSystem_ArchiveIN(self, marchive)

# Register ChCollisionSystem in _core:
_core.ChCollisionSystem_swigregister(ChCollisionSystem)

class BroadphaseCallback(object):
    r"""Proxy of C++ chrono::collision::ChCollisionSystem::BroadphaseCallback class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_BroadphaseCallback

    def OnBroadphase(self, modelA, modelB):
        r"""OnBroadphase(BroadphaseCallback self, ChCollisionModel modelA, ChCollisionModel modelB) -> bool"""
        return _core.BroadphaseCallback_OnBroadphase(self, modelA, modelB)

# Register BroadphaseCallback in _core:
_core.BroadphaseCallback_swigregister(BroadphaseCallback)

class NarrowphaseCallback(object):
    r"""Proxy of C++ chrono::collision::ChCollisionSystem::NarrowphaseCallback class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_NarrowphaseCallback

    def OnNarrowphase(self, contactinfo):
        r"""OnNarrowphase(NarrowphaseCallback self, ChCollisionInfo & contactinfo) -> bool"""
        return _core.NarrowphaseCallback_OnNarrowphase(self, contactinfo)

# Register NarrowphaseCallback in _core:
_core.NarrowphaseCallback_swigregister(NarrowphaseCallback)

class ChRayhitResult(object):
    r"""Proxy of C++ chrono::collision::ChCollisionSystem::ChRayhitResult class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    hit = property(_core.ChRayhitResult_hit_get, _core.ChRayhitResult_hit_set, doc=r"""hit : bool""")
    abs_hitPoint = property(_core.ChRayhitResult_abs_hitPoint_get, _core.ChRayhitResult_abs_hitPoint_set, doc=r"""abs_hitPoint : chrono::ChVector<()>""")
    abs_hitNormal = property(_core.ChRayhitResult_abs_hitNormal_get, _core.ChRayhitResult_abs_hitNormal_set, doc=r"""abs_hitNormal : chrono::ChVector<()>""")
    dist_factor = property(_core.ChRayhitResult_dist_factor_get, _core.ChRayhitResult_dist_factor_set, doc=r"""dist_factor : double""")
    hitModel = property(_core.ChRayhitResult_hitModel_get, _core.ChRayhitResult_hitModel_set, doc=r"""hitModel : p.chrono::collision::ChCollisionModel""")

    def __init__(self):
        r"""__init__(ChRayhitResult self) -> ChRayhitResult"""
        _core.ChRayhitResult_swiginit(self, _core.new_ChRayhitResult())
    __swig_destroy__ = _core.delete_ChRayhitResult

# Register ChRayhitResult in _core:
_core.ChRayhitResult_swigregister(ChRayhitResult)

class ChAsset(object):
    r"""Proxy of C++ chrono::ChAsset class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChAsset self) -> ChAsset"""
        _core.ChAsset_swiginit(self, _core.new_ChAsset())
    __swig_destroy__ = _core.delete_ChAsset

    def Update(self, updater, coords):
        r"""Update(ChAsset self, ChPhysicsItem updater, ChCoordsysD coords)"""
        return _core.ChAsset_Update(self, updater, coords)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChAsset self, ChArchiveOut & marchive)"""
        return _core.ChAsset_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChAsset self, chrono::ChArchiveIn & marchive)"""
        return _core.ChAsset_ArchiveIN(self, marchive)

# Register ChAsset in _core:
_core.ChAsset_swigregister(ChAsset)

class ChColor(object):
    r"""Proxy of C++ chrono::ChColor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    R = property(_core.ChColor_R_get, _core.ChColor_R_set, doc=r"""R : float""")
    G = property(_core.ChColor_G_get, _core.ChColor_G_set, doc=r"""G : float""")
    B = property(_core.ChColor_B_get, _core.ChColor_B_set, doc=r"""B : float""")
    A = property(_core.ChColor_A_get, _core.ChColor_A_set, doc=r"""A : float""")

    def __init__(self, *args):
        r"""
        __init__(ChColor self) -> ChColor
        __init__(ChColor self, float mR, float mG, float mB, float mA=0) -> ChColor
        __init__(ChColor self, ChColor other) -> ChColor
        """
        _core.ChColor_swiginit(self, _core.new_ChColor(*args))

    @staticmethod
    def ComputeFalseColor(v, vmin, vmax, out_of_range_as_bw=False):
        r"""ComputeFalseColor(double v, double vmin, double vmax, bool out_of_range_as_bw=False) -> ChColor"""
        return _core.ChColor_ComputeFalseColor(v, vmin, vmax, out_of_range_as_bw)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChColor self, ChArchiveOut & marchive)"""
        return _core.ChColor_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChColor self, chrono::ChArchiveIn & marchive)"""
        return _core.ChColor_ArchiveIN(self, marchive)
    __swig_destroy__ = _core.delete_ChColor

# Register ChColor in _core:
_core.ChColor_swigregister(ChColor)

def ChColor_ComputeFalseColor(v, vmin, vmax, out_of_range_as_bw=False):
    r"""ChColor_ComputeFalseColor(double v, double vmin, double vmax, bool out_of_range_as_bw=False) -> ChColor"""
    return _core.ChColor_ComputeFalseColor(v, vmin, vmax, out_of_range_as_bw)

class ChVisualization(ChAsset):
    r"""Proxy of C++ chrono::ChVisualization class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChVisualization

    def SetVisible(self, mv):
        r"""SetVisible(ChVisualization self, bool mv)"""
        return _core.ChVisualization_SetVisible(self, mv)

    def IsVisible(self):
        r"""IsVisible(ChVisualization self) -> bool"""
        return _core.ChVisualization_IsVisible(self)

    def SetColor(self, mc):
        r"""SetColor(ChVisualization self, ChColor mc)"""
        return _core.ChVisualization_SetColor(self, mc)

    def GetColor(self):
        r"""GetColor(ChVisualization self) -> ChColor"""
        return _core.ChVisualization_GetColor(self)

    def SetFading(self, mc):
        r"""SetFading(ChVisualization self, float const mc)"""
        return _core.ChVisualization_SetFading(self, mc)

    def GetFading(self):
        r"""GetFading(ChVisualization self) -> float"""
        return _core.ChVisualization_GetFading(self)

    def SetStatic(self, val):
        r"""SetStatic(ChVisualization self, bool val)"""
        return _core.ChVisualization_SetStatic(self, val)

    def IsStatic(self):
        r"""IsStatic(ChVisualization self) -> bool"""
        return _core.ChVisualization_IsStatic(self)
    Pos = property(_core.ChVisualization_Pos_get, _core.ChVisualization_Pos_set, doc=r"""Pos : chrono::ChVector<()>""")
    Rot = property(_core.ChVisualization_Rot_get, _core.ChVisualization_Rot_set, doc=r"""Rot : chrono::ChMatrix33<()>""")

# Register ChVisualization in _core:
_core.ChVisualization_swigregister(ChVisualization)

class ChColorAsset(ChAsset):
    r"""Proxy of C++ chrono::ChColorAsset class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChColorAsset self) -> ChColorAsset
        __init__(ChColorAsset self, ChColor c) -> ChColorAsset
        __init__(ChColorAsset self, float mR, float mG, float mB, float mA=0) -> ChColorAsset
        """
        _core.ChColorAsset_swiginit(self, _core.new_ChColorAsset(*args))

    def GetColor(self):
        r"""GetColor(ChColorAsset self) -> ChColor"""
        return _core.ChColorAsset_GetColor(self)

    def SetColor(self, mc):
        r"""SetColor(ChColorAsset self, ChColor mc)"""
        return _core.ChColorAsset_SetColor(self, mc)

    def GetFading(self):
        r"""GetFading(ChColorAsset self) -> float"""
        return _core.ChColorAsset_GetFading(self)

    def SetFading(self, mc):
        r"""SetFading(ChColorAsset self, float const mc)"""
        return _core.ChColorAsset_SetFading(self, mc)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChColorAsset self, ChArchiveOut & marchive)"""
        return _core.ChColorAsset_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChColorAsset self, chrono::ChArchiveIn & marchive)"""
        return _core.ChColorAsset_ArchiveIN(self, marchive)
    __swig_destroy__ = _core.delete_ChColorAsset

# Register ChColorAsset in _core:
_core.ChColorAsset_swigregister(ChColorAsset)

class ChAssetLevel(ChAsset):
    r"""Proxy of C++ chrono::ChAssetLevel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChAssetLevel self) -> ChAssetLevel"""
        _core.ChAssetLevel_swiginit(self, _core.new_ChAssetLevel())
    __swig_destroy__ = _core.delete_ChAssetLevel

    def GetFrame(self):
        r"""GetFrame(ChAssetLevel self) -> ChFrameD"""
        return _core.ChAssetLevel_GetFrame(self)

    def GetAssets(self):
        r"""GetAssets(ChAssetLevel self) -> vector_ChAsset"""
        return _core.ChAssetLevel_GetAssets(self)

    def GetAssetN(self, num):
        r"""GetAssetN(ChAssetLevel self, unsigned int num) -> std::shared_ptr< chrono::ChAsset >"""
        return _core.ChAssetLevel_GetAssetN(self, num)

    def AddAsset(self, masset):
        r"""AddAsset(ChAssetLevel self, std::shared_ptr< chrono::ChAsset > masset)"""
        return _core.ChAssetLevel_AddAsset(self, masset)

    def Update(self, updater, coords):
        r"""Update(ChAssetLevel self, ChPhysicsItem updater, ChCoordsysD coords)"""
        return _core.ChAssetLevel_Update(self, updater, coords)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChAssetLevel self, ChArchiveOut & marchive)"""
        return _core.ChAssetLevel_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChAssetLevel self, chrono::ChArchiveIn & marchive)"""
        return _core.ChAssetLevel_ArchiveIN(self, marchive)

# Register ChAssetLevel in _core:
_core.ChAssetLevel_swigregister(ChAssetLevel)

class ChObjShapeFile(ChVisualization):
    r"""Proxy of C++ chrono::ChObjShapeFile class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChObjShapeFile self) -> ChObjShapeFile"""
        _core.ChObjShapeFile_swiginit(self, _core.new_ChObjShapeFile())
    __swig_destroy__ = _core.delete_ChObjShapeFile

    def GetFilename(self):
        r"""GetFilename(ChObjShapeFile self) -> std::string"""
        return _core.ChObjShapeFile_GetFilename(self)

    def SetFilename(self, ms):
        r"""SetFilename(ChObjShapeFile self, std::string const ms)"""
        return _core.ChObjShapeFile_SetFilename(self, ms)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChObjShapeFile self, ChArchiveOut & marchive)"""
        return _core.ChObjShapeFile_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChObjShapeFile self, chrono::ChArchiveIn & marchive)"""
        return _core.ChObjShapeFile_ArchiveIN(self, marchive)

# Register ChObjShapeFile in _core:
_core.ChObjShapeFile_swigregister(ChObjShapeFile)

class ChBoxShape(ChVisualization):
    r"""Proxy of C++ chrono::ChBoxShape class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChBoxShape self) -> ChBoxShape
        __init__(ChBoxShape self, ChBox mbox) -> ChBoxShape
        """
        _core.ChBoxShape_swiginit(self, _core.new_ChBoxShape(*args))
    __swig_destroy__ = _core.delete_ChBoxShape

    def GetBoxGeometry(self):
        r"""GetBoxGeometry(ChBoxShape self) -> ChBox"""
        return _core.ChBoxShape_GetBoxGeometry(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChBoxShape self, ChArchiveOut & marchive)"""
        return _core.ChBoxShape_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChBoxShape self, chrono::ChArchiveIn & marchive)"""
        return _core.ChBoxShape_ArchiveIN(self, marchive)

# Register ChBoxShape in _core:
_core.ChBoxShape_swigregister(ChBoxShape)

class ChSphereShape(ChVisualization):
    r"""Proxy of C++ chrono::ChSphereShape class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChSphereShape self) -> ChSphereShape
        __init__(ChSphereShape self, ChSphere msphere) -> ChSphereShape
        """
        _core.ChSphereShape_swiginit(self, _core.new_ChSphereShape(*args))
    __swig_destroy__ = _core.delete_ChSphereShape

    def GetSphereGeometry(self):
        r"""GetSphereGeometry(ChSphereShape self) -> ChSphere"""
        return _core.ChSphereShape_GetSphereGeometry(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChSphereShape self, ChArchiveOut & marchive)"""
        return _core.ChSphereShape_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChSphereShape self, chrono::ChArchiveIn & marchive)"""
        return _core.ChSphereShape_ArchiveIN(self, marchive)

# Register ChSphereShape in _core:
_core.ChSphereShape_swigregister(ChSphereShape)

class ChCylinderShape(ChVisualization):
    r"""Proxy of C++ chrono::ChCylinderShape class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChCylinderShape self) -> ChCylinderShape
        __init__(ChCylinderShape self, ChCylinder mcyl) -> ChCylinderShape
        """
        _core.ChCylinderShape_swiginit(self, _core.new_ChCylinderShape(*args))
    __swig_destroy__ = _core.delete_ChCylinderShape

    def GetCylinderGeometry(self):
        r"""GetCylinderGeometry(ChCylinderShape self) -> ChCylinder"""
        return _core.ChCylinderShape_GetCylinderGeometry(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChCylinderShape self, ChArchiveOut & marchive)"""
        return _core.ChCylinderShape_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChCylinderShape self, chrono::ChArchiveIn & marchive)"""
        return _core.ChCylinderShape_ArchiveIN(self, marchive)

# Register ChCylinderShape in _core:
_core.ChCylinderShape_swigregister(ChCylinderShape)

class ChTexture(ChAsset):
    r"""Proxy of C++ chrono::ChTexture class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChTexture self) -> ChTexture
        __init__(ChTexture self, char const * mfilename) -> ChTexture
        __init__(ChTexture self, std::string const & mfilename) -> ChTexture
        """
        _core.ChTexture_swiginit(self, _core.new_ChTexture(*args))
    __swig_destroy__ = _core.delete_ChTexture

    def GetTextureFilename(self):
        r"""GetTextureFilename(ChTexture self) -> std::string const &"""
        return _core.ChTexture_GetTextureFilename(self)

    def SetTextureFilename(self, mfile):
        r"""SetTextureFilename(ChTexture self, std::string const & mfile)"""
        return _core.ChTexture_SetTextureFilename(self, mfile)

    def SetTextureScale(self, sx, sy):
        r"""SetTextureScale(ChTexture self, float sx, float sy)"""
        return _core.ChTexture_SetTextureScale(self, sx, sy)

    def GetTextureScaleX(self):
        r"""GetTextureScaleX(ChTexture self) -> float"""
        return _core.ChTexture_GetTextureScaleX(self)

    def GetTextureScaleY(self):
        r"""GetTextureScaleY(ChTexture self) -> float"""
        return _core.ChTexture_GetTextureScaleY(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChTexture self, ChArchiveOut & marchive)"""
        return _core.ChTexture_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChTexture self, chrono::ChArchiveIn & marchive)"""
        return _core.ChTexture_ArchiveIN(self, marchive)

# Register ChTexture in _core:
_core.ChTexture_swigregister(ChTexture)

class ChCamera(ChAsset):
    r"""Proxy of C++ chrono::ChCamera class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChCamera self) -> ChCamera"""
        _core.ChCamera_swiginit(self, _core.new_ChCamera())
    __swig_destroy__ = _core.delete_ChCamera

    def SetPosition(self, mv):
        r"""SetPosition(ChCamera self, ChVectorD mv)"""
        return _core.ChCamera_SetPosition(self, mv)

    def GetPosition(self):
        r"""GetPosition(ChCamera self) -> ChVectorD"""
        return _core.ChCamera_GetPosition(self)

    def SetAimPoint(self, mv):
        r"""SetAimPoint(ChCamera self, ChVectorD mv)"""
        return _core.ChCamera_SetAimPoint(self, mv)

    def GetAimPoint(self):
        r"""GetAimPoint(ChCamera self) -> ChVectorD"""
        return _core.ChCamera_GetAimPoint(self)

    def SetUpVector(self, mv):
        r"""SetUpVector(ChCamera self, ChVectorD mv)"""
        return _core.ChCamera_SetUpVector(self, mv)

    def GetUpVector(self):
        r"""GetUpVector(ChCamera self) -> ChVectorD"""
        return _core.ChCamera_GetUpVector(self)

    def SetAngle(self, mdeg):
        r"""SetAngle(ChCamera self, double mdeg)"""
        return _core.ChCamera_SetAngle(self, mdeg)

    def GetAngle(self):
        r"""GetAngle(ChCamera self) -> double"""
        return _core.ChCamera_GetAngle(self)

    def SetFOV(self, mf):
        r"""SetFOV(ChCamera self, double mf)"""
        return _core.ChCamera_SetFOV(self, mf)

    def GetFOV(self):
        r"""GetFOV(ChCamera self) -> double"""
        return _core.ChCamera_GetFOV(self)

    def SetHVratio(self, mf):
        r"""SetHVratio(ChCamera self, double mf)"""
        return _core.ChCamera_SetHVratio(self, mf)

    def GetHVratio(self):
        r"""GetHVratio(ChCamera self) -> double"""
        return _core.ChCamera_GetHVratio(self)

    def SetOrthographic(self, mb):
        r"""SetOrthographic(ChCamera self, bool mb)"""
        return _core.ChCamera_SetOrthographic(self, mb)

    def GetOrthographic(self):
        r"""GetOrthographic(ChCamera self) -> bool"""
        return _core.ChCamera_GetOrthographic(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChCamera self, ChArchiveOut & marchive)"""
        return _core.ChCamera_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChCamera self, chrono::ChArchiveIn & marchive)"""
        return _core.ChCamera_ArchiveIN(self, marchive)

# Register ChCamera in _core:
_core.ChCamera_swigregister(ChCamera)

class ChLineShape(ChVisualization):
    r"""Proxy of C++ chrono::ChLineShape class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLineShape self) -> ChLineShape
        __init__(ChLineShape self, std::shared_ptr< chrono::geometry::ChLine > & mline) -> ChLineShape
        """
        _core.ChLineShape_swiginit(self, _core.new_ChLineShape(*args))
    __swig_destroy__ = _core.delete_ChLineShape

    def GetLineGeometry(self):
        r"""GetLineGeometry(ChLineShape self) -> std::shared_ptr< chrono::geometry::ChLine >"""
        return _core.ChLineShape_GetLineGeometry(self)

    def SetLineGeometry(self, mline):
        r"""SetLineGeometry(ChLineShape self, std::shared_ptr< chrono::geometry::ChLine > mline)"""
        return _core.ChLineShape_SetLineGeometry(self, mline)

    def GetName(self):
        r"""GetName(ChLineShape self) -> std::string const &"""
        return _core.ChLineShape_GetName(self)

    def SetName(self, mname):
        r"""SetName(ChLineShape self, std::string const & mname)"""
        return _core.ChLineShape_SetName(self, mname)

    def GetNumRenderPoints(self):
        r"""GetNumRenderPoints(ChLineShape self) -> unsigned int"""
        return _core.ChLineShape_GetNumRenderPoints(self)

    def SetNumRenderPoints(self, n):
        r"""SetNumRenderPoints(ChLineShape self, unsigned int n)"""
        return _core.ChLineShape_SetNumRenderPoints(self, n)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLineShape self, ChArchiveOut & marchive)"""
        return _core.ChLineShape_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLineShape self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLineShape_ArchiveIN(self, marchive)

# Register ChLineShape in _core:
_core.ChLineShape_swigregister(ChLineShape)

class ChPathShape(ChVisualization):
    r"""Proxy of C++ chrono::ChPathShape class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChPathShape self) -> ChPathShape
        __init__(ChPathShape self, std::shared_ptr< chrono::geometry::ChLinePath > & mpath) -> ChPathShape
        """
        _core.ChPathShape_swiginit(self, _core.new_ChPathShape(*args))
    __swig_destroy__ = _core.delete_ChPathShape

    def GetPathGeometry(self):
        r"""GetPathGeometry(ChPathShape self) -> std::shared_ptr< chrono::geometry::ChLinePath >"""
        return _core.ChPathShape_GetPathGeometry(self)

    def GetNumRenderPoints(self):
        r"""GetNumRenderPoints(ChPathShape self) -> unsigned int"""
        return _core.ChPathShape_GetNumRenderPoints(self)

    def SetNumRenderPoints(self, n):
        r"""SetNumRenderPoints(ChPathShape self, unsigned int n)"""
        return _core.ChPathShape_SetNumRenderPoints(self, n)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChPathShape self, ChArchiveOut & marchive)"""
        return _core.ChPathShape_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChPathShape self, chrono::ChArchiveIn & marchive)"""
        return _core.ChPathShape_ArchiveIN(self, marchive)

# Register ChPathShape in _core:
_core.ChPathShape_swigregister(ChPathShape)

class ChPointPointDrawing(ChLineShape):
    r"""Proxy of C++ chrono::ChPointPointDrawing class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Update(self, updater, coords):
        r"""Update(ChPointPointDrawing self, ChPhysicsItem updater, ChCoordsysD coords)"""
        return _core.ChPointPointDrawing_Update(self, updater, coords)
    __swig_destroy__ = _core.delete_ChPointPointDrawing

# Register ChPointPointDrawing in _core:
_core.ChPointPointDrawing_swigregister(ChPointPointDrawing)

class ChPointPointSegment(ChPointPointDrawing):
    r"""Proxy of C++ chrono::ChPointPointSegment class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChPointPointSegment self) -> ChPointPointSegment"""
        _core.ChPointPointSegment_swiginit(self, _core.new_ChPointPointSegment())
    __swig_destroy__ = _core.delete_ChPointPointSegment

# Register ChPointPointSegment in _core:
_core.ChPointPointSegment_swigregister(ChPointPointSegment)

class ChPointPointSpring(ChPointPointDrawing):
    r"""Proxy of C++ chrono::ChPointPointSpring class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mradius=0.05, mresolution=65, mturns=5.):
        r"""__init__(ChPointPointSpring self, double mradius=0.05, int mresolution=65, double mturns=5.) -> ChPointPointSpring"""
        _core.ChPointPointSpring_swiginit(self, _core.new_ChPointPointSpring(mradius, mresolution, mturns))
    __swig_destroy__ = _core.delete_ChPointPointSpring

# Register ChPointPointSpring in _core:
_core.ChPointPointSpring_swigregister(ChPointPointSpring)

class ChSurfaceShape(ChVisualization):
    r"""Proxy of C++ chrono::ChSurfaceShape class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChSurfaceShape self) -> ChSurfaceShape
        __init__(ChSurfaceShape self, std::shared_ptr< chrono::geometry::ChSurface > msurf) -> ChSurfaceShape
        """
        _core.ChSurfaceShape_swiginit(self, _core.new_ChSurfaceShape(*args))
    __swig_destroy__ = _core.delete_ChSurfaceShape

    def GetSurfaceGeometry(self):
        r"""GetSurfaceGeometry(ChSurfaceShape self) -> std::shared_ptr< chrono::geometry::ChSurface >"""
        return _core.ChSurfaceShape_GetSurfaceGeometry(self)

    def SetSurfaceGeometry(self, ms):
        r"""SetSurfaceGeometry(ChSurfaceShape self, std::shared_ptr< chrono::geometry::ChSurface > ms)"""
        return _core.ChSurfaceShape_SetSurfaceGeometry(self, ms)

    def IsWireframe(self):
        r"""IsWireframe(ChSurfaceShape self) -> bool"""
        return _core.ChSurfaceShape_IsWireframe(self)

    def SetWireframe(self, mw):
        r"""SetWireframe(ChSurfaceShape self, bool mw)"""
        return _core.ChSurfaceShape_SetWireframe(self, mw)

    def GetResolutionU(self):
        r"""GetResolutionU(ChSurfaceShape self) -> int"""
        return _core.ChSurfaceShape_GetResolutionU(self)

    def GetResolutionV(self):
        r"""GetResolutionV(ChSurfaceShape self) -> int"""
        return _core.ChSurfaceShape_GetResolutionV(self)

    def SetResolutionU(self, mr):
        r"""SetResolutionU(ChSurfaceShape self, int mr)"""
        return _core.ChSurfaceShape_SetResolutionU(self, mr)

    def SetResolutionV(self, mr):
        r"""SetResolutionV(ChSurfaceShape self, int mr)"""
        return _core.ChSurfaceShape_SetResolutionV(self, mr)

    def SetResolution(self, mr):
        r"""SetResolution(ChSurfaceShape self, int mr)"""
        return _core.ChSurfaceShape_SetResolution(self, mr)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChSurfaceShape self, ChArchiveOut & marchive)"""
        return _core.ChSurfaceShape_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChSurfaceShape self, chrono::ChArchiveIn & marchive)"""
        return _core.ChSurfaceShape_ArchiveIN(self, marchive)

# Register ChSurfaceShape in _core:
_core.ChSurfaceShape_swigregister(ChSurfaceShape)

class ChTriangleMeshShape(ChVisualization):
    r"""Proxy of C++ chrono::ChTriangleMeshShape class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChTriangleMeshShape self) -> ChTriangleMeshShape"""
        _core.ChTriangleMeshShape_swiginit(self, _core.new_ChTriangleMeshShape())
    __swig_destroy__ = _core.delete_ChTriangleMeshShape

    def GetMesh(self):
        r"""GetMesh(ChTriangleMeshShape self) -> std::shared_ptr< chrono::geometry::ChTriangleMeshConnected >"""
        return _core.ChTriangleMeshShape_GetMesh(self)

    def SetMesh(self, mesh):
        r"""SetMesh(ChTriangleMeshShape self, std::shared_ptr< chrono::geometry::ChTriangleMeshConnected > mesh)"""
        return _core.ChTriangleMeshShape_SetMesh(self, mesh)

    def IsWireframe(self):
        r"""IsWireframe(ChTriangleMeshShape self) -> bool"""
        return _core.ChTriangleMeshShape_IsWireframe(self)

    def SetWireframe(self, mw):
        r"""SetWireframe(ChTriangleMeshShape self, bool mw)"""
        return _core.ChTriangleMeshShape_SetWireframe(self, mw)

    def IsBackfaceCull(self):
        r"""IsBackfaceCull(ChTriangleMeshShape self) -> bool"""
        return _core.ChTriangleMeshShape_IsBackfaceCull(self)

    def SetBackfaceCull(self, mbc):
        r"""SetBackfaceCull(ChTriangleMeshShape self, bool mbc)"""
        return _core.ChTriangleMeshShape_SetBackfaceCull(self, mbc)

    def GetName(self):
        r"""GetName(ChTriangleMeshShape self) -> std::string const &"""
        return _core.ChTriangleMeshShape_GetName(self)

    def SetName(self, mname):
        r"""SetName(ChTriangleMeshShape self, std::string const & mname)"""
        return _core.ChTriangleMeshShape_SetName(self, mname)

    def GetScale(self):
        r"""GetScale(ChTriangleMeshShape self) -> ChVectorD"""
        return _core.ChTriangleMeshShape_GetScale(self)

    def SetScale(self, mscale):
        r"""SetScale(ChTriangleMeshShape self, ChVectorD mscale)"""
        return _core.ChTriangleMeshShape_SetScale(self, mscale)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChTriangleMeshShape self, ChArchiveOut & marchive)"""
        return _core.ChTriangleMeshShape_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChTriangleMeshShape self, chrono::ChArchiveIn & marchive)"""
        return _core.ChTriangleMeshShape_ArchiveIN(self, marchive)

# Register ChTriangleMeshShape in _core:
_core.ChTriangleMeshShape_swigregister(ChTriangleMeshShape)

class ChEllipsoidShape(ChVisualization):
    r"""Proxy of C++ chrono::ChEllipsoidShape class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChEllipsoidShape self) -> ChEllipsoidShape
        __init__(ChEllipsoidShape self, ChEllipsoid mellipsoid) -> ChEllipsoidShape
        """
        _core.ChEllipsoidShape_swiginit(self, _core.new_ChEllipsoidShape(*args))
    __swig_destroy__ = _core.delete_ChEllipsoidShape

    def GetEllipsoidGeometry(self):
        r"""GetEllipsoidGeometry(ChEllipsoidShape self) -> ChEllipsoid"""
        return _core.ChEllipsoidShape_GetEllipsoidGeometry(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChEllipsoidShape self, ChArchiveOut & marchive)"""
        return _core.ChEllipsoidShape_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChEllipsoidShape self, chrono::ChArchiveIn & marchive)"""
        return _core.ChEllipsoidShape_ArchiveIN(self, marchive)

# Register ChEllipsoidShape in _core:
_core.ChEllipsoidShape_swigregister(ChEllipsoidShape)

class ChGlyphs(ChVisualization):
    r"""Proxy of C++ chrono::ChGlyphs class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    GLYPH_POINT = _core.ChGlyphs_GLYPH_POINT
    
    GLYPH_VECTOR = _core.ChGlyphs_GLYPH_VECTOR
    
    GLYPH_COORDSYS = _core.ChGlyphs_GLYPH_COORDSYS
    
    points = property(_core.ChGlyphs_points_get, _core.ChGlyphs_points_set, doc=r"""points : std::vector<(chrono::ChVector<(double)>,std::allocator<(chrono::ChVector<(double)>)>)>""")
    colors = property(_core.ChGlyphs_colors_get, _core.ChGlyphs_colors_set, doc=r"""colors : std::vector<(chrono::ChColor,std::allocator<(chrono::ChColor)>)>""")
    vectors = property(_core.ChGlyphs_vectors_get, _core.ChGlyphs_vectors_set, doc=r"""vectors : std::vector<(chrono::ChVector<(double)>,std::allocator<(chrono::ChVector<(double)>)>)>""")
    rotations = property(_core.ChGlyphs_rotations_get, _core.ChGlyphs_rotations_set, doc=r"""rotations : std::vector<(chrono::ChQuaternion<(double)>,std::allocator<(chrono::ChQuaternion<(double)>)>)>""")

    def __init__(self):
        r"""__init__(ChGlyphs self) -> ChGlyphs"""
        _core.ChGlyphs_swiginit(self, _core.new_ChGlyphs())
    __swig_destroy__ = _core.delete_ChGlyphs

    def GetDrawMode(self):
        r"""GetDrawMode(ChGlyphs self) -> chrono::ChGlyphs::eCh_GlyphType"""
        return _core.ChGlyphs_GetDrawMode(self)

    def SetDrawMode(self, mmode):
        r"""SetDrawMode(ChGlyphs self, chrono::ChGlyphs::eCh_GlyphType mmode)"""
        return _core.ChGlyphs_SetDrawMode(self, mmode)

    def Reserve(self, n_glyphs):
        r"""Reserve(ChGlyphs self, unsigned int n_glyphs)"""
        return _core.ChGlyphs_Reserve(self, n_glyphs)

    def GetNumberOfGlyphs(self):
        r"""GetNumberOfGlyphs(ChGlyphs self) -> size_t"""
        return _core.ChGlyphs_GetNumberOfGlyphs(self)

    def GetGlyphsSize(self):
        r"""GetGlyphsSize(ChGlyphs self) -> double"""
        return _core.ChGlyphs_GetGlyphsSize(self)

    def SetGlyphsSize(self, msize):
        r"""SetGlyphsSize(ChGlyphs self, double msize)"""
        return _core.ChGlyphs_SetGlyphsSize(self, msize)

    def SetZbufferHide(self, mhide):
        r"""SetZbufferHide(ChGlyphs self, bool mhide)"""
        return _core.ChGlyphs_SetZbufferHide(self, mhide)

    def GetZbufferHide(self):
        r"""GetZbufferHide(ChGlyphs self) -> bool"""
        return _core.ChGlyphs_GetZbufferHide(self)

    def SetGlyphPoint(self, *args):
        r"""SetGlyphPoint(ChGlyphs self, unsigned int id, ChVectorD mpoint, ChColor mcolor=chrono::ChColor(1, 0, 0))"""
        return _core.ChGlyphs_SetGlyphPoint(self, *args)

    def SetGlyphVector(self, *args):
        r"""SetGlyphVector(ChGlyphs self, unsigned int id, ChVectorD mpoint, ChVectorD mvector, ChColor mcolor=chrono::ChColor(1, 0, 0))"""
        return _core.ChGlyphs_SetGlyphVector(self, *args)

    def SetGlyphCoordsys(self, id, mcoord):
        r"""SetGlyphCoordsys(ChGlyphs self, unsigned int id, ChCoordsysD mcoord)"""
        return _core.ChGlyphs_SetGlyphCoordsys(self, id, mcoord)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChGlyphs self, ChArchiveOut & marchive)"""
        return _core.ChGlyphs_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChGlyphs self, chrono::ChArchiveIn & marchive)"""
        return _core.ChGlyphs_ArchiveIN(self, marchive)

# Register ChGlyphs in _core:
_core.ChGlyphs_swigregister(ChGlyphs)

class ChLoadable(object):
    r"""Proxy of C++ chrono::ChLoadable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChLoadable

    def LoadableGet_ndof_x(self):
        r"""LoadableGet_ndof_x(ChLoadable self) -> int"""
        return _core.ChLoadable_LoadableGet_ndof_x(self)

    def LoadableGet_ndof_w(self):
        r"""LoadableGet_ndof_w(ChLoadable self) -> int"""
        return _core.ChLoadable_LoadableGet_ndof_w(self)

    def LoadableGetStateBlock_x(self, block_offset, mD):
        r"""LoadableGetStateBlock_x(ChLoadable self, int block_offset, ChState mD)"""
        return _core.ChLoadable_LoadableGetStateBlock_x(self, block_offset, mD)

    def LoadableGetStateBlock_w(self, block_offset, mD):
        r"""LoadableGetStateBlock_w(ChLoadable self, int block_offset, ChStateDelta mD)"""
        return _core.ChLoadable_LoadableGetStateBlock_w(self, block_offset, mD)

    def LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""LoadableStateIncrement(ChLoadable self, unsigned int const off_x, ChState x_new, ChState x, unsigned int const off_v, ChStateDelta Dv)"""
        return _core.ChLoadable_LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def Get_field_ncoords(self):
        r"""Get_field_ncoords(ChLoadable self) -> int"""
        return _core.ChLoadable_Get_field_ncoords(self)

    def GetSubBlocks(self):
        r"""GetSubBlocks(ChLoadable self) -> int"""
        return _core.ChLoadable_GetSubBlocks(self)

    def GetSubBlockOffset(self, nblock):
        r"""GetSubBlockOffset(ChLoadable self, int nblock) -> unsigned int"""
        return _core.ChLoadable_GetSubBlockOffset(self, nblock)

    def GetSubBlockSize(self, nblock):
        r"""GetSubBlockSize(ChLoadable self, int nblock) -> unsigned int"""
        return _core.ChLoadable_GetSubBlockSize(self, nblock)

    def LoadableGetVariables(self, mvars):
        r"""LoadableGetVariables(ChLoadable self, std::vector< ChVariables *,std::allocator< ChVariables * > > & mvars)"""
        return _core.ChLoadable_LoadableGetVariables(self, mvars)

    def __init__(self):
        r"""__init__(ChLoadable self) -> ChLoadable"""
        if self.__class__ == ChLoadable:
            _self = None
        else:
            _self = self
        _core.ChLoadable_swiginit(self, _core.new_ChLoadable(_self, ))
    def __disown__(self):
        self.this.disown()
        _core.disown_ChLoadable(self)
        return weakref.proxy(self)

# Register ChLoadable in _core:
_core.ChLoadable_swigregister(ChLoadable)

class ChLoadableUVW(ChLoadable):
    r"""Proxy of C++ chrono::ChLoadableUVW class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChLoadableUVW

    def ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w):
        r"""ComputeNF(ChLoadableUVW self, double const U, double const V, double const W, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _core.ChLoadableUVW_ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w)

    def GetDensity(self):
        r"""GetDensity(ChLoadableUVW self) -> double"""
        return _core.ChLoadableUVW_GetDensity(self)

    def IsTetrahedronIntegrationNeeded(self):
        r"""IsTetrahedronIntegrationNeeded(ChLoadableUVW self) -> bool"""
        return _core.ChLoadableUVW_IsTetrahedronIntegrationNeeded(self)

    def IsTrianglePrismIntegrationNeeded(self):
        r"""IsTrianglePrismIntegrationNeeded(ChLoadableUVW self) -> bool"""
        return _core.ChLoadableUVW_IsTrianglePrismIntegrationNeeded(self)

    def __init__(self):
        r"""__init__(ChLoadableUVW self) -> ChLoadableUVW"""
        if self.__class__ == ChLoadableUVW:
            _self = None
        else:
            _self = self
        _core.ChLoadableUVW_swiginit(self, _core.new_ChLoadableUVW(_self, ))
    def __disown__(self):
        self.this.disown()
        _core.disown_ChLoadableUVW(self)
        return weakref.proxy(self)

# Register ChLoadableUVW in _core:
_core.ChLoadableUVW_swigregister(ChLoadableUVW)

class ChLoadableUV(ChLoadable):
    r"""Proxy of C++ chrono::ChLoadableUV class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChLoadableUV

    def ComputeNF(self, U, V, Qi, detJ, F, state_x, state_w):
        r"""ComputeNF(ChLoadableUV self, double const U, double const V, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _core.ChLoadableUV_ComputeNF(self, U, V, Qi, detJ, F, state_x, state_w)

    def ComputeNormal(self, U, V):
        r"""ComputeNormal(ChLoadableUV self, double const U, double const V) -> ChVectorD"""
        return _core.ChLoadableUV_ComputeNormal(self, U, V)

    def IsTriangleIntegrationNeeded(self):
        r"""IsTriangleIntegrationNeeded(ChLoadableUV self) -> bool"""
        return _core.ChLoadableUV_IsTriangleIntegrationNeeded(self)

    def __init__(self):
        r"""__init__(ChLoadableUV self) -> ChLoadableUV"""
        if self.__class__ == ChLoadableUV:
            _self = None
        else:
            _self = self
        _core.ChLoadableUV_swiginit(self, _core.new_ChLoadableUV(_self, ))
    def __disown__(self):
        self.this.disown()
        _core.disown_ChLoadableUV(self)
        return weakref.proxy(self)

# Register ChLoadableUV in _core:
_core.ChLoadableUV_swigregister(ChLoadableUV)

class ChLoadableU(ChLoadable):
    r"""Proxy of C++ chrono::ChLoadableU class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChLoadableU

    def ComputeNF(self, U, Qi, detJ, F, state_x, state_w):
        r"""ComputeNF(ChLoadableU self, double const U, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _core.ChLoadableU_ComputeNF(self, U, Qi, detJ, F, state_x, state_w)

    def __init__(self):
        r"""__init__(ChLoadableU self) -> ChLoadableU"""
        if self.__class__ == ChLoadableU:
            _self = None
        else:
            _self = self
        _core.ChLoadableU_swiginit(self, _core.new_ChLoadableU(_self, ))
    def __disown__(self):
        self.this.disown()
        _core.disown_ChLoadableU(self)
        return weakref.proxy(self)

# Register ChLoadableU in _core:
_core.ChLoadableU_swigregister(ChLoadableU)

class ChObj(object):
    r"""Proxy of C++ chrono::ChObj class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChObj

    def Clone(self):
        r"""Clone(ChObj self) -> ChObj"""
        return _core.ChObj_Clone(self)

    def GetIdentifier(self):
        r"""GetIdentifier(ChObj self) -> int"""
        return _core.ChObj_GetIdentifier(self)

    def SetIdentifier(self, id):
        r"""SetIdentifier(ChObj self, int id)"""
        return _core.ChObj_SetIdentifier(self, id)

    def GetChTime(self):
        r"""GetChTime(ChObj self) -> double"""
        return _core.ChObj_GetChTime(self)

    def SetChTime(self, m_time):
        r"""SetChTime(ChObj self, double m_time)"""
        return _core.ChObj_SetChTime(self, m_time)

    def GetName(self):
        r"""GetName(ChObj self) -> char const *"""
        return _core.ChObj_GetName(self)

    def SetName(self, myname):
        r"""SetName(ChObj self, char const [] myname)"""
        return _core.ChObj_SetName(self, myname)

    def GetNameString(self):
        r"""GetNameString(ChObj self) -> std::string"""
        return _core.ChObj_GetNameString(self)

    def SetNameString(self, myname):
        r"""SetNameString(ChObj self, std::string const & myname)"""
        return _core.ChObj_SetNameString(self, myname)

    def MFlagsSetAllOFF(self, mflag):
        r"""MFlagsSetAllOFF(ChObj self, int & mflag)"""
        return _core.ChObj_MFlagsSetAllOFF(self, mflag)

    def MFlagsSetAllON(self, mflag):
        r"""MFlagsSetAllON(ChObj self, int & mflag)"""
        return _core.ChObj_MFlagsSetAllON(self, mflag)

    def MFlagSetON(self, mflag, mask):
        r"""MFlagSetON(ChObj self, int & mflag, int mask)"""
        return _core.ChObj_MFlagSetON(self, mflag, mask)

    def MFlagSetOFF(self, mflag, mask):
        r"""MFlagSetOFF(ChObj self, int & mflag, int mask)"""
        return _core.ChObj_MFlagSetOFF(self, mflag, mask)

    def MFlagGet(self, mflag, mask):
        r"""MFlagGet(ChObj self, int & mflag, int mask) -> int"""
        return _core.ChObj_MFlagGet(self, mflag, mask)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChObj self, ChArchiveOut & marchive)"""
        return _core.ChObj_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChObj self, chrono::ChArchiveIn & marchive)"""
        return _core.ChObj_ArchiveIN(self, marchive)

    def ArchiveContainerName(self):
        r"""ArchiveContainerName(ChObj self) -> std::string &"""
        return _core.ChObj_ArchiveContainerName(self)

# Register ChObj in _core:
_core.ChObj_swigregister(ChObj)

class vector_ChAsset(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< chrono::ChAsset > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_ChAsset self) -> SwigPyIterator"""
        return _core.vector_ChAsset_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_ChAsset self) -> bool"""
        return _core.vector_ChAsset___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_ChAsset self) -> bool"""
        return _core.vector_ChAsset___bool__(self)

    def __len__(self):
        r"""__len__(vector_ChAsset self) -> std::vector< std::shared_ptr< chrono::ChAsset > >::size_type"""
        return _core.vector_ChAsset___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_ChAsset self, std::vector< std::shared_ptr< chrono::ChAsset > >::difference_type i, std::vector< std::shared_ptr< chrono::ChAsset > >::difference_type j) -> vector_ChAsset"""
        return _core.vector_ChAsset___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_ChAsset self, std::vector< std::shared_ptr< chrono::ChAsset > >::difference_type i, std::vector< std::shared_ptr< chrono::ChAsset > >::difference_type j)
        __setslice__(vector_ChAsset self, std::vector< std::shared_ptr< chrono::ChAsset > >::difference_type i, std::vector< std::shared_ptr< chrono::ChAsset > >::difference_type j, vector_ChAsset v)
        """
        return _core.vector_ChAsset___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_ChAsset self, std::vector< std::shared_ptr< chrono::ChAsset > >::difference_type i, std::vector< std::shared_ptr< chrono::ChAsset > >::difference_type j)"""
        return _core.vector_ChAsset___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_ChAsset self, std::vector< std::shared_ptr< chrono::ChAsset > >::difference_type i)
        __delitem__(vector_ChAsset self, PySliceObject * slice)
        """
        return _core.vector_ChAsset___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_ChAsset self, PySliceObject * slice) -> vector_ChAsset
        __getitem__(vector_ChAsset self, std::vector< std::shared_ptr< chrono::ChAsset > >::difference_type i) -> std::vector< std::shared_ptr< chrono::ChAsset > >::value_type const &
        """
        return _core.vector_ChAsset___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_ChAsset self, PySliceObject * slice, vector_ChAsset v)
        __setitem__(vector_ChAsset self, PySliceObject * slice)
        __setitem__(vector_ChAsset self, std::vector< std::shared_ptr< chrono::ChAsset > >::difference_type i, std::vector< std::shared_ptr< chrono::ChAsset > >::value_type const & x)
        """
        return _core.vector_ChAsset___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_ChAsset self) -> std::vector< std::shared_ptr< chrono::ChAsset > >::value_type"""
        return _core.vector_ChAsset_pop(self)

    def append(self, x):
        r"""append(vector_ChAsset self, std::vector< std::shared_ptr< chrono::ChAsset > >::value_type const & x)"""
        return _core.vector_ChAsset_append(self, x)

    def empty(self):
        r"""empty(vector_ChAsset self) -> bool"""
        return _core.vector_ChAsset_empty(self)

    def size(self):
        r"""size(vector_ChAsset self) -> std::vector< std::shared_ptr< chrono::ChAsset > >::size_type"""
        return _core.vector_ChAsset_size(self)

    def swap(self, v):
        r"""swap(vector_ChAsset self, vector_ChAsset v)"""
        return _core.vector_ChAsset_swap(self, v)

    def begin(self):
        r"""begin(vector_ChAsset self) -> std::vector< std::shared_ptr< chrono::ChAsset > >::iterator"""
        return _core.vector_ChAsset_begin(self)

    def end(self):
        r"""end(vector_ChAsset self) -> std::vector< std::shared_ptr< chrono::ChAsset > >::iterator"""
        return _core.vector_ChAsset_end(self)

    def rbegin(self):
        r"""rbegin(vector_ChAsset self) -> std::vector< std::shared_ptr< chrono::ChAsset > >::reverse_iterator"""
        return _core.vector_ChAsset_rbegin(self)

    def rend(self):
        r"""rend(vector_ChAsset self) -> std::vector< std::shared_ptr< chrono::ChAsset > >::reverse_iterator"""
        return _core.vector_ChAsset_rend(self)

    def clear(self):
        r"""clear(vector_ChAsset self)"""
        return _core.vector_ChAsset_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_ChAsset self) -> std::vector< std::shared_ptr< chrono::ChAsset > >::allocator_type"""
        return _core.vector_ChAsset_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_ChAsset self)"""
        return _core.vector_ChAsset_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_ChAsset self, std::vector< std::shared_ptr< chrono::ChAsset > >::iterator pos) -> std::vector< std::shared_ptr< chrono::ChAsset > >::iterator
        erase(vector_ChAsset self, std::vector< std::shared_ptr< chrono::ChAsset > >::iterator first, std::vector< std::shared_ptr< chrono::ChAsset > >::iterator last) -> std::vector< std::shared_ptr< chrono::ChAsset > >::iterator
        """
        return _core.vector_ChAsset_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_ChAsset self) -> vector_ChAsset
        __init__(vector_ChAsset self, vector_ChAsset other) -> vector_ChAsset
        __init__(vector_ChAsset self, std::vector< std::shared_ptr< chrono::ChAsset > >::size_type size) -> vector_ChAsset
        __init__(vector_ChAsset self, std::vector< std::shared_ptr< chrono::ChAsset > >::size_type size, std::vector< std::shared_ptr< chrono::ChAsset > >::value_type const & value) -> vector_ChAsset
        """
        _core.vector_ChAsset_swiginit(self, _core.new_vector_ChAsset(*args))

    def push_back(self, x):
        r"""push_back(vector_ChAsset self, std::vector< std::shared_ptr< chrono::ChAsset > >::value_type const & x)"""
        return _core.vector_ChAsset_push_back(self, x)

    def front(self):
        r"""front(vector_ChAsset self) -> std::vector< std::shared_ptr< chrono::ChAsset > >::value_type const &"""
        return _core.vector_ChAsset_front(self)

    def back(self):
        r"""back(vector_ChAsset self) -> std::vector< std::shared_ptr< chrono::ChAsset > >::value_type const &"""
        return _core.vector_ChAsset_back(self)

    def assign(self, n, x):
        r"""assign(vector_ChAsset self, std::vector< std::shared_ptr< chrono::ChAsset > >::size_type n, std::vector< std::shared_ptr< chrono::ChAsset > >::value_type const & x)"""
        return _core.vector_ChAsset_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_ChAsset self, std::vector< std::shared_ptr< chrono::ChAsset > >::size_type new_size)
        resize(vector_ChAsset self, std::vector< std::shared_ptr< chrono::ChAsset > >::size_type new_size, std::vector< std::shared_ptr< chrono::ChAsset > >::value_type const & x)
        """
        return _core.vector_ChAsset_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_ChAsset self, std::vector< std::shared_ptr< chrono::ChAsset > >::iterator pos, std::vector< std::shared_ptr< chrono::ChAsset > >::value_type const & x) -> std::vector< std::shared_ptr< chrono::ChAsset > >::iterator
        insert(vector_ChAsset self, std::vector< std::shared_ptr< chrono::ChAsset > >::iterator pos, std::vector< std::shared_ptr< chrono::ChAsset > >::size_type n, std::vector< std::shared_ptr< chrono::ChAsset > >::value_type const & x)
        """
        return _core.vector_ChAsset_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_ChAsset self, std::vector< std::shared_ptr< chrono::ChAsset > >::size_type n)"""
        return _core.vector_ChAsset_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_ChAsset self) -> std::vector< std::shared_ptr< chrono::ChAsset > >::size_type"""
        return _core.vector_ChAsset_capacity(self)
    __swig_destroy__ = _core.delete_vector_ChAsset

# Register vector_ChAsset in _core:
_core.vector_ChAsset_swigregister(vector_ChAsset)

class ChPhysicsItem(ChObj):
    r"""Proxy of C++ chrono::ChPhysicsItem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChPhysicsItem self) -> ChPhysicsItem
        __init__(ChPhysicsItem self, ChPhysicsItem other) -> ChPhysicsItem
        """
        _core.ChPhysicsItem_swiginit(self, _core.new_ChPhysicsItem(*args))
    __swig_destroy__ = _core.delete_ChPhysicsItem

    def Clone(self):
        r"""Clone(ChPhysicsItem self) -> ChPhysicsItem"""
        return _core.ChPhysicsItem_Clone(self)

    def GetSystem(self):
        r"""GetSystem(ChPhysicsItem self) -> ChSystem"""
        return _core.ChPhysicsItem_GetSystem(self)

    def SetSystem(self, m_system):
        r"""SetSystem(ChPhysicsItem self, ChSystem m_system)"""
        return _core.ChPhysicsItem_SetSystem(self, m_system)

    def AddAsset(self, masset):
        r"""AddAsset(ChPhysicsItem self, std::shared_ptr< chrono::ChAsset > masset)"""
        return _core.ChPhysicsItem_AddAsset(self, masset)

    def GetAssets(self):
        r"""GetAssets(ChPhysicsItem self) -> vector_ChAsset"""
        return _core.ChPhysicsItem_GetAssets(self)

    def GetAssetN(self, num):
        r"""GetAssetN(ChPhysicsItem self, unsigned int num) -> std::shared_ptr< chrono::ChAsset >"""
        return _core.ChPhysicsItem_GetAssetN(self, num)

    def GetAssetsFrame(self, nclone=0):
        r"""GetAssetsFrame(ChPhysicsItem self, unsigned int nclone=0) -> ChFrameD"""
        return _core.ChPhysicsItem_GetAssetsFrame(self, nclone)

    def GetAssetsFrameNclones(self):
        r"""GetAssetsFrameNclones(ChPhysicsItem self) -> unsigned int"""
        return _core.ChPhysicsItem_GetAssetsFrameNclones(self)

    def GetCollide(self):
        r"""GetCollide(ChPhysicsItem self) -> bool"""
        return _core.ChPhysicsItem_GetCollide(self)

    def SyncCollisionModels(self):
        r"""SyncCollisionModels(ChPhysicsItem self)"""
        return _core.ChPhysicsItem_SyncCollisionModels(self)

    def AddCollisionModelsToSystem(self):
        r"""AddCollisionModelsToSystem(ChPhysicsItem self)"""
        return _core.ChPhysicsItem_AddCollisionModelsToSystem(self)

    def RemoveCollisionModelsFromSystem(self):
        r"""RemoveCollisionModelsFromSystem(ChPhysicsItem self)"""
        return _core.ChPhysicsItem_RemoveCollisionModelsFromSystem(self)

    def GetTotalAABB(self, bbmin, bbmax):
        r"""GetTotalAABB(ChPhysicsItem self, ChVectorD bbmin, ChVectorD bbmax)"""
        return _core.ChPhysicsItem_GetTotalAABB(self, bbmin, bbmax)

    def GetCenter(self, mcenter):
        r"""GetCenter(ChPhysicsItem self, ChVectorD mcenter)"""
        return _core.ChPhysicsItem_GetCenter(self, mcenter)

    def StreamINstate(self, mstream):
        r"""StreamINstate(ChPhysicsItem self, ChStreamInBinary mstream)"""
        return _core.ChPhysicsItem_StreamINstate(self, mstream)

    def StreamOUTstate(self, mstream):
        r"""StreamOUTstate(ChPhysicsItem self, ChStreamOutBinary mstream)"""
        return _core.ChPhysicsItem_StreamOUTstate(self, mstream)

    def Setup(self):
        r"""Setup(ChPhysicsItem self)"""
        return _core.ChPhysicsItem_Setup(self)

    def Update(self, *args):
        r"""
        Update(ChPhysicsItem self, double mytime, bool update_assets=True)
        Update(ChPhysicsItem self, bool update_assets=True)
        """
        return _core.ChPhysicsItem_Update(self, *args)

    def SetNoSpeedNoAcceleration(self):
        r"""SetNoSpeedNoAcceleration(ChPhysicsItem self)"""
        return _core.ChPhysicsItem_SetNoSpeedNoAcceleration(self)

    def GetDOF(self):
        r"""GetDOF(ChPhysicsItem self) -> int"""
        return _core.ChPhysicsItem_GetDOF(self)

    def GetDOF_w(self):
        r"""GetDOF_w(ChPhysicsItem self) -> int"""
        return _core.ChPhysicsItem_GetDOF_w(self)

    def GetDOC(self):
        r"""GetDOC(ChPhysicsItem self) -> int"""
        return _core.ChPhysicsItem_GetDOC(self)

    def GetDOC_c(self):
        r"""GetDOC_c(ChPhysicsItem self) -> int"""
        return _core.ChPhysicsItem_GetDOC_c(self)

    def GetDOC_d(self):
        r"""GetDOC_d(ChPhysicsItem self) -> int"""
        return _core.ChPhysicsItem_GetDOC_d(self)

    def GetOffset_x(self):
        r"""GetOffset_x(ChPhysicsItem self) -> unsigned int"""
        return _core.ChPhysicsItem_GetOffset_x(self)

    def GetOffset_w(self):
        r"""GetOffset_w(ChPhysicsItem self) -> unsigned int"""
        return _core.ChPhysicsItem_GetOffset_w(self)

    def GetOffset_L(self):
        r"""GetOffset_L(ChPhysicsItem self) -> unsigned int"""
        return _core.ChPhysicsItem_GetOffset_L(self)

    def SetOffset_x(self, moff):
        r"""SetOffset_x(ChPhysicsItem self, unsigned int const moff)"""
        return _core.ChPhysicsItem_SetOffset_x(self, moff)

    def SetOffset_w(self, moff):
        r"""SetOffset_w(ChPhysicsItem self, unsigned int const moff)"""
        return _core.ChPhysicsItem_SetOffset_w(self, moff)

    def SetOffset_L(self, moff):
        r"""SetOffset_L(ChPhysicsItem self, unsigned int const moff)"""
        return _core.ChPhysicsItem_SetOffset_L(self, moff)

    def IntStateGather(self, off_x, x, off_v, v, T):
        r"""IntStateGather(ChPhysicsItem self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double & T)"""
        return _core.ChPhysicsItem_IntStateGather(self, off_x, x, off_v, v, T)

    def IntStateScatter(self, off_x, x, off_v, v, T):
        r"""IntStateScatter(ChPhysicsItem self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double const T)"""
        return _core.ChPhysicsItem_IntStateScatter(self, off_x, x, off_v, v, T)

    def IntStateGatherAcceleration(self, off_a, a):
        r"""IntStateGatherAcceleration(ChPhysicsItem self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChPhysicsItem_IntStateGatherAcceleration(self, off_a, a)

    def IntStateScatterAcceleration(self, off_a, a):
        r"""IntStateScatterAcceleration(ChPhysicsItem self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChPhysicsItem_IntStateScatterAcceleration(self, off_a, a)

    def IntStateGatherReactions(self, off_L, L):
        r"""IntStateGatherReactions(ChPhysicsItem self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChPhysicsItem_IntStateGatherReactions(self, off_L, L)

    def IntStateScatterReactions(self, off_L, L):
        r"""IntStateScatterReactions(ChPhysicsItem self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChPhysicsItem_IntStateScatterReactions(self, off_L, L)

    def IntStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""IntStateIncrement(ChPhysicsItem self, unsigned int const off_x, ChState x_new, ChState x, unsigned int const off_v, ChStateDelta Dv)"""
        return _core.ChPhysicsItem_IntStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def IntLoadResidual_F(self, off, R, c):
        r"""IntLoadResidual_F(ChPhysicsItem self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _core.ChPhysicsItem_IntLoadResidual_F(self, off, R, c)

    def IntLoadResidual_Mv(self, off, R, w, c):
        r"""IntLoadResidual_Mv(ChPhysicsItem self, unsigned int const off, ChVectorDynamicD R, ChVectorDynamicD w, double const c)"""
        return _core.ChPhysicsItem_IntLoadResidual_Mv(self, off, R, w, c)

    def IntLoadResidual_CqL(self, off_L, R, L, c):
        r"""IntLoadResidual_CqL(ChPhysicsItem self, unsigned int const off_L, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _core.ChPhysicsItem_IntLoadResidual_CqL(self, off_L, R, L, c)

    def IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp):
        r"""IntLoadConstraint_C(ChPhysicsItem self, unsigned int const off, ChVectorDynamicD Qc, double const c, bool do_clamp, double recovery_clamp)"""
        return _core.ChPhysicsItem_IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp)

    def IntLoadConstraint_Ct(self, off, Qc, c):
        r"""IntLoadConstraint_Ct(ChPhysicsItem self, unsigned int const off, ChVectorDynamicD Qc, double const c)"""
        return _core.ChPhysicsItem_IntLoadConstraint_Ct(self, off, Qc, c)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChPhysicsItem self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _core.ChPhysicsItem_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChPhysicsItem self, unsigned int const off_v, ChStateDelta v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChPhysicsItem_IntFromDescriptor(self, off_v, v, off_L, L)

    def VariablesFbReset(self):
        r"""VariablesFbReset(ChPhysicsItem self)"""
        return _core.ChPhysicsItem_VariablesFbReset(self)

    def VariablesFbLoadForces(self, factor=1):
        r"""VariablesFbLoadForces(ChPhysicsItem self, double factor=1)"""
        return _core.ChPhysicsItem_VariablesFbLoadForces(self, factor)

    def VariablesQbLoadSpeed(self):
        r"""VariablesQbLoadSpeed(ChPhysicsItem self)"""
        return _core.ChPhysicsItem_VariablesQbLoadSpeed(self)

    def VariablesFbIncrementMq(self):
        r"""VariablesFbIncrementMq(ChPhysicsItem self)"""
        return _core.ChPhysicsItem_VariablesFbIncrementMq(self)

    def VariablesQbSetSpeed(self, step=0):
        r"""VariablesQbSetSpeed(ChPhysicsItem self, double step=0)"""
        return _core.ChPhysicsItem_VariablesQbSetSpeed(self, step)

    def VariablesQbIncrementPosition(self, step):
        r"""VariablesQbIncrementPosition(ChPhysicsItem self, double step)"""
        return _core.ChPhysicsItem_VariablesQbIncrementPosition(self, step)

    def InjectVariables(self, mdescriptor):
        r"""InjectVariables(ChPhysicsItem self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChPhysicsItem_InjectVariables(self, mdescriptor)

    def InjectConstraints(self, mdescriptor):
        r"""InjectConstraints(ChPhysicsItem self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChPhysicsItem_InjectConstraints(self, mdescriptor)

    def ConstraintsBiReset(self):
        r"""ConstraintsBiReset(ChPhysicsItem self)"""
        return _core.ChPhysicsItem_ConstraintsBiReset(self)

    def ConstraintsBiLoad_C(self, factor=1, recovery_clamp=0.1, do_clamp=False):
        r"""ConstraintsBiLoad_C(ChPhysicsItem self, double factor=1, double recovery_clamp=0.1, bool do_clamp=False)"""
        return _core.ChPhysicsItem_ConstraintsBiLoad_C(self, factor, recovery_clamp, do_clamp)

    def ConstraintsBiLoad_Ct(self, factor=1):
        r"""ConstraintsBiLoad_Ct(ChPhysicsItem self, double factor=1)"""
        return _core.ChPhysicsItem_ConstraintsBiLoad_Ct(self, factor)

    def ConstraintsBiLoad_Qc(self, factor=1):
        r"""ConstraintsBiLoad_Qc(ChPhysicsItem self, double factor=1)"""
        return _core.ChPhysicsItem_ConstraintsBiLoad_Qc(self, factor)

    def ConstraintsFbLoadForces(self, factor=1):
        r"""ConstraintsFbLoadForces(ChPhysicsItem self, double factor=1)"""
        return _core.ChPhysicsItem_ConstraintsFbLoadForces(self, factor)

    def ConstraintsLoadJacobians(self):
        r"""ConstraintsLoadJacobians(ChPhysicsItem self)"""
        return _core.ChPhysicsItem_ConstraintsLoadJacobians(self)

    def ConstraintsFetch_react(self, factor=1):
        r"""ConstraintsFetch_react(ChPhysicsItem self, double factor=1)"""
        return _core.ChPhysicsItem_ConstraintsFetch_react(self, factor)

    def InjectKRMmatrices(self, mdescriptor):
        r"""InjectKRMmatrices(ChPhysicsItem self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChPhysicsItem_InjectKRMmatrices(self, mdescriptor)

    def KRMmatricesLoad(self, Kfactor, Rfactor, Mfactor):
        r"""KRMmatricesLoad(ChPhysicsItem self, double Kfactor, double Rfactor, double Mfactor)"""
        return _core.ChPhysicsItem_KRMmatricesLoad(self, Kfactor, Rfactor, Mfactor)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChPhysicsItem self, ChArchiveOut & marchive)"""
        return _core.ChPhysicsItem_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChPhysicsItem self, chrono::ChArchiveIn & marchive)"""
        return _core.ChPhysicsItem_ArchiveIN(self, marchive)

# Register ChPhysicsItem in _core:
_core.ChPhysicsItem_swigregister(ChPhysicsItem)

class ChIndexedNodes(ChPhysicsItem):
    r"""Proxy of C++ chrono::ChIndexedNodes class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChIndexedNodes

    def GetNnodes(self):
        r"""GetNnodes(ChIndexedNodes self) -> unsigned int"""
        return _core.ChIndexedNodes_GetNnodes(self)

    def GetNode(self, n):
        r"""GetNode(ChIndexedNodes self, unsigned int n) -> std::shared_ptr< ChNodeBase >"""
        return _core.ChIndexedNodes_GetNode(self, n)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChIndexedNodes self, ChArchiveOut & marchive)"""
        return _core.ChIndexedNodes_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChIndexedNodes self, chrono::ChArchiveIn & marchive)"""
        return _core.ChIndexedNodes_ArchiveIN(self, marchive)

# Register ChIndexedNodes in _core:
_core.ChIndexedNodes_swigregister(ChIndexedNodes)

class ChMaterialSurface(object):
    r"""Proxy of C++ chrono::ChMaterialSurface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    NSC = _core.ChMaterialSurface_NSC
    
    SMC = _core.ChMaterialSurface_SMC
    
    __swig_destroy__ = _core.delete_ChMaterialSurface

    def Clone(self):
        r"""Clone(ChMaterialSurface self) -> ChMaterialSurface"""
        return _core.ChMaterialSurface_Clone(self)

    def GetContactMethod(self):
        r"""GetContactMethod(ChMaterialSurface self) -> chrono::ChMaterialSurface::ContactMethod"""
        return _core.ChMaterialSurface_GetContactMethod(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChMaterialSurface self, ChArchiveOut & marchive)"""
        return _core.ChMaterialSurface_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChMaterialSurface self, chrono::ChArchiveIn & marchive)"""
        return _core.ChMaterialSurface_ArchiveIN(self, marchive)

# Register ChMaterialSurface in _core:
_core.ChMaterialSurface_swigregister(ChMaterialSurface)

class ChMaterialComposite(object):
    r"""Proxy of C++ chrono::ChMaterialComposite class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChMaterialComposite

    def __init__(self):
        r"""__init__(ChMaterialComposite self) -> ChMaterialComposite"""
        _core.ChMaterialComposite_swiginit(self, _core.new_ChMaterialComposite())

# Register ChMaterialComposite in _core:
_core.ChMaterialComposite_swigregister(ChMaterialComposite)

class ChMaterialSurfaceNSC(ChMaterialSurface):
    r"""Proxy of C++ chrono::ChMaterialSurfaceNSC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    static_friction = property(_core.ChMaterialSurfaceNSC_static_friction_get, _core.ChMaterialSurfaceNSC_static_friction_set, doc=r"""static_friction : float""")
    sliding_friction = property(_core.ChMaterialSurfaceNSC_sliding_friction_get, _core.ChMaterialSurfaceNSC_sliding_friction_set, doc=r"""sliding_friction : float""")
    rolling_friction = property(_core.ChMaterialSurfaceNSC_rolling_friction_get, _core.ChMaterialSurfaceNSC_rolling_friction_set, doc=r"""rolling_friction : float""")
    spinning_friction = property(_core.ChMaterialSurfaceNSC_spinning_friction_get, _core.ChMaterialSurfaceNSC_spinning_friction_set, doc=r"""spinning_friction : float""")
    restitution = property(_core.ChMaterialSurfaceNSC_restitution_get, _core.ChMaterialSurfaceNSC_restitution_set, doc=r"""restitution : float""")
    cohesion = property(_core.ChMaterialSurfaceNSC_cohesion_get, _core.ChMaterialSurfaceNSC_cohesion_set, doc=r"""cohesion : float""")
    dampingf = property(_core.ChMaterialSurfaceNSC_dampingf_get, _core.ChMaterialSurfaceNSC_dampingf_set, doc=r"""dampingf : float""")
    compliance = property(_core.ChMaterialSurfaceNSC_compliance_get, _core.ChMaterialSurfaceNSC_compliance_set, doc=r"""compliance : float""")
    complianceT = property(_core.ChMaterialSurfaceNSC_complianceT_get, _core.ChMaterialSurfaceNSC_complianceT_set, doc=r"""complianceT : float""")
    complianceRoll = property(_core.ChMaterialSurfaceNSC_complianceRoll_get, _core.ChMaterialSurfaceNSC_complianceRoll_set, doc=r"""complianceRoll : float""")
    complianceSpin = property(_core.ChMaterialSurfaceNSC_complianceSpin_get, _core.ChMaterialSurfaceNSC_complianceSpin_set, doc=r"""complianceSpin : float""")

    def __init__(self, *args):
        r"""
        __init__(ChMaterialSurfaceNSC self) -> ChMaterialSurfaceNSC
        __init__(ChMaterialSurfaceNSC self, ChMaterialSurfaceNSC other) -> ChMaterialSurfaceNSC
        """
        _core.ChMaterialSurfaceNSC_swiginit(self, _core.new_ChMaterialSurfaceNSC(*args))
    __swig_destroy__ = _core.delete_ChMaterialSurfaceNSC

    def Clone(self):
        r"""Clone(ChMaterialSurfaceNSC self) -> ChMaterialSurfaceNSC"""
        return _core.ChMaterialSurfaceNSC_Clone(self)

    def GetContactMethod(self):
        r"""GetContactMethod(ChMaterialSurfaceNSC self) -> chrono::ChMaterialSurface::ContactMethod"""
        return _core.ChMaterialSurfaceNSC_GetContactMethod(self)

    def GetSfriction(self):
        r"""GetSfriction(ChMaterialSurfaceNSC self) -> float"""
        return _core.ChMaterialSurfaceNSC_GetSfriction(self)

    def SetSfriction(self, mval):
        r"""SetSfriction(ChMaterialSurfaceNSC self, float mval)"""
        return _core.ChMaterialSurfaceNSC_SetSfriction(self, mval)

    def GetKfriction(self):
        r"""GetKfriction(ChMaterialSurfaceNSC self) -> float"""
        return _core.ChMaterialSurfaceNSC_GetKfriction(self)

    def SetKfriction(self, mval):
        r"""SetKfriction(ChMaterialSurfaceNSC self, float mval)"""
        return _core.ChMaterialSurfaceNSC_SetKfriction(self, mval)

    def SetFriction(self, mval):
        r"""SetFriction(ChMaterialSurfaceNSC self, float mval)"""
        return _core.ChMaterialSurfaceNSC_SetFriction(self, mval)

    def GetRollingFriction(self):
        r"""GetRollingFriction(ChMaterialSurfaceNSC self) -> float"""
        return _core.ChMaterialSurfaceNSC_GetRollingFriction(self)

    def SetRollingFriction(self, mval):
        r"""SetRollingFriction(ChMaterialSurfaceNSC self, float mval)"""
        return _core.ChMaterialSurfaceNSC_SetRollingFriction(self, mval)

    def GetSpinningFriction(self):
        r"""GetSpinningFriction(ChMaterialSurfaceNSC self) -> float"""
        return _core.ChMaterialSurfaceNSC_GetSpinningFriction(self)

    def SetSpinningFriction(self, mval):
        r"""SetSpinningFriction(ChMaterialSurfaceNSC self, float mval)"""
        return _core.ChMaterialSurfaceNSC_SetSpinningFriction(self, mval)

    def GetRestitution(self):
        r"""GetRestitution(ChMaterialSurfaceNSC self) -> float"""
        return _core.ChMaterialSurfaceNSC_GetRestitution(self)

    def SetRestitution(self, mval):
        r"""SetRestitution(ChMaterialSurfaceNSC self, float mval)"""
        return _core.ChMaterialSurfaceNSC_SetRestitution(self, mval)

    def GetCohesion(self):
        r"""GetCohesion(ChMaterialSurfaceNSC self) -> float"""
        return _core.ChMaterialSurfaceNSC_GetCohesion(self)

    def SetCohesion(self, mval):
        r"""SetCohesion(ChMaterialSurfaceNSC self, float mval)"""
        return _core.ChMaterialSurfaceNSC_SetCohesion(self, mval)

    def GetDampingF(self):
        r"""GetDampingF(ChMaterialSurfaceNSC self) -> float"""
        return _core.ChMaterialSurfaceNSC_GetDampingF(self)

    def SetDampingF(self, mval):
        r"""SetDampingF(ChMaterialSurfaceNSC self, float mval)"""
        return _core.ChMaterialSurfaceNSC_SetDampingF(self, mval)

    def GetCompliance(self):
        r"""GetCompliance(ChMaterialSurfaceNSC self) -> float"""
        return _core.ChMaterialSurfaceNSC_GetCompliance(self)

    def SetCompliance(self, mval):
        r"""SetCompliance(ChMaterialSurfaceNSC self, float mval)"""
        return _core.ChMaterialSurfaceNSC_SetCompliance(self, mval)

    def GetComplianceT(self):
        r"""GetComplianceT(ChMaterialSurfaceNSC self) -> float"""
        return _core.ChMaterialSurfaceNSC_GetComplianceT(self)

    def SetComplianceT(self, mval):
        r"""SetComplianceT(ChMaterialSurfaceNSC self, float mval)"""
        return _core.ChMaterialSurfaceNSC_SetComplianceT(self, mval)

    def GetComplianceRolling(self):
        r"""GetComplianceRolling(ChMaterialSurfaceNSC self) -> float"""
        return _core.ChMaterialSurfaceNSC_GetComplianceRolling(self)

    def SetComplianceRolling(self, mval):
        r"""SetComplianceRolling(ChMaterialSurfaceNSC self, float mval)"""
        return _core.ChMaterialSurfaceNSC_SetComplianceRolling(self, mval)

    def GetComplianceSpinning(self):
        r"""GetComplianceSpinning(ChMaterialSurfaceNSC self) -> float"""
        return _core.ChMaterialSurfaceNSC_GetComplianceSpinning(self)

    def SetComplianceSpinning(self, mval):
        r"""SetComplianceSpinning(ChMaterialSurfaceNSC self, float mval)"""
        return _core.ChMaterialSurfaceNSC_SetComplianceSpinning(self, mval)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChMaterialSurfaceNSC self, ChArchiveOut & marchive)"""
        return _core.ChMaterialSurfaceNSC_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChMaterialSurfaceNSC self, chrono::ChArchiveIn & marchive)"""
        return _core.ChMaterialSurfaceNSC_ArchiveIN(self, marchive)

# Register ChMaterialSurfaceNSC in _core:
_core.ChMaterialSurfaceNSC_swigregister(ChMaterialSurfaceNSC)

class ChMaterialCompositeNSC(ChMaterialComposite):
    r"""Proxy of C++ chrono::ChMaterialCompositeNSC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    static_friction = property(_core.ChMaterialCompositeNSC_static_friction_get, _core.ChMaterialCompositeNSC_static_friction_set, doc=r"""static_friction : float""")
    sliding_friction = property(_core.ChMaterialCompositeNSC_sliding_friction_get, _core.ChMaterialCompositeNSC_sliding_friction_set, doc=r"""sliding_friction : float""")
    rolling_friction = property(_core.ChMaterialCompositeNSC_rolling_friction_get, _core.ChMaterialCompositeNSC_rolling_friction_set, doc=r"""rolling_friction : float""")
    spinning_friction = property(_core.ChMaterialCompositeNSC_spinning_friction_get, _core.ChMaterialCompositeNSC_spinning_friction_set, doc=r"""spinning_friction : float""")
    restitution = property(_core.ChMaterialCompositeNSC_restitution_get, _core.ChMaterialCompositeNSC_restitution_set, doc=r"""restitution : float""")
    cohesion = property(_core.ChMaterialCompositeNSC_cohesion_get, _core.ChMaterialCompositeNSC_cohesion_set, doc=r"""cohesion : float""")
    dampingf = property(_core.ChMaterialCompositeNSC_dampingf_get, _core.ChMaterialCompositeNSC_dampingf_set, doc=r"""dampingf : float""")
    compliance = property(_core.ChMaterialCompositeNSC_compliance_get, _core.ChMaterialCompositeNSC_compliance_set, doc=r"""compliance : float""")
    complianceT = property(_core.ChMaterialCompositeNSC_complianceT_get, _core.ChMaterialCompositeNSC_complianceT_set, doc=r"""complianceT : float""")
    complianceRoll = property(_core.ChMaterialCompositeNSC_complianceRoll_get, _core.ChMaterialCompositeNSC_complianceRoll_set, doc=r"""complianceRoll : float""")
    complianceSpin = property(_core.ChMaterialCompositeNSC_complianceSpin_get, _core.ChMaterialCompositeNSC_complianceSpin_set, doc=r"""complianceSpin : float""")

    def __init__(self, *args):
        r"""
        __init__(ChMaterialCompositeNSC self) -> ChMaterialCompositeNSC
        __init__(ChMaterialCompositeNSC self, chrono::ChMaterialCompositionStrategy< float > * strategy, std::shared_ptr< chrono::ChMaterialSurfaceNSC > mat1, std::shared_ptr< chrono::ChMaterialSurfaceNSC > mat2) -> ChMaterialCompositeNSC
        """
        _core.ChMaterialCompositeNSC_swiginit(self, _core.new_ChMaterialCompositeNSC(*args))
    __swig_destroy__ = _core.delete_ChMaterialCompositeNSC

# Register ChMaterialCompositeNSC in _core:
_core.ChMaterialCompositeNSC_swigregister(ChMaterialCompositeNSC)

class ChMaterialSurfaceSMC(ChMaterialSurface):
    r"""Proxy of C++ chrono::ChMaterialSurfaceSMC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    young_modulus = property(_core.ChMaterialSurfaceSMC_young_modulus_get, _core.ChMaterialSurfaceSMC_young_modulus_set, doc=r"""young_modulus : float""")
    poisson_ratio = property(_core.ChMaterialSurfaceSMC_poisson_ratio_get, _core.ChMaterialSurfaceSMC_poisson_ratio_set, doc=r"""poisson_ratio : float""")
    static_friction = property(_core.ChMaterialSurfaceSMC_static_friction_get, _core.ChMaterialSurfaceSMC_static_friction_set, doc=r"""static_friction : float""")
    sliding_friction = property(_core.ChMaterialSurfaceSMC_sliding_friction_get, _core.ChMaterialSurfaceSMC_sliding_friction_set, doc=r"""sliding_friction : float""")
    rolling_friction = property(_core.ChMaterialSurfaceSMC_rolling_friction_get, _core.ChMaterialSurfaceSMC_rolling_friction_set, doc=r"""rolling_friction : float""")
    spinning_friction = property(_core.ChMaterialSurfaceSMC_spinning_friction_get, _core.ChMaterialSurfaceSMC_spinning_friction_set, doc=r"""spinning_friction : float""")
    restitution = property(_core.ChMaterialSurfaceSMC_restitution_get, _core.ChMaterialSurfaceSMC_restitution_set, doc=r"""restitution : float""")
    constant_adhesion = property(_core.ChMaterialSurfaceSMC_constant_adhesion_get, _core.ChMaterialSurfaceSMC_constant_adhesion_set, doc=r"""constant_adhesion : float""")
    adhesionMultDMT = property(_core.ChMaterialSurfaceSMC_adhesionMultDMT_get, _core.ChMaterialSurfaceSMC_adhesionMultDMT_set, doc=r"""adhesionMultDMT : float""")
    adhesionSPerko = property(_core.ChMaterialSurfaceSMC_adhesionSPerko_get, _core.ChMaterialSurfaceSMC_adhesionSPerko_set, doc=r"""adhesionSPerko : float""")
    kn = property(_core.ChMaterialSurfaceSMC_kn_get, _core.ChMaterialSurfaceSMC_kn_set, doc=r"""kn : float""")
    kt = property(_core.ChMaterialSurfaceSMC_kt_get, _core.ChMaterialSurfaceSMC_kt_set, doc=r"""kt : float""")
    gn = property(_core.ChMaterialSurfaceSMC_gn_get, _core.ChMaterialSurfaceSMC_gn_set, doc=r"""gn : float""")
    gt = property(_core.ChMaterialSurfaceSMC_gt_get, _core.ChMaterialSurfaceSMC_gt_set, doc=r"""gt : float""")

    def __init__(self, *args):
        r"""
        __init__(ChMaterialSurfaceSMC self) -> ChMaterialSurfaceSMC
        __init__(ChMaterialSurfaceSMC self, ChMaterialSurfaceSMC other) -> ChMaterialSurfaceSMC
        """
        _core.ChMaterialSurfaceSMC_swiginit(self, _core.new_ChMaterialSurfaceSMC(*args))
    __swig_destroy__ = _core.delete_ChMaterialSurfaceSMC

    def Clone(self):
        r"""Clone(ChMaterialSurfaceSMC self) -> ChMaterialSurfaceSMC"""
        return _core.ChMaterialSurfaceSMC_Clone(self)

    def GetContactMethod(self):
        r"""GetContactMethod(ChMaterialSurfaceSMC self) -> chrono::ChMaterialSurface::ContactMethod"""
        return _core.ChMaterialSurfaceSMC_GetContactMethod(self)

    def SetYoungModulus(self, val):
        r"""SetYoungModulus(ChMaterialSurfaceSMC self, float val)"""
        return _core.ChMaterialSurfaceSMC_SetYoungModulus(self, val)

    def GetYoungModulus(self):
        r"""GetYoungModulus(ChMaterialSurfaceSMC self) -> float"""
        return _core.ChMaterialSurfaceSMC_GetYoungModulus(self)

    def SetPoissonRatio(self, val):
        r"""SetPoissonRatio(ChMaterialSurfaceSMC self, float val)"""
        return _core.ChMaterialSurfaceSMC_SetPoissonRatio(self, val)

    def GetPoissonRatio(self):
        r"""GetPoissonRatio(ChMaterialSurfaceSMC self) -> float"""
        return _core.ChMaterialSurfaceSMC_GetPoissonRatio(self)

    def SetSfriction(self, val):
        r"""SetSfriction(ChMaterialSurfaceSMC self, float val)"""
        return _core.ChMaterialSurfaceSMC_SetSfriction(self, val)

    def GetSfriction(self):
        r"""GetSfriction(ChMaterialSurfaceSMC self) -> float"""
        return _core.ChMaterialSurfaceSMC_GetSfriction(self)

    def SetKfriction(self, val):
        r"""SetKfriction(ChMaterialSurfaceSMC self, float val)"""
        return _core.ChMaterialSurfaceSMC_SetKfriction(self, val)

    def GetKfriction(self):
        r"""GetKfriction(ChMaterialSurfaceSMC self) -> float"""
        return _core.ChMaterialSurfaceSMC_GetKfriction(self)

    def SetFriction(self, val):
        r"""SetFriction(ChMaterialSurfaceSMC self, float val)"""
        return _core.ChMaterialSurfaceSMC_SetFriction(self, val)

    def SetRollingFriction(self, val):
        r"""SetRollingFriction(ChMaterialSurfaceSMC self, float val)"""
        return _core.ChMaterialSurfaceSMC_SetRollingFriction(self, val)

    def GetRollingFriction(self):
        r"""GetRollingFriction(ChMaterialSurfaceSMC self) -> float"""
        return _core.ChMaterialSurfaceSMC_GetRollingFriction(self)

    def SetSpinningFriction(self, val):
        r"""SetSpinningFriction(ChMaterialSurfaceSMC self, float val)"""
        return _core.ChMaterialSurfaceSMC_SetSpinningFriction(self, val)

    def GetSpinningFriction(self):
        r"""GetSpinningFriction(ChMaterialSurfaceSMC self) -> float"""
        return _core.ChMaterialSurfaceSMC_GetSpinningFriction(self)

    def SetRestitution(self, val):
        r"""SetRestitution(ChMaterialSurfaceSMC self, float val)"""
        return _core.ChMaterialSurfaceSMC_SetRestitution(self, val)

    def GetRestitution(self):
        r"""GetRestitution(ChMaterialSurfaceSMC self) -> float"""
        return _core.ChMaterialSurfaceSMC_GetRestitution(self)

    def SetAdhesion(self, val):
        r"""SetAdhesion(ChMaterialSurfaceSMC self, float val)"""
        return _core.ChMaterialSurfaceSMC_SetAdhesion(self, val)

    def GetAdhesion(self):
        r"""GetAdhesion(ChMaterialSurfaceSMC self) -> float"""
        return _core.ChMaterialSurfaceSMC_GetAdhesion(self)

    def SetAdhesionMultDMT(self, val):
        r"""SetAdhesionMultDMT(ChMaterialSurfaceSMC self, float val)"""
        return _core.ChMaterialSurfaceSMC_SetAdhesionMultDMT(self, val)

    def GetAdhesionMultDMT(self):
        r"""GetAdhesionMultDMT(ChMaterialSurfaceSMC self) -> float"""
        return _core.ChMaterialSurfaceSMC_GetAdhesionMultDMT(self)

    def SetAdhesionSPerko(self, val):
        r"""SetAdhesionSPerko(ChMaterialSurfaceSMC self, float val)"""
        return _core.ChMaterialSurfaceSMC_SetAdhesionSPerko(self, val)

    def GetAdhesionSPerko(self):
        r"""GetAdhesionSPerko(ChMaterialSurfaceSMC self) -> float"""
        return _core.ChMaterialSurfaceSMC_GetAdhesionSPerko(self)

    def SetKn(self, val):
        r"""SetKn(ChMaterialSurfaceSMC self, float val)"""
        return _core.ChMaterialSurfaceSMC_SetKn(self, val)

    def SetKt(self, val):
        r"""SetKt(ChMaterialSurfaceSMC self, float val)"""
        return _core.ChMaterialSurfaceSMC_SetKt(self, val)

    def SetGn(self, val):
        r"""SetGn(ChMaterialSurfaceSMC self, float val)"""
        return _core.ChMaterialSurfaceSMC_SetGn(self, val)

    def SetGt(self, val):
        r"""SetGt(ChMaterialSurfaceSMC self, float val)"""
        return _core.ChMaterialSurfaceSMC_SetGt(self, val)

    def GetKn(self):
        r"""GetKn(ChMaterialSurfaceSMC self) -> float"""
        return _core.ChMaterialSurfaceSMC_GetKn(self)

    def GetKt(self):
        r"""GetKt(ChMaterialSurfaceSMC self) -> float"""
        return _core.ChMaterialSurfaceSMC_GetKt(self)

    def GetGn(self):
        r"""GetGn(ChMaterialSurfaceSMC self) -> float"""
        return _core.ChMaterialSurfaceSMC_GetGn(self)

    def GetGt(self):
        r"""GetGt(ChMaterialSurfaceSMC self) -> float"""
        return _core.ChMaterialSurfaceSMC_GetGt(self)

    def StreamOUT(self, mstream):
        r"""StreamOUT(ChMaterialSurfaceSMC self, ChStreamOutAscii mstream)"""
        return _core.ChMaterialSurfaceSMC_StreamOUT(self, mstream)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChMaterialSurfaceSMC self, ChArchiveOut & marchive)"""
        return _core.ChMaterialSurfaceSMC_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChMaterialSurfaceSMC self, chrono::ChArchiveIn & marchive)"""
        return _core.ChMaterialSurfaceSMC_ArchiveIN(self, marchive)

# Register ChMaterialSurfaceSMC in _core:
_core.ChMaterialSurfaceSMC_swigregister(ChMaterialSurfaceSMC)

class ChMaterialCompositeSMC(ChMaterialComposite):
    r"""Proxy of C++ chrono::ChMaterialCompositeSMC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    E_eff = property(_core.ChMaterialCompositeSMC_E_eff_get, _core.ChMaterialCompositeSMC_E_eff_set, doc=r"""E_eff : float""")
    G_eff = property(_core.ChMaterialCompositeSMC_G_eff_get, _core.ChMaterialCompositeSMC_G_eff_set, doc=r"""G_eff : float""")
    mu_eff = property(_core.ChMaterialCompositeSMC_mu_eff_get, _core.ChMaterialCompositeSMC_mu_eff_set, doc=r"""mu_eff : float""")
    muRoll_eff = property(_core.ChMaterialCompositeSMC_muRoll_eff_get, _core.ChMaterialCompositeSMC_muRoll_eff_set, doc=r"""muRoll_eff : float""")
    muSpin_eff = property(_core.ChMaterialCompositeSMC_muSpin_eff_get, _core.ChMaterialCompositeSMC_muSpin_eff_set, doc=r"""muSpin_eff : float""")
    cr_eff = property(_core.ChMaterialCompositeSMC_cr_eff_get, _core.ChMaterialCompositeSMC_cr_eff_set, doc=r"""cr_eff : float""")
    adhesion_eff = property(_core.ChMaterialCompositeSMC_adhesion_eff_get, _core.ChMaterialCompositeSMC_adhesion_eff_set, doc=r"""adhesion_eff : float""")
    adhesionMultDMT_eff = property(_core.ChMaterialCompositeSMC_adhesionMultDMT_eff_get, _core.ChMaterialCompositeSMC_adhesionMultDMT_eff_set, doc=r"""adhesionMultDMT_eff : float""")
    adhesionSPerko_eff = property(_core.ChMaterialCompositeSMC_adhesionSPerko_eff_get, _core.ChMaterialCompositeSMC_adhesionSPerko_eff_set, doc=r"""adhesionSPerko_eff : float""")
    kn = property(_core.ChMaterialCompositeSMC_kn_get, _core.ChMaterialCompositeSMC_kn_set, doc=r"""kn : float""")
    kt = property(_core.ChMaterialCompositeSMC_kt_get, _core.ChMaterialCompositeSMC_kt_set, doc=r"""kt : float""")
    gn = property(_core.ChMaterialCompositeSMC_gn_get, _core.ChMaterialCompositeSMC_gn_set, doc=r"""gn : float""")
    gt = property(_core.ChMaterialCompositeSMC_gt_get, _core.ChMaterialCompositeSMC_gt_set, doc=r"""gt : float""")

    def __init__(self, *args):
        r"""
        __init__(ChMaterialCompositeSMC self) -> ChMaterialCompositeSMC
        __init__(ChMaterialCompositeSMC self, chrono::ChMaterialCompositionStrategy< float > * strategy, std::shared_ptr< chrono::ChMaterialSurfaceSMC > mat1, std::shared_ptr< chrono::ChMaterialSurfaceSMC > mat2) -> ChMaterialCompositeSMC
        """
        _core.ChMaterialCompositeSMC_swiginit(self, _core.new_ChMaterialCompositeSMC(*args))
    __swig_destroy__ = _core.delete_ChMaterialCompositeSMC

# Register ChMaterialCompositeSMC in _core:
_core.ChMaterialCompositeSMC_swigregister(ChMaterialCompositeSMC)

class ChNodeBase(object):
    r"""Proxy of C++ chrono::ChNodeBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChNodeBase

    def Get_ndof_x(self):
        r"""Get_ndof_x(ChNodeBase self) -> int"""
        return _core.ChNodeBase_Get_ndof_x(self)

    def Get_ndof_w(self):
        r"""Get_ndof_w(ChNodeBase self) -> int"""
        return _core.ChNodeBase_Get_ndof_w(self)

    def NodeGetOffset_x(self):
        r"""NodeGetOffset_x(ChNodeBase self) -> unsigned int"""
        return _core.ChNodeBase_NodeGetOffset_x(self)

    def NodeGetOffset_w(self):
        r"""NodeGetOffset_w(ChNodeBase self) -> unsigned int"""
        return _core.ChNodeBase_NodeGetOffset_w(self)

    def NodeSetOffset_x(self, moff):
        r"""NodeSetOffset_x(ChNodeBase self, unsigned int const moff)"""
        return _core.ChNodeBase_NodeSetOffset_x(self, moff)

    def NodeSetOffset_w(self, moff):
        r"""NodeSetOffset_w(ChNodeBase self, unsigned int const moff)"""
        return _core.ChNodeBase_NodeSetOffset_w(self, moff)

    def NodeIntStateGather(self, off_x, x, off_v, v, T):
        r"""NodeIntStateGather(ChNodeBase self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double & T)"""
        return _core.ChNodeBase_NodeIntStateGather(self, off_x, x, off_v, v, T)

    def NodeIntStateScatter(self, off_x, x, off_v, v, T):
        r"""NodeIntStateScatter(ChNodeBase self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double const T)"""
        return _core.ChNodeBase_NodeIntStateScatter(self, off_x, x, off_v, v, T)

    def NodeIntStateGatherAcceleration(self, off_a, a):
        r"""NodeIntStateGatherAcceleration(ChNodeBase self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChNodeBase_NodeIntStateGatherAcceleration(self, off_a, a)

    def NodeIntStateScatterAcceleration(self, off_a, a):
        r"""NodeIntStateScatterAcceleration(ChNodeBase self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChNodeBase_NodeIntStateScatterAcceleration(self, off_a, a)

    def NodeIntStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""NodeIntStateIncrement(ChNodeBase self, unsigned int const off_x, ChState x_new, ChState x, unsigned int const off_v, ChStateDelta Dv)"""
        return _core.ChNodeBase_NodeIntStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def NodeIntLoadResidual_F(self, off, R, c):
        r"""NodeIntLoadResidual_F(ChNodeBase self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _core.ChNodeBase_NodeIntLoadResidual_F(self, off, R, c)

    def NodeIntLoadResidual_Mv(self, off, R, w, c):
        r"""NodeIntLoadResidual_Mv(ChNodeBase self, unsigned int const off, ChVectorDynamicD R, ChVectorDynamicD w, double const c)"""
        return _core.ChNodeBase_NodeIntLoadResidual_Mv(self, off, R, w, c)

    def NodeIntToDescriptor(self, off_v, v, R):
        r"""NodeIntToDescriptor(ChNodeBase self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R)"""
        return _core.ChNodeBase_NodeIntToDescriptor(self, off_v, v, R)

    def NodeIntFromDescriptor(self, off_v, v):
        r"""NodeIntFromDescriptor(ChNodeBase self, unsigned int const off_v, ChStateDelta v)"""
        return _core.ChNodeBase_NodeIntFromDescriptor(self, off_v, v)

    def InjectVariables(self, mdescriptor):
        r"""InjectVariables(ChNodeBase self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChNodeBase_InjectVariables(self, mdescriptor)

    def VariablesFbReset(self):
        r"""VariablesFbReset(ChNodeBase self)"""
        return _core.ChNodeBase_VariablesFbReset(self)

    def VariablesFbLoadForces(self, factor=1):
        r"""VariablesFbLoadForces(ChNodeBase self, double factor=1)"""
        return _core.ChNodeBase_VariablesFbLoadForces(self, factor)

    def VariablesQbLoadSpeed(self):
        r"""VariablesQbLoadSpeed(ChNodeBase self)"""
        return _core.ChNodeBase_VariablesQbLoadSpeed(self)

    def VariablesFbIncrementMq(self):
        r"""VariablesFbIncrementMq(ChNodeBase self)"""
        return _core.ChNodeBase_VariablesFbIncrementMq(self)

    def VariablesQbSetSpeed(self, step=0):
        r"""VariablesQbSetSpeed(ChNodeBase self, double step=0)"""
        return _core.ChNodeBase_VariablesQbSetSpeed(self, step)

    def VariablesQbIncrementPosition(self, step):
        r"""VariablesQbIncrementPosition(ChNodeBase self, double step)"""
        return _core.ChNodeBase_VariablesQbIncrementPosition(self, step)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChNodeBase self, ChArchiveOut & marchive)"""
        return _core.ChNodeBase_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChNodeBase self, chrono::ChArchiveIn & marchive)"""
        return _core.ChNodeBase_ArchiveIN(self, marchive)

# Register ChNodeBase in _core:
_core.ChNodeBase_swigregister(ChNodeBase)

class ChNodeXYZ(ChNodeBase, ChLoadableUVW):
    r"""Proxy of C++ chrono::ChNodeXYZ class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChNodeXYZ

    def Variables(self):
        r"""Variables(ChNodeXYZ self) -> ChVariablesNode &"""
        return _core.ChNodeXYZ_Variables(self)

    def GetPos(self):
        r"""GetPos(ChNodeXYZ self) -> ChVectorD"""
        return _core.ChNodeXYZ_GetPos(self)

    def SetPos(self, mpos):
        r"""SetPos(ChNodeXYZ self, ChVectorD mpos)"""
        return _core.ChNodeXYZ_SetPos(self, mpos)

    def GetPos_dt(self):
        r"""GetPos_dt(ChNodeXYZ self) -> ChVectorD"""
        return _core.ChNodeXYZ_GetPos_dt(self)

    def SetPos_dt(self, mposdt):
        r"""SetPos_dt(ChNodeXYZ self, ChVectorD mposdt)"""
        return _core.ChNodeXYZ_SetPos_dt(self, mposdt)

    def GetPos_dtdt(self):
        r"""GetPos_dtdt(ChNodeXYZ self) -> ChVectorD"""
        return _core.ChNodeXYZ_GetPos_dtdt(self)

    def SetPos_dtdt(self, mposdtdt):
        r"""SetPos_dtdt(ChNodeXYZ self, ChVectorD mposdtdt)"""
        return _core.ChNodeXYZ_SetPos_dtdt(self, mposdtdt)

    def GetMass(self):
        r"""GetMass(ChNodeXYZ self) -> double"""
        return _core.ChNodeXYZ_GetMass(self)

    def SetMass(self, mm):
        r"""SetMass(ChNodeXYZ self, double mm)"""
        return _core.ChNodeXYZ_SetMass(self, mm)

    def Get_ndof_x(self):
        r"""Get_ndof_x(ChNodeXYZ self) -> int"""
        return _core.ChNodeXYZ_Get_ndof_x(self)

    def LoadableGet_ndof_x(self):
        r"""LoadableGet_ndof_x(ChNodeXYZ self) -> int"""
        return _core.ChNodeXYZ_LoadableGet_ndof_x(self)

    def LoadableGet_ndof_w(self):
        r"""LoadableGet_ndof_w(ChNodeXYZ self) -> int"""
        return _core.ChNodeXYZ_LoadableGet_ndof_w(self)

    def LoadableGetStateBlock_x(self, block_offset, mD):
        r"""LoadableGetStateBlock_x(ChNodeXYZ self, int block_offset, ChState mD)"""
        return _core.ChNodeXYZ_LoadableGetStateBlock_x(self, block_offset, mD)

    def LoadableGetStateBlock_w(self, block_offset, mD):
        r"""LoadableGetStateBlock_w(ChNodeXYZ self, int block_offset, ChStateDelta mD)"""
        return _core.ChNodeXYZ_LoadableGetStateBlock_w(self, block_offset, mD)

    def LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""LoadableStateIncrement(ChNodeXYZ self, unsigned int const off_x, ChState x_new, ChState x, unsigned int const off_v, ChStateDelta Dv)"""
        return _core.ChNodeXYZ_LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def Get_field_ncoords(self):
        r"""Get_field_ncoords(ChNodeXYZ self) -> int"""
        return _core.ChNodeXYZ_Get_field_ncoords(self)

    def GetSubBlocks(self):
        r"""GetSubBlocks(ChNodeXYZ self) -> int"""
        return _core.ChNodeXYZ_GetSubBlocks(self)

    def GetSubBlockOffset(self, nblock):
        r"""GetSubBlockOffset(ChNodeXYZ self, int nblock) -> unsigned int"""
        return _core.ChNodeXYZ_GetSubBlockOffset(self, nblock)

    def GetSubBlockSize(self, nblock):
        r"""GetSubBlockSize(ChNodeXYZ self, int nblock) -> unsigned int"""
        return _core.ChNodeXYZ_GetSubBlockSize(self, nblock)

    def LoadableGetVariables(self, mvars):
        r"""LoadableGetVariables(ChNodeXYZ self, std::vector< ChVariables *,std::allocator< ChVariables * > > & mvars)"""
        return _core.ChNodeXYZ_LoadableGetVariables(self, mvars)

    def ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w):
        r"""ComputeNF(ChNodeXYZ self, double const U, double const V, double const W, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _core.ChNodeXYZ_ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w)

    def GetDensity(self):
        r"""GetDensity(ChNodeXYZ self) -> double"""
        return _core.ChNodeXYZ_GetDensity(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChNodeXYZ self, ChArchiveOut & marchive)"""
        return _core.ChNodeXYZ_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChNodeXYZ self, chrono::ChArchiveIn & marchive)"""
        return _core.ChNodeXYZ_ArchiveIN(self, marchive)
    pos = property(_core.ChNodeXYZ_pos_get, _core.ChNodeXYZ_pos_set, doc=r"""pos : chrono::ChVector<()>""")
    pos_dt = property(_core.ChNodeXYZ_pos_dt_get, _core.ChNodeXYZ_pos_dt_set, doc=r"""pos_dt : chrono::ChVector<()>""")
    pos_dtdt = property(_core.ChNodeXYZ_pos_dtdt_get, _core.ChNodeXYZ_pos_dtdt_set, doc=r"""pos_dtdt : chrono::ChVector<()>""")

# Register ChNodeXYZ in _core:
_core.ChNodeXYZ_swigregister(ChNodeXYZ)

class ChBodyFrame(ChFrameMovingD):
    r"""Proxy of C++ chrono::ChBodyFrame class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChBodyFrame

    def VariablesBody(self):
        r"""VariablesBody(ChBodyFrame self) -> ChVariablesBodyOwnMass &"""
        return _core.ChBodyFrame_VariablesBody(self)

    def Variables(self):
        r"""Variables(ChBodyFrame self) -> ChVariables &"""
        return _core.ChBodyFrame_Variables(self)

    def To_abs_forcetorque(self, force, appl_point, local, resultforce, resulttorque):
        r"""To_abs_forcetorque(ChBodyFrame self, ChVectorD force, ChVectorD appl_point, bool local, ChVectorD resultforce, ChVectorD resulttorque)"""
        return _core.ChBodyFrame_To_abs_forcetorque(self, force, appl_point, local, resultforce, resulttorque)

    def To_abs_torque(self, torque, local, resulttorque):
        r"""To_abs_torque(ChBodyFrame self, ChVectorD torque, bool local, ChVectorD resulttorque)"""
        return _core.ChBodyFrame_To_abs_torque(self, torque, local, resulttorque)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChBodyFrame self, ChArchiveOut & marchive)"""
        return _core.ChBodyFrame_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChBodyFrame self, chrono::ChArchiveIn & marchive)"""
        return _core.ChBodyFrame_ArchiveIN(self, marchive)

# Register ChBodyFrame in _core:
_core.ChBodyFrame_swigregister(ChBodyFrame)

class ChMarker(ChObj, ChFrameMovingD):
    r"""Proxy of C++ chrono::ChMarker class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    M_MOTION_FUNCTIONS = _core.ChMarker_M_MOTION_FUNCTIONS
    
    M_MOTION_KEYFRAMED = _core.ChMarker_M_MOTION_KEYFRAMED
    
    M_MOTION_EXTERNAL = _core.ChMarker_M_MOTION_EXTERNAL
    

    def __init__(self, *args):
        r"""
        __init__(ChMarker self) -> ChMarker
        __init__(ChMarker self, std::string const & name, ChBody body, ChCoordsysD rel_pos, ChCoordsysD rel_pos_dt, ChCoordsysD rel_pos_dtdt) -> ChMarker
        __init__(ChMarker self, ChMarker other) -> ChMarker
        """
        _core.ChMarker_swiginit(self, _core.new_ChMarker(*args))
    __swig_destroy__ = _core.delete_ChMarker

    def Clone(self):
        r"""Clone(ChMarker self) -> ChMarker"""
        return _core.ChMarker_Clone(self)

    def GetBody(self):
        r"""GetBody(ChMarker self) -> ChBody"""
        return _core.ChMarker_GetBody(self)

    def SetBody(self, newRB):
        r"""SetBody(ChMarker self, ChBody newRB)"""
        return _core.ChMarker_SetBody(self, newRB)

    def Impose_Rel_Coord(self, m_coord):
        r"""Impose_Rel_Coord(ChMarker self, ChCoordsysD m_coord)"""
        return _core.ChMarker_Impose_Rel_Coord(self, m_coord)

    def Impose_Abs_Coord(self, m_coord):
        r"""Impose_Abs_Coord(ChMarker self, ChCoordsysD m_coord)"""
        return _core.ChMarker_Impose_Abs_Coord(self, m_coord)

    def GetRest_Coord(self):
        r"""GetRest_Coord(ChMarker self) -> ChCoordsysD"""
        return _core.ChMarker_GetRest_Coord(self)

    def GetAbsFrame(self):
        r"""GetAbsFrame(ChMarker self) -> ChFrameMovingD"""
        return _core.ChMarker_GetAbsFrame(self)

    def GetAbsCoord(self):
        r"""GetAbsCoord(ChMarker self) -> ChCoordsysD"""
        return _core.ChMarker_GetAbsCoord(self)

    def GetAbsCoord_dt(self):
        r"""GetAbsCoord_dt(ChMarker self) -> ChCoordsysD"""
        return _core.ChMarker_GetAbsCoord_dt(self)

    def GetAbsCoord_dtdt(self):
        r"""GetAbsCoord_dtdt(ChMarker self) -> ChCoordsysD"""
        return _core.ChMarker_GetAbsCoord_dtdt(self)

    def SetAbsCoord(self, newpos):
        r"""SetAbsCoord(ChMarker self, ChCoordsysD newpos)"""
        return _core.ChMarker_SetAbsCoord(self, newpos)

    def SetAbsCoord_dt(self, newpos_dt):
        r"""SetAbsCoord_dt(ChMarker self, ChCoordsysD newpos_dt)"""
        return _core.ChMarker_SetAbsCoord_dt(self, newpos_dt)

    def SetAbsCoord_dtdt(self, newpos_dtdt):
        r"""SetAbsCoord_dtdt(ChMarker self, ChCoordsysD newpos_dtdt)"""
        return _core.ChMarker_SetAbsCoord_dtdt(self, newpos_dtdt)

    def GetAbsWvel(self):
        r"""GetAbsWvel(ChMarker self) -> ChVectorD"""
        return _core.ChMarker_GetAbsWvel(self)

    def GetAbsWacc(self):
        r"""GetAbsWacc(ChMarker self) -> ChVectorD"""
        return _core.ChMarker_GetAbsWacc(self)

    def SetMotion_X(self, m_funct):
        r"""SetMotion_X(ChMarker self, std::shared_ptr< chrono::ChFunction > m_funct)"""
        return _core.ChMarker_SetMotion_X(self, m_funct)

    def SetMotion_Y(self, m_funct):
        r"""SetMotion_Y(ChMarker self, std::shared_ptr< chrono::ChFunction > m_funct)"""
        return _core.ChMarker_SetMotion_Y(self, m_funct)

    def SetMotion_Z(self, m_funct):
        r"""SetMotion_Z(ChMarker self, std::shared_ptr< chrono::ChFunction > m_funct)"""
        return _core.ChMarker_SetMotion_Z(self, m_funct)

    def SetMotion_ang(self, m_funct):
        r"""SetMotion_ang(ChMarker self, std::shared_ptr< chrono::ChFunction > m_funct)"""
        return _core.ChMarker_SetMotion_ang(self, m_funct)

    def SetMotion_axis(self, m_axis):
        r"""SetMotion_axis(ChMarker self, ChVectorD m_axis)"""
        return _core.ChMarker_SetMotion_axis(self, m_axis)

    def GetMotion_X(self):
        r"""GetMotion_X(ChMarker self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChMarker_GetMotion_X(self)

    def GetMotion_Y(self):
        r"""GetMotion_Y(ChMarker self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChMarker_GetMotion_Y(self)

    def GetMotion_Z(self):
        r"""GetMotion_Z(ChMarker self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChMarker_GetMotion_Z(self)

    def GetMotion_ang(self):
        r"""GetMotion_ang(ChMarker self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChMarker_GetMotion_ang(self)

    def GetMotion_axis(self):
        r"""GetMotion_axis(ChMarker self) -> ChVectorD"""
        return _core.ChMarker_GetMotion_axis(self)

    def SetMotionType(self, m_motion):
        r"""SetMotionType(ChMarker self, chrono::ChMarker::eChMarkerMotion m_motion)"""
        return _core.ChMarker_SetMotionType(self, m_motion)

    def GetMotionType(self):
        r"""GetMotionType(ChMarker self) -> chrono::ChMarker::eChMarkerMotion"""
        return _core.ChMarker_GetMotionType(self)

    def UpdateTime(self, mytime):
        r"""UpdateTime(ChMarker self, double mytime)"""
        return _core.ChMarker_UpdateTime(self, mytime)

    def UpdateState(self):
        r"""UpdateState(ChMarker self)"""
        return _core.ChMarker_UpdateState(self)

    def Update(self, mytime):
        r"""Update(ChMarker self, double mytime)"""
        return _core.ChMarker_Update(self, mytime)

    def UpdatedExternalTime(self, prevtime, mtime):
        r"""UpdatedExternalTime(ChMarker self, double prevtime, double mtime)"""
        return _core.ChMarker_UpdatedExternalTime(self, prevtime, mtime)

    def Point_World2Ref(self, point):
        r"""Point_World2Ref(ChMarker self, ChVectorD point) -> ChVectorD"""
        return _core.ChMarker_Point_World2Ref(self, point)

    def Point_Ref2World(self, point):
        r"""Point_Ref2World(ChMarker self, ChVectorD point) -> ChVectorD"""
        return _core.ChMarker_Point_Ref2World(self, point)

    def Dir_World2Ref(self, dir):
        r"""Dir_World2Ref(ChMarker self, ChVectorD dir) -> ChVectorD"""
        return _core.ChMarker_Dir_World2Ref(self, dir)

    def Dir_Ref2World(self, dir):
        r"""Dir_Ref2World(ChMarker self, ChVectorD dir) -> ChVectorD"""
        return _core.ChMarker_Dir_Ref2World(self, dir)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChMarker self, ChArchiveOut & marchive)"""
        return _core.ChMarker_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChMarker self, chrono::ChArchiveIn & marchive)"""
        return _core.ChMarker_ArchiveIN(self, marchive)

# Register ChMarker in _core:
_core.ChMarker_swigregister(ChMarker)

class ChForce(ChObj):
    r"""Proxy of C++ chrono::ChForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FORCE = _core.ChForce_FORCE
    
    TORQUE = _core.ChForce_TORQUE
    
    BODY = _core.ChForce_BODY
    
    WORLD = _core.ChForce_WORLD
    
    BODY_DIR = _core.ChForce_BODY_DIR
    
    WORLD_DIR = _core.ChForce_WORLD_DIR
    

    def __init__(self, *args):
        r"""
        __init__(ChForce self) -> ChForce
        __init__(ChForce self, ChForce other) -> ChForce
        """
        _core.ChForce_swiginit(self, _core.new_ChForce(*args))
    __swig_destroy__ = _core.delete_ChForce

    def Clone(self):
        r"""Clone(ChForce self) -> ChForce"""
        return _core.ChForce_Clone(self)

    def GetBody(self):
        r"""GetBody(ChForce self) -> ChBody"""
        return _core.ChForce_GetBody(self)

    def SetBody(self, newRB):
        r"""SetBody(ChForce self, ChBody newRB)"""
        return _core.ChForce_SetBody(self, newRB)

    def SetMode(self, m_mode):
        r"""SetMode(ChForce self, chrono::ChForce::ForceType m_mode)"""
        return _core.ChForce_SetMode(self, m_mode)

    def GetMode(self):
        r"""GetMode(ChForce self) -> chrono::ChForce::ForceType"""
        return _core.ChForce_GetMode(self)

    def SetAlign(self, m_align):
        r"""SetAlign(ChForce self, chrono::ChForce::AlignmentFrame m_align)"""
        return _core.ChForce_SetAlign(self, m_align)

    def GetAlign(self):
        r"""GetAlign(ChForce self) -> chrono::ChForce::AlignmentFrame"""
        return _core.ChForce_GetAlign(self)

    def SetFrame(self, m_frame):
        r"""SetFrame(ChForce self, chrono::ChForce::ReferenceFrame m_frame)"""
        return _core.ChForce_SetFrame(self, m_frame)

    def GetFrame(self):
        r"""GetFrame(ChForce self) -> chrono::ChForce::ReferenceFrame"""
        return _core.ChForce_GetFrame(self)

    def GetVpoint(self):
        r"""GetVpoint(ChForce self) -> ChVectorD"""
        return _core.ChForce_GetVpoint(self)

    def GetVrelpoint(self):
        r"""GetVrelpoint(ChForce self) -> ChVectorD"""
        return _core.ChForce_GetVrelpoint(self)

    def SetVpoint(self, mypoint):
        r"""SetVpoint(ChForce self, ChVectorD mypoint)"""
        return _core.ChForce_SetVpoint(self, mypoint)

    def SetVrelpoint(self, myrelpoint):
        r"""SetVrelpoint(ChForce self, ChVectorD myrelpoint)"""
        return _core.ChForce_SetVrelpoint(self, myrelpoint)

    def GetDir(self):
        r"""GetDir(ChForce self) -> ChVectorD"""
        return _core.ChForce_GetDir(self)

    def GetRelDir(self):
        r"""GetRelDir(ChForce self) -> ChVectorD"""
        return _core.ChForce_GetRelDir(self)

    def SetDir(self, newf):
        r"""SetDir(ChForce self, ChVectorD newf)"""
        return _core.ChForce_SetDir(self, newf)

    def SetRelDir(self, newf):
        r"""SetRelDir(ChForce self, ChVectorD newf)"""
        return _core.ChForce_SetRelDir(self, newf)

    def SetMforce(self, newf):
        r"""SetMforce(ChForce self, double newf)"""
        return _core.ChForce_SetMforce(self, newf)

    def GetMforce(self):
        r"""GetMforce(ChForce self) -> double"""
        return _core.ChForce_GetMforce(self)

    def SetModulation(self, m_funct):
        r"""SetModulation(ChForce self, std::shared_ptr< chrono::ChFunction > m_funct)"""
        return _core.ChForce_SetModulation(self, m_funct)

    def GetModulation(self):
        r"""GetModulation(ChForce self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChForce_GetModulation(self)

    def SetMove_x(self, m_funct):
        r"""SetMove_x(ChForce self, std::shared_ptr< chrono::ChFunction > m_funct)"""
        return _core.ChForce_SetMove_x(self, m_funct)

    def GetMove_x(self):
        r"""GetMove_x(ChForce self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChForce_GetMove_x(self)

    def SetMove_y(self, m_funct):
        r"""SetMove_y(ChForce self, std::shared_ptr< chrono::ChFunction > m_funct)"""
        return _core.ChForce_SetMove_y(self, m_funct)

    def GetMove_y(self):
        r"""GetMove_y(ChForce self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChForce_GetMove_y(self)

    def SetMove_z(self, m_funct):
        r"""SetMove_z(ChForce self, std::shared_ptr< chrono::ChFunction > m_funct)"""
        return _core.ChForce_SetMove_z(self, m_funct)

    def GetMove_z(self):
        r"""GetMove_z(ChForce self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChForce_GetMove_z(self)

    def SetF_x(self, m_funct):
        r"""SetF_x(ChForce self, std::shared_ptr< chrono::ChFunction > m_funct)"""
        return _core.ChForce_SetF_x(self, m_funct)

    def GetF_x(self):
        r"""GetF_x(ChForce self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChForce_GetF_x(self)

    def SetF_y(self, m_funct):
        r"""SetF_y(ChForce self, std::shared_ptr< chrono::ChFunction > m_funct)"""
        return _core.ChForce_SetF_y(self, m_funct)

    def GetF_y(self):
        r"""GetF_y(ChForce self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChForce_GetF_y(self)

    def SetF_z(self, m_funct):
        r"""SetF_z(ChForce self, std::shared_ptr< chrono::ChFunction > m_funct)"""
        return _core.ChForce_SetF_z(self, m_funct)

    def GetF_z(self):
        r"""GetF_z(ChForce self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChForce_GetF_z(self)

    def GetForce(self):
        r"""GetForce(ChForce self) -> ChVectorD"""
        return _core.ChForce_GetForce(self)

    def GetRelForce(self):
        r"""GetRelForce(ChForce self) -> ChVectorD"""
        return _core.ChForce_GetRelForce(self)

    def GetForceMod(self):
        r"""GetForceMod(ChForce self) -> double"""
        return _core.ChForce_GetForceMod(self)

    def GetQf(self):
        r"""GetQf(ChForce self) -> chrono::ChVectorN< double,7 > const &"""
        return _core.ChForce_GetQf(self)

    def GetBodyForceTorque(self, body_force, body_torque):
        r"""GetBodyForceTorque(ChForce self, ChVectorD body_force, ChVectorD body_torque)"""
        return _core.ChForce_GetBodyForceTorque(self, body_force, body_torque)

    def UpdateTime(self, mytime):
        r"""UpdateTime(ChForce self, double mytime)"""
        return _core.ChForce_UpdateTime(self, mytime)

    def UpdateState(self):
        r"""UpdateState(ChForce self)"""
        return _core.ChForce_UpdateState(self)

    def Update(self, mytime):
        r"""Update(ChForce self, double mytime)"""
        return _core.ChForce_Update(self, mytime)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChForce self, ChArchiveOut & marchive)"""
        return _core.ChForce_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChForce self, chrono::ChArchiveIn & marchive)"""
        return _core.ChForce_ArchiveIN(self, marchive)

# Register ChForce in _core:
_core.ChForce_swigregister(ChForce)

class ChBody(ChPhysicsItem, ChBodyFrame, ChLoadableUVW):
    r"""Proxy of C++ chrono::ChBody class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChBody self, chrono::ChMaterialSurface::ContactMethod contact_method=NSC) -> ChBody
        __init__(ChBody self, std::shared_ptr< chrono::collision::ChCollisionModel > new_collision_model, chrono::ChMaterialSurface::ContactMethod contact_method=NSC) -> ChBody
        __init__(ChBody self, ChBody other) -> ChBody
        """
        _core.ChBody_swiginit(self, _core.new_ChBody(*args))
    __swig_destroy__ = _core.delete_ChBody

    def Clone(self):
        r"""Clone(ChBody self) -> ChBody"""
        return _core.ChBody_Clone(self)

    def SetBodyFixed(self, state):
        r"""SetBodyFixed(ChBody self, bool state)"""
        return _core.ChBody_SetBodyFixed(self, state)

    def GetBodyFixed(self):
        r"""GetBodyFixed(ChBody self) -> bool"""
        return _core.ChBody_GetBodyFixed(self)

    def SetEvalContactCn(self, state):
        r"""SetEvalContactCn(ChBody self, bool state)"""
        return _core.ChBody_SetEvalContactCn(self, state)

    def GetEvalContactCn(self):
        r"""GetEvalContactCn(ChBody self) -> bool"""
        return _core.ChBody_GetEvalContactCn(self)

    def SetEvalContactCt(self, state):
        r"""SetEvalContactCt(ChBody self, bool state)"""
        return _core.ChBody_SetEvalContactCt(self, state)

    def GetEvalContactCt(self):
        r"""GetEvalContactCt(ChBody self) -> bool"""
        return _core.ChBody_GetEvalContactCt(self)

    def SetEvalContactKf(self, state):
        r"""SetEvalContactKf(ChBody self, bool state)"""
        return _core.ChBody_SetEvalContactKf(self, state)

    def GetEvalContactKf(self):
        r"""GetEvalContactKf(ChBody self) -> bool"""
        return _core.ChBody_GetEvalContactKf(self)

    def SetEvalContactSf(self, state):
        r"""SetEvalContactSf(ChBody self, bool state)"""
        return _core.ChBody_SetEvalContactSf(self, state)

    def GetEvalContactSf(self):
        r"""GetEvalContactSf(ChBody self) -> bool"""
        return _core.ChBody_GetEvalContactSf(self)

    def SetCollide(self, state):
        r"""SetCollide(ChBody self, bool state)"""
        return _core.ChBody_SetCollide(self, state)

    def GetCollide(self):
        r"""GetCollide(ChBody self) -> bool"""
        return _core.ChBody_GetCollide(self)

    def SetShowCollisionMesh(self, state):
        r"""SetShowCollisionMesh(ChBody self, bool state)"""
        return _core.ChBody_SetShowCollisionMesh(self, state)

    def GetShowCollisionMesh(self):
        r"""GetShowCollisionMesh(ChBody self) -> bool"""
        return _core.ChBody_GetShowCollisionMesh(self)

    def SetLimitSpeed(self, state):
        r"""SetLimitSpeed(ChBody self, bool state)"""
        return _core.ChBody_SetLimitSpeed(self, state)

    def GetLimitSpeed(self):
        r"""GetLimitSpeed(ChBody self) -> bool"""
        return _core.ChBody_GetLimitSpeed(self)

    def SetNoGyroTorque(self, state):
        r"""SetNoGyroTorque(ChBody self, bool state)"""
        return _core.ChBody_SetNoGyroTorque(self, state)

    def GetNoGyroTorque(self):
        r"""GetNoGyroTorque(ChBody self) -> bool"""
        return _core.ChBody_GetNoGyroTorque(self)

    def SetUseSleeping(self, state):
        r"""SetUseSleeping(ChBody self, bool state)"""
        return _core.ChBody_SetUseSleeping(self, state)

    def GetUseSleeping(self):
        r"""GetUseSleeping(ChBody self) -> bool"""
        return _core.ChBody_GetUseSleeping(self)

    def SetSleeping(self, state):
        r"""SetSleeping(ChBody self, bool state)"""
        return _core.ChBody_SetSleeping(self, state)

    def GetSleeping(self):
        r"""GetSleeping(ChBody self) -> bool"""
        return _core.ChBody_GetSleeping(self)

    def TrySleeping(self):
        r"""TrySleeping(ChBody self) -> bool"""
        return _core.ChBody_TrySleeping(self)

    def IsActive(self):
        r"""IsActive(ChBody self) -> bool"""
        return _core.ChBody_IsActive(self)

    def SetId(self, id):
        r"""SetId(ChBody self, int id)"""
        return _core.ChBody_SetId(self, id)

    def GetId(self):
        r"""GetId(ChBody self) -> unsigned int"""
        return _core.ChBody_GetId(self)

    def SetGid(self, id):
        r"""SetGid(ChBody self, unsigned int id)"""
        return _core.ChBody_SetGid(self, id)

    def GetGid(self):
        r"""GetGid(ChBody self) -> unsigned int"""
        return _core.ChBody_GetGid(self)

    def GetDOF(self):
        r"""GetDOF(ChBody self) -> int"""
        return _core.ChBody_GetDOF(self)

    def GetDOF_w(self):
        r"""GetDOF_w(ChBody self) -> int"""
        return _core.ChBody_GetDOF_w(self)

    def VariablesBody(self):
        r"""VariablesBody(ChBody self) -> ChVariablesBodyOwnMass &"""
        return _core.ChBody_VariablesBody(self)

    def Variables(self):
        r"""Variables(ChBody self) -> ChVariables &"""
        return _core.ChBody_Variables(self)

    def SetNoSpeedNoAcceleration(self):
        r"""SetNoSpeedNoAcceleration(ChBody self)"""
        return _core.ChBody_SetNoSpeedNoAcceleration(self)

    def SetCollisionModel(self, new_collision_model):
        r"""SetCollisionModel(ChBody self, std::shared_ptr< chrono::collision::ChCollisionModel > new_collision_model)"""
        return _core.ChBody_SetCollisionModel(self, new_collision_model)

    def GetCollisionModel(self):
        r"""GetCollisionModel(ChBody self) -> std::shared_ptr< chrono::collision::ChCollisionModel >"""
        return _core.ChBody_GetCollisionModel(self)

    def SyncCollisionModels(self):
        r"""SyncCollisionModels(ChBody self)"""
        return _core.ChBody_SyncCollisionModels(self)

    def AddCollisionModelsToSystem(self):
        r"""AddCollisionModelsToSystem(ChBody self)"""
        return _core.ChBody_AddCollisionModelsToSystem(self)

    def RemoveCollisionModelsFromSystem(self):
        r"""RemoveCollisionModelsFromSystem(ChBody self)"""
        return _core.ChBody_RemoveCollisionModelsFromSystem(self)

    def RecomputeCollisionModel(self):
        r"""RecomputeCollisionModel(ChBody self) -> bool"""
        return _core.ChBody_RecomputeCollisionModel(self)

    def GetLastCollPos(self):
        r"""GetLastCollPos(ChBody self) -> ChCoordsysD"""
        return _core.ChBody_GetLastCollPos(self)

    def SynchronizeLastCollPos(self):
        r"""SynchronizeLastCollPos(ChBody self)"""
        return _core.ChBody_SynchronizeLastCollPos(self)

    def GetFrame_COG_to_abs(self):
        r"""GetFrame_COG_to_abs(ChBody self) -> ChFrameMovingD"""
        return _core.ChBody_GetFrame_COG_to_abs(self)

    def GetFrame_REF_to_abs(self):
        r"""GetFrame_REF_to_abs(ChBody self) -> ChFrameMovingD"""
        return _core.ChBody_GetFrame_REF_to_abs(self)

    def GetAssetsFrame(self, nclone=0):
        r"""GetAssetsFrame(ChBody self, unsigned int nclone=0) -> ChFrameD"""
        return _core.ChBody_GetAssetsFrame(self, nclone)

    def GetTotalAABB(self, bbmin, bbmax):
        r"""GetTotalAABB(ChBody self, ChVectorD bbmin, ChVectorD bbmax)"""
        return _core.ChBody_GetTotalAABB(self, bbmin, bbmax)

    def StreamINstate(self, mstream):
        r"""StreamINstate(ChBody self, ChStreamInBinary mstream)"""
        return _core.ChBody_StreamINstate(self, mstream)

    def StreamOUTstate(self, mstream):
        r"""StreamOUTstate(ChBody self, ChStreamOutBinary mstream)"""
        return _core.ChBody_StreamOUTstate(self, mstream)

    def GetContactMethod(self):
        r"""GetContactMethod(ChBody self) -> chrono::ChMaterialSurface::ContactMethod"""
        return _core.ChBody_GetContactMethod(self)

    def GetMaterialSurfaceNSC(self):
        r"""GetMaterialSurfaceNSC(ChBody self) -> std::shared_ptr< chrono::ChMaterialSurfaceNSC >"""
        return _core.ChBody_GetMaterialSurfaceNSC(self)

    def GetMaterialSurfaceSMC(self):
        r"""GetMaterialSurfaceSMC(ChBody self) -> std::shared_ptr< chrono::ChMaterialSurfaceSMC >"""
        return _core.ChBody_GetMaterialSurfaceSMC(self)

    def SetMaterialSurface(self, mnewsurf):
        r"""SetMaterialSurface(ChBody self, std::shared_ptr< chrono::ChMaterialSurface > const & mnewsurf)"""
        return _core.ChBody_SetMaterialSurface(self, mnewsurf)

    def SetDensity(self, mdensity):
        r"""SetDensity(ChBody self, float mdensity)"""
        return _core.ChBody_SetDensity(self, mdensity)

    def AddMarker(self, amarker):
        r"""AddMarker(ChBody self, std::shared_ptr< chrono::ChMarker > amarker)"""
        return _core.ChBody_AddMarker(self, amarker)

    def AddForce(self, aforce):
        r"""AddForce(ChBody self, std::shared_ptr< chrono::ChForce > aforce)"""
        return _core.ChBody_AddForce(self, aforce)

    def RemoveMarker(self, amarker):
        r"""RemoveMarker(ChBody self, std::shared_ptr< chrono::ChMarker > amarker)"""
        return _core.ChBody_RemoveMarker(self, amarker)

    def RemoveForce(self, aforce):
        r"""RemoveForce(ChBody self, std::shared_ptr< chrono::ChForce > aforce)"""
        return _core.ChBody_RemoveForce(self, aforce)

    def RemoveAllForces(self):
        r"""RemoveAllForces(ChBody self)"""
        return _core.ChBody_RemoveAllForces(self)

    def RemoveAllMarkers(self):
        r"""RemoveAllMarkers(ChBody self)"""
        return _core.ChBody_RemoveAllMarkers(self)

    def SearchMarker(self, m_name):
        r"""SearchMarker(ChBody self, char const * m_name) -> std::shared_ptr< chrono::ChMarker >"""
        return _core.ChBody_SearchMarker(self, m_name)

    def SearchForce(self, m_name):
        r"""SearchForce(ChBody self, char const * m_name) -> std::shared_ptr< chrono::ChForce >"""
        return _core.ChBody_SearchForce(self, m_name)

    def GetMarkerList(self):
        r"""GetMarkerList(ChBody self) -> std::vector< std::shared_ptr< chrono::ChMarker >,std::allocator< std::shared_ptr< chrono::ChMarker > > > const &"""
        return _core.ChBody_GetMarkerList(self)

    def GetForceList(self):
        r"""GetForceList(ChBody self) -> std::vector< std::shared_ptr< chrono::ChForce >,std::allocator< std::shared_ptr< chrono::ChForce > > > const &"""
        return _core.ChBody_GetForceList(self)

    def Point_World2Body(self, mpoint):
        r"""Point_World2Body(ChBody self, ChVectorD mpoint) -> ChVectorD"""
        return _core.ChBody_Point_World2Body(self, mpoint)

    def Point_Body2World(self, mpoint):
        r"""Point_Body2World(ChBody self, ChVectorD mpoint) -> ChVectorD"""
        return _core.ChBody_Point_Body2World(self, mpoint)

    def Dir_World2Body(self, mpoint):
        r"""Dir_World2Body(ChBody self, ChVectorD mpoint) -> ChVectorD"""
        return _core.ChBody_Dir_World2Body(self, mpoint)

    def Dir_Body2World(self, mpoint):
        r"""Dir_Body2World(ChBody self, ChVectorD mpoint) -> ChVectorD"""
        return _core.ChBody_Dir_Body2World(self, mpoint)

    def RelPoint_AbsSpeed(self, mrelpoint):
        r"""RelPoint_AbsSpeed(ChBody self, ChVectorD mrelpoint) -> ChVectorD"""
        return _core.ChBody_RelPoint_AbsSpeed(self, mrelpoint)

    def RelPoint_AbsAcc(self, mrelpoint):
        r"""RelPoint_AbsAcc(ChBody self, ChVectorD mrelpoint) -> ChVectorD"""
        return _core.ChBody_RelPoint_AbsAcc(self, mrelpoint)

    def SetMass(self, newmass):
        r"""SetMass(ChBody self, double newmass)"""
        return _core.ChBody_SetMass(self, newmass)

    def GetMass(self):
        r"""GetMass(ChBody self) -> double"""
        return _core.ChBody_GetMass(self)

    def SetInertia(self, newXInertia):
        r"""SetInertia(ChBody self, ChMatrix33D newXInertia)"""
        return _core.ChBody_SetInertia(self, newXInertia)

    def GetInertia(self):
        r"""GetInertia(ChBody self) -> ChMatrix33D"""
        return _core.ChBody_GetInertia(self)

    def SetInertiaXX(self, iner):
        r"""SetInertiaXX(ChBody self, ChVectorD iner)"""
        return _core.ChBody_SetInertiaXX(self, iner)

    def GetInertiaXX(self):
        r"""GetInertiaXX(ChBody self) -> ChVectorD"""
        return _core.ChBody_GetInertiaXX(self)

    def SetInertiaXY(self, iner):
        r"""SetInertiaXY(ChBody self, ChVectorD iner)"""
        return _core.ChBody_SetInertiaXY(self, iner)

    def GetInertiaXY(self):
        r"""GetInertiaXY(ChBody self) -> ChVectorD"""
        return _core.ChBody_GetInertiaXY(self)

    def SetMaxSpeed(self, m_max_speed):
        r"""SetMaxSpeed(ChBody self, float m_max_speed)"""
        return _core.ChBody_SetMaxSpeed(self, m_max_speed)

    def GetMaxSpeed(self):
        r"""GetMaxSpeed(ChBody self) -> float"""
        return _core.ChBody_GetMaxSpeed(self)

    def SetMaxWvel(self, m_max_wvel):
        r"""SetMaxWvel(ChBody self, float m_max_wvel)"""
        return _core.ChBody_SetMaxWvel(self, m_max_wvel)

    def GetMaxWvel(self):
        r"""GetMaxWvel(ChBody self) -> float"""
        return _core.ChBody_GetMaxWvel(self)

    def ClampSpeed(self):
        r"""ClampSpeed(ChBody self)"""
        return _core.ChBody_ClampSpeed(self)

    def SetSleepTime(self, m_t):
        r"""SetSleepTime(ChBody self, float m_t)"""
        return _core.ChBody_SetSleepTime(self, m_t)

    def GetSleepTime(self):
        r"""GetSleepTime(ChBody self) -> float"""
        return _core.ChBody_GetSleepTime(self)

    def SetSleepMinSpeed(self, m_t):
        r"""SetSleepMinSpeed(ChBody self, float m_t)"""
        return _core.ChBody_SetSleepMinSpeed(self, m_t)

    def GetSleepMinSpeed(self):
        r"""GetSleepMinSpeed(ChBody self) -> float"""
        return _core.ChBody_GetSleepMinSpeed(self)

    def SetSleepMinWvel(self, m_t):
        r"""SetSleepMinWvel(ChBody self, float m_t)"""
        return _core.ChBody_SetSleepMinWvel(self, m_t)

    def GetSleepMinWvel(self):
        r"""GetSleepMinWvel(ChBody self) -> float"""
        return _core.ChBody_GetSleepMinWvel(self)

    def ComputeQInertia(self, mQInertia):
        r"""ComputeQInertia(ChBody self, ChMatrix44< > & mQInertia)"""
        return _core.ChBody_ComputeQInertia(self, mQInertia)

    def ComputeGyro(self):
        r"""ComputeGyro(ChBody self)"""
        return _core.ChBody_ComputeGyro(self)

    def Add_as_lagrangian_force(self, force, appl_point, local, mQf):
        r"""Add_as_lagrangian_force(ChBody self, ChVectorD force, ChVectorD appl_point, bool local, chrono::ChVectorN< double,7 > & mQf)"""
        return _core.ChBody_Add_as_lagrangian_force(self, force, appl_point, local, mQf)

    def Add_as_lagrangian_torque(self, torque, local, mQf):
        r"""Add_as_lagrangian_torque(ChBody self, ChVectorD torque, bool local, chrono::ChVectorN< double,7 > & mQf)"""
        return _core.ChBody_Add_as_lagrangian_torque(self, torque, local, mQf)

    def Accumulate_force(self, force, appl_point, local):
        r"""Accumulate_force(ChBody self, ChVectorD force, ChVectorD appl_point, bool local)"""
        return _core.ChBody_Accumulate_force(self, force, appl_point, local)

    def Accumulate_torque(self, torque, local):
        r"""Accumulate_torque(ChBody self, ChVectorD torque, bool local)"""
        return _core.ChBody_Accumulate_torque(self, torque, local)

    def Empty_forces_accumulators(self):
        r"""Empty_forces_accumulators(ChBody self)"""
        return _core.ChBody_Empty_forces_accumulators(self)

    def Get_accumulated_force(self):
        r"""Get_accumulated_force(ChBody self) -> ChVectorD"""
        return _core.ChBody_Get_accumulated_force(self)

    def Get_accumulated_torque(self):
        r"""Get_accumulated_torque(ChBody self) -> ChVectorD"""
        return _core.ChBody_Get_accumulated_torque(self)

    def Get_Scr_force(self):
        r"""Get_Scr_force(ChBody self) -> ChVectorD"""
        return _core.ChBody_Get_Scr_force(self)

    def Get_Scr_torque(self):
        r"""Get_Scr_torque(ChBody self) -> ChVectorD"""
        return _core.ChBody_Get_Scr_torque(self)

    def Set_Scr_force(self, mf):
        r"""Set_Scr_force(ChBody self, ChVectorD mf)"""
        return _core.ChBody_Set_Scr_force(self, mf)

    def Set_Scr_torque(self, mf):
        r"""Set_Scr_torque(ChBody self, ChVectorD mf)"""
        return _core.ChBody_Set_Scr_torque(self, mf)

    def Accumulate_script_force(self, force, appl_point, local):
        r"""Accumulate_script_force(ChBody self, ChVectorD force, ChVectorD appl_point, bool local)"""
        return _core.ChBody_Accumulate_script_force(self, force, appl_point, local)

    def Accumulate_script_torque(self, torque, local):
        r"""Accumulate_script_torque(ChBody self, ChVectorD torque, bool local)"""
        return _core.ChBody_Accumulate_script_torque(self, torque, local)

    def Get_gyro(self):
        r"""Get_gyro(ChBody self) -> ChVectorD"""
        return _core.ChBody_Get_gyro(self)

    def Get_Xforce(self):
        r"""Get_Xforce(ChBody self) -> ChVectorD"""
        return _core.ChBody_Get_Xforce(self)

    def Get_Xtorque(self):
        r"""Get_Xtorque(ChBody self) -> ChVectorD"""
        return _core.ChBody_Get_Xtorque(self)

    def UpdateMarkers(self, mytime):
        r"""UpdateMarkers(ChBody self, double mytime)"""
        return _core.ChBody_UpdateMarkers(self, mytime)

    def UpdateForces(self, mytime):
        r"""UpdateForces(ChBody self, double mytime)"""
        return _core.ChBody_UpdateForces(self, mytime)

    def UpdateTime(self, mytime):
        r"""UpdateTime(ChBody self, double mytime)"""
        return _core.ChBody_UpdateTime(self, mytime)

    def Update(self, *args):
        r"""
        Update(ChBody self, double mytime, bool update_assets=True)
        Update(ChBody self, bool update_assets=True)
        """
        return _core.ChBody_Update(self, *args)

    def GetMaterialSurface(self):
        r"""GetMaterialSurface(ChBody self) -> std::shared_ptr< chrono::ChMaterialSurface > &"""
        return _core.ChBody_GetMaterialSurface(self)

    def GetContactForce(self):
        r"""GetContactForce(ChBody self) -> ChVectorD"""
        return _core.ChBody_GetContactForce(self)

    def GetContactTorque(self):
        r"""GetContactTorque(ChBody self) -> ChVectorD"""
        return _core.ChBody_GetContactTorque(self)

    def GetPhysicsItem(self):
        r"""GetPhysicsItem(ChBody self) -> ChPhysicsItem"""
        return _core.ChBody_GetPhysicsItem(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChBody self, ChArchiveOut & marchive)"""
        return _core.ChBody_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChBody self, chrono::ChArchiveIn & marchive)"""
        return _core.ChBody_ArchiveIN(self, marchive)

    def LoadableGetVariables(self, mvars):
        r"""LoadableGetVariables(ChBody self, std::vector< ChVariables *,std::allocator< ChVariables * > > & mvars)"""
        return _core.ChBody_LoadableGetVariables(self, mvars)

    def LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""LoadableStateIncrement(ChBody self, unsigned int const off_x, ChState x_new, ChState x, unsigned int const off_v, ChStateDelta Dv)"""
        return _core.ChBody_LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def LoadableGetStateBlock_x(self, block_offset, mD):
        r"""LoadableGetStateBlock_x(ChBody self, int block_offset, ChState mD)"""
        return _core.ChBody_LoadableGetStateBlock_x(self, block_offset, mD)

    def LoadableGetStateBlock_w(self, block_offset, mD):
        r"""LoadableGetStateBlock_w(ChBody self, int block_offset, ChStateDelta mD)"""
        return _core.ChBody_LoadableGetStateBlock_w(self, block_offset, mD)

    def ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w):
        r"""ComputeNF(ChBody self, double const U, double const V, double const W, ChVectorDynamicD Qi, double & detJ, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _core.ChBody_ComputeNF(self, U, V, W, Qi, detJ, F, state_x, state_w)

# Register ChBody in _core:
_core.ChBody_swigregister(ChBody)

class ChBodyAuxRef(ChBody):
    r"""Proxy of C++ chrono::ChBodyAuxRef class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChBodyAuxRef self, chrono::ChMaterialSurface::ContactMethod contact_method=NSC) -> ChBodyAuxRef
        __init__(ChBodyAuxRef self, std::shared_ptr< chrono::collision::ChCollisionModel > new_coll_model, chrono::ChMaterialSurface::ContactMethod contact_method=NSC) -> ChBodyAuxRef
        __init__(ChBodyAuxRef self, ChBodyAuxRef other) -> ChBodyAuxRef
        """
        _core.ChBodyAuxRef_swiginit(self, _core.new_ChBodyAuxRef(*args))
    __swig_destroy__ = _core.delete_ChBodyAuxRef

    def Clone(self):
        r"""Clone(ChBodyAuxRef self) -> ChBodyAuxRef"""
        return _core.ChBodyAuxRef_Clone(self)

    def SetFrame_REF_to_abs(self, mfra):
        r"""SetFrame_REF_to_abs(ChBodyAuxRef self, ChFrameD mfra)"""
        return _core.ChBodyAuxRef_SetFrame_REF_to_abs(self, mfra)

    def GetFrame_REF_to_abs(self):
        r"""GetFrame_REF_to_abs(ChBodyAuxRef self) -> ChFrameMovingD"""
        return _core.ChBodyAuxRef_GetFrame_REF_to_abs(self)

    def SetFrame_COG_to_REF(self, mloc):
        r"""SetFrame_COG_to_REF(ChBodyAuxRef self, ChFrameD mloc)"""
        return _core.ChBodyAuxRef_SetFrame_COG_to_REF(self, mloc)

    def GetFrame_COG_to_REF(self):
        r"""GetFrame_COG_to_REF(ChBodyAuxRef self) -> ChFrameD"""
        return _core.ChBodyAuxRef_GetFrame_COG_to_REF(self)

    def SetFrame_REF_to_COG(self, mloc):
        r"""SetFrame_REF_to_COG(ChBodyAuxRef self, ChFrameD mloc)"""
        return _core.ChBodyAuxRef_SetFrame_REF_to_COG(self, mloc)

    def GetFrame_REF_to_COG(self):
        r"""GetFrame_REF_to_COG(ChBodyAuxRef self) -> ChFrameD"""
        return _core.ChBodyAuxRef_GetFrame_REF_to_COG(self)

    def Update(self, update_assets=True):
        r"""Update(ChBodyAuxRef self, bool update_assets=True)"""
        return _core.ChBodyAuxRef_Update(self, update_assets)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChBodyAuxRef self, ChArchiveOut & marchive)"""
        return _core.ChBodyAuxRef_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChBodyAuxRef self, chrono::ChArchiveIn & marchive)"""
        return _core.ChBodyAuxRef_ArchiveIN(self, marchive)

# Register ChBodyAuxRef in _core:
_core.ChBodyAuxRef_swigregister(ChBodyAuxRef)
BODY_DOF = cvar.BODY_DOF
BODY_QDOF = cvar.BODY_QDOF
BODY_ROT = cvar.BODY_ROT

class ChBodyEasySphere(ChBody):
    r"""Proxy of C++ chrono::ChBodyEasySphere class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChBodyEasySphere self, double radius, double mdensity, bool collide=False, bool visual_asset=True, chrono::ChMaterialSurface::ContactMethod contact_method=NSC, std::shared_ptr< chrono::collision::ChCollisionModel > collision_model=chrono_types::make_shared< collision::ChModelBullet >()) -> ChBodyEasySphere"""
        _core.ChBodyEasySphere_swiginit(self, _core.new_ChBodyEasySphere(*args))
    __swig_destroy__ = _core.delete_ChBodyEasySphere

# Register ChBodyEasySphere in _core:
_core.ChBodyEasySphere_swigregister(ChBodyEasySphere)

class ChBodyEasyEllipsoid(ChBody):
    r"""Proxy of C++ chrono::ChBodyEasyEllipsoid class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChBodyEasyEllipsoid self, ChVectorD radius, double mdensity, bool collide=False, bool visual_asset=True, chrono::ChMaterialSurface::ContactMethod contact_method=NSC, std::shared_ptr< chrono::collision::ChCollisionModel > collision_model=chrono_types::make_shared< collision::ChModelBullet >()) -> ChBodyEasyEllipsoid"""
        _core.ChBodyEasyEllipsoid_swiginit(self, _core.new_ChBodyEasyEllipsoid(*args))
    __swig_destroy__ = _core.delete_ChBodyEasyEllipsoid

# Register ChBodyEasyEllipsoid in _core:
_core.ChBodyEasyEllipsoid_swigregister(ChBodyEasyEllipsoid)

class ChBodyEasyCylinder(ChBody):
    r"""Proxy of C++ chrono::ChBodyEasyCylinder class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChBodyEasyCylinder self, double radius, double height, double mdensity, bool collide=False, bool visual_asset=True, chrono::ChMaterialSurface::ContactMethod contact_method=NSC, std::shared_ptr< chrono::collision::ChCollisionModel > collision_model=chrono_types::make_shared< collision::ChModelBullet >()) -> ChBodyEasyCylinder"""
        _core.ChBodyEasyCylinder_swiginit(self, _core.new_ChBodyEasyCylinder(*args))
    __swig_destroy__ = _core.delete_ChBodyEasyCylinder

# Register ChBodyEasyCylinder in _core:
_core.ChBodyEasyCylinder_swigregister(ChBodyEasyCylinder)

class ChBodyEasyBox(ChBody):
    r"""Proxy of C++ chrono::ChBodyEasyBox class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChBodyEasyBox self, double Xsize, double Ysize, double Zsize, double mdensity, bool collide=False, bool visual_asset=True, chrono::ChMaterialSurface::ContactMethod contact_method=NSC, std::shared_ptr< chrono::collision::ChCollisionModel > collision_model=chrono_types::make_shared< collision::ChModelBullet >()) -> ChBodyEasyBox"""
        _core.ChBodyEasyBox_swiginit(self, _core.new_ChBodyEasyBox(*args))
    __swig_destroy__ = _core.delete_ChBodyEasyBox

# Register ChBodyEasyBox in _core:
_core.ChBodyEasyBox_swigregister(ChBodyEasyBox)

class ChBodyEasyConvexHull(ChBody):
    r"""Proxy of C++ chrono::ChBodyEasyConvexHull class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChBodyEasyConvexHull self, vector_ChVectorD points, double mdensity, bool collide=False, bool visual_asset=True, chrono::ChMaterialSurface::ContactMethod contact_method=NSC, std::shared_ptr< chrono::collision::ChCollisionModel > collision_model=chrono_types::make_shared< collision::ChModelBullet >()) -> ChBodyEasyConvexHull"""
        _core.ChBodyEasyConvexHull_swiginit(self, _core.new_ChBodyEasyConvexHull(*args))
    __swig_destroy__ = _core.delete_ChBodyEasyConvexHull

# Register ChBodyEasyConvexHull in _core:
_core.ChBodyEasyConvexHull_swigregister(ChBodyEasyConvexHull)

class ChBodyEasyConvexHullAuxRef(ChBodyAuxRef):
    r"""Proxy of C++ chrono::ChBodyEasyConvexHullAuxRef class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChBodyEasyConvexHullAuxRef self, vector_ChVectorD points, double mdensity, bool collide=False, bool visual_asset=True, chrono::ChMaterialSurface::ContactMethod contact_method=NSC, std::shared_ptr< chrono::collision::ChCollisionModel > collision_model=chrono_types::make_shared< collision::ChModelBullet >()) -> ChBodyEasyConvexHullAuxRef"""
        _core.ChBodyEasyConvexHullAuxRef_swiginit(self, _core.new_ChBodyEasyConvexHullAuxRef(*args))
    __swig_destroy__ = _core.delete_ChBodyEasyConvexHullAuxRef

# Register ChBodyEasyConvexHullAuxRef in _core:
_core.ChBodyEasyConvexHullAuxRef_swigregister(ChBodyEasyConvexHullAuxRef)

class ChBodyEasyMesh(ChBodyAuxRef):
    r"""Proxy of C++ chrono::ChBodyEasyMesh class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChBodyEasyMesh self, std::string const filename, double mdensity, bool compute_mass=True, bool collide=False, double sphere_swept=0.001, bool visual_asset=True, chrono::ChMaterialSurface::ContactMethod contact_method=NSC, std::shared_ptr< chrono::collision::ChCollisionModel > collision_model=chrono_types::make_shared< collision::ChModelBullet >()) -> ChBodyEasyMesh"""
        _core.ChBodyEasyMesh_swiginit(self, _core.new_ChBodyEasyMesh(*args))
    __swig_destroy__ = _core.delete_ChBodyEasyMesh

# Register ChBodyEasyMesh in _core:
_core.ChBodyEasyMesh_swigregister(ChBodyEasyMesh)

class ChBodyEasyClusterOfSpheres(ChBody):
    r"""Proxy of C++ chrono::ChBodyEasyClusterOfSpheres class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(ChBodyEasyClusterOfSpheres self, vector_ChVectorD positions, std::vector< double,std::allocator< double > > & radii, double mdensity, bool collide=False, bool visual_asset=True, chrono::ChMaterialSurface::ContactMethod contact_method=NSC, std::shared_ptr< chrono::collision::ChCollisionModel > collision_model=chrono_types::make_shared< collision::ChModelBullet >()) -> ChBodyEasyClusterOfSpheres"""
        _core.ChBodyEasyClusterOfSpheres_swiginit(self, _core.new_ChBodyEasyClusterOfSpheres(*args))
    __swig_destroy__ = _core.delete_ChBodyEasyClusterOfSpheres

# Register ChBodyEasyClusterOfSpheres in _core:
_core.ChBodyEasyClusterOfSpheres_swigregister(ChBodyEasyClusterOfSpheres)

class ChConveyor(ChPhysicsItem):
    r"""Proxy of C++ chrono::ChConveyor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChConveyor self, double xlength=1, double ythick=0.1, double zwidth=0.5) -> ChConveyor
        __init__(ChConveyor self, ChConveyor other) -> ChConveyor
        """
        _core.ChConveyor_swiginit(self, _core.new_ChConveyor(*args))
    __swig_destroy__ = _core.delete_ChConveyor

    def Clone(self):
        r"""Clone(ChConveyor self) -> ChConveyor"""
        return _core.ChConveyor_Clone(self)

    def SetSystem(self, m_system):
        r"""SetSystem(ChConveyor self, ChSystem m_system)"""
        return _core.ChConveyor_SetSystem(self, m_system)

    def SetConveyorSpeed(self, mspeed):
        r"""SetConveyorSpeed(ChConveyor self, double mspeed)"""
        return _core.ChConveyor_SetConveyorSpeed(self, mspeed)

    def GetConveyorSpeed(self):
        r"""GetConveyorSpeed(ChConveyor self) -> double"""
        return _core.ChConveyor_GetConveyorSpeed(self)

    def GetTruss(self):
        r"""GetTruss(ChConveyor self) -> ChBody"""
        return _core.ChConveyor_GetTruss(self)

    def GetPlate(self):
        r"""GetPlate(ChConveyor self) -> ChBody"""
        return _core.ChConveyor_GetPlate(self)

    def SetBodyFixed(self, mev):
        r"""SetBodyFixed(ChConveyor self, bool mev)"""
        return _core.ChConveyor_SetBodyFixed(self, mev)

    def GetBodyFixed(self):
        r"""GetBodyFixed(ChConveyor self) -> bool"""
        return _core.ChConveyor_GetBodyFixed(self)

    def GetCoord(self):
        r"""GetCoord(ChConveyor self) -> ChCoordsysD"""
        return _core.ChConveyor_GetCoord(self)

    def GetPos(self):
        r"""GetPos(ChConveyor self) -> ChVectorD"""
        return _core.ChConveyor_GetPos(self)

    def GetRot(self):
        r"""GetRot(ChConveyor self) -> ChQuaternionD"""
        return _core.ChConveyor_GetRot(self)

    def SetCoord(self, *args):
        r"""
        SetCoord(ChConveyor self, ChCoordsysD mcoord)
        SetCoord(ChConveyor self, ChVectorD mv, ChQuaternionD mq)
        """
        return _core.ChConveyor_SetCoord(self, *args)

    def SetRot(self, mrot):
        r"""SetRot(ChConveyor self, ChQuaternionD mrot)"""
        return _core.ChConveyor_SetRot(self, mrot)

    def SetPos(self, mpos):
        r"""SetPos(ChConveyor self, ChVectorD mpos)"""
        return _core.ChConveyor_SetPos(self, mpos)

    def GetMaterialSurface(self):
        r"""GetMaterialSurface(ChConveyor self) -> std::shared_ptr< chrono::ChMaterialSurface > &"""
        return _core.ChConveyor_GetMaterialSurface(self)

    def GetMaterialSurfaceNSC(self):
        r"""GetMaterialSurfaceNSC(ChConveyor self) -> std::shared_ptr< chrono::ChMaterialSurfaceNSC >"""
        return _core.ChConveyor_GetMaterialSurfaceNSC(self)

    def SetMaterialSurface(self, mnewsurf):
        r"""SetMaterialSurface(ChConveyor self, std::shared_ptr< chrono::ChMaterialSurface > const & mnewsurf)"""
        return _core.ChConveyor_SetMaterialSurface(self, mnewsurf)

    def GetDOF(self):
        r"""GetDOF(ChConveyor self) -> int"""
        return _core.ChConveyor_GetDOF(self)

    def GetDOF_w(self):
        r"""GetDOF_w(ChConveyor self) -> int"""
        return _core.ChConveyor_GetDOF_w(self)

    def GetDOC_c(self):
        r"""GetDOC_c(ChConveyor self) -> int"""
        return _core.ChConveyor_GetDOC_c(self)

    def IntStateGather(self, off_x, x, off_v, v, T):
        r"""IntStateGather(ChConveyor self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double & T)"""
        return _core.ChConveyor_IntStateGather(self, off_x, x, off_v, v, T)

    def IntStateScatter(self, off_x, x, off_v, v, T):
        r"""IntStateScatter(ChConveyor self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double const T)"""
        return _core.ChConveyor_IntStateScatter(self, off_x, x, off_v, v, T)

    def IntStateGatherAcceleration(self, off_a, a):
        r"""IntStateGatherAcceleration(ChConveyor self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChConveyor_IntStateGatherAcceleration(self, off_a, a)

    def IntStateScatterAcceleration(self, off_a, a):
        r"""IntStateScatterAcceleration(ChConveyor self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChConveyor_IntStateScatterAcceleration(self, off_a, a)

    def IntStateGatherReactions(self, off_L, L):
        r"""IntStateGatherReactions(ChConveyor self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChConveyor_IntStateGatherReactions(self, off_L, L)

    def IntStateScatterReactions(self, off_L, L):
        r"""IntStateScatterReactions(ChConveyor self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChConveyor_IntStateScatterReactions(self, off_L, L)

    def IntStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""IntStateIncrement(ChConveyor self, unsigned int const off_x, ChState x_new, ChState x, unsigned int const off_v, ChStateDelta Dv)"""
        return _core.ChConveyor_IntStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def IntLoadResidual_F(self, off, R, c):
        r"""IntLoadResidual_F(ChConveyor self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _core.ChConveyor_IntLoadResidual_F(self, off, R, c)

    def IntLoadResidual_Mv(self, off, R, w, c):
        r"""IntLoadResidual_Mv(ChConveyor self, unsigned int const off, ChVectorDynamicD R, ChVectorDynamicD w, double const c)"""
        return _core.ChConveyor_IntLoadResidual_Mv(self, off, R, w, c)

    def IntLoadResidual_CqL(self, off_L, R, L, c):
        r"""IntLoadResidual_CqL(ChConveyor self, unsigned int const off_L, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _core.ChConveyor_IntLoadResidual_CqL(self, off_L, R, L, c)

    def IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp):
        r"""IntLoadConstraint_C(ChConveyor self, unsigned int const off, ChVectorDynamicD Qc, double const c, bool do_clamp, double recovery_clamp)"""
        return _core.ChConveyor_IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp)

    def IntLoadConstraint_Ct(self, off, Qc, c):
        r"""IntLoadConstraint_Ct(ChConveyor self, unsigned int const off, ChVectorDynamicD Qc, double const c)"""
        return _core.ChConveyor_IntLoadConstraint_Ct(self, off, Qc, c)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChConveyor self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _core.ChConveyor_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChConveyor self, unsigned int const off_v, ChStateDelta v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChConveyor_IntFromDescriptor(self, off_v, v, off_L, L)

    def InjectVariables(self, mdescriptor):
        r"""InjectVariables(ChConveyor self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChConveyor_InjectVariables(self, mdescriptor)

    def VariablesFbReset(self):
        r"""VariablesFbReset(ChConveyor self)"""
        return _core.ChConveyor_VariablesFbReset(self)

    def VariablesFbLoadForces(self, factor=1):
        r"""VariablesFbLoadForces(ChConveyor self, double factor=1)"""
        return _core.ChConveyor_VariablesFbLoadForces(self, factor)

    def VariablesQbLoadSpeed(self):
        r"""VariablesQbLoadSpeed(ChConveyor self)"""
        return _core.ChConveyor_VariablesQbLoadSpeed(self)

    def VariablesFbIncrementMq(self):
        r"""VariablesFbIncrementMq(ChConveyor self)"""
        return _core.ChConveyor_VariablesFbIncrementMq(self)

    def VariablesQbSetSpeed(self, step=0):
        r"""VariablesQbSetSpeed(ChConveyor self, double step=0)"""
        return _core.ChConveyor_VariablesQbSetSpeed(self, step)

    def VariablesQbIncrementPosition(self, step):
        r"""VariablesQbIncrementPosition(ChConveyor self, double step)"""
        return _core.ChConveyor_VariablesQbIncrementPosition(self, step)

    def InjectConstraints(self, mdescriptor):
        r"""InjectConstraints(ChConveyor self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChConveyor_InjectConstraints(self, mdescriptor)

    def ConstraintsBiReset(self):
        r"""ConstraintsBiReset(ChConveyor self)"""
        return _core.ChConveyor_ConstraintsBiReset(self)

    def ConstraintsBiLoad_C(self, factor=1, recovery_clamp=0.1, do_clamp=False):
        r"""ConstraintsBiLoad_C(ChConveyor self, double factor=1, double recovery_clamp=0.1, bool do_clamp=False)"""
        return _core.ChConveyor_ConstraintsBiLoad_C(self, factor, recovery_clamp, do_clamp)

    def ConstraintsBiLoad_Ct(self, factor=1):
        r"""ConstraintsBiLoad_Ct(ChConveyor self, double factor=1)"""
        return _core.ChConveyor_ConstraintsBiLoad_Ct(self, factor)

    def ConstraintsBiLoad_Qc(self, factor=1):
        r"""ConstraintsBiLoad_Qc(ChConveyor self, double factor=1)"""
        return _core.ChConveyor_ConstraintsBiLoad_Qc(self, factor)

    def ConstraintsLoadJacobians(self):
        r"""ConstraintsLoadJacobians(ChConveyor self)"""
        return _core.ChConveyor_ConstraintsLoadJacobians(self)

    def ConstraintsFetch_react(self, factor=1):
        r"""ConstraintsFetch_react(ChConveyor self, double factor=1)"""
        return _core.ChConveyor_ConstraintsFetch_react(self, factor)

    def GetCollide(self):
        r"""GetCollide(ChConveyor self) -> bool"""
        return _core.ChConveyor_GetCollide(self)

    def SyncCollisionModels(self):
        r"""SyncCollisionModels(ChConveyor self)"""
        return _core.ChConveyor_SyncCollisionModels(self)

    def AddCollisionModelsToSystem(self):
        r"""AddCollisionModelsToSystem(ChConveyor self)"""
        return _core.ChConveyor_AddCollisionModelsToSystem(self)

    def RemoveCollisionModelsFromSystem(self):
        r"""RemoveCollisionModelsFromSystem(ChConveyor self)"""
        return _core.ChConveyor_RemoveCollisionModelsFromSystem(self)

    def Update(self, mytime, update_assets=True):
        r"""Update(ChConveyor self, double mytime, bool update_assets=True)"""
        return _core.ChConveyor_Update(self, mytime, update_assets)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChConveyor self, ChArchiveOut & marchive)"""
        return _core.ChConveyor_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChConveyor self, chrono::ChArchiveIn & marchive)"""
        return _core.ChConveyor_ArchiveIN(self, marchive)

# Register ChConveyor in _core:
_core.ChConveyor_swigregister(ChConveyor)

class ChParticleBase(ChFrameMovingD):
    r"""Proxy of C++ chrono::ChParticleBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChParticleBase

    def Variables(self):
        r"""Variables(ChParticleBase self) -> ChVariables &"""
        return _core.ChParticleBase_Variables(self)

# Register ChParticleBase in _core:
_core.ChParticleBase_swigregister(ChParticleBase)

class ChIndexedParticles(ChPhysicsItem):
    r"""Proxy of C++ chrono::ChIndexedParticles class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChIndexedParticles

    def GetNparticles(self):
        r"""GetNparticles(ChIndexedParticles self) -> size_t"""
        return _core.ChIndexedParticles_GetNparticles(self)

    def GetParticle(self, n):
        r"""GetParticle(ChIndexedParticles self, unsigned int n) -> ChParticleBase"""
        return _core.ChIndexedParticles_GetParticle(self, n)

    def ResizeNparticles(self, newsize):
        r"""ResizeNparticles(ChIndexedParticles self, int newsize)"""
        return _core.ChIndexedParticles_ResizeNparticles(self, newsize)

    def AddParticle(self, *args):
        r"""AddParticle(ChIndexedParticles self, ChCoordsysD initial_state=CSYSNORM)"""
        return _core.ChIndexedParticles_AddParticle(self, *args)

    def GetDOF(self):
        r"""GetDOF(ChIndexedParticles self) -> int"""
        return _core.ChIndexedParticles_GetDOF(self)

    def GetDOF_w(self):
        r"""GetDOF_w(ChIndexedParticles self) -> int"""
        return _core.ChIndexedParticles_GetDOF_w(self)

    def GetAssetsFrame(self, nclone=0):
        r"""GetAssetsFrame(ChIndexedParticles self, unsigned int nclone=0) -> ChFrameD"""
        return _core.ChIndexedParticles_GetAssetsFrame(self, nclone)

    def GetAssetsFrameNclones(self):
        r"""GetAssetsFrameNclones(ChIndexedParticles self) -> unsigned int"""
        return _core.ChIndexedParticles_GetAssetsFrameNclones(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChIndexedParticles self, ChArchiveOut & marchive)"""
        return _core.ChIndexedParticles_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChIndexedParticles self, chrono::ChArchiveIn & marchive)"""
        return _core.ChIndexedParticles_ArchiveIN(self, marchive)

# Register ChIndexedParticles in _core:
_core.ChIndexedParticles_swigregister(ChIndexedParticles)

class ChAparticle(ChParticleBase):
    r"""Proxy of C++ chrono::ChAparticle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChAparticle self) -> ChAparticle
        __init__(ChAparticle self, ChAparticle other) -> ChAparticle
        """
        _core.ChAparticle_swiginit(self, _core.new_ChAparticle(*args))
    __swig_destroy__ = _core.delete_ChAparticle

    def Variables(self):
        r"""Variables(ChAparticle self) -> ChVariables &"""
        return _core.ChAparticle_Variables(self)

    def GetContainer(self):
        r"""GetContainer(ChAparticle self) -> ChParticlesClones"""
        return _core.ChAparticle_GetContainer(self)

    def SetContainer(self, mc):
        r"""SetContainer(ChAparticle self, ChParticlesClones mc)"""
        return _core.ChAparticle_SetContainer(self, mc)

    def GetContactableType(self):
        r"""GetContactableType(ChAparticle self) -> ChContactable::eChContactableType"""
        return _core.ChAparticle_GetContactableType(self)

    def GetVariables1(self):
        r"""GetVariables1(ChAparticle self) -> ChVariables *"""
        return _core.ChAparticle_GetVariables1(self)

    def IsContactActive(self):
        r"""IsContactActive(ChAparticle self) -> bool"""
        return _core.ChAparticle_IsContactActive(self)

    def ContactableGet_ndof_x(self):
        r"""ContactableGet_ndof_x(ChAparticle self) -> int"""
        return _core.ChAparticle_ContactableGet_ndof_x(self)

    def ContactableGet_ndof_w(self):
        r"""ContactableGet_ndof_w(ChAparticle self) -> int"""
        return _core.ChAparticle_ContactableGet_ndof_w(self)

    def ContactableGetStateBlock_x(self, x):
        r"""ContactableGetStateBlock_x(ChAparticle self, ChState x)"""
        return _core.ChAparticle_ContactableGetStateBlock_x(self, x)

    def ContactableGetStateBlock_w(self, w):
        r"""ContactableGetStateBlock_w(ChAparticle self, ChStateDelta w)"""
        return _core.ChAparticle_ContactableGetStateBlock_w(self, w)

    def ContactableIncrementState(self, x, dw, x_new):
        r"""ContactableIncrementState(ChAparticle self, ChState x, ChStateDelta dw, ChState x_new)"""
        return _core.ChAparticle_ContactableIncrementState(self, x, dw, x_new)

    def GetMaterialSurface(self):
        r"""GetMaterialSurface(ChAparticle self) -> std::shared_ptr< chrono::ChMaterialSurface > &"""
        return _core.ChAparticle_GetMaterialSurface(self)

    def GetContactPoint(self, loc_point, state_x):
        r"""GetContactPoint(ChAparticle self, ChVectorD loc_point, ChState state_x) -> ChVectorD"""
        return _core.ChAparticle_GetContactPoint(self, loc_point, state_x)

    def GetContactPointSpeed(self, *args):
        r"""
        GetContactPointSpeed(ChAparticle self, ChVectorD loc_point, ChState state_x, ChStateDelta state_w) -> ChVectorD
        GetContactPointSpeed(ChAparticle self, ChVectorD abs_point) -> ChVectorD
        """
        return _core.ChAparticle_GetContactPointSpeed(self, *args)

    def GetCsysForCollisionModel(self):
        r"""GetCsysForCollisionModel(ChAparticle self) -> ChCoordsysD"""
        return _core.ChAparticle_GetCsysForCollisionModel(self)

    def ContactForceLoadResidual_F(self, F, abs_point, R):
        r"""ContactForceLoadResidual_F(ChAparticle self, ChVectorD F, ChVectorD abs_point, ChVectorDynamicD R)"""
        return _core.ChAparticle_ContactForceLoadResidual_F(self, F, abs_point, R)

    def ContactForceLoadQ(self, F, point, state_x, Q, offset):
        r"""ContactForceLoadQ(ChAparticle self, ChVectorD F, ChVectorD point, ChState state_x, ChVectorDynamicD Q, int offset)"""
        return _core.ChAparticle_ContactForceLoadQ(self, F, point, state_x, Q, offset)

    def ComputeJacobianForContactPart(self, abs_point, contact_plane, jacobian_tuple_N, jacobian_tuple_U, jacobian_tuple_V, second):
        r"""ComputeJacobianForContactPart(ChAparticle self, ChVectorD abs_point, ChMatrix33D contact_plane, ChVariableTupleCarrier_1vars< 6 >::type_constraint_tuple & jacobian_tuple_N, ChVariableTupleCarrier_1vars< 6 >::type_constraint_tuple & jacobian_tuple_U, ChVariableTupleCarrier_1vars< 6 >::type_constraint_tuple & jacobian_tuple_V, bool second)"""
        return _core.ChAparticle_ComputeJacobianForContactPart(self, abs_point, contact_plane, jacobian_tuple_N, jacobian_tuple_U, jacobian_tuple_V, second)

    def ComputeJacobianForRollingContactPart(self, abs_point, contact_plane, jacobian_tuple_N, jacobian_tuple_U, jacobian_tuple_V, second):
        r"""ComputeJacobianForRollingContactPart(ChAparticle self, ChVectorD abs_point, ChMatrix33D contact_plane, ChVariableTupleCarrier_1vars< 6 >::type_constraint_tuple & jacobian_tuple_N, ChVariableTupleCarrier_1vars< 6 >::type_constraint_tuple & jacobian_tuple_U, ChVariableTupleCarrier_1vars< 6 >::type_constraint_tuple & jacobian_tuple_V, bool second)"""
        return _core.ChAparticle_ComputeJacobianForRollingContactPart(self, abs_point, contact_plane, jacobian_tuple_N, jacobian_tuple_U, jacobian_tuple_V, second)

    def GetContactableMass(self):
        r"""GetContactableMass(ChAparticle self) -> double"""
        return _core.ChAparticle_GetContactableMass(self)

    def GetPhysicsItem(self):
        r"""GetPhysicsItem(ChAparticle self) -> ChPhysicsItem"""
        return _core.ChAparticle_GetPhysicsItem(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChAparticle self, ChArchiveOut & marchive)"""
        return _core.ChAparticle_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChAparticle self, chrono::ChArchiveIn & marchive)"""
        return _core.ChAparticle_ArchiveIN(self, marchive)
    container = property(_core.ChAparticle_container_get, _core.ChAparticle_container_set, doc=r"""container : p.chrono::ChParticlesClones""")
    variables = property(_core.ChAparticle_variables_get, _core.ChAparticle_variables_set, doc=r"""variables : ChVariablesBodySharedMass""")
    collision_model = property(_core.ChAparticle_collision_model_get, _core.ChAparticle_collision_model_set, doc=r"""collision_model : p.chrono::collision::ChCollisionModel""")
    UserForce = property(_core.ChAparticle_UserForce_get, _core.ChAparticle_UserForce_set, doc=r"""UserForce : chrono::ChVector<()>""")
    UserTorque = property(_core.ChAparticle_UserTorque_get, _core.ChAparticle_UserTorque_set, doc=r"""UserTorque : chrono::ChVector<()>""")

# Register ChAparticle in _core:
_core.ChAparticle_swigregister(ChAparticle)

class ChParticlesClones(ChIndexedParticles):
    r"""Proxy of C++ chrono::ChParticlesClones class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChParticlesClones self) -> ChParticlesClones
        __init__(ChParticlesClones self, ChParticlesClones other) -> ChParticlesClones
        """
        _core.ChParticlesClones_swiginit(self, _core.new_ChParticlesClones(*args))
    __swig_destroy__ = _core.delete_ChParticlesClones

    def Clone(self):
        r"""Clone(ChParticlesClones self) -> ChParticlesClones"""
        return _core.ChParticlesClones_Clone(self)

    def SetCollide(self, mcoll):
        r"""SetCollide(ChParticlesClones self, bool mcoll)"""
        return _core.ChParticlesClones_SetCollide(self, mcoll)

    def GetCollide(self):
        r"""GetCollide(ChParticlesClones self) -> bool"""
        return _core.ChParticlesClones_GetCollide(self)

    def SetLimitSpeed(self, mlimit):
        r"""SetLimitSpeed(ChParticlesClones self, bool mlimit)"""
        return _core.ChParticlesClones_SetLimitSpeed(self, mlimit)

    def GetLimitSpeed(self):
        r"""GetLimitSpeed(ChParticlesClones self) -> bool"""
        return _core.ChParticlesClones_GetLimitSpeed(self)

    def GetNparticles(self):
        r"""GetNparticles(ChParticlesClones self) -> size_t"""
        return _core.ChParticlesClones_GetNparticles(self)

    def GetParticle(self, n):
        r"""GetParticle(ChParticlesClones self, unsigned int n) -> ChParticleBase"""
        return _core.ChParticlesClones_GetParticle(self, n)

    def ResizeNparticles(self, newsize):
        r"""ResizeNparticles(ChParticlesClones self, int newsize)"""
        return _core.ChParticlesClones_ResizeNparticles(self, newsize)

    def AddParticle(self, *args):
        r"""AddParticle(ChParticlesClones self, ChCoordsysD initial_state=CSYSNORM)"""
        return _core.ChParticlesClones_AddParticle(self, *args)

    def SetMaterialSurface(self, mnewsurf):
        r"""SetMaterialSurface(ChParticlesClones self, std::shared_ptr< chrono::ChMaterialSurface > const & mnewsurf)"""
        return _core.ChParticlesClones_SetMaterialSurface(self, mnewsurf)

    def GetMaterialSurface(self):
        r"""GetMaterialSurface(ChParticlesClones self) -> std::shared_ptr< chrono::ChMaterialSurface > &"""
        return _core.ChParticlesClones_GetMaterialSurface(self)

    def IntStateGather(self, off_x, x, off_v, v, T):
        r"""IntStateGather(ChParticlesClones self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double & T)"""
        return _core.ChParticlesClones_IntStateGather(self, off_x, x, off_v, v, T)

    def IntStateScatter(self, off_x, x, off_v, v, T):
        r"""IntStateScatter(ChParticlesClones self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double const T)"""
        return _core.ChParticlesClones_IntStateScatter(self, off_x, x, off_v, v, T)

    def IntStateGatherAcceleration(self, off_a, a):
        r"""IntStateGatherAcceleration(ChParticlesClones self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChParticlesClones_IntStateGatherAcceleration(self, off_a, a)

    def IntStateScatterAcceleration(self, off_a, a):
        r"""IntStateScatterAcceleration(ChParticlesClones self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChParticlesClones_IntStateScatterAcceleration(self, off_a, a)

    def IntStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""IntStateIncrement(ChParticlesClones self, unsigned int const off_x, ChState x_new, ChState x, unsigned int const off_v, ChStateDelta Dv)"""
        return _core.ChParticlesClones_IntStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def IntLoadResidual_F(self, off, R, c):
        r"""IntLoadResidual_F(ChParticlesClones self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _core.ChParticlesClones_IntLoadResidual_F(self, off, R, c)

    def IntLoadResidual_Mv(self, off, R, w, c):
        r"""IntLoadResidual_Mv(ChParticlesClones self, unsigned int const off, ChVectorDynamicD R, ChVectorDynamicD w, double const c)"""
        return _core.ChParticlesClones_IntLoadResidual_Mv(self, off, R, w, c)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChParticlesClones self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _core.ChParticlesClones_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChParticlesClones self, unsigned int const off_v, ChStateDelta v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChParticlesClones_IntFromDescriptor(self, off_v, v, off_L, L)

    def VariablesFbReset(self):
        r"""VariablesFbReset(ChParticlesClones self)"""
        return _core.ChParticlesClones_VariablesFbReset(self)

    def VariablesFbLoadForces(self, factor=1):
        r"""VariablesFbLoadForces(ChParticlesClones self, double factor=1)"""
        return _core.ChParticlesClones_VariablesFbLoadForces(self, factor)

    def VariablesQbLoadSpeed(self):
        r"""VariablesQbLoadSpeed(ChParticlesClones self)"""
        return _core.ChParticlesClones_VariablesQbLoadSpeed(self)

    def VariablesFbIncrementMq(self):
        r"""VariablesFbIncrementMq(ChParticlesClones self)"""
        return _core.ChParticlesClones_VariablesFbIncrementMq(self)

    def VariablesQbSetSpeed(self, step=0):
        r"""VariablesQbSetSpeed(ChParticlesClones self, double step=0)"""
        return _core.ChParticlesClones_VariablesQbSetSpeed(self, step)

    def VariablesQbIncrementPosition(self, step):
        r"""VariablesQbIncrementPosition(ChParticlesClones self, double step)"""
        return _core.ChParticlesClones_VariablesQbIncrementPosition(self, step)

    def InjectVariables(self, mdescriptor):
        r"""InjectVariables(ChParticlesClones self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChParticlesClones_InjectVariables(self, mdescriptor)

    def SetNoSpeedNoAcceleration(self):
        r"""SetNoSpeedNoAcceleration(ChParticlesClones self)"""
        return _core.ChParticlesClones_SetNoSpeedNoAcceleration(self)

    def GetCollisionModel(self):
        r"""GetCollisionModel(ChParticlesClones self) -> ChCollisionModel"""
        return _core.ChParticlesClones_GetCollisionModel(self)

    def SyncCollisionModels(self):
        r"""SyncCollisionModels(ChParticlesClones self)"""
        return _core.ChParticlesClones_SyncCollisionModels(self)

    def AddCollisionModelsToSystem(self):
        r"""AddCollisionModelsToSystem(ChParticlesClones self)"""
        return _core.ChParticlesClones_AddCollisionModelsToSystem(self)

    def RemoveCollisionModelsFromSystem(self):
        r"""RemoveCollisionModelsFromSystem(ChParticlesClones self)"""
        return _core.ChParticlesClones_RemoveCollisionModelsFromSystem(self)

    def UpdateParticleCollisionModels(self):
        r"""UpdateParticleCollisionModels(ChParticlesClones self)"""
        return _core.ChParticlesClones_UpdateParticleCollisionModels(self)

    def SetMass(self, newmass):
        r"""SetMass(ChParticlesClones self, double newmass)"""
        return _core.ChParticlesClones_SetMass(self, newmass)

    def GetMass(self):
        r"""GetMass(ChParticlesClones self) -> double"""
        return _core.ChParticlesClones_GetMass(self)

    def SetInertia(self, newXInertia):
        r"""SetInertia(ChParticlesClones self, ChMatrix33D newXInertia)"""
        return _core.ChParticlesClones_SetInertia(self, newXInertia)

    def SetInertiaXX(self, iner):
        r"""SetInertiaXX(ChParticlesClones self, ChVectorD iner)"""
        return _core.ChParticlesClones_SetInertiaXX(self, iner)

    def GetInertiaXX(self):
        r"""GetInertiaXX(ChParticlesClones self) -> ChVectorD"""
        return _core.ChParticlesClones_GetInertiaXX(self)

    def SetInertiaXY(self, iner):
        r"""SetInertiaXY(ChParticlesClones self, ChVectorD iner)"""
        return _core.ChParticlesClones_SetInertiaXY(self, iner)

    def GetInertiaXY(self):
        r"""GetInertiaXY(ChParticlesClones self) -> ChVectorD"""
        return _core.ChParticlesClones_GetInertiaXY(self)

    def SetMaxSpeed(self, m_max_speed):
        r"""SetMaxSpeed(ChParticlesClones self, float m_max_speed)"""
        return _core.ChParticlesClones_SetMaxSpeed(self, m_max_speed)

    def GetMaxSpeed(self):
        r"""GetMaxSpeed(ChParticlesClones self) -> float"""
        return _core.ChParticlesClones_GetMaxSpeed(self)

    def SetMaxWvel(self, m_max_wvel):
        r"""SetMaxWvel(ChParticlesClones self, float m_max_wvel)"""
        return _core.ChParticlesClones_SetMaxWvel(self, m_max_wvel)

    def GetMaxWvel(self):
        r"""GetMaxWvel(ChParticlesClones self) -> float"""
        return _core.ChParticlesClones_GetMaxWvel(self)

    def ClampSpeed(self):
        r"""ClampSpeed(ChParticlesClones self)"""
        return _core.ChParticlesClones_ClampSpeed(self)

    def SetSleepTime(self, m_t):
        r"""SetSleepTime(ChParticlesClones self, float m_t)"""
        return _core.ChParticlesClones_SetSleepTime(self, m_t)

    def GetSleepTime(self):
        r"""GetSleepTime(ChParticlesClones self) -> float"""
        return _core.ChParticlesClones_GetSleepTime(self)

    def SetSleepMinSpeed(self, m_t):
        r"""SetSleepMinSpeed(ChParticlesClones self, float m_t)"""
        return _core.ChParticlesClones_SetSleepMinSpeed(self, m_t)

    def GetSleepMinSpeed(self):
        r"""GetSleepMinSpeed(ChParticlesClones self) -> float"""
        return _core.ChParticlesClones_GetSleepMinSpeed(self)

    def SetSleepMinWvel(self, m_t):
        r"""SetSleepMinWvel(ChParticlesClones self, float m_t)"""
        return _core.ChParticlesClones_SetSleepMinWvel(self, m_t)

    def GetSleepMinWvel(self):
        r"""GetSleepMinWvel(ChParticlesClones self) -> float"""
        return _core.ChParticlesClones_GetSleepMinWvel(self)

    def Update(self, *args):
        r"""
        Update(ChParticlesClones self, double mytime, bool update_assets=True)
        Update(ChParticlesClones self, bool update_assets=True)
        """
        return _core.ChParticlesClones_Update(self, *args)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChParticlesClones self, ChArchiveOut & marchive)"""
        return _core.ChParticlesClones_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChParticlesClones self, chrono::ChArchiveIn & marchive)"""
        return _core.ChParticlesClones_ArchiveIN(self, marchive)

# Register ChParticlesClones in _core:
_core.ChParticlesClones_swigregister(ChParticlesClones)

class ChLinkBase(ChPhysicsItem):
    r"""Proxy of C++ chrono::ChLinkBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChLinkBase

    def IsValid(self):
        r"""IsValid(ChLinkBase self) -> bool"""
        return _core.ChLinkBase_IsValid(self)

    def SetValid(self, mon):
        r"""SetValid(ChLinkBase self, bool mon)"""
        return _core.ChLinkBase_SetValid(self, mon)

    def IsDisabled(self):
        r"""IsDisabled(ChLinkBase self) -> bool"""
        return _core.ChLinkBase_IsDisabled(self)

    def SetDisabled(self, mdis):
        r"""SetDisabled(ChLinkBase self, bool mdis)"""
        return _core.ChLinkBase_SetDisabled(self, mdis)

    def IsBroken(self):
        r"""IsBroken(ChLinkBase self) -> bool"""
        return _core.ChLinkBase_IsBroken(self)

    def SetBroken(self, mon):
        r"""SetBroken(ChLinkBase self, bool mon)"""
        return _core.ChLinkBase_SetBroken(self, mon)

    def IsActive(self):
        r"""IsActive(ChLinkBase self) -> bool"""
        return _core.ChLinkBase_IsActive(self)

    def GetNumCoords(self):
        r"""GetNumCoords(ChLinkBase self) -> int"""
        return _core.ChLinkBase_GetNumCoords(self)

    def GetLinkAbsoluteCoords(self):
        r"""GetLinkAbsoluteCoords(ChLinkBase self) -> ChCoordsysD"""
        return _core.ChLinkBase_GetLinkAbsoluteCoords(self)

    def GetAssetsFrame(self, nclone=0):
        r"""GetAssetsFrame(ChLinkBase self, unsigned int nclone=0) -> ChFrameD"""
        return _core.ChLinkBase_GetAssetsFrame(self, nclone)

    def Get_react_force(self):
        r"""Get_react_force(ChLinkBase self) -> ChVectorD"""
        return _core.ChLinkBase_Get_react_force(self)

    def Get_react_torque(self):
        r"""Get_react_torque(ChLinkBase self) -> ChVectorD"""
        return _core.ChLinkBase_Get_react_torque(self)

    def IsRequiringWaking(self):
        r"""IsRequiringWaking(ChLinkBase self) -> bool"""
        return _core.ChLinkBase_IsRequiringWaking(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkBase self, ChArchiveOut & marchive)"""
        return _core.ChLinkBase_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkBase self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkBase_ArchiveIN(self, marchive)

# Register ChLinkBase in _core:
_core.ChLinkBase_swigregister(ChLinkBase)

class ChLink(ChLinkBase):
    r"""Proxy of C++ chrono::ChLink class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLink self) -> ChLink
        __init__(ChLink self, ChLink other) -> ChLink
        """
        _core.ChLink_swiginit(self, _core.new_ChLink(*args))
    __swig_destroy__ = _core.delete_ChLink

    def Clone(self):
        r"""Clone(ChLink self) -> ChLink"""
        return _core.ChLink_Clone(self)

    def GetLeftDOF(self):
        r"""GetLeftDOF(ChLink self) -> int"""
        return _core.ChLink_GetLeftDOF(self)

    def GetNumCoords(self):
        r"""GetNumCoords(ChLink self) -> int"""
        return _core.ChLink_GetNumCoords(self)

    def GetBody1(self):
        r"""GetBody1(ChLink self) -> ChBodyFrame"""
        return _core.ChLink_GetBody1(self)

    def GetBody2(self):
        r"""GetBody2(ChLink self) -> ChBodyFrame"""
        return _core.ChLink_GetBody2(self)

    def GetLinkRelativeCoords(self):
        r"""GetLinkRelativeCoords(ChLink self) -> ChCoordsysD"""
        return _core.ChLink_GetLinkRelativeCoords(self)

    def GetLinkAbsoluteCoords(self):
        r"""GetLinkAbsoluteCoords(ChLink self) -> ChCoordsysD"""
        return _core.ChLink_GetLinkAbsoluteCoords(self)

    def Get_react_force(self):
        r"""Get_react_force(ChLink self) -> ChVectorD"""
        return _core.ChLink_Get_react_force(self)

    def Get_react_torque(self):
        r"""Get_react_torque(ChLink self) -> ChVectorD"""
        return _core.ChLink_Get_react_torque(self)

    def RestoreRedundant(self):
        r"""RestoreRedundant(ChLink self) -> int"""
        return _core.ChLink_RestoreRedundant(self)

    def UpdateTime(self, mytime):
        r"""UpdateTime(ChLink self, double mytime)"""
        return _core.ChLink_UpdateTime(self, mytime)

    def Update(self, *args):
        r"""
        Update(ChLink self, double mytime, bool update_assets=True)
        Update(ChLink self, bool update_assets=True)
        """
        return _core.ChLink_Update(self, *args)

    def UpdatedExternalTime(self, prevtime, time):
        r"""UpdatedExternalTime(ChLink self, double prevtime, double time)"""
        return _core.ChLink_UpdatedExternalTime(self, prevtime, time)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLink self, ChArchiveOut & marchive)"""
        return _core.ChLink_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLink self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLink_ArchiveIN(self, marchive)

# Register ChLink in _core:
_core.ChLink_swigregister(ChLink)

class ChLinkMarkers(ChLink):
    r"""Proxy of C++ chrono::ChLinkMarkers class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChLinkMarkers

    def Clone(self):
        r"""Clone(ChLinkMarkers self) -> ChLinkMarkers"""
        return _core.ChLinkMarkers_Clone(self)

    def GetMarker1(self):
        r"""GetMarker1(ChLinkMarkers self) -> ChMarker"""
        return _core.ChLinkMarkers_GetMarker1(self)

    def GetMarker2(self):
        r"""GetMarker2(ChLinkMarkers self) -> ChMarker"""
        return _core.ChLinkMarkers_GetMarker2(self)

    def SetUpMarkers(self, mark1, mark2):
        r"""SetUpMarkers(ChLinkMarkers self, ChMarker mark1, ChMarker mark2)"""
        return _core.ChLinkMarkers_SetUpMarkers(self, mark1, mark2)

    def SetMarkID1(self, mid):
        r"""SetMarkID1(ChLinkMarkers self, int mid)"""
        return _core.ChLinkMarkers_SetMarkID1(self, mid)

    def SetMarkID2(self, mid):
        r"""SetMarkID2(ChLinkMarkers self, int mid)"""
        return _core.ChLinkMarkers_SetMarkID2(self, mid)

    def GetMarkID1(self):
        r"""GetMarkID1(ChLinkMarkers self) -> int"""
        return _core.ChLinkMarkers_GetMarkID1(self)

    def GetMarkID2(self):
        r"""GetMarkID2(ChLinkMarkers self) -> int"""
        return _core.ChLinkMarkers_GetMarkID2(self)

    def ReferenceMarkers(self, mark1, mark2):
        r"""ReferenceMarkers(ChLinkMarkers self, ChMarker mark1, ChMarker mark2) -> bool"""
        return _core.ChLinkMarkers_ReferenceMarkers(self, mark1, mark2)

    def Initialize(self, *args):
        r"""
        Initialize(ChLinkMarkers self, std::shared_ptr< chrono::ChMarker > mark1, std::shared_ptr< chrono::ChMarker > mark2)
        Initialize(ChLinkMarkers self, std::shared_ptr< chrono::ChBody > mbody1, std::shared_ptr< chrono::ChBody > mbody2, ChCoordsysD mpos)
        Initialize(ChLinkMarkers self, std::shared_ptr< chrono::ChBody > mbody1, std::shared_ptr< chrono::ChBody > mbody2, bool pos_are_relative, ChCoordsysD mpos1, ChCoordsysD mpos2)
        """
        return _core.ChLinkMarkers_Initialize(self, *args)

    def GetLinkRelativeCoords(self):
        r"""GetLinkRelativeCoords(ChLinkMarkers self) -> ChCoordsysD"""
        return _core.ChLinkMarkers_GetLinkRelativeCoords(self)

    def GetAssetsFrame(self, nclone=0):
        r"""GetAssetsFrame(ChLinkMarkers self, unsigned int nclone=0) -> ChFrameD"""
        return _core.ChLinkMarkers_GetAssetsFrame(self, nclone)

    def UpdateRelMarkerCoords(self):
        r"""UpdateRelMarkerCoords(ChLinkMarkers self)"""
        return _core.ChLinkMarkers_UpdateRelMarkerCoords(self)

    def UpdateForces(self, mytime):
        r"""UpdateForces(ChLinkMarkers self, double mytime)"""
        return _core.ChLinkMarkers_UpdateForces(self, mytime)

    def Update(self, mytime, update_assets=True):
        r"""Update(ChLinkMarkers self, double mytime, bool update_assets=True)"""
        return _core.ChLinkMarkers_Update(self, mytime, update_assets)

    def IntLoadResidual_F(self, off, R, c):
        r"""IntLoadResidual_F(ChLinkMarkers self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _core.ChLinkMarkers_IntLoadResidual_F(self, off, R, c)

    def ConstraintsFbLoadForces(self, factor=1):
        r"""ConstraintsFbLoadForces(ChLinkMarkers self, double factor=1)"""
        return _core.ChLinkMarkers_ConstraintsFbLoadForces(self, factor)

    def GetRelM(self):
        r"""GetRelM(ChLinkMarkers self) -> ChCoordsysD"""
        return _core.ChLinkMarkers_GetRelM(self)

    def GetRelM_dt(self):
        r"""GetRelM_dt(ChLinkMarkers self) -> ChCoordsysD"""
        return _core.ChLinkMarkers_GetRelM_dt(self)

    def GetRelM_dtdt(self):
        r"""GetRelM_dtdt(ChLinkMarkers self) -> ChCoordsysD"""
        return _core.ChLinkMarkers_GetRelM_dtdt(self)

    def GetRelAngle(self):
        r"""GetRelAngle(ChLinkMarkers self) -> double"""
        return _core.ChLinkMarkers_GetRelAngle(self)

    def GetRelAxis(self):
        r"""GetRelAxis(ChLinkMarkers self) -> ChVectorD"""
        return _core.ChLinkMarkers_GetRelAxis(self)

    def GetRelRotaxis(self):
        r"""GetRelRotaxis(ChLinkMarkers self) -> ChVectorD"""
        return _core.ChLinkMarkers_GetRelRotaxis(self)

    def GetRelWvel(self):
        r"""GetRelWvel(ChLinkMarkers self) -> ChVectorD"""
        return _core.ChLinkMarkers_GetRelWvel(self)

    def GetRelWacc(self):
        r"""GetRelWacc(ChLinkMarkers self) -> ChVectorD"""
        return _core.ChLinkMarkers_GetRelWacc(self)

    def GetDist(self):
        r"""GetDist(ChLinkMarkers self) -> double"""
        return _core.ChLinkMarkers_GetDist(self)

    def GetDist_dt(self):
        r"""GetDist_dt(ChLinkMarkers self) -> double"""
        return _core.ChLinkMarkers_GetDist_dt(self)

    def Get_Scr_force(self):
        r"""Get_Scr_force(ChLinkMarkers self) -> ChVectorD"""
        return _core.ChLinkMarkers_Get_Scr_force(self)

    def Get_Scr_torque(self):
        r"""Get_Scr_torque(ChLinkMarkers self) -> ChVectorD"""
        return _core.ChLinkMarkers_Get_Scr_torque(self)

    def Set_Scr_force(self, mf):
        r"""Set_Scr_force(ChLinkMarkers self, ChVectorD mf)"""
        return _core.ChLinkMarkers_Set_Scr_force(self, mf)

    def Set_Scr_torque(self, mf):
        r"""Set_Scr_torque(ChLinkMarkers self, ChVectorD mf)"""
        return _core.ChLinkMarkers_Set_Scr_torque(self, mf)

    def GetC_force(self):
        r"""GetC_force(ChLinkMarkers self) -> ChVectorD"""
        return _core.ChLinkMarkers_GetC_force(self)

    def GetC_torque(self):
        r"""GetC_torque(ChLinkMarkers self) -> ChVectorD"""
        return _core.ChLinkMarkers_GetC_torque(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkMarkers self, ChArchiveOut & marchive)"""
        return _core.ChLinkMarkers_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkMarkers self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkMarkers_ArchiveIN(self, marchive)

# Register ChLinkMarkers in _core:
_core.ChLinkMarkers_swigregister(ChLinkMarkers)

class ChLinkLimit(object):
    r"""Proxy of C++ chrono::ChLinkLimit class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    constr_upper = property(_core.ChLinkLimit_constr_upper_get, _core.ChLinkLimit_constr_upper_set, doc=r"""constr_upper : ChConstraintTwoBodies""")
    constr_lower = property(_core.ChLinkLimit_constr_lower_get, _core.ChLinkLimit_constr_lower_set, doc=r"""constr_lower : ChConstraintTwoBodies""")

    def __init__(self, *args):
        r"""
        __init__(ChLinkLimit self) -> ChLinkLimit
        __init__(ChLinkLimit self, ChLinkLimit other) -> ChLinkLimit
        """
        _core.ChLinkLimit_swiginit(self, _core.new_ChLinkLimit(*args))
    __swig_destroy__ = _core.delete_ChLinkLimit

    def Clone(self):
        r"""Clone(ChLinkLimit self) -> ChLinkLimit"""
        return _core.ChLinkLimit_Clone(self)

    def IsActive(self):
        r"""IsActive(ChLinkLimit self) -> bool"""
        return _core.ChLinkLimit_IsActive(self)

    def SetActive(self, val):
        r"""SetActive(ChLinkLimit self, bool val)"""
        return _core.ChLinkLimit_SetActive(self, val)

    def IsPenalty(self):
        r"""IsPenalty(ChLinkLimit self) -> bool"""
        return _core.ChLinkLimit_IsPenalty(self)

    def IsPolar(self):
        r"""IsPolar(ChLinkLimit self) -> bool"""
        return _core.ChLinkLimit_IsPolar(self)

    def IsRotation(self):
        r"""IsRotation(ChLinkLimit self) -> bool"""
        return _core.ChLinkLimit_IsRotation(self)

    def SetPenalty(self, val):
        r"""SetPenalty(ChLinkLimit self, bool val)"""
        return _core.ChLinkLimit_SetPenalty(self, val)

    def SetPolar(self, val):
        r"""SetPolar(ChLinkLimit self, bool val)"""
        return _core.ChLinkLimit_SetPolar(self, val)

    def SetRotation(self, val):
        r"""SetRotation(ChLinkLimit self, bool val)"""
        return _core.ChLinkLimit_SetRotation(self, val)

    def GetMax(self):
        r"""GetMax(ChLinkLimit self) -> double"""
        return _core.ChLinkLimit_GetMax(self)

    def GetMin(self):
        r"""GetMin(ChLinkLimit self) -> double"""
        return _core.ChLinkLimit_GetMin(self)

    def GetMaxCushion(self):
        r"""GetMaxCushion(ChLinkLimit self) -> double"""
        return _core.ChLinkLimit_GetMaxCushion(self)

    def GetMinCushion(self):
        r"""GetMinCushion(ChLinkLimit self) -> double"""
        return _core.ChLinkLimit_GetMinCushion(self)

    def GetKmax(self):
        r"""GetKmax(ChLinkLimit self) -> double"""
        return _core.ChLinkLimit_GetKmax(self)

    def GetKmin(self):
        r"""GetKmin(ChLinkLimit self) -> double"""
        return _core.ChLinkLimit_GetKmin(self)

    def GetRmax(self):
        r"""GetRmax(ChLinkLimit self) -> double"""
        return _core.ChLinkLimit_GetRmax(self)

    def GetRmin(self):
        r"""GetRmin(ChLinkLimit self) -> double"""
        return _core.ChLinkLimit_GetRmin(self)

    def GetMaxElastic(self):
        r"""GetMaxElastic(ChLinkLimit self) -> double"""
        return _core.ChLinkLimit_GetMaxElastic(self)

    def GetMinElastic(self):
        r"""GetMinElastic(ChLinkLimit self) -> double"""
        return _core.ChLinkLimit_GetMinElastic(self)

    def GetMaxPolarAngle(self, pol_ang):
        r"""GetMaxPolarAngle(ChLinkLimit self, double pol_ang) -> double"""
        return _core.ChLinkLimit_GetMaxPolarAngle(self, pol_ang)

    def SetMax(self, val):
        r"""SetMax(ChLinkLimit self, double val)"""
        return _core.ChLinkLimit_SetMax(self, val)

    def SetMin(self, val):
        r"""SetMin(ChLinkLimit self, double val)"""
        return _core.ChLinkLimit_SetMin(self, val)

    def SetMaxCushion(self, val):
        r"""SetMaxCushion(ChLinkLimit self, double val)"""
        return _core.ChLinkLimit_SetMaxCushion(self, val)

    def SetMinCushion(self, val):
        r"""SetMinCushion(ChLinkLimit self, double val)"""
        return _core.ChLinkLimit_SetMinCushion(self, val)

    def SetKmax(self, val):
        r"""SetKmax(ChLinkLimit self, double val)"""
        return _core.ChLinkLimit_SetKmax(self, val)

    def SetKmin(self, val):
        r"""SetKmin(ChLinkLimit self, double val)"""
        return _core.ChLinkLimit_SetKmin(self, val)

    def SetRmax(self, val):
        r"""SetRmax(ChLinkLimit self, double val)"""
        return _core.ChLinkLimit_SetRmax(self, val)

    def SetRmin(self, val):
        r"""SetRmin(ChLinkLimit self, double val)"""
        return _core.ChLinkLimit_SetRmin(self, val)

    def SetMaxElastic(self, val):
        r"""SetMaxElastic(ChLinkLimit self, double val)"""
        return _core.ChLinkLimit_SetMaxElastic(self, val)

    def SetMinElastic(self, val):
        r"""SetMinElastic(ChLinkLimit self, double val)"""
        return _core.ChLinkLimit_SetMinElastic(self, val)

    def SetModulationKmax(self, funct):
        r"""SetModulationKmax(ChLinkLimit self, std::shared_ptr< chrono::ChFunction > funct)"""
        return _core.ChLinkLimit_SetModulationKmax(self, funct)

    def SetModulationKmin(self, funct):
        r"""SetModulationKmin(ChLinkLimit self, std::shared_ptr< chrono::ChFunction > funct)"""
        return _core.ChLinkLimit_SetModulationKmin(self, funct)

    def SetModulationRmax(self, funct):
        r"""SetModulationRmax(ChLinkLimit self, std::shared_ptr< chrono::ChFunction > funct)"""
        return _core.ChLinkLimit_SetModulationRmax(self, funct)

    def SetModulationRmin(self, funct):
        r"""SetModulationRmin(ChLinkLimit self, std::shared_ptr< chrono::ChFunction > funct)"""
        return _core.ChLinkLimit_SetModulationRmin(self, funct)

    def SetPolarMax(self, funct):
        r"""SetPolarMax(ChLinkLimit self, std::shared_ptr< chrono::ChFunction > funct)"""
        return _core.ChLinkLimit_SetPolarMax(self, funct)

    def GetModulationKmax(self):
        r"""GetModulationKmax(ChLinkLimit self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkLimit_GetModulationKmax(self)

    def GetModulationKmin(self):
        r"""GetModulationKmin(ChLinkLimit self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkLimit_GetModulationKmin(self)

    def GetModulationRmax(self):
        r"""GetModulationRmax(ChLinkLimit self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkLimit_GetModulationRmax(self)

    def GetModulationRmin(self):
        r"""GetModulationRmin(ChLinkLimit self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkLimit_GetModulationRmin(self)

    def GetPolarMax(self):
        r"""GetPolarMax(ChLinkLimit self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkLimit_GetPolarMax(self)

    def GetViolation(self, x):
        r"""GetViolation(ChLinkLimit self, double x) -> double"""
        return _core.ChLinkLimit_GetViolation(self, x)

    def GetForce(self, x, x_dt):
        r"""GetForce(ChLinkLimit self, double x, double x_dt) -> double"""
        return _core.ChLinkLimit_GetForce(self, x, x_dt)

    def GetPolarForce(self, x, x_dt, pol_ang):
        r"""GetPolarForce(ChLinkLimit self, double x, double x_dt, double pol_ang) -> double"""
        return _core.ChLinkLimit_GetPolarForce(self, x, x_dt, pol_ang)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkLimit self, ChArchiveOut & marchive)"""
        return _core.ChLinkLimit_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkLimit self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkLimit_ArchiveIN(self, marchive)

# Register ChLinkLimit in _core:
_core.ChLinkLimit_swigregister(ChLinkLimit)

class ChLinkForce(object):
    r"""Proxy of C++ chrono::ChLinkForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkForce self) -> ChLinkForce
        __init__(ChLinkForce self, ChLinkForce other) -> ChLinkForce
        """
        _core.ChLinkForce_swiginit(self, _core.new_ChLinkForce(*args))
    __swig_destroy__ = _core.delete_ChLinkForce

    def Clone(self):
        r"""Clone(ChLinkForce self) -> ChLinkForce"""
        return _core.ChLinkForce_Clone(self)

    def IsActive(self):
        r"""IsActive(ChLinkForce self) -> bool"""
        return _core.ChLinkForce_IsActive(self)

    def SetActive(self, val):
        r"""SetActive(ChLinkForce self, bool val)"""
        return _core.ChLinkForce_SetActive(self, val)

    def GetF(self):
        r"""GetF(ChLinkForce self) -> double"""
        return _core.ChLinkForce_GetF(self)

    def SetF(self, F):
        r"""SetF(ChLinkForce self, double F)"""
        return _core.ChLinkForce_SetF(self, F)

    def GetK(self):
        r"""GetK(ChLinkForce self) -> double"""
        return _core.ChLinkForce_GetK(self)

    def SetK(self, K):
        r"""SetK(ChLinkForce self, double K)"""
        return _core.ChLinkForce_SetK(self, K)

    def GetR(self):
        r"""GetR(ChLinkForce self) -> double"""
        return _core.ChLinkForce_GetR(self)

    def SetR(self, R):
        r"""SetR(ChLinkForce self, double R)"""
        return _core.ChLinkForce_SetR(self, R)

    def GetModulationF(self):
        r"""GetModulationF(ChLinkForce self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkForce_GetModulationF(self)

    def GetModulationK(self):
        r"""GetModulationK(ChLinkForce self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkForce_GetModulationK(self)

    def GetModulationR(self):
        r"""GetModulationR(ChLinkForce self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkForce_GetModulationR(self)

    def SetModulationF(self, funct):
        r"""SetModulationF(ChLinkForce self, std::shared_ptr< chrono::ChFunction > funct)"""
        return _core.ChLinkForce_SetModulationF(self, funct)

    def SetModulationK(self, funct):
        r"""SetModulationK(ChLinkForce self, std::shared_ptr< chrono::ChFunction > funct)"""
        return _core.ChLinkForce_SetModulationK(self, funct)

    def SetModulationR(self, funct):
        r"""SetModulationR(ChLinkForce self, std::shared_ptr< chrono::ChFunction > funct)"""
        return _core.ChLinkForce_SetModulationR(self, funct)

    def GetFcurrent(self, x, x_dt, t):
        r"""GetFcurrent(ChLinkForce self, double x, double x_dt, double t) -> double"""
        return _core.ChLinkForce_GetFcurrent(self, x, x_dt, t)

    def GetKcurrent(self, x, x_dt, t):
        r"""GetKcurrent(ChLinkForce self, double x, double x_dt, double t) -> double"""
        return _core.ChLinkForce_GetKcurrent(self, x, x_dt, t)

    def GetRcurrent(self, x, x_dt, t):
        r"""GetRcurrent(ChLinkForce self, double x, double x_dt, double t) -> double"""
        return _core.ChLinkForce_GetRcurrent(self, x, x_dt, t)

    def GetForce(self, x, x_dt, t):
        r"""GetForce(ChLinkForce self, double x, double x_dt, double t) -> double"""
        return _core.ChLinkForce_GetForce(self, x, x_dt, t)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkForce self, ChArchiveOut & marchive)"""
        return _core.ChLinkForce_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkForce self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkForce_ArchiveIN(self, marchive)

# Register ChLinkForce in _core:
_core.ChLinkForce_swigregister(ChLinkForce)

class ChLinkLock(ChLinkMarkers):
    r"""Proxy of C++ chrono::ChLinkLock class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkLock self) -> ChLinkLock
        __init__(ChLinkLock self, ChLinkLock other) -> ChLinkLock
        """
        _core.ChLinkLock_swiginit(self, _core.new_ChLinkLock(*args))
    __swig_destroy__ = _core.delete_ChLinkLock

    def Clone(self):
        r"""Clone(ChLinkLock self) -> ChLinkLock"""
        return _core.ChLinkLock_Clone(self)

    def RestoreRedundant(self):
        r"""RestoreRedundant(ChLinkLock self) -> int"""
        return _core.ChLinkLock_RestoreRedundant(self)

    def SetDisabled(self, mdis):
        r"""SetDisabled(ChLinkLock self, bool mdis)"""
        return _core.ChLinkLock_SetDisabled(self, mdis)

    def SetBroken(self, mon):
        r"""SetBroken(ChLinkLock self, bool mon)"""
        return _core.ChLinkLock_SetBroken(self, mon)

    def GetMask(self):
        r"""GetMask(ChLinkLock self) -> ChLinkMask &"""
        return _core.ChLinkLock_GetMask(self)

    def SetUpMarkers(self, mark1, mark2):
        r"""SetUpMarkers(ChLinkLock self, ChMarker mark1, ChMarker mark2)"""
        return _core.ChLinkLock_SetUpMarkers(self, mark1, mark2)

    def GetForce_D(self):
        r"""GetForce_D(ChLinkLock self) -> ChLinkForce"""
        return _core.ChLinkLock_GetForce_D(self)

    def GetForce_R(self):
        r"""GetForce_R(ChLinkLock self) -> ChLinkForce"""
        return _core.ChLinkLock_GetForce_R(self)

    def GetForce_X(self):
        r"""GetForce_X(ChLinkLock self) -> ChLinkForce"""
        return _core.ChLinkLock_GetForce_X(self)

    def GetForce_Y(self):
        r"""GetForce_Y(ChLinkLock self) -> ChLinkForce"""
        return _core.ChLinkLock_GetForce_Y(self)

    def GetForce_Z(self):
        r"""GetForce_Z(ChLinkLock self) -> ChLinkForce"""
        return _core.ChLinkLock_GetForce_Z(self)

    def GetForce_Rx(self):
        r"""GetForce_Rx(ChLinkLock self) -> ChLinkForce"""
        return _core.ChLinkLock_GetForce_Rx(self)

    def GetForce_Ry(self):
        r"""GetForce_Ry(ChLinkLock self) -> ChLinkForce"""
        return _core.ChLinkLock_GetForce_Ry(self)

    def GetForce_Rz(self):
        r"""GetForce_Rz(ChLinkLock self) -> ChLinkForce"""
        return _core.ChLinkLock_GetForce_Rz(self)

    def GetLimit_X(self):
        r"""GetLimit_X(ChLinkLock self) -> ChLinkLimit"""
        return _core.ChLinkLock_GetLimit_X(self)

    def GetLimit_Y(self):
        r"""GetLimit_Y(ChLinkLock self) -> ChLinkLimit"""
        return _core.ChLinkLock_GetLimit_Y(self)

    def GetLimit_Z(self):
        r"""GetLimit_Z(ChLinkLock self) -> ChLinkLimit"""
        return _core.ChLinkLock_GetLimit_Z(self)

    def GetLimit_Rx(self):
        r"""GetLimit_Rx(ChLinkLock self) -> ChLinkLimit"""
        return _core.ChLinkLock_GetLimit_Rx(self)

    def GetLimit_Ry(self):
        r"""GetLimit_Ry(ChLinkLock self) -> ChLinkLimit"""
        return _core.ChLinkLock_GetLimit_Ry(self)

    def GetLimit_Rz(self):
        r"""GetLimit_Rz(ChLinkLock self) -> ChLinkLimit"""
        return _core.ChLinkLock_GetLimit_Rz(self)

    def GetLimit_Rp(self):
        r"""GetLimit_Rp(ChLinkLock self) -> ChLinkLimit"""
        return _core.ChLinkLock_GetLimit_Rp(self)

    def GetLimit_D(self):
        r"""GetLimit_D(ChLinkLock self) -> ChLinkLimit"""
        return _core.ChLinkLock_GetLimit_D(self)

    def GetDOC(self):
        r"""GetDOC(ChLinkLock self) -> int"""
        return _core.ChLinkLock_GetDOC(self)

    def GetDOC_c(self):
        r"""GetDOC_c(ChLinkLock self) -> int"""
        return _core.ChLinkLock_GetDOC_c(self)

    def GetDOC_d(self):
        r"""GetDOC_d(ChLinkLock self) -> int"""
        return _core.ChLinkLock_GetDOC_d(self)

    def GetC(self):
        r"""GetC(ChLinkLock self) -> chrono::ChLinkLock::ChConstraintVectorX const &"""
        return _core.ChLinkLock_GetC(self)

    def GetC_dt(self):
        r"""GetC_dt(ChLinkLock self) -> chrono::ChLinkLock::ChConstraintVectorX const &"""
        return _core.ChLinkLock_GetC_dt(self)

    def GetC_dtdt(self):
        r"""GetC_dtdt(ChLinkLock self) -> chrono::ChLinkLock::ChConstraintVectorX const &"""
        return _core.ChLinkLock_GetC_dtdt(self)

    def GetCq1(self):
        r"""GetCq1(ChLinkLock self) -> chrono::ChLinkLock::ChConstraintMatrixX7 const &"""
        return _core.ChLinkLock_GetCq1(self)

    def GetCq2(self):
        r"""GetCq2(ChLinkLock self) -> chrono::ChLinkLock::ChConstraintMatrixX7 const &"""
        return _core.ChLinkLock_GetCq2(self)

    def GetCqw1(self):
        r"""GetCqw1(ChLinkLock self) -> chrono::ChLinkLock::ChConstraintMatrixX6 const &"""
        return _core.ChLinkLock_GetCqw1(self)

    def GetCqw2(self):
        r"""GetCqw2(ChLinkLock self) -> chrono::ChLinkLock::ChConstraintMatrixX6 const &"""
        return _core.ChLinkLock_GetCqw2(self)

    def GetQc(self):
        r"""GetQc(ChLinkLock self) -> chrono::ChLinkLock::ChConstraintVectorX const &"""
        return _core.ChLinkLock_GetQc(self)

    def GetCt(self):
        r"""GetCt(ChLinkLock self) -> chrono::ChLinkLock::ChConstraintVectorX const &"""
        return _core.ChLinkLock_GetCt(self)

    def GetReact(self):
        r"""GetReact(ChLinkLock self) -> chrono::ChLinkLock::ChConstraintVectorX const &"""
        return _core.ChLinkLock_GetReact(self)

    def UpdateState(self):
        r"""UpdateState(ChLinkLock self)"""
        return _core.ChLinkLock_UpdateState(self)

    def UpdateForces(self, mytime):
        r"""UpdateForces(ChLinkLock self, double mytime)"""
        return _core.ChLinkLock_UpdateForces(self, mytime)

    def UpdateCqw(self):
        r"""UpdateCqw(ChLinkLock self)"""
        return _core.ChLinkLock_UpdateCqw(self)

    def Update(self, mytime, update_assets=True):
        r"""Update(ChLinkLock self, double mytime, bool update_assets=True)"""
        return _core.ChLinkLock_Update(self, mytime, update_assets)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkLock self, ChArchiveOut & marchive)"""
        return _core.ChLinkLock_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkLock self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkLock_ArchiveIN(self, marchive)

# Register ChLinkLock in _core:
_core.ChLinkLock_swigregister(ChLinkLock)

class ChLinkLockLock(ChLinkLock):
    r"""Proxy of C++ chrono::ChLinkLockLock class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkLockLock self) -> ChLinkLockLock
        __init__(ChLinkLockLock self, ChLinkLockLock other) -> ChLinkLockLock
        """
        _core.ChLinkLockLock_swiginit(self, _core.new_ChLinkLockLock(*args))

    def Clone(self):
        r"""Clone(ChLinkLockLock self) -> ChLinkLockLock"""
        return _core.ChLinkLockLock_Clone(self)

    def SetMotion_X(self, m_funct):
        r"""SetMotion_X(ChLinkLockLock self, std::shared_ptr< chrono::ChFunction > m_funct)"""
        return _core.ChLinkLockLock_SetMotion_X(self, m_funct)

    def SetMotion_Y(self, m_funct):
        r"""SetMotion_Y(ChLinkLockLock self, std::shared_ptr< chrono::ChFunction > m_funct)"""
        return _core.ChLinkLockLock_SetMotion_Y(self, m_funct)

    def SetMotion_Z(self, m_funct):
        r"""SetMotion_Z(ChLinkLockLock self, std::shared_ptr< chrono::ChFunction > m_funct)"""
        return _core.ChLinkLockLock_SetMotion_Z(self, m_funct)

    def SetMotion_ang(self, m_funct):
        r"""SetMotion_ang(ChLinkLockLock self, std::shared_ptr< chrono::ChFunction > m_funct)"""
        return _core.ChLinkLockLock_SetMotion_ang(self, m_funct)

    def SetMotion_ang2(self, m_funct):
        r"""SetMotion_ang2(ChLinkLockLock self, std::shared_ptr< chrono::ChFunction > m_funct)"""
        return _core.ChLinkLockLock_SetMotion_ang2(self, m_funct)

    def SetMotion_ang3(self, m_funct):
        r"""SetMotion_ang3(ChLinkLockLock self, std::shared_ptr< chrono::ChFunction > m_funct)"""
        return _core.ChLinkLockLock_SetMotion_ang3(self, m_funct)

    def SetMotion_axis(self, m_axis):
        r"""SetMotion_axis(ChLinkLockLock self, ChVectorD m_axis)"""
        return _core.ChLinkLockLock_SetMotion_axis(self, m_axis)

    def Set_angleset(self, mset):
        r"""Set_angleset(ChLinkLockLock self, chrono::AngleSet mset)"""
        return _core.ChLinkLockLock_Set_angleset(self, mset)

    def GetMotion_X(self):
        r"""GetMotion_X(ChLinkLockLock self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkLockLock_GetMotion_X(self)

    def GetMotion_Y(self):
        r"""GetMotion_Y(ChLinkLockLock self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkLockLock_GetMotion_Y(self)

    def GetMotion_Z(self):
        r"""GetMotion_Z(ChLinkLockLock self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkLockLock_GetMotion_Z(self)

    def GetMotion_ang(self):
        r"""GetMotion_ang(ChLinkLockLock self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkLockLock_GetMotion_ang(self)

    def GetMotion_ang2(self):
        r"""GetMotion_ang2(ChLinkLockLock self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkLockLock_GetMotion_ang2(self)

    def GetMotion_ang3(self):
        r"""GetMotion_ang3(ChLinkLockLock self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkLockLock_GetMotion_ang3(self)

    def GetMotion_axis(self):
        r"""GetMotion_axis(ChLinkLockLock self) -> ChVectorD"""
        return _core.ChLinkLockLock_GetMotion_axis(self)

    def Get_angleset(self):
        r"""Get_angleset(ChLinkLockLock self) -> chrono::AngleSet"""
        return _core.ChLinkLockLock_Get_angleset(self)

    def GetRelC(self):
        r"""GetRelC(ChLinkLockLock self) -> ChCoordsysD"""
        return _core.ChLinkLockLock_GetRelC(self)

    def GetRelC_dt(self):
        r"""GetRelC_dt(ChLinkLockLock self) -> ChCoordsysD"""
        return _core.ChLinkLockLock_GetRelC_dt(self)

    def GetRelC_dtdt(self):
        r"""GetRelC_dtdt(ChLinkLockLock self) -> ChCoordsysD"""
        return _core.ChLinkLockLock_GetRelC_dtdt(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkLockLock self, ChArchiveOut & marchive)"""
        return _core.ChLinkLockLock_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkLockLock self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkLockLock_ArchiveIN(self, marchive)
    __swig_destroy__ = _core.delete_ChLinkLockLock

# Register ChLinkLockLock in _core:
_core.ChLinkLockLock_swigregister(ChLinkLockLock)

class ChLinkLockRevolute(ChLinkLock):
    r"""Proxy of C++ chrono::ChLinkLockRevolute class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChLinkLockRevolute self) -> ChLinkLockRevolute"""
        _core.ChLinkLockRevolute_swiginit(self, _core.new_ChLinkLockRevolute())

    def Clone(self):
        r"""Clone(ChLinkLockRevolute self) -> ChLinkLockRevolute"""
        return _core.ChLinkLockRevolute_Clone(self)
    __swig_destroy__ = _core.delete_ChLinkLockRevolute

# Register ChLinkLockRevolute in _core:
_core.ChLinkLockRevolute_swigregister(ChLinkLockRevolute)

class ChLinkLockSpherical(ChLinkLock):
    r"""Proxy of C++ chrono::ChLinkLockSpherical class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChLinkLockSpherical self) -> ChLinkLockSpherical"""
        _core.ChLinkLockSpherical_swiginit(self, _core.new_ChLinkLockSpherical())

    def Clone(self):
        r"""Clone(ChLinkLockSpherical self) -> ChLinkLockSpherical"""
        return _core.ChLinkLockSpherical_Clone(self)
    __swig_destroy__ = _core.delete_ChLinkLockSpherical

# Register ChLinkLockSpherical in _core:
_core.ChLinkLockSpherical_swigregister(ChLinkLockSpherical)

class ChLinkLockCylindrical(ChLinkLock):
    r"""Proxy of C++ chrono::ChLinkLockCylindrical class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChLinkLockCylindrical self) -> ChLinkLockCylindrical"""
        _core.ChLinkLockCylindrical_swiginit(self, _core.new_ChLinkLockCylindrical())

    def Clone(self):
        r"""Clone(ChLinkLockCylindrical self) -> ChLinkLockCylindrical"""
        return _core.ChLinkLockCylindrical_Clone(self)
    __swig_destroy__ = _core.delete_ChLinkLockCylindrical

# Register ChLinkLockCylindrical in _core:
_core.ChLinkLockCylindrical_swigregister(ChLinkLockCylindrical)

class ChLinkLockPrismatic(ChLinkLock):
    r"""Proxy of C++ chrono::ChLinkLockPrismatic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChLinkLockPrismatic self) -> ChLinkLockPrismatic"""
        _core.ChLinkLockPrismatic_swiginit(self, _core.new_ChLinkLockPrismatic())

    def Clone(self):
        r"""Clone(ChLinkLockPrismatic self) -> ChLinkLockPrismatic"""
        return _core.ChLinkLockPrismatic_Clone(self)
    __swig_destroy__ = _core.delete_ChLinkLockPrismatic

# Register ChLinkLockPrismatic in _core:
_core.ChLinkLockPrismatic_swigregister(ChLinkLockPrismatic)

class ChLinkLockPointPlane(ChLinkLock):
    r"""Proxy of C++ chrono::ChLinkLockPointPlane class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChLinkLockPointPlane self) -> ChLinkLockPointPlane"""
        _core.ChLinkLockPointPlane_swiginit(self, _core.new_ChLinkLockPointPlane())

    def Clone(self):
        r"""Clone(ChLinkLockPointPlane self) -> ChLinkLockPointPlane"""
        return _core.ChLinkLockPointPlane_Clone(self)
    __swig_destroy__ = _core.delete_ChLinkLockPointPlane

# Register ChLinkLockPointPlane in _core:
_core.ChLinkLockPointPlane_swigregister(ChLinkLockPointPlane)

class ChLinkLockPointLine(ChLinkLock):
    r"""Proxy of C++ chrono::ChLinkLockPointLine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChLinkLockPointLine self) -> ChLinkLockPointLine"""
        _core.ChLinkLockPointLine_swiginit(self, _core.new_ChLinkLockPointLine())

    def Clone(self):
        r"""Clone(ChLinkLockPointLine self) -> ChLinkLockPointLine"""
        return _core.ChLinkLockPointLine_Clone(self)
    __swig_destroy__ = _core.delete_ChLinkLockPointLine

# Register ChLinkLockPointLine in _core:
_core.ChLinkLockPointLine_swigregister(ChLinkLockPointLine)

class ChLinkLockPlanePlane(ChLinkLock):
    r"""Proxy of C++ chrono::ChLinkLockPlanePlane class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChLinkLockPlanePlane self) -> ChLinkLockPlanePlane"""
        _core.ChLinkLockPlanePlane_swiginit(self, _core.new_ChLinkLockPlanePlane())

    def Clone(self):
        r"""Clone(ChLinkLockPlanePlane self) -> ChLinkLockPlanePlane"""
        return _core.ChLinkLockPlanePlane_Clone(self)
    __swig_destroy__ = _core.delete_ChLinkLockPlanePlane

# Register ChLinkLockPlanePlane in _core:
_core.ChLinkLockPlanePlane_swigregister(ChLinkLockPlanePlane)

class ChLinkLockOldham(ChLinkLock):
    r"""Proxy of C++ chrono::ChLinkLockOldham class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChLinkLockOldham self) -> ChLinkLockOldham"""
        _core.ChLinkLockOldham_swiginit(self, _core.new_ChLinkLockOldham())

    def Clone(self):
        r"""Clone(ChLinkLockOldham self) -> ChLinkLockOldham"""
        return _core.ChLinkLockOldham_Clone(self)
    __swig_destroy__ = _core.delete_ChLinkLockOldham

# Register ChLinkLockOldham in _core:
_core.ChLinkLockOldham_swigregister(ChLinkLockOldham)

class ChLinkLockFree(ChLinkLock):
    r"""Proxy of C++ chrono::ChLinkLockFree class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChLinkLockFree self) -> ChLinkLockFree"""
        _core.ChLinkLockFree_swiginit(self, _core.new_ChLinkLockFree())

    def Clone(self):
        r"""Clone(ChLinkLockFree self) -> ChLinkLockFree"""
        return _core.ChLinkLockFree_Clone(self)
    __swig_destroy__ = _core.delete_ChLinkLockFree

# Register ChLinkLockFree in _core:
_core.ChLinkLockFree_swigregister(ChLinkLockFree)

class ChLinkLockAlign(ChLinkLock):
    r"""Proxy of C++ chrono::ChLinkLockAlign class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChLinkLockAlign self) -> ChLinkLockAlign"""
        _core.ChLinkLockAlign_swiginit(self, _core.new_ChLinkLockAlign())

    def Clone(self):
        r"""Clone(ChLinkLockAlign self) -> ChLinkLockAlign"""
        return _core.ChLinkLockAlign_Clone(self)
    __swig_destroy__ = _core.delete_ChLinkLockAlign

# Register ChLinkLockAlign in _core:
_core.ChLinkLockAlign_swigregister(ChLinkLockAlign)

class ChLinkLockParallel(ChLinkLock):
    r"""Proxy of C++ chrono::ChLinkLockParallel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChLinkLockParallel self) -> ChLinkLockParallel"""
        _core.ChLinkLockParallel_swiginit(self, _core.new_ChLinkLockParallel())

    def Clone(self):
        r"""Clone(ChLinkLockParallel self) -> ChLinkLockParallel"""
        return _core.ChLinkLockParallel_Clone(self)
    __swig_destroy__ = _core.delete_ChLinkLockParallel

# Register ChLinkLockParallel in _core:
_core.ChLinkLockParallel_swigregister(ChLinkLockParallel)

class ChLinkLockPerpend(ChLinkLock):
    r"""Proxy of C++ chrono::ChLinkLockPerpend class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChLinkLockPerpend self) -> ChLinkLockPerpend"""
        _core.ChLinkLockPerpend_swiginit(self, _core.new_ChLinkLockPerpend())

    def Clone(self):
        r"""Clone(ChLinkLockPerpend self) -> ChLinkLockPerpend"""
        return _core.ChLinkLockPerpend_Clone(self)
    __swig_destroy__ = _core.delete_ChLinkLockPerpend

# Register ChLinkLockPerpend in _core:
_core.ChLinkLockPerpend_swigregister(ChLinkLockPerpend)

class ChLinkLockRevolutePrismatic(ChLinkLock):
    r"""Proxy of C++ chrono::ChLinkLockRevolutePrismatic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChLinkLockRevolutePrismatic self) -> ChLinkLockRevolutePrismatic"""
        _core.ChLinkLockRevolutePrismatic_swiginit(self, _core.new_ChLinkLockRevolutePrismatic())

    def Clone(self):
        r"""Clone(ChLinkLockRevolutePrismatic self) -> ChLinkLockRevolutePrismatic"""
        return _core.ChLinkLockRevolutePrismatic_Clone(self)
    __swig_destroy__ = _core.delete_ChLinkLockRevolutePrismatic

# Register ChLinkLockRevolutePrismatic in _core:
_core.ChLinkLockRevolutePrismatic_swigregister(ChLinkLockRevolutePrismatic)

class ChLinkMate(ChLink):
    r"""Proxy of C++ chrono::ChLinkMate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkMate self) -> ChLinkMate
        __init__(ChLinkMate self, ChLinkMate other) -> ChLinkMate
        """
        _core.ChLinkMate_swiginit(self, _core.new_ChLinkMate(*args))
    __swig_destroy__ = _core.delete_ChLinkMate

    def Clone(self):
        r"""Clone(ChLinkMate self) -> ChLinkMate"""
        return _core.ChLinkMate_Clone(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkMate self, ChArchiveOut & marchive)"""
        return _core.ChLinkMate_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkMate self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkMate_ArchiveIN(self, marchive)

# Register ChLinkMate in _core:
_core.ChLinkMate_swigregister(ChLinkMate)

class ChLinkMateGeneric(ChLinkMate):
    r"""Proxy of C++ chrono::ChLinkMateGeneric class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkMateGeneric self, bool mc_x=True, bool mc_y=True, bool mc_z=True, bool mc_rx=True, bool mc_ry=True, bool mc_rz=True) -> ChLinkMateGeneric
        __init__(ChLinkMateGeneric self, ChLinkMateGeneric other) -> ChLinkMateGeneric
        """
        _core.ChLinkMateGeneric_swiginit(self, _core.new_ChLinkMateGeneric(*args))
    __swig_destroy__ = _core.delete_ChLinkMateGeneric

    def Clone(self):
        r"""Clone(ChLinkMateGeneric self) -> ChLinkMateGeneric"""
        return _core.ChLinkMateGeneric_Clone(self)

    def GetLinkRelativeCoords(self):
        r"""GetLinkRelativeCoords(ChLinkMateGeneric self) -> ChCoordsysD"""
        return _core.ChLinkMateGeneric_GetLinkRelativeCoords(self)

    def GetAssetsFrame(self, nclone=0):
        r"""GetAssetsFrame(ChLinkMateGeneric self, unsigned int nclone=0) -> ChFrameD"""
        return _core.ChLinkMateGeneric_GetAssetsFrame(self, nclone)

    def GetFrame1(self):
        r"""GetFrame1(ChLinkMateGeneric self) -> ChFrameD"""
        return _core.ChLinkMateGeneric_GetFrame1(self)

    def GetFrame2(self):
        r"""GetFrame2(ChLinkMateGeneric self) -> ChFrameD"""
        return _core.ChLinkMateGeneric_GetFrame2(self)

    def IsConstrainedX(self):
        r"""IsConstrainedX(ChLinkMateGeneric self) -> bool"""
        return _core.ChLinkMateGeneric_IsConstrainedX(self)

    def IsConstrainedY(self):
        r"""IsConstrainedY(ChLinkMateGeneric self) -> bool"""
        return _core.ChLinkMateGeneric_IsConstrainedY(self)

    def IsConstrainedZ(self):
        r"""IsConstrainedZ(ChLinkMateGeneric self) -> bool"""
        return _core.ChLinkMateGeneric_IsConstrainedZ(self)

    def IsConstrainedRx(self):
        r"""IsConstrainedRx(ChLinkMateGeneric self) -> bool"""
        return _core.ChLinkMateGeneric_IsConstrainedRx(self)

    def IsConstrainedRy(self):
        r"""IsConstrainedRy(ChLinkMateGeneric self) -> bool"""
        return _core.ChLinkMateGeneric_IsConstrainedRy(self)

    def IsConstrainedRz(self):
        r"""IsConstrainedRz(ChLinkMateGeneric self) -> bool"""
        return _core.ChLinkMateGeneric_IsConstrainedRz(self)

    def SetConstrainedCoords(self, mc_x, mc_y, mc_z, mc_rx, mc_ry, mc_rz):
        r"""SetConstrainedCoords(ChLinkMateGeneric self, bool mc_x, bool mc_y, bool mc_z, bool mc_rx, bool mc_ry, bool mc_rz)"""
        return _core.ChLinkMateGeneric_SetConstrainedCoords(self, mc_x, mc_y, mc_z, mc_rx, mc_ry, mc_rz)

    def Initialize(self, *args):
        r"""
        Initialize(ChLinkMateGeneric self, std::shared_ptr< chrono::ChBodyFrame > mbody1, std::shared_ptr< chrono::ChBodyFrame > mbody2, ChFrameD mabsframe)
        Initialize(ChLinkMateGeneric self, std::shared_ptr< chrono::ChBodyFrame > mbody1, std::shared_ptr< chrono::ChBodyFrame > mbody2, bool pos_are_relative, ChFrameD mframe1, ChFrameD mframe2)
        Initialize(ChLinkMateGeneric self, std::shared_ptr< chrono::ChBodyFrame > mbody1, std::shared_ptr< chrono::ChBodyFrame > mbody2, bool pos_are_relative, ChVectorD mpt1, ChVectorD mpt2, ChVectorD mnorm1, ChVectorD mnorm2)
        """
        return _core.ChLinkMateGeneric_Initialize(self, *args)

    def Update(self, mtime, update_assets=True):
        r"""Update(ChLinkMateGeneric self, double mtime, bool update_assets=True)"""
        return _core.ChLinkMateGeneric_Update(self, mtime, update_assets)

    def RestoreRedundant(self):
        r"""RestoreRedundant(ChLinkMateGeneric self) -> int"""
        return _core.ChLinkMateGeneric_RestoreRedundant(self)

    def SetDisabled(self, mdis):
        r"""SetDisabled(ChLinkMateGeneric self, bool mdis)"""
        return _core.ChLinkMateGeneric_SetDisabled(self, mdis)

    def SetBroken(self, mon):
        r"""SetBroken(ChLinkMateGeneric self, bool mon)"""
        return _core.ChLinkMateGeneric_SetBroken(self, mon)

    def GetDOC(self):
        r"""GetDOC(ChLinkMateGeneric self) -> int"""
        return _core.ChLinkMateGeneric_GetDOC(self)

    def GetDOC_c(self):
        r"""GetDOC_c(ChLinkMateGeneric self) -> int"""
        return _core.ChLinkMateGeneric_GetDOC_c(self)

    def GetDOC_d(self):
        r"""GetDOC_d(ChLinkMateGeneric self) -> int"""
        return _core.ChLinkMateGeneric_GetDOC_d(self)

    def GetC(self):
        r"""GetC(ChLinkMateGeneric self) -> chrono::ChLinkMateGeneric::ChConstraintVectorX const &"""
        return _core.ChLinkMateGeneric_GetC(self)

    def IntStateGatherReactions(self, off_L, L):
        r"""IntStateGatherReactions(ChLinkMateGeneric self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChLinkMateGeneric_IntStateGatherReactions(self, off_L, L)

    def IntStateScatterReactions(self, off_L, L):
        r"""IntStateScatterReactions(ChLinkMateGeneric self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChLinkMateGeneric_IntStateScatterReactions(self, off_L, L)

    def IntLoadResidual_CqL(self, off_L, R, L, c):
        r"""IntLoadResidual_CqL(ChLinkMateGeneric self, unsigned int const off_L, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _core.ChLinkMateGeneric_IntLoadResidual_CqL(self, off_L, R, L, c)

    def IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp):
        r"""IntLoadConstraint_C(ChLinkMateGeneric self, unsigned int const off, ChVectorDynamicD Qc, double const c, bool do_clamp, double recovery_clamp)"""
        return _core.ChLinkMateGeneric_IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp)

    def IntLoadConstraint_Ct(self, off, Qc, c):
        r"""IntLoadConstraint_Ct(ChLinkMateGeneric self, unsigned int const off, ChVectorDynamicD Qc, double const c)"""
        return _core.ChLinkMateGeneric_IntLoadConstraint_Ct(self, off, Qc, c)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChLinkMateGeneric self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _core.ChLinkMateGeneric_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChLinkMateGeneric self, unsigned int const off_v, ChStateDelta v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChLinkMateGeneric_IntFromDescriptor(self, off_v, v, off_L, L)

    def InjectConstraints(self, mdescriptor):
        r"""InjectConstraints(ChLinkMateGeneric self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChLinkMateGeneric_InjectConstraints(self, mdescriptor)

    def ConstraintsBiReset(self):
        r"""ConstraintsBiReset(ChLinkMateGeneric self)"""
        return _core.ChLinkMateGeneric_ConstraintsBiReset(self)

    def ConstraintsBiLoad_C(self, factor=1, recovery_clamp=0.1, do_clamp=False):
        r"""ConstraintsBiLoad_C(ChLinkMateGeneric self, double factor=1, double recovery_clamp=0.1, bool do_clamp=False)"""
        return _core.ChLinkMateGeneric_ConstraintsBiLoad_C(self, factor, recovery_clamp, do_clamp)

    def ConstraintsBiLoad_Ct(self, factor=1):
        r"""ConstraintsBiLoad_Ct(ChLinkMateGeneric self, double factor=1)"""
        return _core.ChLinkMateGeneric_ConstraintsBiLoad_Ct(self, factor)

    def ConstraintsLoadJacobians(self):
        r"""ConstraintsLoadJacobians(ChLinkMateGeneric self)"""
        return _core.ChLinkMateGeneric_ConstraintsLoadJacobians(self)

    def ConstraintsFetch_react(self, factor=1):
        r"""ConstraintsFetch_react(ChLinkMateGeneric self, double factor=1)"""
        return _core.ChLinkMateGeneric_ConstraintsFetch_react(self, factor)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkMateGeneric self, ChArchiveOut & marchive)"""
        return _core.ChLinkMateGeneric_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkMateGeneric self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkMateGeneric_ArchiveIN(self, marchive)

# Register ChLinkMateGeneric in _core:
_core.ChLinkMateGeneric_swigregister(ChLinkMateGeneric)

class ChLinkMatePlane(ChLinkMateGeneric):
    r"""Proxy of C++ chrono::ChLinkMatePlane class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkMatePlane self) -> ChLinkMatePlane
        __init__(ChLinkMatePlane self, ChLinkMatePlane other) -> ChLinkMatePlane
        """
        _core.ChLinkMatePlane_swiginit(self, _core.new_ChLinkMatePlane(*args))
    __swig_destroy__ = _core.delete_ChLinkMatePlane

    def Clone(self):
        r"""Clone(ChLinkMatePlane self) -> ChLinkMatePlane"""
        return _core.ChLinkMatePlane_Clone(self)

    def SetFlipped(self, doflip):
        r"""SetFlipped(ChLinkMatePlane self, bool doflip)"""
        return _core.ChLinkMatePlane_SetFlipped(self, doflip)

    def IsFlipped(self):
        r"""IsFlipped(ChLinkMatePlane self) -> bool"""
        return _core.ChLinkMatePlane_IsFlipped(self)

    def SetSeparation(self, msep):
        r"""SetSeparation(ChLinkMatePlane self, double msep)"""
        return _core.ChLinkMatePlane_SetSeparation(self, msep)

    def GetSeparation(self):
        r"""GetSeparation(ChLinkMatePlane self) -> double"""
        return _core.ChLinkMatePlane_GetSeparation(self)

    def Initialize(self, mbody1, mbody2, pos_are_relative, mpt1, mpt2, mnorm1, mnorm2):
        r"""Initialize(ChLinkMatePlane self, std::shared_ptr< chrono::ChBodyFrame > mbody1, std::shared_ptr< chrono::ChBodyFrame > mbody2, bool pos_are_relative, ChVectorD mpt1, ChVectorD mpt2, ChVectorD mnorm1, ChVectorD mnorm2)"""
        return _core.ChLinkMatePlane_Initialize(self, mbody1, mbody2, pos_are_relative, mpt1, mpt2, mnorm1, mnorm2)

    def Update(self, mtime, update_assets=True):
        r"""Update(ChLinkMatePlane self, double mtime, bool update_assets=True)"""
        return _core.ChLinkMatePlane_Update(self, mtime, update_assets)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkMatePlane self, ChArchiveOut & marchive)"""
        return _core.ChLinkMatePlane_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkMatePlane self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkMatePlane_ArchiveIN(self, marchive)

# Register ChLinkMatePlane in _core:
_core.ChLinkMatePlane_swigregister(ChLinkMatePlane)

class ChLinkMateCoaxial(ChLinkMateGeneric):
    r"""Proxy of C++ chrono::ChLinkMateCoaxial class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkMateCoaxial self) -> ChLinkMateCoaxial
        __init__(ChLinkMateCoaxial self, ChLinkMateCoaxial other) -> ChLinkMateCoaxial
        """
        _core.ChLinkMateCoaxial_swiginit(self, _core.new_ChLinkMateCoaxial(*args))
    __swig_destroy__ = _core.delete_ChLinkMateCoaxial

    def Clone(self):
        r"""Clone(ChLinkMateCoaxial self) -> ChLinkMateCoaxial"""
        return _core.ChLinkMateCoaxial_Clone(self)

    def SetFlipped(self, doflip):
        r"""SetFlipped(ChLinkMateCoaxial self, bool doflip)"""
        return _core.ChLinkMateCoaxial_SetFlipped(self, doflip)

    def IsFlipped(self):
        r"""IsFlipped(ChLinkMateCoaxial self) -> bool"""
        return _core.ChLinkMateCoaxial_IsFlipped(self)

    def Initialize(self, mbody1, mbody2, pos_are_relative, mpt1, mpt2, mdir1, mdir2):
        r"""Initialize(ChLinkMateCoaxial self, std::shared_ptr< chrono::ChBodyFrame > mbody1, std::shared_ptr< chrono::ChBodyFrame > mbody2, bool pos_are_relative, ChVectorD mpt1, ChVectorD mpt2, ChVectorD mdir1, ChVectorD mdir2)"""
        return _core.ChLinkMateCoaxial_Initialize(self, mbody1, mbody2, pos_are_relative, mpt1, mpt2, mdir1, mdir2)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkMateCoaxial self, ChArchiveOut & marchive)"""
        return _core.ChLinkMateCoaxial_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkMateCoaxial self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkMateCoaxial_ArchiveIN(self, marchive)

# Register ChLinkMateCoaxial in _core:
_core.ChLinkMateCoaxial_swigregister(ChLinkMateCoaxial)

class ChLinkMateSpherical(ChLinkMateGeneric):
    r"""Proxy of C++ chrono::ChLinkMateSpherical class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkMateSpherical self) -> ChLinkMateSpherical
        __init__(ChLinkMateSpherical self, ChLinkMateSpherical other) -> ChLinkMateSpherical
        """
        _core.ChLinkMateSpherical_swiginit(self, _core.new_ChLinkMateSpherical(*args))
    __swig_destroy__ = _core.delete_ChLinkMateSpherical

    def Clone(self):
        r"""Clone(ChLinkMateSpherical self) -> ChLinkMateSpherical"""
        return _core.ChLinkMateSpherical_Clone(self)

    def Initialize(self, mbody1, mbody2, pos_are_relative, mpt1, mpt2):
        r"""Initialize(ChLinkMateSpherical self, std::shared_ptr< chrono::ChBodyFrame > mbody1, std::shared_ptr< chrono::ChBodyFrame > mbody2, bool pos_are_relative, ChVectorD mpt1, ChVectorD mpt2)"""
        return _core.ChLinkMateSpherical_Initialize(self, mbody1, mbody2, pos_are_relative, mpt1, mpt2)

# Register ChLinkMateSpherical in _core:
_core.ChLinkMateSpherical_swigregister(ChLinkMateSpherical)

class ChLinkMateXdistance(ChLinkMateGeneric):
    r"""Proxy of C++ chrono::ChLinkMateXdistance class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkMateXdistance self) -> ChLinkMateXdistance
        __init__(ChLinkMateXdistance self, ChLinkMateXdistance other) -> ChLinkMateXdistance
        """
        _core.ChLinkMateXdistance_swiginit(self, _core.new_ChLinkMateXdistance(*args))
    __swig_destroy__ = _core.delete_ChLinkMateXdistance

    def Clone(self):
        r"""Clone(ChLinkMateXdistance self) -> ChLinkMateXdistance"""
        return _core.ChLinkMateXdistance_Clone(self)

    def SetDistance(self, msep):
        r"""SetDistance(ChLinkMateXdistance self, double msep)"""
        return _core.ChLinkMateXdistance_SetDistance(self, msep)

    def GetDistance(self):
        r"""GetDistance(ChLinkMateXdistance self) -> double"""
        return _core.ChLinkMateXdistance_GetDistance(self)

    def Initialize(self, mbody1, mbody2, pos_are_relative, mpt1, mpt2, mdir2):
        r"""Initialize(ChLinkMateXdistance self, std::shared_ptr< chrono::ChBodyFrame > mbody1, std::shared_ptr< chrono::ChBodyFrame > mbody2, bool pos_are_relative, ChVectorD mpt1, ChVectorD mpt2, ChVectorD mdir2)"""
        return _core.ChLinkMateXdistance_Initialize(self, mbody1, mbody2, pos_are_relative, mpt1, mpt2, mdir2)

    def Update(self, mtime, update_assets=True):
        r"""Update(ChLinkMateXdistance self, double mtime, bool update_assets=True)"""
        return _core.ChLinkMateXdistance_Update(self, mtime, update_assets)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkMateXdistance self, ChArchiveOut & marchive)"""
        return _core.ChLinkMateXdistance_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkMateXdistance self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkMateXdistance_ArchiveIN(self, marchive)

# Register ChLinkMateXdistance in _core:
_core.ChLinkMateXdistance_swigregister(ChLinkMateXdistance)

class ChLinkMateParallel(ChLinkMateGeneric):
    r"""Proxy of C++ chrono::ChLinkMateParallel class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkMateParallel self) -> ChLinkMateParallel
        __init__(ChLinkMateParallel self, ChLinkMateParallel other) -> ChLinkMateParallel
        """
        _core.ChLinkMateParallel_swiginit(self, _core.new_ChLinkMateParallel(*args))
    __swig_destroy__ = _core.delete_ChLinkMateParallel

    def Clone(self):
        r"""Clone(ChLinkMateParallel self) -> ChLinkMateParallel"""
        return _core.ChLinkMateParallel_Clone(self)

    def SetFlipped(self, doflip):
        r"""SetFlipped(ChLinkMateParallel self, bool doflip)"""
        return _core.ChLinkMateParallel_SetFlipped(self, doflip)

    def IsFlipped(self):
        r"""IsFlipped(ChLinkMateParallel self) -> bool"""
        return _core.ChLinkMateParallel_IsFlipped(self)

    def Initialize(self, mbody1, mbody2, pos_are_relative, mpt1, mpt2, mdir1, mdir2):
        r"""Initialize(ChLinkMateParallel self, std::shared_ptr< chrono::ChBodyFrame > mbody1, std::shared_ptr< chrono::ChBodyFrame > mbody2, bool pos_are_relative, ChVectorD mpt1, ChVectorD mpt2, ChVectorD mdir1, ChVectorD mdir2)"""
        return _core.ChLinkMateParallel_Initialize(self, mbody1, mbody2, pos_are_relative, mpt1, mpt2, mdir1, mdir2)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkMateParallel self, ChArchiveOut & marchive)"""
        return _core.ChLinkMateParallel_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkMateParallel self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkMateParallel_ArchiveIN(self, marchive)

# Register ChLinkMateParallel in _core:
_core.ChLinkMateParallel_swigregister(ChLinkMateParallel)

class ChLinkMateOrthogonal(ChLinkMateGeneric):
    r"""Proxy of C++ chrono::ChLinkMateOrthogonal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkMateOrthogonal self) -> ChLinkMateOrthogonal
        __init__(ChLinkMateOrthogonal self, ChLinkMateOrthogonal other) -> ChLinkMateOrthogonal
        """
        _core.ChLinkMateOrthogonal_swiginit(self, _core.new_ChLinkMateOrthogonal(*args))
    __swig_destroy__ = _core.delete_ChLinkMateOrthogonal

    def Clone(self):
        r"""Clone(ChLinkMateOrthogonal self) -> ChLinkMateOrthogonal"""
        return _core.ChLinkMateOrthogonal_Clone(self)

    def Initialize(self, mbody1, mbody2, pos_are_relative, mpt1, mpt2, mdir1, mdir2):
        r"""Initialize(ChLinkMateOrthogonal self, std::shared_ptr< chrono::ChBodyFrame > mbody1, std::shared_ptr< chrono::ChBodyFrame > mbody2, bool pos_are_relative, ChVectorD mpt1, ChVectorD mpt2, ChVectorD mdir1, ChVectorD mdir2)"""
        return _core.ChLinkMateOrthogonal_Initialize(self, mbody1, mbody2, pos_are_relative, mpt1, mpt2, mdir1, mdir2)

    def Update(self, mtime, update_assets=True):
        r"""Update(ChLinkMateOrthogonal self, double mtime, bool update_assets=True)"""
        return _core.ChLinkMateOrthogonal_Update(self, mtime, update_assets)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkMateOrthogonal self, ChArchiveOut & marchive)"""
        return _core.ChLinkMateOrthogonal_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkMateOrthogonal self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkMateOrthogonal_ArchiveIN(self, marchive)

# Register ChLinkMateOrthogonal in _core:
_core.ChLinkMateOrthogonal_swigregister(ChLinkMateOrthogonal)

class ChLinkMateFix(ChLinkMateGeneric):
    r"""Proxy of C++ chrono::ChLinkMateFix class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkMateFix self) -> ChLinkMateFix
        __init__(ChLinkMateFix self, ChLinkMateFix other) -> ChLinkMateFix
        """
        _core.ChLinkMateFix_swiginit(self, _core.new_ChLinkMateFix(*args))
    __swig_destroy__ = _core.delete_ChLinkMateFix

    def Clone(self):
        r"""Clone(ChLinkMateFix self) -> ChLinkMateFix"""
        return _core.ChLinkMateFix_Clone(self)

    def Initialize(self, mbody1, mbody2):
        r"""Initialize(ChLinkMateFix self, std::shared_ptr< chrono::ChBodyFrame > mbody1, std::shared_ptr< chrono::ChBodyFrame > mbody2)"""
        return _core.ChLinkMateFix_Initialize(self, mbody1, mbody2)

# Register ChLinkMateFix in _core:
_core.ChLinkMateFix_swigregister(ChLinkMateFix)

class ChLinkDistance(ChLink):
    r"""Proxy of C++ chrono::ChLinkDistance class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkDistance self) -> ChLinkDistance
        __init__(ChLinkDistance self, ChLinkDistance other) -> ChLinkDistance
        """
        _core.ChLinkDistance_swiginit(self, _core.new_ChLinkDistance(*args))
    __swig_destroy__ = _core.delete_ChLinkDistance

    def Clone(self):
        r"""Clone(ChLinkDistance self) -> ChLinkDistance"""
        return _core.ChLinkDistance_Clone(self)

    def Initialize(self, mbody1, mbody2, pos_are_relative, mpos1, mpos2, auto_distance=True, mdistance=0):
        r"""Initialize(ChLinkDistance self, std::shared_ptr< chrono::ChBodyFrame > mbody1, std::shared_ptr< chrono::ChBodyFrame > mbody2, bool pos_are_relative, ChVectorD mpos1, ChVectorD mpos2, bool auto_distance=True, double mdistance=0) -> int"""
        return _core.ChLinkDistance_Initialize(self, mbody1, mbody2, pos_are_relative, mpos1, mpos2, auto_distance, mdistance)

    def GetDOC_c(self):
        r"""GetDOC_c(ChLinkDistance self) -> int"""
        return _core.ChLinkDistance_GetDOC_c(self)

    def GetLinkRelativeCoords(self):
        r"""GetLinkRelativeCoords(ChLinkDistance self) -> ChCoordsysD"""
        return _core.ChLinkDistance_GetLinkRelativeCoords(self)

    def GetEndPoint1Rel(self):
        r"""GetEndPoint1Rel(ChLinkDistance self) -> ChVectorD"""
        return _core.ChLinkDistance_GetEndPoint1Rel(self)

    def SetEndPoint1Rel(self, mset):
        r"""SetEndPoint1Rel(ChLinkDistance self, ChVectorD mset)"""
        return _core.ChLinkDistance_SetEndPoint1Rel(self, mset)

    def GetEndPoint1Abs(self):
        r"""GetEndPoint1Abs(ChLinkDistance self) -> ChVectorD"""
        return _core.ChLinkDistance_GetEndPoint1Abs(self)

    def SetEndPoint1Abs(self, mset):
        r"""SetEndPoint1Abs(ChLinkDistance self, ChVectorD mset)"""
        return _core.ChLinkDistance_SetEndPoint1Abs(self, mset)

    def GetEndPoint2Rel(self):
        r"""GetEndPoint2Rel(ChLinkDistance self) -> ChVectorD"""
        return _core.ChLinkDistance_GetEndPoint2Rel(self)

    def SetEndPoint2Rel(self, mset):
        r"""SetEndPoint2Rel(ChLinkDistance self, ChVectorD mset)"""
        return _core.ChLinkDistance_SetEndPoint2Rel(self, mset)

    def GetEndPoint2Abs(self):
        r"""GetEndPoint2Abs(ChLinkDistance self) -> ChVectorD"""
        return _core.ChLinkDistance_GetEndPoint2Abs(self)

    def SetEndPoint2Abs(self, mset):
        r"""SetEndPoint2Abs(ChLinkDistance self, ChVectorD mset)"""
        return _core.ChLinkDistance_SetEndPoint2Abs(self, mset)

    def GetImposedDistance(self):
        r"""GetImposedDistance(ChLinkDistance self) -> double"""
        return _core.ChLinkDistance_GetImposedDistance(self)

    def SetImposedDistance(self, mset):
        r"""SetImposedDistance(ChLinkDistance self, double const mset)"""
        return _core.ChLinkDistance_SetImposedDistance(self, mset)

    def GetCurrentDistance(self):
        r"""GetCurrentDistance(ChLinkDistance self) -> double"""
        return _core.ChLinkDistance_GetCurrentDistance(self)

    def GetC(self):
        r"""GetC(ChLinkDistance self) -> double"""
        return _core.ChLinkDistance_GetC(self)

    def Update(self, mtime, update_assets=True):
        r"""Update(ChLinkDistance self, double mtime, bool update_assets=True)"""
        return _core.ChLinkDistance_Update(self, mtime, update_assets)

    def IntStateGatherReactions(self, off_L, L):
        r"""IntStateGatherReactions(ChLinkDistance self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChLinkDistance_IntStateGatherReactions(self, off_L, L)

    def IntStateScatterReactions(self, off_L, L):
        r"""IntStateScatterReactions(ChLinkDistance self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChLinkDistance_IntStateScatterReactions(self, off_L, L)

    def IntLoadResidual_CqL(self, off_L, R, L, c):
        r"""IntLoadResidual_CqL(ChLinkDistance self, unsigned int const off_L, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _core.ChLinkDistance_IntLoadResidual_CqL(self, off_L, R, L, c)

    def IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp):
        r"""IntLoadConstraint_C(ChLinkDistance self, unsigned int const off, ChVectorDynamicD Qc, double const c, bool do_clamp, double recovery_clamp)"""
        return _core.ChLinkDistance_IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChLinkDistance self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _core.ChLinkDistance_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChLinkDistance self, unsigned int const off_v, ChStateDelta v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChLinkDistance_IntFromDescriptor(self, off_v, v, off_L, L)

    def InjectConstraints(self, mdescriptor):
        r"""InjectConstraints(ChLinkDistance self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChLinkDistance_InjectConstraints(self, mdescriptor)

    def ConstraintsBiReset(self):
        r"""ConstraintsBiReset(ChLinkDistance self)"""
        return _core.ChLinkDistance_ConstraintsBiReset(self)

    def ConstraintsBiLoad_C(self, factor=1, recovery_clamp=0.1, do_clamp=False):
        r"""ConstraintsBiLoad_C(ChLinkDistance self, double factor=1, double recovery_clamp=0.1, bool do_clamp=False)"""
        return _core.ChLinkDistance_ConstraintsBiLoad_C(self, factor, recovery_clamp, do_clamp)

    def ConstraintsLoadJacobians(self):
        r"""ConstraintsLoadJacobians(ChLinkDistance self)"""
        return _core.ChLinkDistance_ConstraintsLoadJacobians(self)

    def ConstraintsFetch_react(self, factor=1):
        r"""ConstraintsFetch_react(ChLinkDistance self, double factor=1)"""
        return _core.ChLinkDistance_ConstraintsFetch_react(self, factor)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkDistance self, ChArchiveOut & marchive)"""
        return _core.ChLinkDistance_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkDistance self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkDistance_ArchiveIN(self, marchive)

# Register ChLinkDistance in _core:
_core.ChLinkDistance_swigregister(ChLinkDistance)

class ChLinkLinActuator(ChLinkLockLock):
    r"""Proxy of C++ chrono::ChLinkLinActuator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkLinActuator self) -> ChLinkLinActuator
        __init__(ChLinkLinActuator self, ChLinkLinActuator other) -> ChLinkLinActuator
        """
        _core.ChLinkLinActuator_swiginit(self, _core.new_ChLinkLinActuator(*args))
    __swig_destroy__ = _core.delete_ChLinkLinActuator

    def Clone(self):
        r"""Clone(ChLinkLinActuator self) -> ChLinkLinActuator"""
        return _core.ChLinkLinActuator_Clone(self)

    def UpdateTime(self, mytime):
        r"""UpdateTime(ChLinkLinActuator self, double mytime)"""
        return _core.ChLinkLinActuator_UpdateTime(self, mytime)

    def Get_dist_funct(self):
        r"""Get_dist_funct(ChLinkLinActuator self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkLinActuator_Get_dist_funct(self)

    def Get_motrot_funct(self):
        r"""Get_motrot_funct(ChLinkLinActuator self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkLinActuator_Get_motrot_funct(self)

    def Get_mottorque_funct(self):
        r"""Get_mottorque_funct(ChLinkLinActuator self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkLinActuator_Get_mottorque_funct(self)

    def Set_dist_funct(self, mf):
        r"""Set_dist_funct(ChLinkLinActuator self, std::shared_ptr< chrono::ChFunction > mf)"""
        return _core.ChLinkLinActuator_Set_dist_funct(self, mf)

    def Set_motrot_funct(self, mf):
        r"""Set_motrot_funct(ChLinkLinActuator self, std::shared_ptr< chrono::ChFunction > mf)"""
        return _core.ChLinkLinActuator_Set_motrot_funct(self, mf)

    def Set_mottorque_funct(self, mf):
        r"""Set_mottorque_funct(ChLinkLinActuator self, std::shared_ptr< chrono::ChFunction > mf)"""
        return _core.ChLinkLinActuator_Set_mottorque_funct(self, mf)

    def Get_learn(self):
        r"""Get_learn(ChLinkLinActuator self) -> bool"""
        return _core.ChLinkLinActuator_Get_learn(self)

    def Set_learn(self, mset):
        r"""Set_learn(ChLinkLinActuator self, bool mset)"""
        return _core.ChLinkLinActuator_Set_learn(self, mset)

    def Get_learn_torque_rotaton(self):
        r"""Get_learn_torque_rotaton(ChLinkLinActuator self) -> bool"""
        return _core.ChLinkLinActuator_Get_learn_torque_rotaton(self)

    def Set_learn_torque_rotaton(self, mset):
        r"""Set_learn_torque_rotaton(ChLinkLinActuator self, bool mset)"""
        return _core.ChLinkLinActuator_Set_learn_torque_rotaton(self, mset)

    def Get_lin_offset(self):
        r"""Get_lin_offset(ChLinkLinActuator self) -> double"""
        return _core.ChLinkLinActuator_Get_lin_offset(self)

    def Set_lin_offset(self, mset):
        r"""Set_lin_offset(ChLinkLinActuator self, double mset)"""
        return _core.ChLinkLinActuator_Set_lin_offset(self, mset)

    def Set_mot_tau(self, mtau):
        r"""Set_mot_tau(ChLinkLinActuator self, double mtau)"""
        return _core.ChLinkLinActuator_Set_mot_tau(self, mtau)

    def Get_mot_tau(self):
        r"""Get_mot_tau(ChLinkLinActuator self) -> double"""
        return _core.ChLinkLinActuator_Get_mot_tau(self)

    def Set_mot_eta(self, meta):
        r"""Set_mot_eta(ChLinkLinActuator self, double meta)"""
        return _core.ChLinkLinActuator_Set_mot_eta(self, meta)

    def Get_mot_eta(self):
        r"""Get_mot_eta(ChLinkLinActuator self) -> double"""
        return _core.ChLinkLinActuator_Get_mot_eta(self)

    def Set_mot_inertia(self, min):
        r"""Set_mot_inertia(ChLinkLinActuator self, double min)"""
        return _core.ChLinkLinActuator_Set_mot_inertia(self, min)

    def Get_mot_inertia(self):
        r"""Get_mot_inertia(ChLinkLinActuator self) -> double"""
        return _core.ChLinkLinActuator_Get_mot_inertia(self)

    def Get_mot_rerot(self):
        r"""Get_mot_rerot(ChLinkLinActuator self) -> double"""
        return _core.ChLinkLinActuator_Get_mot_rerot(self)

    def Get_mot_rerot_dt(self):
        r"""Get_mot_rerot_dt(ChLinkLinActuator self) -> double"""
        return _core.ChLinkLinActuator_Get_mot_rerot_dt(self)

    def Get_mot_rerot_dtdt(self):
        r"""Get_mot_rerot_dtdt(ChLinkLinActuator self) -> double"""
        return _core.ChLinkLinActuator_Get_mot_rerot_dtdt(self)

    def Get_mot_retorque(self):
        r"""Get_mot_retorque(ChLinkLinActuator self) -> double"""
        return _core.ChLinkLinActuator_Get_mot_retorque(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkLinActuator self, ChArchiveOut & marchive)"""
        return _core.ChLinkLinActuator_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkLinActuator self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkLinActuator_ArchiveIN(self, marchive)

# Register ChLinkLinActuator in _core:
_core.ChLinkLinActuator_swigregister(ChLinkLinActuator)

class ChLinkPulley(ChLinkLockLock):
    r"""Proxy of C++ chrono::ChLinkPulley class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkPulley self) -> ChLinkPulley
        __init__(ChLinkPulley self, ChLinkPulley other) -> ChLinkPulley
        """
        _core.ChLinkPulley_swiginit(self, _core.new_ChLinkPulley(*args))
    __swig_destroy__ = _core.delete_ChLinkPulley

    def Clone(self):
        r"""Clone(ChLinkPulley self) -> ChLinkPulley"""
        return _core.ChLinkPulley_Clone(self)

    def UpdateTime(self, mytime):
        r"""UpdateTime(ChLinkPulley self, double mytime)"""
        return _core.ChLinkPulley_UpdateTime(self, mytime)

    def Set_r1(self, mr):
        r"""Set_r1(ChLinkPulley self, double mr)"""
        return _core.ChLinkPulley_Set_r1(self, mr)

    def Set_r2(self, mr):
        r"""Set_r2(ChLinkPulley self, double mr)"""
        return _core.ChLinkPulley_Set_r2(self, mr)

    def Get_r1(self):
        r"""Get_r1(ChLinkPulley self) -> double"""
        return _core.ChLinkPulley_Get_r1(self)

    def Get_r2(self):
        r"""Get_r2(ChLinkPulley self) -> double"""
        return _core.ChLinkPulley_Get_r2(self)

    def Get_tau(self):
        r"""Get_tau(ChLinkPulley self) -> double"""
        return _core.ChLinkPulley_Get_tau(self)

    def Get_phase(self):
        r"""Get_phase(ChLinkPulley self) -> double"""
        return _core.ChLinkPulley_Get_phase(self)

    def Set_phase(self, mset):
        r"""Set_phase(ChLinkPulley self, double mset)"""
        return _core.ChLinkPulley_Set_phase(self, mset)

    def Set_checkphase(self, mset):
        r"""Set_checkphase(ChLinkPulley self, bool mset)"""
        return _core.ChLinkPulley_Set_checkphase(self, mset)

    def Get_checkphase(self):
        r"""Get_checkphase(ChLinkPulley self) -> bool"""
        return _core.ChLinkPulley_Get_checkphase(self)

    def Get_a1(self):
        r"""Get_a1(ChLinkPulley self) -> double"""
        return _core.ChLinkPulley_Get_a1(self)

    def Get_a2(self):
        r"""Get_a2(ChLinkPulley self) -> double"""
        return _core.ChLinkPulley_Get_a2(self)

    def Reset_a1a2(self):
        r"""Reset_a1a2(ChLinkPulley self)"""
        return _core.ChLinkPulley_Reset_a1a2(self)

    def Get_local_shaft1(self):
        r"""Get_local_shaft1(ChLinkPulley self) -> ChFrameD"""
        return _core.ChLinkPulley_Get_local_shaft1(self)

    def Set_local_shaft1(self, mf):
        r"""Set_local_shaft1(ChLinkPulley self, ChFrameD mf)"""
        return _core.ChLinkPulley_Set_local_shaft1(self, mf)

    def Get_local_shaft2(self):
        r"""Get_local_shaft2(ChLinkPulley self) -> ChFrameD"""
        return _core.ChLinkPulley_Get_local_shaft2(self)

    def Set_local_shaft2(self, mf):
        r"""Set_local_shaft2(ChLinkPulley self, ChFrameD mf)"""
        return _core.ChLinkPulley_Set_local_shaft2(self, mf)

    def Get_shaft_dir1(self):
        r"""Get_shaft_dir1(ChLinkPulley self) -> ChVectorD"""
        return _core.ChLinkPulley_Get_shaft_dir1(self)

    def Get_shaft_dir2(self):
        r"""Get_shaft_dir2(ChLinkPulley self) -> ChVectorD"""
        return _core.ChLinkPulley_Get_shaft_dir2(self)

    def Get_shaft_pos1(self):
        r"""Get_shaft_pos1(ChLinkPulley self) -> ChVectorD"""
        return _core.ChLinkPulley_Get_shaft_pos1(self)

    def Get_shaft_pos2(self):
        r"""Get_shaft_pos2(ChLinkPulley self) -> ChVectorD"""
        return _core.ChLinkPulley_Get_shaft_pos2(self)

    def Get_belt_up1(self):
        r"""Get_belt_up1(ChLinkPulley self) -> ChVectorD"""
        return _core.ChLinkPulley_Get_belt_up1(self)

    def Get_belt_up2(self):
        r"""Get_belt_up2(ChLinkPulley self) -> ChVectorD"""
        return _core.ChLinkPulley_Get_belt_up2(self)

    def Get_belt_low1(self):
        r"""Get_belt_low1(ChLinkPulley self) -> ChVectorD"""
        return _core.ChLinkPulley_Get_belt_low1(self)

    def Get_belt_low2(self):
        r"""Get_belt_low2(ChLinkPulley self) -> ChVectorD"""
        return _core.ChLinkPulley_Get_belt_low2(self)

    def GetShaftsDistance(self):
        r"""GetShaftsDistance(ChLinkPulley self) -> double"""
        return _core.ChLinkPulley_GetShaftsDistance(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkPulley self, ChArchiveOut & marchive)"""
        return _core.ChLinkPulley_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkPulley self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkPulley_ArchiveIN(self, marchive)

# Register ChLinkPulley in _core:
_core.ChLinkPulley_swigregister(ChLinkPulley)

class ChLinkScrew(ChLinkLock):
    r"""Proxy of C++ chrono::ChLinkScrew class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkScrew self) -> ChLinkScrew
        __init__(ChLinkScrew self, ChLinkScrew other) -> ChLinkScrew
        """
        _core.ChLinkScrew_swiginit(self, _core.new_ChLinkScrew(*args))
    __swig_destroy__ = _core.delete_ChLinkScrew

    def Clone(self):
        r"""Clone(ChLinkScrew self) -> ChLinkScrew"""
        return _core.ChLinkScrew_Clone(self)

    def UpdateState(self):
        r"""UpdateState(ChLinkScrew self)"""
        return _core.ChLinkScrew_UpdateState(self)

    def Get_tau(self):
        r"""Get_tau(ChLinkScrew self) -> double"""
        return _core.ChLinkScrew_Get_tau(self)

    def Set_tau(self, mset):
        r"""Set_tau(ChLinkScrew self, double mset)"""
        return _core.ChLinkScrew_Set_tau(self, mset)

    def Get_thread(self):
        r"""Get_thread(ChLinkScrew self) -> double"""
        return _core.ChLinkScrew_Get_thread(self)

    def Set_thread(self, mset):
        r"""Set_thread(ChLinkScrew self, double mset)"""
        return _core.ChLinkScrew_Set_thread(self, mset)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkScrew self, ChArchiveOut & marchive)"""
        return _core.ChLinkScrew_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkScrew self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkScrew_ArchiveIN(self, marchive)

# Register ChLinkScrew in _core:
_core.ChLinkScrew_swigregister(ChLinkScrew)

class ChLinkSpring(ChLinkMarkers):
    r"""Proxy of C++ chrono::ChLinkSpring class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkSpring self) -> ChLinkSpring
        __init__(ChLinkSpring self, ChLinkSpring other) -> ChLinkSpring
        """
        _core.ChLinkSpring_swiginit(self, _core.new_ChLinkSpring(*args))
    __swig_destroy__ = _core.delete_ChLinkSpring

    def Clone(self):
        r"""Clone(ChLinkSpring self) -> ChLinkSpring"""
        return _core.ChLinkSpring_Clone(self)

    def Get_SpringRestLength(self):
        r"""Get_SpringRestLength(ChLinkSpring self) -> double"""
        return _core.ChLinkSpring_Get_SpringRestLength(self)

    def Get_SpringDeform(self):
        r"""Get_SpringDeform(ChLinkSpring self) -> double"""
        return _core.ChLinkSpring_Get_SpringDeform(self)

    def Get_SpringLength(self):
        r"""Get_SpringLength(ChLinkSpring self) -> double"""
        return _core.ChLinkSpring_Get_SpringLength(self)

    def Get_SpringVelocity(self):
        r"""Get_SpringVelocity(ChLinkSpring self) -> double"""
        return _core.ChLinkSpring_Get_SpringVelocity(self)

    def Get_SpringK(self):
        r"""Get_SpringK(ChLinkSpring self) -> double"""
        return _core.ChLinkSpring_Get_SpringK(self)

    def Get_SpringR(self):
        r"""Get_SpringR(ChLinkSpring self) -> double"""
        return _core.ChLinkSpring_Get_SpringR(self)

    def Get_SpringF(self):
        r"""Get_SpringF(ChLinkSpring self) -> double"""
        return _core.ChLinkSpring_Get_SpringF(self)

    def Get_SpringReact(self):
        r"""Get_SpringReact(ChLinkSpring self) -> double"""
        return _core.ChLinkSpring_Get_SpringReact(self)

    def Set_SpringRestLength(self, m_r):
        r"""Set_SpringRestLength(ChLinkSpring self, double m_r)"""
        return _core.ChLinkSpring_Set_SpringRestLength(self, m_r)

    def Set_SpringK(self, m_r):
        r"""Set_SpringK(ChLinkSpring self, double m_r)"""
        return _core.ChLinkSpring_Set_SpringK(self, m_r)

    def Set_SpringR(self, m_r):
        r"""Set_SpringR(ChLinkSpring self, double m_r)"""
        return _core.ChLinkSpring_Set_SpringR(self, m_r)

    def Set_SpringF(self, m_r):
        r"""Set_SpringF(ChLinkSpring self, double m_r)"""
        return _core.ChLinkSpring_Set_SpringF(self, m_r)

    def Get_mod_f_time(self):
        r"""Get_mod_f_time(ChLinkSpring self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkSpring_Get_mod_f_time(self)

    def Get_mod_k_d(self):
        r"""Get_mod_k_d(ChLinkSpring self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkSpring_Get_mod_k_d(self)

    def Get_mod_r_d(self):
        r"""Get_mod_r_d(ChLinkSpring self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkSpring_Get_mod_r_d(self)

    def Get_mod_k_speed(self):
        r"""Get_mod_k_speed(ChLinkSpring self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkSpring_Get_mod_k_speed(self)

    def Get_mod_r_speed(self):
        r"""Get_mod_r_speed(ChLinkSpring self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkSpring_Get_mod_r_speed(self)

    def Set_mod_f_time(self, mf):
        r"""Set_mod_f_time(ChLinkSpring self, std::shared_ptr< chrono::ChFunction > mf)"""
        return _core.ChLinkSpring_Set_mod_f_time(self, mf)

    def Set_mod_k_d(self, mf):
        r"""Set_mod_k_d(ChLinkSpring self, std::shared_ptr< chrono::ChFunction > mf)"""
        return _core.ChLinkSpring_Set_mod_k_d(self, mf)

    def Set_mod_r_d(self, mf):
        r"""Set_mod_r_d(ChLinkSpring self, std::shared_ptr< chrono::ChFunction > mf)"""
        return _core.ChLinkSpring_Set_mod_r_d(self, mf)

    def Set_mod_k_speed(self, mf):
        r"""Set_mod_k_speed(ChLinkSpring self, std::shared_ptr< chrono::ChFunction > mf)"""
        return _core.ChLinkSpring_Set_mod_k_speed(self, mf)

    def Set_mod_r_speed(self, mf):
        r"""Set_mod_r_speed(ChLinkSpring self, std::shared_ptr< chrono::ChFunction > mf)"""
        return _core.ChLinkSpring_Set_mod_r_speed(self, mf)

    def Initialize(self, mbody1, mbody2, pos_are_relative, mpos1, mpos2, auto_rest_length=True, mrest_length=0):
        r"""Initialize(ChLinkSpring self, std::shared_ptr< chrono::ChBody > mbody1, std::shared_ptr< chrono::ChBody > mbody2, bool pos_are_relative, ChVectorD mpos1, ChVectorD mpos2, bool auto_rest_length=True, double mrest_length=0)"""
        return _core.ChLinkSpring_Initialize(self, mbody1, mbody2, pos_are_relative, mpos1, mpos2, auto_rest_length, mrest_length)

    def GetEndPoint1Rel(self):
        r"""GetEndPoint1Rel(ChLinkSpring self) -> ChVectorD"""
        return _core.ChLinkSpring_GetEndPoint1Rel(self)

    def SetEndPoint1Rel(self, mset):
        r"""SetEndPoint1Rel(ChLinkSpring self, ChVectorD mset)"""
        return _core.ChLinkSpring_SetEndPoint1Rel(self, mset)

    def GetEndPoint1Abs(self):
        r"""GetEndPoint1Abs(ChLinkSpring self) -> ChVectorD"""
        return _core.ChLinkSpring_GetEndPoint1Abs(self)

    def SetEndPoint1Abs(self, mset):
        r"""SetEndPoint1Abs(ChLinkSpring self, ChVectorD mset)"""
        return _core.ChLinkSpring_SetEndPoint1Abs(self, mset)

    def GetEndPoint2Rel(self):
        r"""GetEndPoint2Rel(ChLinkSpring self) -> ChVectorD"""
        return _core.ChLinkSpring_GetEndPoint2Rel(self)

    def SetEndPoint2Rel(self, mset):
        r"""SetEndPoint2Rel(ChLinkSpring self, ChVectorD mset)"""
        return _core.ChLinkSpring_SetEndPoint2Rel(self, mset)

    def GetEndPoint2Abs(self):
        r"""GetEndPoint2Abs(ChLinkSpring self) -> ChVectorD"""
        return _core.ChLinkSpring_GetEndPoint2Abs(self)

    def SetEndPoint2Abs(self, mset):
        r"""SetEndPoint2Abs(ChLinkSpring self, ChVectorD mset)"""
        return _core.ChLinkSpring_SetEndPoint2Abs(self, mset)

    def UpdateForces(self, mytime):
        r"""UpdateForces(ChLinkSpring self, double mytime)"""
        return _core.ChLinkSpring_UpdateForces(self, mytime)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkSpring self, ChArchiveOut & marchive)"""
        return _core.ChLinkSpring_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkSpring self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkSpring_ArchiveIN(self, marchive)

# Register ChLinkSpring in _core:
_core.ChLinkSpring_swigregister(ChLinkSpring)

class ForceFunctorP(object):
    r"""Proxy of C++ ForceFunctorP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ForceFunctorP self) -> ForceFunctorP"""
        if self.__class__ == ForceFunctorP:
            _self = None
        else:
            _self = self
        _core.ForceFunctorP_swiginit(self, _core.new_ForceFunctorP(_self, ))
    __swig_destroy__ = _core.delete_ForceFunctorP

    def __call__(self, time, rest_length, length, vel, link):
        r"""__call__(ForceFunctorP self, double time, double rest_length, double length, double vel, ChLinkTSDA * link) -> double"""
        return _core.ForceFunctorP___call__(self, time, rest_length, length, vel, link)
    def __disown__(self):
        self.this.disown()
        _core.disown_ForceFunctorP(self)
        return weakref.proxy(self)

# Register ForceFunctorP in _core:
_core.ForceFunctorP_swigregister(ForceFunctorP)

class ChLinkTSDA(ChLink):
    r"""Proxy of C++ chrono::ChLinkTSDA class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkTSDA self) -> ChLinkTSDA
        __init__(ChLinkTSDA self, ChLinkTSDA other) -> ChLinkTSDA
        """
        _core.ChLinkTSDA_swiginit(self, _core.new_ChLinkTSDA(*args))
    __swig_destroy__ = _core.delete_ChLinkTSDA

    def Clone(self):
        r"""Clone(ChLinkTSDA self) -> ChLinkTSDA"""
        return _core.ChLinkTSDA_Clone(self)

    def SetRestLength(self, len):
        r"""SetRestLength(ChLinkTSDA self, double len)"""
        return _core.ChLinkTSDA_SetRestLength(self, len)

    def SetSpringCoefficient(self, k):
        r"""SetSpringCoefficient(ChLinkTSDA self, double k)"""
        return _core.ChLinkTSDA_SetSpringCoefficient(self, k)

    def SetDampingCoefficient(self, r):
        r"""SetDampingCoefficient(ChLinkTSDA self, double r)"""
        return _core.ChLinkTSDA_SetDampingCoefficient(self, r)

    def SetActuatorForce(self, f):
        r"""SetActuatorForce(ChLinkTSDA self, double f)"""
        return _core.ChLinkTSDA_SetActuatorForce(self, f)

    def IsStiff(self, val):
        r"""IsStiff(ChLinkTSDA self, bool val)"""
        return _core.ChLinkTSDA_IsStiff(self, val)

    def GetStates(self):
        r"""GetStates(ChLinkTSDA self) -> ChVectorDynamicD"""
        return _core.ChLinkTSDA_GetStates(self)

    def GetRestLength(self):
        r"""GetRestLength(ChLinkTSDA self) -> double"""
        return _core.ChLinkTSDA_GetRestLength(self)

    def GetLength(self):
        r"""GetLength(ChLinkTSDA self) -> double"""
        return _core.ChLinkTSDA_GetLength(self)

    def GetDeformation(self):
        r"""GetDeformation(ChLinkTSDA self) -> double"""
        return _core.ChLinkTSDA_GetDeformation(self)

    def GetVelocity(self):
        r"""GetVelocity(ChLinkTSDA self) -> double"""
        return _core.ChLinkTSDA_GetVelocity(self)

    def GetForce(self):
        r"""GetForce(ChLinkTSDA self) -> double"""
        return _core.ChLinkTSDA_GetForce(self)

    def GetPoint1Rel(self):
        r"""GetPoint1Rel(ChLinkTSDA self) -> ChVectorD"""
        return _core.ChLinkTSDA_GetPoint1Rel(self)

    def GetPoint1Abs(self):
        r"""GetPoint1Abs(ChLinkTSDA self) -> ChVectorD"""
        return _core.ChLinkTSDA_GetPoint1Abs(self)

    def GetPoint2Rel(self):
        r"""GetPoint2Rel(ChLinkTSDA self) -> ChVectorD"""
        return _core.ChLinkTSDA_GetPoint2Rel(self)

    def GetPoint2Abs(self):
        r"""GetPoint2Abs(ChLinkTSDA self) -> ChVectorD"""
        return _core.ChLinkTSDA_GetPoint2Abs(self)

    def GetSpringCoefficient(self):
        r"""GetSpringCoefficient(ChLinkTSDA self) -> double"""
        return _core.ChLinkTSDA_GetSpringCoefficient(self)

    def GetDampingCoefficient(self):
        r"""GetDampingCoefficient(ChLinkTSDA self) -> double"""
        return _core.ChLinkTSDA_GetDampingCoefficient(self)

    def GetActuatorForce(self):
        r"""GetActuatorForce(ChLinkTSDA self) -> double"""
        return _core.ChLinkTSDA_GetActuatorForce(self)

    def RegisterODE(self, functor):
        r"""RegisterODE(ChLinkTSDA self, ODE functor)"""
        return _core.ChLinkTSDA_RegisterODE(self, functor)

    def Initialize(self, body1, body2, pos_are_relative, loc1, loc2, auto_rest_length=True, rest_length=0):
        r"""Initialize(ChLinkTSDA self, std::shared_ptr< chrono::ChBody > body1, std::shared_ptr< chrono::ChBody > body2, bool pos_are_relative, ChVectorD loc1, ChVectorD loc2, bool auto_rest_length=True, double rest_length=0)"""
        return _core.ChLinkTSDA_Initialize(self, body1, body2, pos_are_relative, loc1, loc2, auto_rest_length, rest_length)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkTSDA self, ChArchiveOut & marchive)"""
        return _core.ChLinkTSDA_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkTSDA self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkTSDA_ArchiveIN(self, marchive)

    def RegisterForceFunctor(self, *args):
        r"""
        RegisterForceFunctor(ChLinkTSDA self, ForceFunctor functor)
        RegisterForceFunctor(ChLinkTSDA self, ForceFunctorP functor)
        """
        return _core.ChLinkTSDA_RegisterForceFunctor(self, *args)

# Register ChLinkTSDA in _core:
_core.ChLinkTSDA_swigregister(ChLinkTSDA)

class ForceFunctor(object):
    r"""Proxy of C++ chrono::ChLinkTSDA::ForceFunctor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ForceFunctor

    def __call__(self, time, rest_length, length, vel, link):
        r"""__call__(ForceFunctor self, double time, double rest_length, double length, double vel, ChLinkTSDA link) -> double"""
        return _core.ForceFunctor___call__(self, time, rest_length, length, vel, link)

# Register ForceFunctor in _core:
_core.ForceFunctor_swigregister(ForceFunctor)

class ODE(object):
    r"""Proxy of C++ chrono::ChLinkTSDA::ODE class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ODE

    def GetNumStates(self):
        r"""GetNumStates(ODE self) -> int"""
        return _core.ODE_GetNumStates(self)

    def SetInitialConditions(self, states, link):
        r"""SetInitialConditions(ODE self, ChVectorDynamicD states, ChLinkTSDA link)"""
        return _core.ODE_SetInitialConditions(self, states, link)

    def CalculateRHS(self, time, states, rhs, link):
        r"""CalculateRHS(ODE self, double time, ChVectorDynamicD states, ChVectorDynamicD rhs, ChLinkTSDA link)"""
        return _core.ODE_CalculateRHS(self, time, states, rhs, link)

    def CalculateJac(self, time, states, rhs, jac, link):
        r"""CalculateJac(ODE self, double time, ChVectorDynamicD states, ChVectorDynamicD rhs, ChMatrixDynamicD jac, ChLinkTSDA link) -> bool"""
        return _core.ODE_CalculateJac(self, time, states, rhs, jac, link)

# Register ODE in _core:
_core.ODE_swigregister(ODE)

class TorqueFunctorP(object):
    r"""Proxy of C++ TorqueFunctorP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(TorqueFunctorP self) -> TorqueFunctorP"""
        if self.__class__ == TorqueFunctorP:
            _self = None
        else:
            _self = self
        _core.TorqueFunctorP_swiginit(self, _core.new_TorqueFunctorP(_self, ))
    __swig_destroy__ = _core.delete_TorqueFunctorP

    def __call__(self, time, angle, vel, link):
        r"""__call__(TorqueFunctorP self, double time, double angle, double vel, ChLinkRotSpringCB * link) -> double"""
        return _core.TorqueFunctorP___call__(self, time, angle, vel, link)
    def __disown__(self):
        self.this.disown()
        _core.disown_TorqueFunctorP(self)
        return weakref.proxy(self)

# Register TorqueFunctorP in _core:
_core.TorqueFunctorP_swigregister(TorqueFunctorP)

class ChLinkRotSpringCB(ChLinkMarkers):
    r"""Proxy of C++ chrono::ChLinkRotSpringCB class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkRotSpringCB self) -> ChLinkRotSpringCB
        __init__(ChLinkRotSpringCB self, ChLinkRotSpringCB other) -> ChLinkRotSpringCB
        """
        _core.ChLinkRotSpringCB_swiginit(self, _core.new_ChLinkRotSpringCB(*args))
    __swig_destroy__ = _core.delete_ChLinkRotSpringCB

    def Clone(self):
        r"""Clone(ChLinkRotSpringCB self) -> ChLinkRotSpringCB"""
        return _core.ChLinkRotSpringCB_Clone(self)

    def GetRotSpringAngle(self):
        r"""GetRotSpringAngle(ChLinkRotSpringCB self) -> double"""
        return _core.ChLinkRotSpringCB_GetRotSpringAngle(self)

    def GetRotSpringSpeed(self):
        r"""GetRotSpringSpeed(ChLinkRotSpringCB self) -> double"""
        return _core.ChLinkRotSpringCB_GetRotSpringSpeed(self)

    def GetRotSpringTorque(self):
        r"""GetRotSpringTorque(ChLinkRotSpringCB self) -> double"""
        return _core.ChLinkRotSpringCB_GetRotSpringTorque(self)

    def UpdateForces(self, time):
        r"""UpdateForces(ChLinkRotSpringCB self, double time)"""
        return _core.ChLinkRotSpringCB_UpdateForces(self, time)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkRotSpringCB self, ChArchiveOut & marchive)"""
        return _core.ChLinkRotSpringCB_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkRotSpringCB self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkRotSpringCB_ArchiveIN(self, marchive)

    def RegisterTorqueFunctor(self, *args):
        r"""
        RegisterTorqueFunctor(ChLinkRotSpringCB self, TorqueFunctor functor)
        RegisterTorqueFunctor(ChLinkRotSpringCB self, TorqueFunctorP functor)
        """
        return _core.ChLinkRotSpringCB_RegisterTorqueFunctor(self, *args)

# Register ChLinkRotSpringCB in _core:
_core.ChLinkRotSpringCB_swigregister(ChLinkRotSpringCB)

class TorqueFunctor(object):
    r"""Proxy of C++ chrono::ChLinkRotSpringCB::TorqueFunctor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_TorqueFunctor

    def __call__(self, time, angle, vel, link):
        r"""__call__(TorqueFunctor self, double time, double angle, double vel, ChLinkRotSpringCB link) -> double"""
        return _core.TorqueFunctor___call__(self, time, angle, vel, link)

# Register TorqueFunctor in _core:
_core.TorqueFunctor_swigregister(TorqueFunctor)

class ChLinkGear(ChLinkLock):
    r"""Proxy of C++ chrono::ChLinkGear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkGear self) -> ChLinkGear
        __init__(ChLinkGear self, ChLinkGear other) -> ChLinkGear
        """
        _core.ChLinkGear_swiginit(self, _core.new_ChLinkGear(*args))
    __swig_destroy__ = _core.delete_ChLinkGear

    def Clone(self):
        r"""Clone(ChLinkGear self) -> ChLinkGear"""
        return _core.ChLinkGear_Clone(self)

    def UpdateTime(self, mytime):
        r"""UpdateTime(ChLinkGear self, double mytime)"""
        return _core.ChLinkGear_UpdateTime(self, mytime)

    def Get_tau(self):
        r"""Get_tau(ChLinkGear self) -> double"""
        return _core.ChLinkGear_Get_tau(self)

    def Set_tau(self, *args):
        r"""
        Set_tau(ChLinkGear self, double mset)
        Set_tau(ChLinkGear self, double mz1, double mz2)
        """
        return _core.ChLinkGear_Set_tau(self, *args)

    def Get_alpha(self):
        r"""Get_alpha(ChLinkGear self) -> double"""
        return _core.ChLinkGear_Get_alpha(self)

    def Set_alpha(self, mset):
        r"""Set_alpha(ChLinkGear self, double mset)"""
        return _core.ChLinkGear_Set_alpha(self, mset)

    def Get_beta(self):
        r"""Get_beta(ChLinkGear self) -> double"""
        return _core.ChLinkGear_Get_beta(self)

    def Set_beta(self, mset):
        r"""Set_beta(ChLinkGear self, double mset)"""
        return _core.ChLinkGear_Set_beta(self, mset)

    def Get_phase(self):
        r"""Get_phase(ChLinkGear self) -> double"""
        return _core.ChLinkGear_Get_phase(self)

    def Set_phase(self, mset):
        r"""Set_phase(ChLinkGear self, double mset)"""
        return _core.ChLinkGear_Set_phase(self, mset)

    def Get_epicyclic(self):
        r"""Get_epicyclic(ChLinkGear self) -> bool"""
        return _core.ChLinkGear_Get_epicyclic(self)

    def Set_epicyclic(self, mset):
        r"""Set_epicyclic(ChLinkGear self, bool mset)"""
        return _core.ChLinkGear_Set_epicyclic(self, mset)

    def Set_checkphase(self, mset):
        r"""Set_checkphase(ChLinkGear self, bool mset)"""
        return _core.ChLinkGear_Set_checkphase(self, mset)

    def Get_checkphase(self):
        r"""Get_checkphase(ChLinkGear self) -> bool"""
        return _core.ChLinkGear_Get_checkphase(self)

    def Get_a1(self):
        r"""Get_a1(ChLinkGear self) -> double"""
        return _core.ChLinkGear_Get_a1(self)

    def Get_a2(self):
        r"""Get_a2(ChLinkGear self) -> double"""
        return _core.ChLinkGear_Get_a2(self)

    def Reset_a1a2(self):
        r"""Reset_a1a2(ChLinkGear self)"""
        return _core.ChLinkGear_Reset_a1a2(self)

    def Get_r1(self):
        r"""Get_r1(ChLinkGear self) -> double"""
        return _core.ChLinkGear_Get_r1(self)

    def Get_r2(self):
        r"""Get_r2(ChLinkGear self) -> double"""
        return _core.ChLinkGear_Get_r2(self)

    def Get_local_shaft1(self):
        r"""Get_local_shaft1(ChLinkGear self) -> ChFrameD"""
        return _core.ChLinkGear_Get_local_shaft1(self)

    def Set_local_shaft1(self, mf):
        r"""Set_local_shaft1(ChLinkGear self, ChFrameD mf)"""
        return _core.ChLinkGear_Set_local_shaft1(self, mf)

    def Get_local_shaft2(self):
        r"""Get_local_shaft2(ChLinkGear self) -> ChFrameD"""
        return _core.ChLinkGear_Get_local_shaft2(self)

    def Set_local_shaft2(self, mf):
        r"""Set_local_shaft2(ChLinkGear self, ChFrameD mf)"""
        return _core.ChLinkGear_Set_local_shaft2(self, mf)

    def Get_shaft_dir1(self):
        r"""Get_shaft_dir1(ChLinkGear self) -> ChVectorD"""
        return _core.ChLinkGear_Get_shaft_dir1(self)

    def Get_shaft_dir2(self):
        r"""Get_shaft_dir2(ChLinkGear self) -> ChVectorD"""
        return _core.ChLinkGear_Get_shaft_dir2(self)

    def Get_shaft_pos1(self):
        r"""Get_shaft_pos1(ChLinkGear self) -> ChVectorD"""
        return _core.ChLinkGear_Get_shaft_pos1(self)

    def Get_shaft_pos2(self):
        r"""Get_shaft_pos2(ChLinkGear self) -> ChVectorD"""
        return _core.ChLinkGear_Get_shaft_pos2(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkGear self, ChArchiveOut & marchive)"""
        return _core.ChLinkGear_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkGear self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkGear_ArchiveIN(self, marchive)

# Register ChLinkGear in _core:
_core.ChLinkGear_swigregister(ChLinkGear)

class ChLinkRevolute(ChLink):
    r"""Proxy of C++ chrono::ChLinkRevolute class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkRevolute self) -> ChLinkRevolute
        __init__(ChLinkRevolute self, ChLinkRevolute other) -> ChLinkRevolute
        """
        _core.ChLinkRevolute_swiginit(self, _core.new_ChLinkRevolute(*args))
    __swig_destroy__ = _core.delete_ChLinkRevolute

    def Clone(self):
        r"""Clone(ChLinkRevolute self) -> ChLinkRevolute"""
        return _core.ChLinkRevolute_Clone(self)

    def GetDOC_c(self):
        r"""GetDOC_c(ChLinkRevolute self) -> int"""
        return _core.ChLinkRevolute_GetDOC_c(self)

    def GetLinkRelativeCoords(self):
        r"""GetLinkRelativeCoords(ChLinkRevolute self) -> ChCoordsysD"""
        return _core.ChLinkRevolute_GetLinkRelativeCoords(self)

    def GetFrame1Rel(self):
        r"""GetFrame1Rel(ChLinkRevolute self) -> ChFrameD"""
        return _core.ChLinkRevolute_GetFrame1Rel(self)

    def GetFrame2Rel(self):
        r"""GetFrame2Rel(ChLinkRevolute self) -> ChFrameD"""
        return _core.ChLinkRevolute_GetFrame2Rel(self)

    def GetFrame1Abs(self):
        r"""GetFrame1Abs(ChLinkRevolute self) -> ChFrameD"""
        return _core.ChLinkRevolute_GetFrame1Abs(self)

    def GetFrame2Abs(self):
        r"""GetFrame2Abs(ChLinkRevolute self) -> ChFrameD"""
        return _core.ChLinkRevolute_GetFrame2Abs(self)

    def GetC(self):
        r"""GetC(ChLinkRevolute self) -> chrono::ChVectorN< double,5 > const &"""
        return _core.ChLinkRevolute_GetC(self)

    def Initialize(self, *args):
        r"""
        Initialize(ChLinkRevolute self, std::shared_ptr< chrono::ChBodyFrame > body1, std::shared_ptr< chrono::ChBodyFrame > body2, ChFrameD frame)
        Initialize(ChLinkRevolute self, std::shared_ptr< chrono::ChBodyFrame > body1, std::shared_ptr< chrono::ChBodyFrame > body2, bool local, ChFrameD frame1, ChFrameD frame2)
        """
        return _core.ChLinkRevolute_Initialize(self, *args)

    def Update(self, time, update_assets=True):
        r"""Update(ChLinkRevolute self, double time, bool update_assets=True)"""
        return _core.ChLinkRevolute_Update(self, time, update_assets)

    def IntStateGatherReactions(self, off_L, L):
        r"""IntStateGatherReactions(ChLinkRevolute self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChLinkRevolute_IntStateGatherReactions(self, off_L, L)

    def IntStateScatterReactions(self, off_L, L):
        r"""IntStateScatterReactions(ChLinkRevolute self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChLinkRevolute_IntStateScatterReactions(self, off_L, L)

    def IntLoadResidual_CqL(self, off_L, R, L, c):
        r"""IntLoadResidual_CqL(ChLinkRevolute self, unsigned int const off_L, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _core.ChLinkRevolute_IntLoadResidual_CqL(self, off_L, R, L, c)

    def IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp):
        r"""IntLoadConstraint_C(ChLinkRevolute self, unsigned int const off, ChVectorDynamicD Qc, double const c, bool do_clamp, double recovery_clamp)"""
        return _core.ChLinkRevolute_IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChLinkRevolute self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _core.ChLinkRevolute_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChLinkRevolute self, unsigned int const off_v, ChStateDelta v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChLinkRevolute_IntFromDescriptor(self, off_v, v, off_L, L)

    def InjectConstraints(self, descriptor):
        r"""InjectConstraints(ChLinkRevolute self, ChSystemDescriptor & descriptor)"""
        return _core.ChLinkRevolute_InjectConstraints(self, descriptor)

    def ConstraintsBiReset(self):
        r"""ConstraintsBiReset(ChLinkRevolute self)"""
        return _core.ChLinkRevolute_ConstraintsBiReset(self)

    def ConstraintsBiLoad_C(self, factor=1, recovery_clamp=0.1, do_clamp=False):
        r"""ConstraintsBiLoad_C(ChLinkRevolute self, double factor=1, double recovery_clamp=0.1, bool do_clamp=False)"""
        return _core.ChLinkRevolute_ConstraintsBiLoad_C(self, factor, recovery_clamp, do_clamp)

    def ConstraintsLoadJacobians(self):
        r"""ConstraintsLoadJacobians(ChLinkRevolute self)"""
        return _core.ChLinkRevolute_ConstraintsLoadJacobians(self)

    def ConstraintsFetch_react(self, factor=1):
        r"""ConstraintsFetch_react(ChLinkRevolute self, double factor=1)"""
        return _core.ChLinkRevolute_ConstraintsFetch_react(self, factor)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkRevolute self, ChArchiveOut & marchive)"""
        return _core.ChLinkRevolute_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkRevolute self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkRevolute_ArchiveIN(self, marchive)

# Register ChLinkRevolute in _core:
_core.ChLinkRevolute_swigregister(ChLinkRevolute)

class ChLinkRevoluteSpherical(ChLink):
    r"""Proxy of C++ chrono::ChLinkRevoluteSpherical class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkRevoluteSpherical self) -> ChLinkRevoluteSpherical
        __init__(ChLinkRevoluteSpherical self, ChLinkRevoluteSpherical other) -> ChLinkRevoluteSpherical
        """
        _core.ChLinkRevoluteSpherical_swiginit(self, _core.new_ChLinkRevoluteSpherical(*args))
    __swig_destroy__ = _core.delete_ChLinkRevoluteSpherical

    def Clone(self):
        r"""Clone(ChLinkRevoluteSpherical self) -> ChLinkRevoluteSpherical"""
        return _core.ChLinkRevoluteSpherical_Clone(self)

    def GetDOC_c(self):
        r"""GetDOC_c(ChLinkRevoluteSpherical self) -> int"""
        return _core.ChLinkRevoluteSpherical_GetDOC_c(self)

    def GetPoint1Rel(self):
        r"""GetPoint1Rel(ChLinkRevoluteSpherical self) -> ChVectorD"""
        return _core.ChLinkRevoluteSpherical_GetPoint1Rel(self)

    def GetDir1Rel(self):
        r"""GetDir1Rel(ChLinkRevoluteSpherical self) -> ChVectorD"""
        return _core.ChLinkRevoluteSpherical_GetDir1Rel(self)

    def GetPoint2Rel(self):
        r"""GetPoint2Rel(ChLinkRevoluteSpherical self) -> ChVectorD"""
        return _core.ChLinkRevoluteSpherical_GetPoint2Rel(self)

    def GetImposedDistance(self):
        r"""GetImposedDistance(ChLinkRevoluteSpherical self) -> double"""
        return _core.ChLinkRevoluteSpherical_GetImposedDistance(self)

    def GetCurrentDistance(self):
        r"""GetCurrentDistance(ChLinkRevoluteSpherical self) -> double"""
        return _core.ChLinkRevoluteSpherical_GetCurrentDistance(self)

    def GetPoint1Abs(self):
        r"""GetPoint1Abs(ChLinkRevoluteSpherical self) -> ChVectorD"""
        return _core.ChLinkRevoluteSpherical_GetPoint1Abs(self)

    def GetDir1Abs(self):
        r"""GetDir1Abs(ChLinkRevoluteSpherical self) -> ChVectorD"""
        return _core.ChLinkRevoluteSpherical_GetDir1Abs(self)

    def GetPoint2Abs(self):
        r"""GetPoint2Abs(ChLinkRevoluteSpherical self) -> ChVectorD"""
        return _core.ChLinkRevoluteSpherical_GetPoint2Abs(self)

    def GetLinkRelativeCoords(self):
        r"""GetLinkRelativeCoords(ChLinkRevoluteSpherical self) -> ChCoordsysD"""
        return _core.ChLinkRevoluteSpherical_GetLinkRelativeCoords(self)

    def GetC(self):
        r"""GetC(ChLinkRevoluteSpherical self) -> chrono::ChVectorN< double,2 > const &"""
        return _core.ChLinkRevoluteSpherical_GetC(self)

    def Initialize(self, *args):
        r"""
        Initialize(ChLinkRevoluteSpherical self, std::shared_ptr< chrono::ChBodyFrame > body1, std::shared_ptr< chrono::ChBodyFrame > body2, ChCoordsysD csys, double distance)
        Initialize(ChLinkRevoluteSpherical self, std::shared_ptr< chrono::ChBodyFrame > body1, std::shared_ptr< chrono::ChBodyFrame > body2, bool local, ChVectorD pos1, ChVectorD dir1, ChVectorD pos2, bool auto_distance=True, double distance=0)
        """
        return _core.ChLinkRevoluteSpherical_Initialize(self, *args)

    def Update(self, time, update_assets=True):
        r"""Update(ChLinkRevoluteSpherical self, double time, bool update_assets=True)"""
        return _core.ChLinkRevoluteSpherical_Update(self, time, update_assets)

    def IntStateGatherReactions(self, off_L, L):
        r"""IntStateGatherReactions(ChLinkRevoluteSpherical self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChLinkRevoluteSpherical_IntStateGatherReactions(self, off_L, L)

    def IntStateScatterReactions(self, off_L, L):
        r"""IntStateScatterReactions(ChLinkRevoluteSpherical self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChLinkRevoluteSpherical_IntStateScatterReactions(self, off_L, L)

    def IntLoadResidual_CqL(self, off_L, R, L, c):
        r"""IntLoadResidual_CqL(ChLinkRevoluteSpherical self, unsigned int const off_L, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _core.ChLinkRevoluteSpherical_IntLoadResidual_CqL(self, off_L, R, L, c)

    def IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp):
        r"""IntLoadConstraint_C(ChLinkRevoluteSpherical self, unsigned int const off, ChVectorDynamicD Qc, double const c, bool do_clamp, double recovery_clamp)"""
        return _core.ChLinkRevoluteSpherical_IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChLinkRevoluteSpherical self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _core.ChLinkRevoluteSpherical_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChLinkRevoluteSpherical self, unsigned int const off_v, ChStateDelta v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChLinkRevoluteSpherical_IntFromDescriptor(self, off_v, v, off_L, L)

    def InjectConstraints(self, descriptor):
        r"""InjectConstraints(ChLinkRevoluteSpherical self, ChSystemDescriptor & descriptor)"""
        return _core.ChLinkRevoluteSpherical_InjectConstraints(self, descriptor)

    def ConstraintsBiReset(self):
        r"""ConstraintsBiReset(ChLinkRevoluteSpherical self)"""
        return _core.ChLinkRevoluteSpherical_ConstraintsBiReset(self)

    def ConstraintsBiLoad_C(self, factor=1, recovery_clamp=0.1, do_clamp=False):
        r"""ConstraintsBiLoad_C(ChLinkRevoluteSpherical self, double factor=1, double recovery_clamp=0.1, bool do_clamp=False)"""
        return _core.ChLinkRevoluteSpherical_ConstraintsBiLoad_C(self, factor, recovery_clamp, do_clamp)

    def ConstraintsLoadJacobians(self):
        r"""ConstraintsLoadJacobians(ChLinkRevoluteSpherical self)"""
        return _core.ChLinkRevoluteSpherical_ConstraintsLoadJacobians(self)

    def ConstraintsFetch_react(self, factor=1):
        r"""ConstraintsFetch_react(ChLinkRevoluteSpherical self, double factor=1)"""
        return _core.ChLinkRevoluteSpherical_ConstraintsFetch_react(self, factor)

    def Get_react_force_body1(self):
        r"""Get_react_force_body1(ChLinkRevoluteSpherical self) -> ChVectorD"""
        return _core.ChLinkRevoluteSpherical_Get_react_force_body1(self)

    def Get_react_torque_body1(self):
        r"""Get_react_torque_body1(ChLinkRevoluteSpherical self) -> ChVectorD"""
        return _core.ChLinkRevoluteSpherical_Get_react_torque_body1(self)

    def Get_react_force_body2(self):
        r"""Get_react_force_body2(ChLinkRevoluteSpherical self) -> ChVectorD"""
        return _core.ChLinkRevoluteSpherical_Get_react_force_body2(self)

    def Get_react_torque_body2(self):
        r"""Get_react_torque_body2(ChLinkRevoluteSpherical self) -> ChVectorD"""
        return _core.ChLinkRevoluteSpherical_Get_react_torque_body2(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkRevoluteSpherical self, ChArchiveOut & marchive)"""
        return _core.ChLinkRevoluteSpherical_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkRevoluteSpherical self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkRevoluteSpherical_ArchiveIN(self, marchive)

# Register ChLinkRevoluteSpherical in _core:
_core.ChLinkRevoluteSpherical_swigregister(ChLinkRevoluteSpherical)

class ChLinkUniversal(ChLink):
    r"""Proxy of C++ chrono::ChLinkUniversal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkUniversal self) -> ChLinkUniversal
        __init__(ChLinkUniversal self, ChLinkUniversal other) -> ChLinkUniversal
        """
        _core.ChLinkUniversal_swiginit(self, _core.new_ChLinkUniversal(*args))
    __swig_destroy__ = _core.delete_ChLinkUniversal

    def Clone(self):
        r"""Clone(ChLinkUniversal self) -> ChLinkUniversal"""
        return _core.ChLinkUniversal_Clone(self)

    def GetDOC_c(self):
        r"""GetDOC_c(ChLinkUniversal self) -> int"""
        return _core.ChLinkUniversal_GetDOC_c(self)

    def GetLinkRelativeCoords(self):
        r"""GetLinkRelativeCoords(ChLinkUniversal self) -> ChCoordsysD"""
        return _core.ChLinkUniversal_GetLinkRelativeCoords(self)

    def GetFrame1Rel(self):
        r"""GetFrame1Rel(ChLinkUniversal self) -> ChFrameD"""
        return _core.ChLinkUniversal_GetFrame1Rel(self)

    def GetFrame2Rel(self):
        r"""GetFrame2Rel(ChLinkUniversal self) -> ChFrameD"""
        return _core.ChLinkUniversal_GetFrame2Rel(self)

    def GetFrame1Abs(self):
        r"""GetFrame1Abs(ChLinkUniversal self) -> ChFrameD"""
        return _core.ChLinkUniversal_GetFrame1Abs(self)

    def GetFrame2Abs(self):
        r"""GetFrame2Abs(ChLinkUniversal self) -> ChFrameD"""
        return _core.ChLinkUniversal_GetFrame2Abs(self)

    def GetC(self):
        r"""GetC(ChLinkUniversal self) -> chrono::ChVectorN< double,4 > const &"""
        return _core.ChLinkUniversal_GetC(self)

    def Initialize(self, *args):
        r"""
        Initialize(ChLinkUniversal self, std::shared_ptr< chrono::ChBodyFrame > body1, std::shared_ptr< chrono::ChBodyFrame > body2, ChFrameD frame)
        Initialize(ChLinkUniversal self, std::shared_ptr< chrono::ChBodyFrame > body1, std::shared_ptr< chrono::ChBodyFrame > body2, bool local, ChFrameD frame1, ChFrameD frame2)
        """
        return _core.ChLinkUniversal_Initialize(self, *args)

    def Update(self, time, update_assets=True):
        r"""Update(ChLinkUniversal self, double time, bool update_assets=True)"""
        return _core.ChLinkUniversal_Update(self, time, update_assets)

    def IntStateGatherReactions(self, off_L, L):
        r"""IntStateGatherReactions(ChLinkUniversal self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChLinkUniversal_IntStateGatherReactions(self, off_L, L)

    def IntStateScatterReactions(self, off_L, L):
        r"""IntStateScatterReactions(ChLinkUniversal self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChLinkUniversal_IntStateScatterReactions(self, off_L, L)

    def IntLoadResidual_CqL(self, off_L, R, L, c):
        r"""IntLoadResidual_CqL(ChLinkUniversal self, unsigned int const off_L, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _core.ChLinkUniversal_IntLoadResidual_CqL(self, off_L, R, L, c)

    def IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp):
        r"""IntLoadConstraint_C(ChLinkUniversal self, unsigned int const off, ChVectorDynamicD Qc, double const c, bool do_clamp, double recovery_clamp)"""
        return _core.ChLinkUniversal_IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChLinkUniversal self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _core.ChLinkUniversal_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChLinkUniversal self, unsigned int const off_v, ChStateDelta v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChLinkUniversal_IntFromDescriptor(self, off_v, v, off_L, L)

    def InjectConstraints(self, descriptor):
        r"""InjectConstraints(ChLinkUniversal self, ChSystemDescriptor & descriptor)"""
        return _core.ChLinkUniversal_InjectConstraints(self, descriptor)

    def ConstraintsBiReset(self):
        r"""ConstraintsBiReset(ChLinkUniversal self)"""
        return _core.ChLinkUniversal_ConstraintsBiReset(self)

    def ConstraintsBiLoad_C(self, factor=1, recovery_clamp=0.1, do_clamp=False):
        r"""ConstraintsBiLoad_C(ChLinkUniversal self, double factor=1, double recovery_clamp=0.1, bool do_clamp=False)"""
        return _core.ChLinkUniversal_ConstraintsBiLoad_C(self, factor, recovery_clamp, do_clamp)

    def ConstraintsLoadJacobians(self):
        r"""ConstraintsLoadJacobians(ChLinkUniversal self)"""
        return _core.ChLinkUniversal_ConstraintsLoadJacobians(self)

    def ConstraintsFetch_react(self, factor=1):
        r"""ConstraintsFetch_react(ChLinkUniversal self, double factor=1)"""
        return _core.ChLinkUniversal_ConstraintsFetch_react(self, factor)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkUniversal self, ChArchiveOut & marchive)"""
        return _core.ChLinkUniversal_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkUniversal self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkUniversal_ArchiveIN(self, marchive)

# Register ChLinkUniversal in _core:
_core.ChLinkUniversal_swigregister(ChLinkUniversal)

class ChLinkTrajectory(ChLinkLockLock):
    r"""Proxy of C++ chrono::ChLinkTrajectory class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkTrajectory self) -> ChLinkTrajectory
        __init__(ChLinkTrajectory self, ChLinkTrajectory other) -> ChLinkTrajectory
        """
        _core.ChLinkTrajectory_swiginit(self, _core.new_ChLinkTrajectory(*args))
    __swig_destroy__ = _core.delete_ChLinkTrajectory

    def Clone(self):
        r"""Clone(ChLinkTrajectory self) -> ChLinkTrajectory"""
        return _core.ChLinkTrajectory_Clone(self)

    def Get_space_fx(self):
        r"""Get_space_fx(ChLinkTrajectory self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkTrajectory_Get_space_fx(self)

    def Set_space_fx(self, m_funct):
        r"""Set_space_fx(ChLinkTrajectory self, std::shared_ptr< chrono::ChFunction > m_funct)"""
        return _core.ChLinkTrajectory_Set_space_fx(self, m_funct)

    def Set_modulo_one_fx(self, mmod):
        r"""Set_modulo_one_fx(ChLinkTrajectory self, bool mmod)"""
        return _core.ChLinkTrajectory_Set_modulo_one_fx(self, mmod)

    def Get_trajectory_line(self):
        r"""Get_trajectory_line(ChLinkTrajectory self) -> std::shared_ptr< chrono::geometry::ChLine >"""
        return _core.ChLinkTrajectory_Get_trajectory_line(self)

    def Set_trajectory_line(self, mline):
        r"""Set_trajectory_line(ChLinkTrajectory self, std::shared_ptr< chrono::geometry::ChLine > mline)"""
        return _core.ChLinkTrajectory_Set_trajectory_line(self, mline)

    def Initialize(self, mbody1, mbody2, mpos1, mline):
        r"""Initialize(ChLinkTrajectory self, std::shared_ptr< chrono::ChBody > mbody1, std::shared_ptr< chrono::ChBody > mbody2, ChVectorD mpos1, std::shared_ptr< chrono::geometry::ChLine > mline)"""
        return _core.ChLinkTrajectory_Initialize(self, mbody1, mbody2, mpos1, mline)

    def UpdateTime(self, mytime):
        r"""UpdateTime(ChLinkTrajectory self, double mytime)"""
        return _core.ChLinkTrajectory_UpdateTime(self, mytime)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkTrajectory self, ChArchiveOut & marchive)"""
        return _core.ChLinkTrajectory_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkTrajectory self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkTrajectory_ArchiveIN(self, marchive)

# Register ChLinkTrajectory in _core:
_core.ChLinkTrajectory_swigregister(ChLinkTrajectory)

class ChLinkPointSpline(ChLinkLockLock):
    r"""Proxy of C++ chrono::ChLinkPointSpline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkPointSpline self) -> ChLinkPointSpline
        __init__(ChLinkPointSpline self, ChLinkPointSpline other) -> ChLinkPointSpline
        """
        _core.ChLinkPointSpline_swiginit(self, _core.new_ChLinkPointSpline(*args))
    __swig_destroy__ = _core.delete_ChLinkPointSpline

    def Clone(self):
        r"""Clone(ChLinkPointSpline self) -> ChLinkPointSpline"""
        return _core.ChLinkPointSpline_Clone(self)

    def Get_trajectory_line(self):
        r"""Get_trajectory_line(ChLinkPointSpline self) -> std::shared_ptr< chrono::geometry::ChLine >"""
        return _core.ChLinkPointSpline_Get_trajectory_line(self)

    def Set_trajectory_line(self, mline):
        r"""Set_trajectory_line(ChLinkPointSpline self, std::shared_ptr< chrono::geometry::ChLine > mline)"""
        return _core.ChLinkPointSpline_Set_trajectory_line(self, mline)

    def SetTolerance(self, tol):
        r"""SetTolerance(ChLinkPointSpline self, double tol)"""
        return _core.ChLinkPointSpline_SetTolerance(self, tol)

    def UpdateTime(self, mytime):
        r"""UpdateTime(ChLinkPointSpline self, double mytime)"""
        return _core.ChLinkPointSpline_UpdateTime(self, mytime)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkPointSpline self, ChArchiveOut & marchive)"""
        return _core.ChLinkPointSpline_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkPointSpline self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkPointSpline_ArchiveIN(self, marchive)

# Register ChLinkPointSpline in _core:
_core.ChLinkPointSpline_swigregister(ChLinkPointSpline)

class vector_ChBody(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< chrono::ChBody > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_ChBody self) -> SwigPyIterator"""
        return _core.vector_ChBody_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_ChBody self) -> bool"""
        return _core.vector_ChBody___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_ChBody self) -> bool"""
        return _core.vector_ChBody___bool__(self)

    def __len__(self):
        r"""__len__(vector_ChBody self) -> std::vector< std::shared_ptr< chrono::ChBody > >::size_type"""
        return _core.vector_ChBody___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_ChBody self, std::vector< std::shared_ptr< chrono::ChBody > >::difference_type i, std::vector< std::shared_ptr< chrono::ChBody > >::difference_type j) -> vector_ChBody"""
        return _core.vector_ChBody___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_ChBody self, std::vector< std::shared_ptr< chrono::ChBody > >::difference_type i, std::vector< std::shared_ptr< chrono::ChBody > >::difference_type j)
        __setslice__(vector_ChBody self, std::vector< std::shared_ptr< chrono::ChBody > >::difference_type i, std::vector< std::shared_ptr< chrono::ChBody > >::difference_type j, vector_ChBody v)
        """
        return _core.vector_ChBody___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_ChBody self, std::vector< std::shared_ptr< chrono::ChBody > >::difference_type i, std::vector< std::shared_ptr< chrono::ChBody > >::difference_type j)"""
        return _core.vector_ChBody___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_ChBody self, std::vector< std::shared_ptr< chrono::ChBody > >::difference_type i)
        __delitem__(vector_ChBody self, PySliceObject * slice)
        """
        return _core.vector_ChBody___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_ChBody self, PySliceObject * slice) -> vector_ChBody
        __getitem__(vector_ChBody self, std::vector< std::shared_ptr< chrono::ChBody > >::difference_type i) -> std::vector< std::shared_ptr< chrono::ChBody > >::value_type const &
        """
        return _core.vector_ChBody___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_ChBody self, PySliceObject * slice, vector_ChBody v)
        __setitem__(vector_ChBody self, PySliceObject * slice)
        __setitem__(vector_ChBody self, std::vector< std::shared_ptr< chrono::ChBody > >::difference_type i, std::vector< std::shared_ptr< chrono::ChBody > >::value_type const & x)
        """
        return _core.vector_ChBody___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_ChBody self) -> std::vector< std::shared_ptr< chrono::ChBody > >::value_type"""
        return _core.vector_ChBody_pop(self)

    def append(self, x):
        r"""append(vector_ChBody self, std::vector< std::shared_ptr< chrono::ChBody > >::value_type const & x)"""
        return _core.vector_ChBody_append(self, x)

    def empty(self):
        r"""empty(vector_ChBody self) -> bool"""
        return _core.vector_ChBody_empty(self)

    def size(self):
        r"""size(vector_ChBody self) -> std::vector< std::shared_ptr< chrono::ChBody > >::size_type"""
        return _core.vector_ChBody_size(self)

    def swap(self, v):
        r"""swap(vector_ChBody self, vector_ChBody v)"""
        return _core.vector_ChBody_swap(self, v)

    def begin(self):
        r"""begin(vector_ChBody self) -> std::vector< std::shared_ptr< chrono::ChBody > >::iterator"""
        return _core.vector_ChBody_begin(self)

    def end(self):
        r"""end(vector_ChBody self) -> std::vector< std::shared_ptr< chrono::ChBody > >::iterator"""
        return _core.vector_ChBody_end(self)

    def rbegin(self):
        r"""rbegin(vector_ChBody self) -> std::vector< std::shared_ptr< chrono::ChBody > >::reverse_iterator"""
        return _core.vector_ChBody_rbegin(self)

    def rend(self):
        r"""rend(vector_ChBody self) -> std::vector< std::shared_ptr< chrono::ChBody > >::reverse_iterator"""
        return _core.vector_ChBody_rend(self)

    def clear(self):
        r"""clear(vector_ChBody self)"""
        return _core.vector_ChBody_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_ChBody self) -> std::vector< std::shared_ptr< chrono::ChBody > >::allocator_type"""
        return _core.vector_ChBody_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_ChBody self)"""
        return _core.vector_ChBody_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_ChBody self, std::vector< std::shared_ptr< chrono::ChBody > >::iterator pos) -> std::vector< std::shared_ptr< chrono::ChBody > >::iterator
        erase(vector_ChBody self, std::vector< std::shared_ptr< chrono::ChBody > >::iterator first, std::vector< std::shared_ptr< chrono::ChBody > >::iterator last) -> std::vector< std::shared_ptr< chrono::ChBody > >::iterator
        """
        return _core.vector_ChBody_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_ChBody self) -> vector_ChBody
        __init__(vector_ChBody self, vector_ChBody other) -> vector_ChBody
        __init__(vector_ChBody self, std::vector< std::shared_ptr< chrono::ChBody > >::size_type size) -> vector_ChBody
        __init__(vector_ChBody self, std::vector< std::shared_ptr< chrono::ChBody > >::size_type size, std::vector< std::shared_ptr< chrono::ChBody > >::value_type const & value) -> vector_ChBody
        """
        _core.vector_ChBody_swiginit(self, _core.new_vector_ChBody(*args))

    def push_back(self, x):
        r"""push_back(vector_ChBody self, std::vector< std::shared_ptr< chrono::ChBody > >::value_type const & x)"""
        return _core.vector_ChBody_push_back(self, x)

    def front(self):
        r"""front(vector_ChBody self) -> std::vector< std::shared_ptr< chrono::ChBody > >::value_type const &"""
        return _core.vector_ChBody_front(self)

    def back(self):
        r"""back(vector_ChBody self) -> std::vector< std::shared_ptr< chrono::ChBody > >::value_type const &"""
        return _core.vector_ChBody_back(self)

    def assign(self, n, x):
        r"""assign(vector_ChBody self, std::vector< std::shared_ptr< chrono::ChBody > >::size_type n, std::vector< std::shared_ptr< chrono::ChBody > >::value_type const & x)"""
        return _core.vector_ChBody_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_ChBody self, std::vector< std::shared_ptr< chrono::ChBody > >::size_type new_size)
        resize(vector_ChBody self, std::vector< std::shared_ptr< chrono::ChBody > >::size_type new_size, std::vector< std::shared_ptr< chrono::ChBody > >::value_type const & x)
        """
        return _core.vector_ChBody_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_ChBody self, std::vector< std::shared_ptr< chrono::ChBody > >::iterator pos, std::vector< std::shared_ptr< chrono::ChBody > >::value_type const & x) -> std::vector< std::shared_ptr< chrono::ChBody > >::iterator
        insert(vector_ChBody self, std::vector< std::shared_ptr< chrono::ChBody > >::iterator pos, std::vector< std::shared_ptr< chrono::ChBody > >::size_type n, std::vector< std::shared_ptr< chrono::ChBody > >::value_type const & x)
        """
        return _core.vector_ChBody_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_ChBody self, std::vector< std::shared_ptr< chrono::ChBody > >::size_type n)"""
        return _core.vector_ChBody_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_ChBody self) -> std::vector< std::shared_ptr< chrono::ChBody > >::size_type"""
        return _core.vector_ChBody_capacity(self)
    __swig_destroy__ = _core.delete_vector_ChBody

# Register vector_ChBody in _core:
_core.vector_ChBody_swigregister(vector_ChBody)

class vector_ChLink(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< chrono::ChLink > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_ChLink self) -> SwigPyIterator"""
        return _core.vector_ChLink_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_ChLink self) -> bool"""
        return _core.vector_ChLink___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_ChLink self) -> bool"""
        return _core.vector_ChLink___bool__(self)

    def __len__(self):
        r"""__len__(vector_ChLink self) -> std::vector< std::shared_ptr< chrono::ChLink > >::size_type"""
        return _core.vector_ChLink___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_ChLink self, std::vector< std::shared_ptr< chrono::ChLink > >::difference_type i, std::vector< std::shared_ptr< chrono::ChLink > >::difference_type j) -> vector_ChLink"""
        return _core.vector_ChLink___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_ChLink self, std::vector< std::shared_ptr< chrono::ChLink > >::difference_type i, std::vector< std::shared_ptr< chrono::ChLink > >::difference_type j)
        __setslice__(vector_ChLink self, std::vector< std::shared_ptr< chrono::ChLink > >::difference_type i, std::vector< std::shared_ptr< chrono::ChLink > >::difference_type j, vector_ChLink v)
        """
        return _core.vector_ChLink___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_ChLink self, std::vector< std::shared_ptr< chrono::ChLink > >::difference_type i, std::vector< std::shared_ptr< chrono::ChLink > >::difference_type j)"""
        return _core.vector_ChLink___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_ChLink self, std::vector< std::shared_ptr< chrono::ChLink > >::difference_type i)
        __delitem__(vector_ChLink self, PySliceObject * slice)
        """
        return _core.vector_ChLink___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_ChLink self, PySliceObject * slice) -> vector_ChLink
        __getitem__(vector_ChLink self, std::vector< std::shared_ptr< chrono::ChLink > >::difference_type i) -> std::vector< std::shared_ptr< chrono::ChLink > >::value_type const &
        """
        return _core.vector_ChLink___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_ChLink self, PySliceObject * slice, vector_ChLink v)
        __setitem__(vector_ChLink self, PySliceObject * slice)
        __setitem__(vector_ChLink self, std::vector< std::shared_ptr< chrono::ChLink > >::difference_type i, std::vector< std::shared_ptr< chrono::ChLink > >::value_type const & x)
        """
        return _core.vector_ChLink___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_ChLink self) -> std::vector< std::shared_ptr< chrono::ChLink > >::value_type"""
        return _core.vector_ChLink_pop(self)

    def append(self, x):
        r"""append(vector_ChLink self, std::vector< std::shared_ptr< chrono::ChLink > >::value_type const & x)"""
        return _core.vector_ChLink_append(self, x)

    def empty(self):
        r"""empty(vector_ChLink self) -> bool"""
        return _core.vector_ChLink_empty(self)

    def size(self):
        r"""size(vector_ChLink self) -> std::vector< std::shared_ptr< chrono::ChLink > >::size_type"""
        return _core.vector_ChLink_size(self)

    def swap(self, v):
        r"""swap(vector_ChLink self, vector_ChLink v)"""
        return _core.vector_ChLink_swap(self, v)

    def begin(self):
        r"""begin(vector_ChLink self) -> std::vector< std::shared_ptr< chrono::ChLink > >::iterator"""
        return _core.vector_ChLink_begin(self)

    def end(self):
        r"""end(vector_ChLink self) -> std::vector< std::shared_ptr< chrono::ChLink > >::iterator"""
        return _core.vector_ChLink_end(self)

    def rbegin(self):
        r"""rbegin(vector_ChLink self) -> std::vector< std::shared_ptr< chrono::ChLink > >::reverse_iterator"""
        return _core.vector_ChLink_rbegin(self)

    def rend(self):
        r"""rend(vector_ChLink self) -> std::vector< std::shared_ptr< chrono::ChLink > >::reverse_iterator"""
        return _core.vector_ChLink_rend(self)

    def clear(self):
        r"""clear(vector_ChLink self)"""
        return _core.vector_ChLink_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_ChLink self) -> std::vector< std::shared_ptr< chrono::ChLink > >::allocator_type"""
        return _core.vector_ChLink_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_ChLink self)"""
        return _core.vector_ChLink_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_ChLink self, std::vector< std::shared_ptr< chrono::ChLink > >::iterator pos) -> std::vector< std::shared_ptr< chrono::ChLink > >::iterator
        erase(vector_ChLink self, std::vector< std::shared_ptr< chrono::ChLink > >::iterator first, std::vector< std::shared_ptr< chrono::ChLink > >::iterator last) -> std::vector< std::shared_ptr< chrono::ChLink > >::iterator
        """
        return _core.vector_ChLink_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_ChLink self) -> vector_ChLink
        __init__(vector_ChLink self, vector_ChLink other) -> vector_ChLink
        __init__(vector_ChLink self, std::vector< std::shared_ptr< chrono::ChLink > >::size_type size) -> vector_ChLink
        __init__(vector_ChLink self, std::vector< std::shared_ptr< chrono::ChLink > >::size_type size, std::vector< std::shared_ptr< chrono::ChLink > >::value_type const & value) -> vector_ChLink
        """
        _core.vector_ChLink_swiginit(self, _core.new_vector_ChLink(*args))

    def push_back(self, x):
        r"""push_back(vector_ChLink self, std::vector< std::shared_ptr< chrono::ChLink > >::value_type const & x)"""
        return _core.vector_ChLink_push_back(self, x)

    def front(self):
        r"""front(vector_ChLink self) -> std::vector< std::shared_ptr< chrono::ChLink > >::value_type const &"""
        return _core.vector_ChLink_front(self)

    def back(self):
        r"""back(vector_ChLink self) -> std::vector< std::shared_ptr< chrono::ChLink > >::value_type const &"""
        return _core.vector_ChLink_back(self)

    def assign(self, n, x):
        r"""assign(vector_ChLink self, std::vector< std::shared_ptr< chrono::ChLink > >::size_type n, std::vector< std::shared_ptr< chrono::ChLink > >::value_type const & x)"""
        return _core.vector_ChLink_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_ChLink self, std::vector< std::shared_ptr< chrono::ChLink > >::size_type new_size)
        resize(vector_ChLink self, std::vector< std::shared_ptr< chrono::ChLink > >::size_type new_size, std::vector< std::shared_ptr< chrono::ChLink > >::value_type const & x)
        """
        return _core.vector_ChLink_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_ChLink self, std::vector< std::shared_ptr< chrono::ChLink > >::iterator pos, std::vector< std::shared_ptr< chrono::ChLink > >::value_type const & x) -> std::vector< std::shared_ptr< chrono::ChLink > >::iterator
        insert(vector_ChLink self, std::vector< std::shared_ptr< chrono::ChLink > >::iterator pos, std::vector< std::shared_ptr< chrono::ChLink > >::size_type n, std::vector< std::shared_ptr< chrono::ChLink > >::value_type const & x)
        """
        return _core.vector_ChLink_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_ChLink self, std::vector< std::shared_ptr< chrono::ChLink > >::size_type n)"""
        return _core.vector_ChLink_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_ChLink self) -> std::vector< std::shared_ptr< chrono::ChLink > >::size_type"""
        return _core.vector_ChLink_capacity(self)
    __swig_destroy__ = _core.delete_vector_ChLink

# Register vector_ChLink in _core:
_core.vector_ChLink_swigregister(vector_ChLink)

class vector_ChMesh(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< chrono::fea::ChMesh > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_ChMesh self) -> SwigPyIterator"""
        return _core.vector_ChMesh_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_ChMesh self) -> bool"""
        return _core.vector_ChMesh___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_ChMesh self) -> bool"""
        return _core.vector_ChMesh___bool__(self)

    def __len__(self):
        r"""__len__(vector_ChMesh self) -> std::vector< std::shared_ptr< chrono::fea::ChMesh > >::size_type"""
        return _core.vector_ChMesh___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_ChMesh self, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::difference_type j) -> vector_ChMesh"""
        return _core.vector_ChMesh___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_ChMesh self, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::difference_type j)
        __setslice__(vector_ChMesh self, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::difference_type j, vector_ChMesh v)
        """
        return _core.vector_ChMesh___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_ChMesh self, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::difference_type j)"""
        return _core.vector_ChMesh___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_ChMesh self, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::difference_type i)
        __delitem__(vector_ChMesh self, PySliceObject * slice)
        """
        return _core.vector_ChMesh___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_ChMesh self, PySliceObject * slice) -> vector_ChMesh
        __getitem__(vector_ChMesh self, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::difference_type i) -> std::vector< std::shared_ptr< chrono::fea::ChMesh > >::value_type const &
        """
        return _core.vector_ChMesh___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_ChMesh self, PySliceObject * slice, vector_ChMesh v)
        __setitem__(vector_ChMesh self, PySliceObject * slice)
        __setitem__(vector_ChMesh self, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::difference_type i, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::value_type const & x)
        """
        return _core.vector_ChMesh___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_ChMesh self) -> std::vector< std::shared_ptr< chrono::fea::ChMesh > >::value_type"""
        return _core.vector_ChMesh_pop(self)

    def append(self, x):
        r"""append(vector_ChMesh self, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::value_type const & x)"""
        return _core.vector_ChMesh_append(self, x)

    def empty(self):
        r"""empty(vector_ChMesh self) -> bool"""
        return _core.vector_ChMesh_empty(self)

    def size(self):
        r"""size(vector_ChMesh self) -> std::vector< std::shared_ptr< chrono::fea::ChMesh > >::size_type"""
        return _core.vector_ChMesh_size(self)

    def swap(self, v):
        r"""swap(vector_ChMesh self, vector_ChMesh v)"""
        return _core.vector_ChMesh_swap(self, v)

    def begin(self):
        r"""begin(vector_ChMesh self) -> std::vector< std::shared_ptr< chrono::fea::ChMesh > >::iterator"""
        return _core.vector_ChMesh_begin(self)

    def end(self):
        r"""end(vector_ChMesh self) -> std::vector< std::shared_ptr< chrono::fea::ChMesh > >::iterator"""
        return _core.vector_ChMesh_end(self)

    def rbegin(self):
        r"""rbegin(vector_ChMesh self) -> std::vector< std::shared_ptr< chrono::fea::ChMesh > >::reverse_iterator"""
        return _core.vector_ChMesh_rbegin(self)

    def rend(self):
        r"""rend(vector_ChMesh self) -> std::vector< std::shared_ptr< chrono::fea::ChMesh > >::reverse_iterator"""
        return _core.vector_ChMesh_rend(self)

    def clear(self):
        r"""clear(vector_ChMesh self)"""
        return _core.vector_ChMesh_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_ChMesh self) -> std::vector< std::shared_ptr< chrono::fea::ChMesh > >::allocator_type"""
        return _core.vector_ChMesh_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_ChMesh self)"""
        return _core.vector_ChMesh_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_ChMesh self, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::iterator pos) -> std::vector< std::shared_ptr< chrono::fea::ChMesh > >::iterator
        erase(vector_ChMesh self, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::iterator first, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::iterator last) -> std::vector< std::shared_ptr< chrono::fea::ChMesh > >::iterator
        """
        return _core.vector_ChMesh_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_ChMesh self) -> vector_ChMesh
        __init__(vector_ChMesh self, vector_ChMesh other) -> vector_ChMesh
        __init__(vector_ChMesh self, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::size_type size) -> vector_ChMesh
        __init__(vector_ChMesh self, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::size_type size, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::value_type const & value) -> vector_ChMesh
        """
        _core.vector_ChMesh_swiginit(self, _core.new_vector_ChMesh(*args))

    def push_back(self, x):
        r"""push_back(vector_ChMesh self, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::value_type const & x)"""
        return _core.vector_ChMesh_push_back(self, x)

    def front(self):
        r"""front(vector_ChMesh self) -> std::vector< std::shared_ptr< chrono::fea::ChMesh > >::value_type const &"""
        return _core.vector_ChMesh_front(self)

    def back(self):
        r"""back(vector_ChMesh self) -> std::vector< std::shared_ptr< chrono::fea::ChMesh > >::value_type const &"""
        return _core.vector_ChMesh_back(self)

    def assign(self, n, x):
        r"""assign(vector_ChMesh self, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::size_type n, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::value_type const & x)"""
        return _core.vector_ChMesh_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_ChMesh self, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::size_type new_size)
        resize(vector_ChMesh self, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::size_type new_size, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::value_type const & x)
        """
        return _core.vector_ChMesh_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_ChMesh self, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::iterator pos, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::value_type const & x) -> std::vector< std::shared_ptr< chrono::fea::ChMesh > >::iterator
        insert(vector_ChMesh self, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::iterator pos, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::size_type n, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::value_type const & x)
        """
        return _core.vector_ChMesh_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_ChMesh self, std::vector< std::shared_ptr< chrono::fea::ChMesh > >::size_type n)"""
        return _core.vector_ChMesh_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_ChMesh self) -> std::vector< std::shared_ptr< chrono::fea::ChMesh > >::size_type"""
        return _core.vector_ChMesh_capacity(self)
    __swig_destroy__ = _core.delete_vector_ChMesh

# Register vector_ChMesh in _core:
_core.vector_ChMesh_swigregister(vector_ChMesh)

class vector_ChPhysicsItem(object):
    r"""Proxy of C++ std::vector< std::shared_ptr< chrono::ChPhysicsItem > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_ChPhysicsItem self) -> SwigPyIterator"""
        return _core.vector_ChPhysicsItem_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_ChPhysicsItem self) -> bool"""
        return _core.vector_ChPhysicsItem___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vector_ChPhysicsItem self) -> bool"""
        return _core.vector_ChPhysicsItem___bool__(self)

    def __len__(self):
        r"""__len__(vector_ChPhysicsItem self) -> std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::size_type"""
        return _core.vector_ChPhysicsItem___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_ChPhysicsItem self, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::difference_type i, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::difference_type j) -> vector_ChPhysicsItem"""
        return _core.vector_ChPhysicsItem___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_ChPhysicsItem self, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::difference_type i, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::difference_type j)
        __setslice__(vector_ChPhysicsItem self, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::difference_type i, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::difference_type j, vector_ChPhysicsItem v)
        """
        return _core.vector_ChPhysicsItem___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_ChPhysicsItem self, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::difference_type i, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::difference_type j)"""
        return _core.vector_ChPhysicsItem___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_ChPhysicsItem self, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::difference_type i)
        __delitem__(vector_ChPhysicsItem self, PySliceObject * slice)
        """
        return _core.vector_ChPhysicsItem___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_ChPhysicsItem self, PySliceObject * slice) -> vector_ChPhysicsItem
        __getitem__(vector_ChPhysicsItem self, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::difference_type i) -> std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::value_type const &
        """
        return _core.vector_ChPhysicsItem___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_ChPhysicsItem self, PySliceObject * slice, vector_ChPhysicsItem v)
        __setitem__(vector_ChPhysicsItem self, PySliceObject * slice)
        __setitem__(vector_ChPhysicsItem self, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::difference_type i, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::value_type const & x)
        """
        return _core.vector_ChPhysicsItem___setitem__(self, *args)

    def pop(self):
        r"""pop(vector_ChPhysicsItem self) -> std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::value_type"""
        return _core.vector_ChPhysicsItem_pop(self)

    def append(self, x):
        r"""append(vector_ChPhysicsItem self, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::value_type const & x)"""
        return _core.vector_ChPhysicsItem_append(self, x)

    def empty(self):
        r"""empty(vector_ChPhysicsItem self) -> bool"""
        return _core.vector_ChPhysicsItem_empty(self)

    def size(self):
        r"""size(vector_ChPhysicsItem self) -> std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::size_type"""
        return _core.vector_ChPhysicsItem_size(self)

    def swap(self, v):
        r"""swap(vector_ChPhysicsItem self, vector_ChPhysicsItem v)"""
        return _core.vector_ChPhysicsItem_swap(self, v)

    def begin(self):
        r"""begin(vector_ChPhysicsItem self) -> std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::iterator"""
        return _core.vector_ChPhysicsItem_begin(self)

    def end(self):
        r"""end(vector_ChPhysicsItem self) -> std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::iterator"""
        return _core.vector_ChPhysicsItem_end(self)

    def rbegin(self):
        r"""rbegin(vector_ChPhysicsItem self) -> std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::reverse_iterator"""
        return _core.vector_ChPhysicsItem_rbegin(self)

    def rend(self):
        r"""rend(vector_ChPhysicsItem self) -> std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::reverse_iterator"""
        return _core.vector_ChPhysicsItem_rend(self)

    def clear(self):
        r"""clear(vector_ChPhysicsItem self)"""
        return _core.vector_ChPhysicsItem_clear(self)

    def get_allocator(self):
        r"""get_allocator(vector_ChPhysicsItem self) -> std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::allocator_type"""
        return _core.vector_ChPhysicsItem_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vector_ChPhysicsItem self)"""
        return _core.vector_ChPhysicsItem_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vector_ChPhysicsItem self, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::iterator pos) -> std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::iterator
        erase(vector_ChPhysicsItem self, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::iterator first, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::iterator last) -> std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::iterator
        """
        return _core.vector_ChPhysicsItem_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vector_ChPhysicsItem self) -> vector_ChPhysicsItem
        __init__(vector_ChPhysicsItem self, vector_ChPhysicsItem other) -> vector_ChPhysicsItem
        __init__(vector_ChPhysicsItem self, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::size_type size) -> vector_ChPhysicsItem
        __init__(vector_ChPhysicsItem self, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::size_type size, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::value_type const & value) -> vector_ChPhysicsItem
        """
        _core.vector_ChPhysicsItem_swiginit(self, _core.new_vector_ChPhysicsItem(*args))

    def push_back(self, x):
        r"""push_back(vector_ChPhysicsItem self, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::value_type const & x)"""
        return _core.vector_ChPhysicsItem_push_back(self, x)

    def front(self):
        r"""front(vector_ChPhysicsItem self) -> std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::value_type const &"""
        return _core.vector_ChPhysicsItem_front(self)

    def back(self):
        r"""back(vector_ChPhysicsItem self) -> std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::value_type const &"""
        return _core.vector_ChPhysicsItem_back(self)

    def assign(self, n, x):
        r"""assign(vector_ChPhysicsItem self, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::size_type n, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::value_type const & x)"""
        return _core.vector_ChPhysicsItem_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vector_ChPhysicsItem self, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::size_type new_size)
        resize(vector_ChPhysicsItem self, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::size_type new_size, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::value_type const & x)
        """
        return _core.vector_ChPhysicsItem_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vector_ChPhysicsItem self, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::iterator pos, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::value_type const & x) -> std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::iterator
        insert(vector_ChPhysicsItem self, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::iterator pos, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::size_type n, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::value_type const & x)
        """
        return _core.vector_ChPhysicsItem_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vector_ChPhysicsItem self, std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::size_type n)"""
        return _core.vector_ChPhysicsItem_reserve(self, n)

    def capacity(self):
        r"""capacity(vector_ChPhysicsItem self) -> std::vector< std::shared_ptr< chrono::ChPhysicsItem > >::size_type"""
        return _core.vector_ChPhysicsItem_capacity(self)
    __swig_destroy__ = _core.delete_vector_ChPhysicsItem

# Register vector_ChPhysicsItem in _core:
_core.vector_ChPhysicsItem_swigregister(vector_ChPhysicsItem)

class ChAssembly(ChPhysicsItem):
    r"""Proxy of C++ chrono::ChAssembly class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChAssembly self) -> ChAssembly
        __init__(ChAssembly self, ChAssembly other) -> ChAssembly
        """
        _core.ChAssembly_swiginit(self, _core.new_ChAssembly(*args))
    __swig_destroy__ = _core.delete_ChAssembly

    def Clone(self):
        r"""Clone(ChAssembly self) -> ChAssembly"""
        return _core.ChAssembly_Clone(self)

    def Clear(self):
        r"""Clear(ChAssembly self)"""
        return _core.ChAssembly_Clear(self)

    def AddBody(self, body):
        r"""AddBody(ChAssembly self, std::shared_ptr< chrono::ChBody > body)"""
        return _core.ChAssembly_AddBody(self, body)

    def AddLink(self, link):
        r"""AddLink(ChAssembly self, std::shared_ptr< chrono::ChLinkBase > link)"""
        return _core.ChAssembly_AddLink(self, link)

    def AddMesh(self, mesh):
        r"""AddMesh(ChAssembly self, std::shared_ptr< fea::ChMesh > mesh)"""
        return _core.ChAssembly_AddMesh(self, mesh)

    def AddOtherPhysicsItem(self, item):
        r"""AddOtherPhysicsItem(ChAssembly self, std::shared_ptr< chrono::ChPhysicsItem > item)"""
        return _core.ChAssembly_AddOtherPhysicsItem(self, item)

    def Add(self, item):
        r"""Add(ChAssembly self, std::shared_ptr< chrono::ChPhysicsItem > item)"""
        return _core.ChAssembly_Add(self, item)

    def AddBatch(self, item):
        r"""AddBatch(ChAssembly self, std::shared_ptr< chrono::ChPhysicsItem > item)"""
        return _core.ChAssembly_AddBatch(self, item)

    def FlushBatch(self):
        r"""FlushBatch(ChAssembly self)"""
        return _core.ChAssembly_FlushBatch(self)

    def RemoveBody(self, body):
        r"""RemoveBody(ChAssembly self, std::shared_ptr< chrono::ChBody > body)"""
        return _core.ChAssembly_RemoveBody(self, body)

    def RemoveLink(self, link):
        r"""RemoveLink(ChAssembly self, std::shared_ptr< chrono::ChLinkBase > link)"""
        return _core.ChAssembly_RemoveLink(self, link)

    def RemoveMesh(self, mesh):
        r"""RemoveMesh(ChAssembly self, std::shared_ptr< fea::ChMesh > mesh)"""
        return _core.ChAssembly_RemoveMesh(self, mesh)

    def RemoveOtherPhysicsItem(self, item):
        r"""RemoveOtherPhysicsItem(ChAssembly self, std::shared_ptr< chrono::ChPhysicsItem > item)"""
        return _core.ChAssembly_RemoveOtherPhysicsItem(self, item)

    def Remove(self, item):
        r"""Remove(ChAssembly self, std::shared_ptr< chrono::ChPhysicsItem > item)"""
        return _core.ChAssembly_Remove(self, item)

    def RemoveAllBodies(self):
        r"""RemoveAllBodies(ChAssembly self)"""
        return _core.ChAssembly_RemoveAllBodies(self)

    def RemoveAllLinks(self):
        r"""RemoveAllLinks(ChAssembly self)"""
        return _core.ChAssembly_RemoveAllLinks(self)

    def RemoveAllMeshes(self):
        r"""RemoveAllMeshes(ChAssembly self)"""
        return _core.ChAssembly_RemoveAllMeshes(self)

    def RemoveAllOtherPhysicsItems(self):
        r"""RemoveAllOtherPhysicsItems(ChAssembly self)"""
        return _core.ChAssembly_RemoveAllOtherPhysicsItems(self)

    def Get_bodylist(self):
        r"""Get_bodylist(ChAssembly self) -> vector_ChBody"""
        return _core.ChAssembly_Get_bodylist(self)

    def Get_linklist(self):
        r"""Get_linklist(ChAssembly self) -> std::vector< std::shared_ptr< chrono::ChLinkBase >,std::allocator< std::shared_ptr< chrono::ChLinkBase > > > const &"""
        return _core.ChAssembly_Get_linklist(self)

    def Get_meshlist(self):
        r"""Get_meshlist(ChAssembly self) -> std::vector< std::shared_ptr< fea::ChMesh >,std::allocator< std::shared_ptr< fea::ChMesh > > > const &"""
        return _core.ChAssembly_Get_meshlist(self)

    def Get_otherphysicslist(self):
        r"""Get_otherphysicslist(ChAssembly self) -> vector_ChPhysicsItem"""
        return _core.ChAssembly_Get_otherphysicslist(self)

    def SearchBody(self, name):
        r"""SearchBody(ChAssembly self, char const * name) -> std::shared_ptr< chrono::ChBody >"""
        return _core.ChAssembly_SearchBody(self, name)

    def SearchLink(self, name):
        r"""SearchLink(ChAssembly self, char const * name) -> std::shared_ptr< chrono::ChLinkBase >"""
        return _core.ChAssembly_SearchLink(self, name)

    def SearchMesh(self, name):
        r"""SearchMesh(ChAssembly self, char const * name) -> std::shared_ptr< fea::ChMesh >"""
        return _core.ChAssembly_SearchMesh(self, name)

    def SearchOtherPhysicsItem(self, name):
        r"""SearchOtherPhysicsItem(ChAssembly self, char const * name) -> std::shared_ptr< chrono::ChPhysicsItem >"""
        return _core.ChAssembly_SearchOtherPhysicsItem(self, name)

    def Search(self, name):
        r"""Search(ChAssembly self, char const * name) -> std::shared_ptr< chrono::ChPhysicsItem >"""
        return _core.ChAssembly_Search(self, name)

    def SearchBodyID(self, markID):
        r"""SearchBodyID(ChAssembly self, int markID) -> std::shared_ptr< chrono::ChBody >"""
        return _core.ChAssembly_SearchBodyID(self, markID)

    def SearchMarker(self, *args):
        r"""
        SearchMarker(ChAssembly self, char const * name) -> std::shared_ptr< chrono::ChMarker >
        SearchMarker(ChAssembly self, int markID) -> std::shared_ptr< chrono::ChMarker >
        """
        return _core.ChAssembly_SearchMarker(self, *args)

    def GetNbodies(self):
        r"""GetNbodies(ChAssembly self) -> int"""
        return _core.ChAssembly_GetNbodies(self)

    def GetNbodiesSleeping(self):
        r"""GetNbodiesSleeping(ChAssembly self) -> int"""
        return _core.ChAssembly_GetNbodiesSleeping(self)

    def GetNbodiesFixed(self):
        r"""GetNbodiesFixed(ChAssembly self) -> int"""
        return _core.ChAssembly_GetNbodiesFixed(self)

    def GetNbodiesTotal(self):
        r"""GetNbodiesTotal(ChAssembly self) -> int"""
        return _core.ChAssembly_GetNbodiesTotal(self)

    def GetNlinks(self):
        r"""GetNlinks(ChAssembly self) -> int"""
        return _core.ChAssembly_GetNlinks(self)

    def GetNmeshes(self):
        r"""GetNmeshes(ChAssembly self) -> int"""
        return _core.ChAssembly_GetNmeshes(self)

    def GetNphysicsItems(self):
        r"""GetNphysicsItems(ChAssembly self) -> int"""
        return _core.ChAssembly_GetNphysicsItems(self)

    def GetNcoords(self):
        r"""GetNcoords(ChAssembly self) -> int"""
        return _core.ChAssembly_GetNcoords(self)

    def GetNdof(self):
        r"""GetNdof(ChAssembly self) -> int"""
        return _core.ChAssembly_GetNdof(self)

    def GetNdoc(self):
        r"""GetNdoc(ChAssembly self) -> int"""
        return _core.ChAssembly_GetNdoc(self)

    def GetNsysvars(self):
        r"""GetNsysvars(ChAssembly self) -> int"""
        return _core.ChAssembly_GetNsysvars(self)

    def GetNcoords_w(self):
        r"""GetNcoords_w(ChAssembly self) -> int"""
        return _core.ChAssembly_GetNcoords_w(self)

    def GetNdoc_w(self):
        r"""GetNdoc_w(ChAssembly self) -> int"""
        return _core.ChAssembly_GetNdoc_w(self)

    def GetNdoc_w_C(self):
        r"""GetNdoc_w_C(ChAssembly self) -> int"""
        return _core.ChAssembly_GetNdoc_w_C(self)

    def GetNdoc_w_D(self):
        r"""GetNdoc_w_D(ChAssembly self) -> int"""
        return _core.ChAssembly_GetNdoc_w_D(self)

    def GetNsysvars_w(self):
        r"""GetNsysvars_w(ChAssembly self) -> int"""
        return _core.ChAssembly_GetNsysvars_w(self)

    def SetSystem(self, m_system):
        r"""SetSystem(ChAssembly self, ChSystem m_system)"""
        return _core.ChAssembly_SetSystem(self, m_system)

    def SyncCollisionModels(self):
        r"""SyncCollisionModels(ChAssembly self)"""
        return _core.ChAssembly_SyncCollisionModels(self)

    def Setup(self):
        r"""Setup(ChAssembly self)"""
        return _core.ChAssembly_Setup(self)

    def Update(self, *args):
        r"""
        Update(ChAssembly self, double mytime, bool update_assets=True)
        Update(ChAssembly self, bool update_assets=True)
        """
        return _core.ChAssembly_Update(self, *args)

    def SetNoSpeedNoAcceleration(self):
        r"""SetNoSpeedNoAcceleration(ChAssembly self)"""
        return _core.ChAssembly_SetNoSpeedNoAcceleration(self)

    def GetDOF(self):
        r"""GetDOF(ChAssembly self) -> int"""
        return _core.ChAssembly_GetDOF(self)

    def GetDOF_w(self):
        r"""GetDOF_w(ChAssembly self) -> int"""
        return _core.ChAssembly_GetDOF_w(self)

    def GetDOC(self):
        r"""GetDOC(ChAssembly self) -> int"""
        return _core.ChAssembly_GetDOC(self)

    def GetDOC_c(self):
        r"""GetDOC_c(ChAssembly self) -> int"""
        return _core.ChAssembly_GetDOC_c(self)

    def GetDOC_d(self):
        r"""GetDOC_d(ChAssembly self) -> int"""
        return _core.ChAssembly_GetDOC_d(self)

    def IntStateGather(self, off_x, x, off_v, v, T):
        r"""IntStateGather(ChAssembly self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double & T)"""
        return _core.ChAssembly_IntStateGather(self, off_x, x, off_v, v, T)

    def IntStateScatter(self, off_x, x, off_v, v, T):
        r"""IntStateScatter(ChAssembly self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double const T)"""
        return _core.ChAssembly_IntStateScatter(self, off_x, x, off_v, v, T)

    def IntStateGatherAcceleration(self, off_a, a):
        r"""IntStateGatherAcceleration(ChAssembly self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChAssembly_IntStateGatherAcceleration(self, off_a, a)

    def IntStateScatterAcceleration(self, off_a, a):
        r"""IntStateScatterAcceleration(ChAssembly self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChAssembly_IntStateScatterAcceleration(self, off_a, a)

    def IntStateGatherReactions(self, off_L, L):
        r"""IntStateGatherReactions(ChAssembly self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChAssembly_IntStateGatherReactions(self, off_L, L)

    def IntStateScatterReactions(self, off_L, L):
        r"""IntStateScatterReactions(ChAssembly self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChAssembly_IntStateScatterReactions(self, off_L, L)

    def IntStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""IntStateIncrement(ChAssembly self, unsigned int const off_x, ChState x_new, ChState x, unsigned int const off_v, ChStateDelta Dv)"""
        return _core.ChAssembly_IntStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def IntLoadResidual_F(self, off, R, c):
        r"""IntLoadResidual_F(ChAssembly self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _core.ChAssembly_IntLoadResidual_F(self, off, R, c)

    def IntLoadResidual_Mv(self, off, R, w, c):
        r"""IntLoadResidual_Mv(ChAssembly self, unsigned int const off, ChVectorDynamicD R, ChVectorDynamicD w, double const c)"""
        return _core.ChAssembly_IntLoadResidual_Mv(self, off, R, w, c)

    def IntLoadResidual_CqL(self, off_L, R, L, c):
        r"""IntLoadResidual_CqL(ChAssembly self, unsigned int const off_L, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _core.ChAssembly_IntLoadResidual_CqL(self, off_L, R, L, c)

    def IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp):
        r"""IntLoadConstraint_C(ChAssembly self, unsigned int const off, ChVectorDynamicD Qc, double const c, bool do_clamp, double recovery_clamp)"""
        return _core.ChAssembly_IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp)

    def IntLoadConstraint_Ct(self, off, Qc, c):
        r"""IntLoadConstraint_Ct(ChAssembly self, unsigned int const off, ChVectorDynamicD Qc, double const c)"""
        return _core.ChAssembly_IntLoadConstraint_Ct(self, off, Qc, c)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChAssembly self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _core.ChAssembly_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChAssembly self, unsigned int const off_v, ChStateDelta v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChAssembly_IntFromDescriptor(self, off_v, v, off_L, L)

    def InjectVariables(self, mdescriptor):
        r"""InjectVariables(ChAssembly self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChAssembly_InjectVariables(self, mdescriptor)

    def InjectConstraints(self, mdescriptor):
        r"""InjectConstraints(ChAssembly self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChAssembly_InjectConstraints(self, mdescriptor)

    def ConstraintsLoadJacobians(self):
        r"""ConstraintsLoadJacobians(ChAssembly self)"""
        return _core.ChAssembly_ConstraintsLoadJacobians(self)

    def InjectKRMmatrices(self, mdescriptor):
        r"""InjectKRMmatrices(ChAssembly self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChAssembly_InjectKRMmatrices(self, mdescriptor)

    def KRMmatricesLoad(self, Kfactor, Rfactor, Mfactor):
        r"""KRMmatricesLoad(ChAssembly self, double Kfactor, double Rfactor, double Mfactor)"""
        return _core.ChAssembly_KRMmatricesLoad(self, Kfactor, Rfactor, Mfactor)

    def VariablesFbReset(self):
        r"""VariablesFbReset(ChAssembly self)"""
        return _core.ChAssembly_VariablesFbReset(self)

    def VariablesFbLoadForces(self, factor=1):
        r"""VariablesFbLoadForces(ChAssembly self, double factor=1)"""
        return _core.ChAssembly_VariablesFbLoadForces(self, factor)

    def VariablesQbLoadSpeed(self):
        r"""VariablesQbLoadSpeed(ChAssembly self)"""
        return _core.ChAssembly_VariablesQbLoadSpeed(self)

    def VariablesFbIncrementMq(self):
        r"""VariablesFbIncrementMq(ChAssembly self)"""
        return _core.ChAssembly_VariablesFbIncrementMq(self)

    def VariablesQbSetSpeed(self, step=0):
        r"""VariablesQbSetSpeed(ChAssembly self, double step=0)"""
        return _core.ChAssembly_VariablesQbSetSpeed(self, step)

    def VariablesQbIncrementPosition(self, step):
        r"""VariablesQbIncrementPosition(ChAssembly self, double step)"""
        return _core.ChAssembly_VariablesQbIncrementPosition(self, step)

    def ConstraintsBiReset(self):
        r"""ConstraintsBiReset(ChAssembly self)"""
        return _core.ChAssembly_ConstraintsBiReset(self)

    def ConstraintsBiLoad_C(self, factor=1, recovery_clamp=0.1, do_clamp=False):
        r"""ConstraintsBiLoad_C(ChAssembly self, double factor=1, double recovery_clamp=0.1, bool do_clamp=False)"""
        return _core.ChAssembly_ConstraintsBiLoad_C(self, factor, recovery_clamp, do_clamp)

    def ConstraintsBiLoad_Ct(self, factor=1):
        r"""ConstraintsBiLoad_Ct(ChAssembly self, double factor=1)"""
        return _core.ChAssembly_ConstraintsBiLoad_Ct(self, factor)

    def ConstraintsBiLoad_Qc(self, factor=1):
        r"""ConstraintsBiLoad_Qc(ChAssembly self, double factor=1)"""
        return _core.ChAssembly_ConstraintsBiLoad_Qc(self, factor)

    def ConstraintsFbLoadForces(self, factor=1):
        r"""ConstraintsFbLoadForces(ChAssembly self, double factor=1)"""
        return _core.ChAssembly_ConstraintsFbLoadForces(self, factor)

    def ConstraintsFetch_react(self, factor=1):
        r"""ConstraintsFetch_react(ChAssembly self, double factor=1)"""
        return _core.ChAssembly_ConstraintsFetch_react(self, factor)

    def ShowHierarchy(self, m_file, level=0):
        r"""ShowHierarchy(ChAssembly self, ChStreamOutAscii m_file, int level=0)"""
        return _core.ChAssembly_ShowHierarchy(self, m_file, level)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChAssembly self, ChArchiveOut & marchive)"""
        return _core.ChAssembly_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChAssembly self, chrono::ChArchiveIn & marchive)"""
        return _core.ChAssembly_ArchiveIN(self, marchive)

# Register ChAssembly in _core:
_core.ChAssembly_swigregister(ChAssembly)

class ChState(ChVectorDynamicD):
    r"""Proxy of C++ chrono::ChState class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChState self, ChIntegrable intgr=None) -> ChState
        __init__(ChState self, Eigen::Index size, ChIntegrable intgr) -> ChState
        __init__(ChState self, chrono::ChVectorConstRef vec, ChIntegrable intgr) -> ChState
        __init__(ChState self, ChState other) -> ChState
        """
        _core.ChState_swiginit(self, _core.new_ChState(*args))

    def __neg__(self):
        r"""__neg__(ChState self) -> ChState"""
        return _core.ChState___neg__(self)

    def __add__(self, vec):
        r"""__add__(ChState self, chrono::ChVectorConstRef vec) -> ChState"""
        return _core.ChState___add__(self, vec)

    def __sub__(self, vec):
        r"""__sub__(ChState self, chrono::ChVectorConstRef vec) -> ChState"""
        return _core.ChState___sub__(self, vec)

    def __mul__(self, factor):
        r"""__mul__(ChState self, double factor) -> ChState"""
        return _core.ChState___mul__(self, factor)

    def setZero(self, size, intgr):
        r"""setZero(ChState self, Eigen::Index size, ChIntegrable intgr)"""
        return _core.ChState_setZero(self, size, intgr)

    def GetIntegrable(self):
        r"""GetIntegrable(ChState self) -> ChIntegrable"""
        return _core.ChState_GetIntegrable(self)
    __swig_destroy__ = _core.delete_ChState

# Register ChState in _core:
_core.ChState_swigregister(ChState)

class ChStateDelta(ChVectorDynamicD):
    r"""Proxy of C++ chrono::ChStateDelta class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChStateDelta self, ChIntegrable intgr=None) -> ChStateDelta
        __init__(ChStateDelta self, Eigen::Index size, ChIntegrable intgr) -> ChStateDelta
        __init__(ChStateDelta self, chrono::ChVectorConstRef vec, ChIntegrable intgr) -> ChStateDelta
        __init__(ChStateDelta self, ChStateDelta other) -> ChStateDelta
        """
        _core.ChStateDelta_swiginit(self, _core.new_ChStateDelta(*args))

    def __neg__(self):
        r"""__neg__(ChStateDelta self) -> ChStateDelta"""
        return _core.ChStateDelta___neg__(self)

    def __imul__(self, factor):
        r"""__imul__(ChStateDelta self, double factor) -> ChStateDelta"""
        return _core.ChStateDelta___imul__(self, factor)

    def __add__(self, vec):
        r"""__add__(ChStateDelta self, chrono::ChVectorConstRef vec) -> ChStateDelta"""
        return _core.ChStateDelta___add__(self, vec)

    def __sub__(self, vec):
        r"""__sub__(ChStateDelta self, chrono::ChVectorConstRef vec) -> ChStateDelta"""
        return _core.ChStateDelta___sub__(self, vec)

    def __mul__(self, factor):
        r"""__mul__(ChStateDelta self, double factor) -> ChStateDelta"""
        return _core.ChStateDelta___mul__(self, factor)

    def setZero(self, size, intgr):
        r"""setZero(ChStateDelta self, Eigen::Index size, ChIntegrable intgr)"""
        return _core.ChStateDelta_setZero(self, size, intgr)

    def GetIntegrable(self):
        r"""GetIntegrable(ChStateDelta self) -> ChIntegrable"""
        return _core.ChStateDelta_GetIntegrable(self)
    __swig_destroy__ = _core.delete_ChStateDelta

# Register ChStateDelta in _core:
_core.ChStateDelta_swigregister(ChStateDelta)

class ChIntegrable(object):
    r"""Proxy of C++ chrono::ChIntegrable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetNcoords_y(self):
        r"""GetNcoords_y(ChIntegrable self) -> int"""
        return _core.ChIntegrable_GetNcoords_y(self)

    def GetNcoords_dy(self):
        r"""GetNcoords_dy(ChIntegrable self) -> int"""
        return _core.ChIntegrable_GetNcoords_dy(self)

    def GetNconstr(self):
        r"""GetNconstr(ChIntegrable self) -> int"""
        return _core.ChIntegrable_GetNconstr(self)

    def StateSetup(self, y, dy):
        r"""StateSetup(ChIntegrable self, ChState y, ChStateDelta dy)"""
        return _core.ChIntegrable_StateSetup(self, y, dy)

    def StateGather(self, y, T):
        r"""StateGather(ChIntegrable self, ChState y, double & T)"""
        return _core.ChIntegrable_StateGather(self, y, T)

    def StateScatter(self, y, T):
        r"""StateScatter(ChIntegrable self, ChState y, double const T)"""
        return _core.ChIntegrable_StateScatter(self, y, T)

    def StateGatherDerivative(self, Dydt):
        r"""StateGatherDerivative(ChIntegrable self, ChStateDelta Dydt)"""
        return _core.ChIntegrable_StateGatherDerivative(self, Dydt)

    def StateScatterDerivative(self, Dydt):
        r"""StateScatterDerivative(ChIntegrable self, ChStateDelta Dydt)"""
        return _core.ChIntegrable_StateScatterDerivative(self, Dydt)

    def StateGatherReactions(self, L):
        r"""StateGatherReactions(ChIntegrable self, ChVectorDynamicD L)"""
        return _core.ChIntegrable_StateGatherReactions(self, L)

    def StateScatterReactions(self, L):
        r"""StateScatterReactions(ChIntegrable self, ChVectorDynamicD L)"""
        return _core.ChIntegrable_StateScatterReactions(self, L)

    def StateSolve(self, Dydt, L, y, T, dt, force_state_scatter=True):
        r"""StateSolve(ChIntegrable self, ChStateDelta Dydt, ChVectorDynamicD L, ChState y, double const T, double const dt, bool force_state_scatter=True) -> bool"""
        return _core.ChIntegrable_StateSolve(self, Dydt, L, y, T, dt, force_state_scatter)

    def StateIncrement(self, y_new, y, Dy):
        r"""StateIncrement(ChIntegrable self, ChState y_new, ChState y, ChStateDelta Dy)"""
        return _core.ChIntegrable_StateIncrement(self, y_new, y, Dy)

    def StateSolveCorrection(self, Dy, L, R, Qc, a, b, y, T, dt, force_state_scatter=True, force_setup=True):
        r"""StateSolveCorrection(ChIntegrable self, ChStateDelta Dy, ChVectorDynamicD L, ChVectorDynamicD R, ChVectorDynamicD Qc, double const a, double const b, ChState y, double const T, double const dt, bool force_state_scatter=True, bool force_setup=True) -> bool"""
        return _core.ChIntegrable_StateSolveCorrection(self, Dy, L, R, Qc, a, b, y, T, dt, force_state_scatter, force_setup)

    def LoadResidual_Hv(self, R, v, c):
        r"""LoadResidual_Hv(ChIntegrable self, ChVectorDynamicD R, ChVectorDynamicD v, double const c)"""
        return _core.ChIntegrable_LoadResidual_Hv(self, R, v, c)

    def LoadResidual_F(self, R, c):
        r"""LoadResidual_F(ChIntegrable self, ChVectorDynamicD R, double const c)"""
        return _core.ChIntegrable_LoadResidual_F(self, R, c)

    def LoadResidual_CqL(self, R, L, c):
        r"""LoadResidual_CqL(ChIntegrable self, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _core.ChIntegrable_LoadResidual_CqL(self, R, L, c)

    def LoadConstraint_C(self, Qc, c, do_clamp=False, mclam=1e30):
        r"""LoadConstraint_C(ChIntegrable self, ChVectorDynamicD Qc, double const c, bool const do_clamp=False, double const mclam=1e30)"""
        return _core.ChIntegrable_LoadConstraint_C(self, Qc, c, do_clamp, mclam)

    def LoadConstraint_Ct(self, Qc, c):
        r"""LoadConstraint_Ct(ChIntegrable self, ChVectorDynamicD Qc, double const c)"""
        return _core.ChIntegrable_LoadConstraint_Ct(self, Qc, c)
    __swig_destroy__ = _core.delete_ChIntegrable

# Register ChIntegrable in _core:
_core.ChIntegrable_swigregister(ChIntegrable)

class ChIntegrableIIorder(ChIntegrable):
    r"""Proxy of C++ chrono::ChIntegrableIIorder class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetNcoords_x(self):
        r"""GetNcoords_x(ChIntegrableIIorder self) -> int"""
        return _core.ChIntegrableIIorder_GetNcoords_x(self)

    def GetNcoords_v(self):
        r"""GetNcoords_v(ChIntegrableIIorder self) -> int"""
        return _core.ChIntegrableIIorder_GetNcoords_v(self)

    def GetNcoords_a(self):
        r"""GetNcoords_a(ChIntegrableIIorder self) -> int"""
        return _core.ChIntegrableIIorder_GetNcoords_a(self)

    def StateSetup(self, x, v, a):
        r"""StateSetup(ChIntegrableIIorder self, ChState x, ChStateDelta v, ChStateDelta a)"""
        return _core.ChIntegrableIIorder_StateSetup(self, x, v, a)

    def StateGatherAcceleration(self, a):
        r"""StateGatherAcceleration(ChIntegrableIIorder self, ChStateDelta a)"""
        return _core.ChIntegrableIIorder_StateGatherAcceleration(self, a)

    def StateScatterAcceleration(self, a):
        r"""StateScatterAcceleration(ChIntegrableIIorder self, ChStateDelta a)"""
        return _core.ChIntegrableIIorder_StateScatterAcceleration(self, a)

    def StateSolveA(self, Dvdt, L, x, v, T, dt, force_state_scatter=True):
        r"""StateSolveA(ChIntegrableIIorder self, ChStateDelta Dvdt, ChVectorDynamicD L, ChState x, ChStateDelta v, double const T, double const dt, bool force_state_scatter=True) -> bool"""
        return _core.ChIntegrableIIorder_StateSolveA(self, Dvdt, L, x, v, T, dt, force_state_scatter)

    def StateIncrementX(self, x_new, x, Dx):
        r"""StateIncrementX(ChIntegrableIIorder self, ChState x_new, ChState x, ChStateDelta Dx)"""
        return _core.ChIntegrableIIorder_StateIncrementX(self, x_new, x, Dx)

    def LoadResidual_F(self, R, c):
        r"""LoadResidual_F(ChIntegrableIIorder self, ChVectorDynamicD R, double const c)"""
        return _core.ChIntegrableIIorder_LoadResidual_F(self, R, c)

    def LoadResidual_Mv(self, R, w, c):
        r"""LoadResidual_Mv(ChIntegrableIIorder self, ChVectorDynamicD R, ChVectorDynamicD w, double const c)"""
        return _core.ChIntegrableIIorder_LoadResidual_Mv(self, R, w, c)

    def LoadResidual_CqL(self, R, L, c):
        r"""LoadResidual_CqL(ChIntegrableIIorder self, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _core.ChIntegrableIIorder_LoadResidual_CqL(self, R, L, c)

    def LoadConstraint_C(self, Qc, c, do_clamp=False, mclam=1e30):
        r"""LoadConstraint_C(ChIntegrableIIorder self, ChVectorDynamicD Qc, double const c, bool const do_clamp=False, double const mclam=1e30)"""
        return _core.ChIntegrableIIorder_LoadConstraint_C(self, Qc, c, do_clamp, mclam)

    def LoadConstraint_Ct(self, Qc, c):
        r"""LoadConstraint_Ct(ChIntegrableIIorder self, ChVectorDynamicD Qc, double const c)"""
        return _core.ChIntegrableIIorder_LoadConstraint_Ct(self, Qc, c)

    def GetNcoords_y(self):
        r"""GetNcoords_y(ChIntegrableIIorder self) -> int"""
        return _core.ChIntegrableIIorder_GetNcoords_y(self)

    def GetNcoords_dy(self):
        r"""GetNcoords_dy(ChIntegrableIIorder self) -> int"""
        return _core.ChIntegrableIIorder_GetNcoords_dy(self)

    def StateGather(self, *args):
        r"""
        StateGather(ChIntegrableIIorder self, ChState x, ChStateDelta v, double & T)
        StateGather(ChIntegrableIIorder self, ChState y, double & T)
        """
        return _core.ChIntegrableIIorder_StateGather(self, *args)

    def StateScatter(self, *args):
        r"""
        StateScatter(ChIntegrableIIorder self, ChState x, ChStateDelta v, double const T)
        StateScatter(ChIntegrableIIorder self, ChState y, double const T)
        """
        return _core.ChIntegrableIIorder_StateScatter(self, *args)

    def StateGatherDerivative(self, Dydt):
        r"""StateGatherDerivative(ChIntegrableIIorder self, ChStateDelta Dydt)"""
        return _core.ChIntegrableIIorder_StateGatherDerivative(self, Dydt)

    def StateScatterDerivative(self, Dydt):
        r"""StateScatterDerivative(ChIntegrableIIorder self, ChStateDelta Dydt)"""
        return _core.ChIntegrableIIorder_StateScatterDerivative(self, Dydt)

    def StateIncrement(self, y_new, y, Dy):
        r"""StateIncrement(ChIntegrableIIorder self, ChState y_new, ChState y, ChStateDelta Dy)"""
        return _core.ChIntegrableIIorder_StateIncrement(self, y_new, y, Dy)

    def StateSolve(self, dydt, L, y, T, dt, force_state_scatter=True):
        r"""StateSolve(ChIntegrableIIorder self, ChStateDelta dydt, ChVectorDynamicD L, ChState y, double const T, double const dt, bool force_state_scatter=True) -> bool"""
        return _core.ChIntegrableIIorder_StateSolve(self, dydt, L, y, T, dt, force_state_scatter)

    def StateSolveCorrection(self, *args):
        r"""
        StateSolveCorrection(ChIntegrableIIorder self, ChStateDelta Dv, ChVectorDynamicD L, ChVectorDynamicD R, ChVectorDynamicD Qc, double const c_a, double const c_v, double const c_x, ChState x, ChStateDelta v, double const T, bool force_state_scatter=True, bool force_setup=True) -> bool
        StateSolveCorrection(ChIntegrableIIorder self, ChStateDelta Dy, ChVectorDynamicD L, ChVectorDynamicD R, ChVectorDynamicD Qc, double const a, double const b, ChState y, double const T, double const dt, bool force_state_scatter=True, bool force_setup=True) -> bool
        """
        return _core.ChIntegrableIIorder_StateSolveCorrection(self, *args)
    __swig_destroy__ = _core.delete_ChIntegrableIIorder

# Register ChIntegrableIIorder in _core:
_core.ChIntegrableIIorder_swigregister(ChIntegrableIIorder)


def __iadd__(y, Dy):
    r"""__iadd__(ChState y, ChStateDelta Dy) -> ChState"""
    return _core.__iadd__(y, Dy)

def __add__(*args):
    r"""
    __add__(ChState y, ChStateDelta Dy) -> ChState
    __add__(ChStateDelta Dy, ChState y) -> ChState
    """
    return _core.__add__(*args)
class ChTimestepper(object):
    r"""Proxy of C++ chrono::ChTimestepper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Type_EULER_IMPLICIT_LINEARIZED = _core.ChTimestepper_Type_EULER_IMPLICIT_LINEARIZED
    
    Type_EULER_IMPLICIT_PROJECTED = _core.ChTimestepper_Type_EULER_IMPLICIT_PROJECTED
    
    Type_EULER_IMPLICIT = _core.ChTimestepper_Type_EULER_IMPLICIT
    
    Type_TRAPEZOIDAL = _core.ChTimestepper_Type_TRAPEZOIDAL
    
    Type_TRAPEZOIDAL_LINEARIZED = _core.ChTimestepper_Type_TRAPEZOIDAL_LINEARIZED
    
    Type_HHT = _core.ChTimestepper_Type_HHT
    
    Type_HEUN = _core.ChTimestepper_Type_HEUN
    
    Type_RUNGEKUTTA45 = _core.ChTimestepper_Type_RUNGEKUTTA45
    
    Type_EULER_EXPLICIT = _core.ChTimestepper_Type_EULER_EXPLICIT
    
    Type_LEAPFROG = _core.ChTimestepper_Type_LEAPFROG
    
    Type_NEWMARK = _core.ChTimestepper_Type_NEWMARK
    
    Type_CUSTOM = _core.ChTimestepper_Type_CUSTOM
    
    __swig_destroy__ = _core.delete_ChTimestepper

    def GetType(self):
        r"""GetType(ChTimestepper self) -> chrono::ChTimestepper::Type"""
        return _core.ChTimestepper_GetType(self)

    def Advance(self, dt):
        r"""Advance(ChTimestepper self, double const dt)"""
        return _core.ChTimestepper_Advance(self, dt)

    def get_L(self):
        r"""get_L(ChTimestepper self) -> ChVectorDynamicD"""
        return _core.ChTimestepper_get_L(self)

    def SetIntegrable(self, intgr):
        r"""SetIntegrable(ChTimestepper self, ChIntegrable intgr)"""
        return _core.ChTimestepper_SetIntegrable(self, intgr)

    def GetIntegrable(self):
        r"""GetIntegrable(ChTimestepper self) -> ChIntegrable"""
        return _core.ChTimestepper_GetIntegrable(self)

    def GetTime(self):
        r"""GetTime(ChTimestepper self) -> double"""
        return _core.ChTimestepper_GetTime(self)

    def SetTime(self, mt):
        r"""SetTime(ChTimestepper self, double mt)"""
        return _core.ChTimestepper_SetTime(self, mt)

    def SetVerbose(self, verb):
        r"""SetVerbose(ChTimestepper self, bool verb)"""
        return _core.ChTimestepper_SetVerbose(self, verb)

    def SetQcDoClamp(self, dc):
        r"""SetQcDoClamp(ChTimestepper self, bool dc)"""
        return _core.ChTimestepper_SetQcDoClamp(self, dc)

    def SetQcClamping(self, cl):
        r"""SetQcClamping(ChTimestepper self, double cl)"""
        return _core.ChTimestepper_SetQcClamping(self, cl)

    def ArchiveOUT(self, archive):
        r"""ArchiveOUT(ChTimestepper self, ChArchiveOut & archive)"""
        return _core.ChTimestepper_ArchiveOUT(self, archive)

    def ArchiveIN(self, archive):
        r"""ArchiveIN(ChTimestepper self, chrono::ChArchiveIn & archive)"""
        return _core.ChTimestepper_ArchiveIN(self, archive)

# Register ChTimestepper in _core:
_core.ChTimestepper_swigregister(ChTimestepper)

class ChTimestepperIorder(ChTimestepper):
    r"""Proxy of C++ chrono::ChTimestepperIorder class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChTimestepperIorder

    def get_Y(self):
        r"""get_Y(ChTimestepperIorder self) -> ChState"""
        return _core.ChTimestepperIorder_get_Y(self)

    def get_dYdt(self):
        r"""get_dYdt(ChTimestepperIorder self) -> ChStateDelta"""
        return _core.ChTimestepperIorder_get_dYdt(self)

    def SetIntegrable(self, intgr):
        r"""SetIntegrable(ChTimestepperIorder self, ChIntegrable intgr)"""
        return _core.ChTimestepperIorder_SetIntegrable(self, intgr)

# Register ChTimestepperIorder in _core:
_core.ChTimestepperIorder_swigregister(ChTimestepperIorder)

class ChTimestepperIIorder(ChTimestepper):
    r"""Proxy of C++ chrono::ChTimestepperIIorder class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChTimestepperIIorder

    def get_X(self):
        r"""get_X(ChTimestepperIIorder self) -> ChState"""
        return _core.ChTimestepperIIorder_get_X(self)

    def get_V(self):
        r"""get_V(ChTimestepperIIorder self) -> ChStateDelta"""
        return _core.ChTimestepperIIorder_get_V(self)

    def get_A(self):
        r"""get_A(ChTimestepperIIorder self) -> ChStateDelta"""
        return _core.ChTimestepperIIorder_get_A(self)

    def SetIntegrable(self, intgr):
        r"""SetIntegrable(ChTimestepperIIorder self, ChIntegrableIIorder intgr)"""
        return _core.ChTimestepperIIorder_SetIntegrable(self, intgr)

# Register ChTimestepperIIorder in _core:
_core.ChTimestepperIIorder_swigregister(ChTimestepperIIorder)

class ChImplicitTimestepper(object):
    r"""Proxy of C++ chrono::ChImplicitTimestepper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChImplicitTimestepper self) -> ChImplicitTimestepper"""
        _core.ChImplicitTimestepper_swiginit(self, _core.new_ChImplicitTimestepper())
    __swig_destroy__ = _core.delete_ChImplicitTimestepper

# Register ChImplicitTimestepper in _core:
_core.ChImplicitTimestepper_swigregister(ChImplicitTimestepper)

class ChImplicitIterativeTimestepper(ChImplicitTimestepper):
    r"""Proxy of C++ chrono::ChImplicitIterativeTimestepper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChImplicitIterativeTimestepper self) -> ChImplicitIterativeTimestepper"""
        _core.ChImplicitIterativeTimestepper_swiginit(self, _core.new_ChImplicitIterativeTimestepper())
    __swig_destroy__ = _core.delete_ChImplicitIterativeTimestepper

    def SetMaxiters(self, iters):
        r"""SetMaxiters(ChImplicitIterativeTimestepper self, int iters)"""
        return _core.ChImplicitIterativeTimestepper_SetMaxiters(self, iters)

    def GetMaxiters(self):
        r"""GetMaxiters(ChImplicitIterativeTimestepper self) -> double"""
        return _core.ChImplicitIterativeTimestepper_GetMaxiters(self)

    def SetRelTolerance(self, rel_tol):
        r"""SetRelTolerance(ChImplicitIterativeTimestepper self, double rel_tol)"""
        return _core.ChImplicitIterativeTimestepper_SetRelTolerance(self, rel_tol)

    def SetAbsTolerances(self, *args):
        r"""
        SetAbsTolerances(ChImplicitIterativeTimestepper self, double abs_tolS, double abs_tolL)
        SetAbsTolerances(ChImplicitIterativeTimestepper self, double abs_tol)
        """
        return _core.ChImplicitIterativeTimestepper_SetAbsTolerances(self, *args)

    def GetNumIterations(self):
        r"""GetNumIterations(ChImplicitIterativeTimestepper self) -> int"""
        return _core.ChImplicitIterativeTimestepper_GetNumIterations(self)

    def GetNumSetupCalls(self):
        r"""GetNumSetupCalls(ChImplicitIterativeTimestepper self) -> int"""
        return _core.ChImplicitIterativeTimestepper_GetNumSetupCalls(self)

    def GetNumSolveCalls(self):
        r"""GetNumSolveCalls(ChImplicitIterativeTimestepper self) -> int"""
        return _core.ChImplicitIterativeTimestepper_GetNumSolveCalls(self)

    def ArchiveOUT(self, archive):
        r"""ArchiveOUT(ChImplicitIterativeTimestepper self, ChArchiveOut & archive)"""
        return _core.ChImplicitIterativeTimestepper_ArchiveOUT(self, archive)

    def ArchiveIN(self, archive):
        r"""ArchiveIN(ChImplicitIterativeTimestepper self, chrono::ChArchiveIn & archive)"""
        return _core.ChImplicitIterativeTimestepper_ArchiveIN(self, archive)

# Register ChImplicitIterativeTimestepper in _core:
_core.ChImplicitIterativeTimestepper_swigregister(ChImplicitIterativeTimestepper)

class ChTimestepperEulerExpl(ChTimestepperIorder):
    r"""Proxy of C++ chrono::ChTimestepperEulerExpl class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, intgr=None):
        r"""__init__(ChTimestepperEulerExpl self, ChIntegrable intgr=None) -> ChTimestepperEulerExpl"""
        _core.ChTimestepperEulerExpl_swiginit(self, _core.new_ChTimestepperEulerExpl(intgr))

    def Advance(self, dt):
        r"""Advance(ChTimestepperEulerExpl self, double const dt)"""
        return _core.ChTimestepperEulerExpl_Advance(self, dt)
    __swig_destroy__ = _core.delete_ChTimestepperEulerExpl

# Register ChTimestepperEulerExpl in _core:
_core.ChTimestepperEulerExpl_swigregister(ChTimestepperEulerExpl)

class ChTimestepperEulerExplIIorder(ChTimestepperIIorder):
    r"""Proxy of C++ chrono::ChTimestepperEulerExplIIorder class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, intgr=None):
        r"""__init__(ChTimestepperEulerExplIIorder self, ChIntegrableIIorder intgr=None) -> ChTimestepperEulerExplIIorder"""
        _core.ChTimestepperEulerExplIIorder_swiginit(self, _core.new_ChTimestepperEulerExplIIorder(intgr))

    def GetType(self):
        r"""GetType(ChTimestepperEulerExplIIorder self) -> chrono::ChTimestepper::Type"""
        return _core.ChTimestepperEulerExplIIorder_GetType(self)

    def Advance(self, dt):
        r"""Advance(ChTimestepperEulerExplIIorder self, double const dt)"""
        return _core.ChTimestepperEulerExplIIorder_Advance(self, dt)
    __swig_destroy__ = _core.delete_ChTimestepperEulerExplIIorder

# Register ChTimestepperEulerExplIIorder in _core:
_core.ChTimestepperEulerExplIIorder_swigregister(ChTimestepperEulerExplIIorder)

class ChTimestepperEulerSemiImplicit(ChTimestepperIIorder):
    r"""Proxy of C++ chrono::ChTimestepperEulerSemiImplicit class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, intgr=None):
        r"""__init__(ChTimestepperEulerSemiImplicit self, ChIntegrableIIorder intgr=None) -> ChTimestepperEulerSemiImplicit"""
        _core.ChTimestepperEulerSemiImplicit_swiginit(self, _core.new_ChTimestepperEulerSemiImplicit(intgr))

    def Advance(self, dt):
        r"""Advance(ChTimestepperEulerSemiImplicit self, double const dt)"""
        return _core.ChTimestepperEulerSemiImplicit_Advance(self, dt)
    __swig_destroy__ = _core.delete_ChTimestepperEulerSemiImplicit

# Register ChTimestepperEulerSemiImplicit in _core:
_core.ChTimestepperEulerSemiImplicit_swigregister(ChTimestepperEulerSemiImplicit)

class ChTimestepperRungeKuttaExpl(ChTimestepperIorder):
    r"""Proxy of C++ chrono::ChTimestepperRungeKuttaExpl class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, intgr=None):
        r"""__init__(ChTimestepperRungeKuttaExpl self, ChIntegrable intgr=None) -> ChTimestepperRungeKuttaExpl"""
        _core.ChTimestepperRungeKuttaExpl_swiginit(self, _core.new_ChTimestepperRungeKuttaExpl(intgr))

    def GetType(self):
        r"""GetType(ChTimestepperRungeKuttaExpl self) -> chrono::ChTimestepper::Type"""
        return _core.ChTimestepperRungeKuttaExpl_GetType(self)

    def Advance(self, dt):
        r"""Advance(ChTimestepperRungeKuttaExpl self, double const dt)"""
        return _core.ChTimestepperRungeKuttaExpl_Advance(self, dt)
    __swig_destroy__ = _core.delete_ChTimestepperRungeKuttaExpl

# Register ChTimestepperRungeKuttaExpl in _core:
_core.ChTimestepperRungeKuttaExpl_swigregister(ChTimestepperRungeKuttaExpl)

class ChTimestepperHeun(ChTimestepperIorder):
    r"""Proxy of C++ chrono::ChTimestepperHeun class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, intgr=None):
        r"""__init__(ChTimestepperHeun self, ChIntegrable intgr=None) -> ChTimestepperHeun"""
        _core.ChTimestepperHeun_swiginit(self, _core.new_ChTimestepperHeun(intgr))

    def GetType(self):
        r"""GetType(ChTimestepperHeun self) -> chrono::ChTimestepper::Type"""
        return _core.ChTimestepperHeun_GetType(self)

    def Advance(self, dt):
        r"""Advance(ChTimestepperHeun self, double const dt)"""
        return _core.ChTimestepperHeun_Advance(self, dt)
    __swig_destroy__ = _core.delete_ChTimestepperHeun

# Register ChTimestepperHeun in _core:
_core.ChTimestepperHeun_swigregister(ChTimestepperHeun)

class ChTimestepperLeapfrog(ChTimestepperIIorder):
    r"""Proxy of C++ chrono::ChTimestepperLeapfrog class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, intgr=None):
        r"""__init__(ChTimestepperLeapfrog self, ChIntegrableIIorder intgr=None) -> ChTimestepperLeapfrog"""
        _core.ChTimestepperLeapfrog_swiginit(self, _core.new_ChTimestepperLeapfrog(intgr))

    def GetType(self):
        r"""GetType(ChTimestepperLeapfrog self) -> chrono::ChTimestepper::Type"""
        return _core.ChTimestepperLeapfrog_GetType(self)

    def Advance(self, dt):
        r"""Advance(ChTimestepperLeapfrog self, double const dt)"""
        return _core.ChTimestepperLeapfrog_Advance(self, dt)
    __swig_destroy__ = _core.delete_ChTimestepperLeapfrog

# Register ChTimestepperLeapfrog in _core:
_core.ChTimestepperLeapfrog_swigregister(ChTimestepperLeapfrog)

class ChTimestepperEulerImplicit(ChTimestepperIIorder, ChImplicitIterativeTimestepper):
    r"""Proxy of C++ chrono::ChTimestepperEulerImplicit class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, intgr=None):
        r"""__init__(ChTimestepperEulerImplicit self, ChIntegrableIIorder intgr=None) -> ChTimestepperEulerImplicit"""
        _core.ChTimestepperEulerImplicit_swiginit(self, _core.new_ChTimestepperEulerImplicit(intgr))

    def GetType(self):
        r"""GetType(ChTimestepperEulerImplicit self) -> chrono::ChTimestepper::Type"""
        return _core.ChTimestepperEulerImplicit_GetType(self)

    def Advance(self, dt):
        r"""Advance(ChTimestepperEulerImplicit self, double const dt)"""
        return _core.ChTimestepperEulerImplicit_Advance(self, dt)
    __swig_destroy__ = _core.delete_ChTimestepperEulerImplicit

# Register ChTimestepperEulerImplicit in _core:
_core.ChTimestepperEulerImplicit_swigregister(ChTimestepperEulerImplicit)

class ChTimestepperEulerImplicitLinearized(ChTimestepperIIorder, ChImplicitTimestepper):
    r"""Proxy of C++ chrono::ChTimestepperEulerImplicitLinearized class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, intgr=None):
        r"""__init__(ChTimestepperEulerImplicitLinearized self, ChIntegrableIIorder intgr=None) -> ChTimestepperEulerImplicitLinearized"""
        _core.ChTimestepperEulerImplicitLinearized_swiginit(self, _core.new_ChTimestepperEulerImplicitLinearized(intgr))

    def GetType(self):
        r"""GetType(ChTimestepperEulerImplicitLinearized self) -> chrono::ChTimestepper::Type"""
        return _core.ChTimestepperEulerImplicitLinearized_GetType(self)

    def Advance(self, dt):
        r"""Advance(ChTimestepperEulerImplicitLinearized self, double const dt)"""
        return _core.ChTimestepperEulerImplicitLinearized_Advance(self, dt)
    __swig_destroy__ = _core.delete_ChTimestepperEulerImplicitLinearized

# Register ChTimestepperEulerImplicitLinearized in _core:
_core.ChTimestepperEulerImplicitLinearized_swigregister(ChTimestepperEulerImplicitLinearized)

class ChTimestepperEulerImplicitProjected(ChTimestepperIIorder, ChImplicitTimestepper):
    r"""Proxy of C++ chrono::ChTimestepperEulerImplicitProjected class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, intgr=None):
        r"""__init__(ChTimestepperEulerImplicitProjected self, ChIntegrableIIorder intgr=None) -> ChTimestepperEulerImplicitProjected"""
        _core.ChTimestepperEulerImplicitProjected_swiginit(self, _core.new_ChTimestepperEulerImplicitProjected(intgr))

    def GetType(self):
        r"""GetType(ChTimestepperEulerImplicitProjected self) -> chrono::ChTimestepper::Type"""
        return _core.ChTimestepperEulerImplicitProjected_GetType(self)

    def Advance(self, dt):
        r"""Advance(ChTimestepperEulerImplicitProjected self, double const dt)"""
        return _core.ChTimestepperEulerImplicitProjected_Advance(self, dt)
    __swig_destroy__ = _core.delete_ChTimestepperEulerImplicitProjected

# Register ChTimestepperEulerImplicitProjected in _core:
_core.ChTimestepperEulerImplicitProjected_swigregister(ChTimestepperEulerImplicitProjected)

class ChTimestepperTrapezoidal(ChTimestepperIIorder, ChImplicitIterativeTimestepper):
    r"""Proxy of C++ chrono::ChTimestepperTrapezoidal class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, intgr=None):
        r"""__init__(ChTimestepperTrapezoidal self, ChIntegrableIIorder intgr=None) -> ChTimestepperTrapezoidal"""
        _core.ChTimestepperTrapezoidal_swiginit(self, _core.new_ChTimestepperTrapezoidal(intgr))

    def GetType(self):
        r"""GetType(ChTimestepperTrapezoidal self) -> chrono::ChTimestepper::Type"""
        return _core.ChTimestepperTrapezoidal_GetType(self)

    def Advance(self, dt):
        r"""Advance(ChTimestepperTrapezoidal self, double const dt)"""
        return _core.ChTimestepperTrapezoidal_Advance(self, dt)
    __swig_destroy__ = _core.delete_ChTimestepperTrapezoidal

# Register ChTimestepperTrapezoidal in _core:
_core.ChTimestepperTrapezoidal_swigregister(ChTimestepperTrapezoidal)

class ChTimestepperTrapezoidalLinearized(ChTimestepperIIorder, ChImplicitIterativeTimestepper):
    r"""Proxy of C++ chrono::ChTimestepperTrapezoidalLinearized class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, intgr=None):
        r"""__init__(ChTimestepperTrapezoidalLinearized self, ChIntegrableIIorder intgr=None) -> ChTimestepperTrapezoidalLinearized"""
        _core.ChTimestepperTrapezoidalLinearized_swiginit(self, _core.new_ChTimestepperTrapezoidalLinearized(intgr))

    def GetType(self):
        r"""GetType(ChTimestepperTrapezoidalLinearized self) -> chrono::ChTimestepper::Type"""
        return _core.ChTimestepperTrapezoidalLinearized_GetType(self)

    def Advance(self, dt):
        r"""Advance(ChTimestepperTrapezoidalLinearized self, double const dt)"""
        return _core.ChTimestepperTrapezoidalLinearized_Advance(self, dt)
    __swig_destroy__ = _core.delete_ChTimestepperTrapezoidalLinearized

# Register ChTimestepperTrapezoidalLinearized in _core:
_core.ChTimestepperTrapezoidalLinearized_swigregister(ChTimestepperTrapezoidalLinearized)

class ChTimestepperTrapezoidalLinearized2(ChTimestepperIIorder, ChImplicitIterativeTimestepper):
    r"""Proxy of C++ chrono::ChTimestepperTrapezoidalLinearized2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, intgr=None):
        r"""__init__(ChTimestepperTrapezoidalLinearized2 self, ChIntegrableIIorder intgr=None) -> ChTimestepperTrapezoidalLinearized2"""
        _core.ChTimestepperTrapezoidalLinearized2_swiginit(self, _core.new_ChTimestepperTrapezoidalLinearized2(intgr))

    def Advance(self, dt):
        r"""Advance(ChTimestepperTrapezoidalLinearized2 self, double const dt)"""
        return _core.ChTimestepperTrapezoidalLinearized2_Advance(self, dt)
    __swig_destroy__ = _core.delete_ChTimestepperTrapezoidalLinearized2

# Register ChTimestepperTrapezoidalLinearized2 in _core:
_core.ChTimestepperTrapezoidalLinearized2_swigregister(ChTimestepperTrapezoidalLinearized2)

class ChTimestepperNewmark(ChTimestepperIIorder, ChImplicitIterativeTimestepper):
    r"""Proxy of C++ chrono::ChTimestepperNewmark class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, intgr=None):
        r"""__init__(ChTimestepperNewmark self, ChIntegrableIIorder intgr=None) -> ChTimestepperNewmark"""
        _core.ChTimestepperNewmark_swiginit(self, _core.new_ChTimestepperNewmark(intgr))

    def GetType(self):
        r"""GetType(ChTimestepperNewmark self) -> chrono::ChTimestepper::Type"""
        return _core.ChTimestepperNewmark_GetType(self)

    def SetGammaBeta(self, mgamma, mbeta):
        r"""SetGammaBeta(ChTimestepperNewmark self, double mgamma, double mbeta)"""
        return _core.ChTimestepperNewmark_SetGammaBeta(self, mgamma, mbeta)

    def GetGamma(self):
        r"""GetGamma(ChTimestepperNewmark self) -> double"""
        return _core.ChTimestepperNewmark_GetGamma(self)

    def GetBeta(self):
        r"""GetBeta(ChTimestepperNewmark self) -> double"""
        return _core.ChTimestepperNewmark_GetBeta(self)

    def Advance(self, dt):
        r"""Advance(ChTimestepperNewmark self, double const dt)"""
        return _core.ChTimestepperNewmark_Advance(self, dt)

    def ArchiveOUT(self, archive):
        r"""ArchiveOUT(ChTimestepperNewmark self, ChArchiveOut & archive)"""
        return _core.ChTimestepperNewmark_ArchiveOUT(self, archive)

    def ArchiveIN(self, archive):
        r"""ArchiveIN(ChTimestepperNewmark self, chrono::ChArchiveIn & archive)"""
        return _core.ChTimestepperNewmark_ArchiveIN(self, archive)
    __swig_destroy__ = _core.delete_ChTimestepperNewmark

# Register ChTimestepperNewmark in _core:
_core.ChTimestepperNewmark_swigregister(ChTimestepperNewmark)

class ChTimestepperHHT(ChTimestepperIIorder, ChImplicitIterativeTimestepper):
    r"""Proxy of C++ chrono::ChTimestepperHHT class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ACCELERATION = _core.ChTimestepperHHT_ACCELERATION
    
    POSITION = _core.ChTimestepperHHT_POSITION
    

    def __init__(self, intgr=None):
        r"""__init__(ChTimestepperHHT self, ChIntegrableIIorder intgr=None) -> ChTimestepperHHT"""
        _core.ChTimestepperHHT_swiginit(self, _core.new_ChTimestepperHHT(intgr))

    def GetType(self):
        r"""GetType(ChTimestepperHHT self) -> chrono::ChTimestepper::Type"""
        return _core.ChTimestepperHHT_GetType(self)

    def SetAlpha(self, malpha):
        r"""SetAlpha(ChTimestepperHHT self, double malpha)"""
        return _core.ChTimestepperHHT_SetAlpha(self, malpha)

    def GetAlpha(self):
        r"""GetAlpha(ChTimestepperHHT self) -> double"""
        return _core.ChTimestepperHHT_GetAlpha(self)

    def SetMode(self, mmode):
        r"""SetMode(ChTimestepperHHT self, chrono::ChTimestepperHHT::HHT_Mode mmode)"""
        return _core.ChTimestepperHHT_SetMode(self, mmode)

    def SetScaling(self, mscaling):
        r"""SetScaling(ChTimestepperHHT self, bool mscaling)"""
        return _core.ChTimestepperHHT_SetScaling(self, mscaling)

    def SetStepControl(self, val):
        r"""SetStepControl(ChTimestepperHHT self, bool val)"""
        return _core.ChTimestepperHHT_SetStepControl(self, val)

    def SetMinStepSize(self, min_step):
        r"""SetMinStepSize(ChTimestepperHHT self, double min_step)"""
        return _core.ChTimestepperHHT_SetMinStepSize(self, min_step)

    def SetMaxItersSuccess(self, iters):
        r"""SetMaxItersSuccess(ChTimestepperHHT self, int iters)"""
        return _core.ChTimestepperHHT_SetMaxItersSuccess(self, iters)

    def SetRequiredSuccessfulSteps(self, num_steps):
        r"""SetRequiredSuccessfulSteps(ChTimestepperHHT self, int num_steps)"""
        return _core.ChTimestepperHHT_SetRequiredSuccessfulSteps(self, num_steps)

    def SetStepIncreaseFactor(self, factor):
        r"""SetStepIncreaseFactor(ChTimestepperHHT self, double factor)"""
        return _core.ChTimestepperHHT_SetStepIncreaseFactor(self, factor)

    def SetStepDecreaseFactor(self, factor):
        r"""SetStepDecreaseFactor(ChTimestepperHHT self, double factor)"""
        return _core.ChTimestepperHHT_SetStepDecreaseFactor(self, factor)

    def SetModifiedNewton(self, val):
        r"""SetModifiedNewton(ChTimestepperHHT self, bool val)"""
        return _core.ChTimestepperHHT_SetModifiedNewton(self, val)

    def Advance(self, dt):
        r"""Advance(ChTimestepperHHT self, double const dt)"""
        return _core.ChTimestepperHHT_Advance(self, dt)

    def ArchiveOUT(self, archive):
        r"""ArchiveOUT(ChTimestepperHHT self, ChArchiveOut & archive)"""
        return _core.ChTimestepperHHT_ArchiveOUT(self, archive)

    def ArchiveIN(self, archive):
        r"""ArchiveIN(ChTimestepperHHT self, chrono::ChArchiveIn & archive)"""
        return _core.ChTimestepperHHT_ArchiveIN(self, archive)
    __swig_destroy__ = _core.delete_ChTimestepperHHT

# Register ChTimestepperHHT in _core:
_core.ChTimestepperHHT_swigregister(ChTimestepperHHT)

class ChSolver(object):
    r"""Proxy of C++ chrono::ChSolver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Type_PSOR = _core.ChSolver_Type_PSOR
    
    Type_PSSOR = _core.ChSolver_Type_PSSOR
    
    Type_PJACOBI = _core.ChSolver_Type_PJACOBI
    
    Type_PMINRES = _core.ChSolver_Type_PMINRES
    
    Type_BARZILAIBORWEIN = _core.ChSolver_Type_BARZILAIBORWEIN
    
    Type_APGD = _core.ChSolver_Type_APGD
    
    Type_SPARSE_LU = _core.ChSolver_Type_SPARSE_LU
    
    Type_SPARSE_QR = _core.ChSolver_Type_SPARSE_QR
    
    Type_PARDISO = _core.ChSolver_Type_PARDISO
    
    Type_MUMPS = _core.ChSolver_Type_MUMPS
    
    Type_GMRES = _core.ChSolver_Type_GMRES
    
    Type_MINRES = _core.ChSolver_Type_MINRES
    
    Type_BICGSTAB = _core.ChSolver_Type_BICGSTAB
    
    Type_CUSTOM = _core.ChSolver_Type_CUSTOM
    
    __swig_destroy__ = _core.delete_ChSolver

    def GetType(self):
        r"""GetType(ChSolver self) -> chrono::ChSolver::Type"""
        return _core.ChSolver_GetType(self)

    def SolveRequiresMatrix(self):
        r"""SolveRequiresMatrix(ChSolver self) -> bool"""
        return _core.ChSolver_SolveRequiresMatrix(self)

    def Solve(self, sysd):
        r"""Solve(ChSolver self, ChSystemDescriptor & sysd) -> double"""
        return _core.ChSolver_Solve(self, sysd)

    def Setup(self, sysd):
        r"""Setup(ChSolver self, ChSystemDescriptor & sysd) -> bool"""
        return _core.ChSolver_Setup(self, sysd)

    def SetVerbose(self, mv):
        r"""SetVerbose(ChSolver self, bool mv)"""
        return _core.ChSolver_SetVerbose(self, mv)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChSolver self, ChArchiveOut & marchive)"""
        return _core.ChSolver_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChSolver self, chrono::ChArchiveIn & marchive)"""
        return _core.ChSolver_ArchiveIN(self, marchive)

# Register ChSolver in _core:
_core.ChSolver_swigregister(ChSolver)

class ChSolverVI(ChSolver):
    r"""Proxy of C++ chrono::ChSolverVI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChSolverVI

# Register ChSolverVI in _core:
_core.ChSolverVI_swigregister(ChSolverVI)

class ChSolverLS(ChSolver):
    r"""Proxy of C++ chrono::ChSolverLS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChSolverLS

# Register ChSolverLS in _core:
_core.ChSolverLS_swigregister(ChSolverLS)

class ChDirectSolverLS(ChSolverLS):
    r"""Proxy of C++ chrono::ChDirectSolverLS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    MatrixSymmetryType_GENERAL = _core.ChDirectSolverLS_MatrixSymmetryType_GENERAL
    
    MatrixSymmetryType_SYMMETRIC_POSDEF = _core.ChDirectSolverLS_MatrixSymmetryType_SYMMETRIC_POSDEF
    
    MatrixSymmetryType_SYMMETRIC_INDEF = _core.ChDirectSolverLS_MatrixSymmetryType_SYMMETRIC_INDEF
    
    MatrixSymmetryType_STRUCTURAL_SYMMETRIC = _core.ChDirectSolverLS_MatrixSymmetryType_STRUCTURAL_SYMMETRIC
    
    __swig_destroy__ = _core.delete_ChDirectSolverLS

    def LockSparsityPattern(self, val):
        r"""LockSparsityPattern(ChDirectSolverLS self, bool val)"""
        return _core.ChDirectSolverLS_LockSparsityPattern(self, val)

    def UseSparsityPatternLearner(self, val):
        r"""UseSparsityPatternLearner(ChDirectSolverLS self, bool val)"""
        return _core.ChDirectSolverLS_UseSparsityPatternLearner(self, val)

    def ForceSparsityPatternUpdate(self):
        r"""ForceSparsityPatternUpdate(ChDirectSolverLS self)"""
        return _core.ChDirectSolverLS_ForceSparsityPatternUpdate(self)

    def SetSparsityEstimate(self, sparsity):
        r"""SetSparsityEstimate(ChDirectSolverLS self, double sparsity)"""
        return _core.ChDirectSolverLS_SetSparsityEstimate(self, sparsity)

    def SetMatrixSymmetryType(self, symmetry):
        r"""SetMatrixSymmetryType(ChDirectSolverLS self, chrono::ChDirectSolverLS::MatrixSymmetryType symmetry)"""
        return _core.ChDirectSolverLS_SetMatrixSymmetryType(self, symmetry)

    def UsePermutationVector(self, val):
        r"""UsePermutationVector(ChDirectSolverLS self, bool val)"""
        return _core.ChDirectSolverLS_UsePermutationVector(self, val)

    def LeverageRhsSparsity(self, val):
        r"""LeverageRhsSparsity(ChDirectSolverLS self, bool val)"""
        return _core.ChDirectSolverLS_LeverageRhsSparsity(self, val)

    def EnableNullPivotDetection(self, val, threshold=0):
        r"""EnableNullPivotDetection(ChDirectSolverLS self, bool val, double threshold=0)"""
        return _core.ChDirectSolverLS_EnableNullPivotDetection(self, val, threshold)

    def ResetTimers(self):
        r"""ResetTimers(ChDirectSolverLS self)"""
        return _core.ChDirectSolverLS_ResetTimers(self)

    def GetTimeSolve_Assembly(self):
        r"""GetTimeSolve_Assembly(ChDirectSolverLS self) -> double"""
        return _core.ChDirectSolverLS_GetTimeSolve_Assembly(self)

    def GetTimeSolve_SolverCall(self):
        r"""GetTimeSolve_SolverCall(ChDirectSolverLS self) -> double"""
        return _core.ChDirectSolverLS_GetTimeSolve_SolverCall(self)

    def GetTimeSetup_Assembly(self):
        r"""GetTimeSetup_Assembly(ChDirectSolverLS self) -> double"""
        return _core.ChDirectSolverLS_GetTimeSetup_Assembly(self)

    def GetTimeSetup_SolverCall(self):
        r"""GetTimeSetup_SolverCall(ChDirectSolverLS self) -> double"""
        return _core.ChDirectSolverLS_GetTimeSetup_SolverCall(self)

    def GetNumSetupCalls(self):
        r"""GetNumSetupCalls(ChDirectSolverLS self) -> int"""
        return _core.ChDirectSolverLS_GetNumSetupCalls(self)

    def GetNumSolveCalls(self):
        r"""GetNumSolveCalls(ChDirectSolverLS self) -> int"""
        return _core.ChDirectSolverLS_GetNumSolveCalls(self)

    def GetMatrix(self):
        r"""GetMatrix(ChDirectSolverLS self) -> chrono::ChSparseMatrix &"""
        return _core.ChDirectSolverLS_GetMatrix(self)

    def Setup(self, sysd):
        r"""Setup(ChDirectSolverLS self, ChSystemDescriptor & sysd) -> bool"""
        return _core.ChDirectSolverLS_Setup(self, sysd)

    def Solve(self, sysd):
        r"""Solve(ChDirectSolverLS self, ChSystemDescriptor & sysd) -> double"""
        return _core.ChDirectSolverLS_Solve(self, sysd)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChDirectSolverLS self, ChArchiveOut & marchive)"""
        return _core.ChDirectSolverLS_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChDirectSolverLS self, chrono::ChArchiveIn & marchive)"""
        return _core.ChDirectSolverLS_ArchiveIN(self, marchive)

# Register ChDirectSolverLS in _core:
_core.ChDirectSolverLS_swigregister(ChDirectSolverLS)

class ChSolverSparseLU(ChDirectSolverLS):
    r"""Proxy of C++ chrono::ChSolverSparseLU class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChSolverSparseLU self) -> ChSolverSparseLU"""
        _core.ChSolverSparseLU_swiginit(self, _core.new_ChSolverSparseLU())
    __swig_destroy__ = _core.delete_ChSolverSparseLU

    def GetType(self):
        r"""GetType(ChSolverSparseLU self) -> chrono::ChSolver::Type"""
        return _core.ChSolverSparseLU_GetType(self)

# Register ChSolverSparseLU in _core:
_core.ChSolverSparseLU_swigregister(ChSolverSparseLU)

class ChSolverSparseQR(ChDirectSolverLS):
    r"""Proxy of C++ chrono::ChSolverSparseQR class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChSolverSparseQR self) -> ChSolverSparseQR"""
        _core.ChSolverSparseQR_swiginit(self, _core.new_ChSolverSparseQR())
    __swig_destroy__ = _core.delete_ChSolverSparseQR

    def GetType(self):
        r"""GetType(ChSolverSparseQR self) -> chrono::ChSolver::Type"""
        return _core.ChSolverSparseQR_GetType(self)

# Register ChSolverSparseQR in _core:
_core.ChSolverSparseQR_swigregister(ChSolverSparseQR)

class ChIterativeSolver(object):
    r"""Proxy of C++ chrono::ChIterativeSolver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChIterativeSolver

    def SetMaxIterations(self, max_iterations):
        r"""SetMaxIterations(ChIterativeSolver self, int max_iterations)"""
        return _core.ChIterativeSolver_SetMaxIterations(self, max_iterations)

    def SetTolerance(self, tolerance):
        r"""SetTolerance(ChIterativeSolver self, double tolerance)"""
        return _core.ChIterativeSolver_SetTolerance(self, tolerance)

    def EnableDiagonalPreconditioner(self, val):
        r"""EnableDiagonalPreconditioner(ChIterativeSolver self, bool val)"""
        return _core.ChIterativeSolver_EnableDiagonalPreconditioner(self, val)

    def EnableWarmStart(self, val):
        r"""EnableWarmStart(ChIterativeSolver self, bool val)"""
        return _core.ChIterativeSolver_EnableWarmStart(self, val)

    def GetMaxIterations(self):
        r"""GetMaxIterations(ChIterativeSolver self) -> int"""
        return _core.ChIterativeSolver_GetMaxIterations(self)

    def GetTolerance(self):
        r"""GetTolerance(ChIterativeSolver self) -> double"""
        return _core.ChIterativeSolver_GetTolerance(self)

    def GetIterations(self):
        r"""GetIterations(ChIterativeSolver self) -> int"""
        return _core.ChIterativeSolver_GetIterations(self)

    def GetError(self):
        r"""GetError(ChIterativeSolver self) -> double"""
        return _core.ChIterativeSolver_GetError(self)

# Register ChIterativeSolver in _core:
_core.ChIterativeSolver_swigregister(ChIterativeSolver)

class ChIterativeSolverLS(ChSolverLS, ChIterativeSolver):
    r"""Proxy of C++ chrono::ChIterativeSolverLS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChIterativeSolverLS

    def Setup(self, sysd):
        r"""Setup(ChIterativeSolverLS self, ChSystemDescriptor & sysd) -> bool"""
        return _core.ChIterativeSolverLS_Setup(self, sysd)

    def Solve(self, sysd):
        r"""Solve(ChIterativeSolverLS self, ChSystemDescriptor & sysd) -> double"""
        return _core.ChIterativeSolverLS_Solve(self, sysd)

# Register ChIterativeSolverLS in _core:
_core.ChIterativeSolverLS_swigregister(ChIterativeSolverLS)

class ChSolverGMRES(ChIterativeSolverLS):
    r"""Proxy of C++ chrono::ChSolverGMRES class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChSolverGMRES self) -> ChSolverGMRES"""
        _core.ChSolverGMRES_swiginit(self, _core.new_ChSolverGMRES())
    __swig_destroy__ = _core.delete_ChSolverGMRES

    def GetType(self):
        r"""GetType(ChSolverGMRES self) -> chrono::ChSolver::Type"""
        return _core.ChSolverGMRES_GetType(self)

    def GetIterations(self):
        r"""GetIterations(ChSolverGMRES self) -> int"""
        return _core.ChSolverGMRES_GetIterations(self)

    def GetError(self):
        r"""GetError(ChSolverGMRES self) -> double"""
        return _core.ChSolverGMRES_GetError(self)

# Register ChSolverGMRES in _core:
_core.ChSolverGMRES_swigregister(ChSolverGMRES)

class ChSolverBiCGSTAB(ChIterativeSolverLS):
    r"""Proxy of C++ chrono::ChSolverBiCGSTAB class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChSolverBiCGSTAB self) -> ChSolverBiCGSTAB"""
        _core.ChSolverBiCGSTAB_swiginit(self, _core.new_ChSolverBiCGSTAB())
    __swig_destroy__ = _core.delete_ChSolverBiCGSTAB

    def GetType(self):
        r"""GetType(ChSolverBiCGSTAB self) -> chrono::ChSolver::Type"""
        return _core.ChSolverBiCGSTAB_GetType(self)

    def GetIterations(self):
        r"""GetIterations(ChSolverBiCGSTAB self) -> int"""
        return _core.ChSolverBiCGSTAB_GetIterations(self)

    def GetError(self):
        r"""GetError(ChSolverBiCGSTAB self) -> double"""
        return _core.ChSolverBiCGSTAB_GetError(self)

# Register ChSolverBiCGSTAB in _core:
_core.ChSolverBiCGSTAB_swigregister(ChSolverBiCGSTAB)

class ChSolverMINRES(ChIterativeSolverLS):
    r"""Proxy of C++ chrono::ChSolverMINRES class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChSolverMINRES self) -> ChSolverMINRES"""
        _core.ChSolverMINRES_swiginit(self, _core.new_ChSolverMINRES())
    __swig_destroy__ = _core.delete_ChSolverMINRES

    def GetType(self):
        r"""GetType(ChSolverMINRES self) -> chrono::ChSolver::Type"""
        return _core.ChSolverMINRES_GetType(self)

    def GetIterations(self):
        r"""GetIterations(ChSolverMINRES self) -> int"""
        return _core.ChSolverMINRES_GetIterations(self)

    def GetError(self):
        r"""GetError(ChSolverMINRES self) -> double"""
        return _core.ChSolverMINRES_GetError(self)

# Register ChSolverMINRES in _core:
_core.ChSolverMINRES_swigregister(ChSolverMINRES)

class ChIterativeSolverVI(ChSolverVI, ChIterativeSolver):
    r"""Proxy of C++ chrono::ChIterativeSolverVI class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChIterativeSolverVI

    def SetOmega(self, mval):
        r"""SetOmega(ChIterativeSolverVI self, double mval)"""
        return _core.ChIterativeSolverVI_SetOmega(self, mval)

    def SetSharpnessLambda(self, mval):
        r"""SetSharpnessLambda(ChIterativeSolverVI self, double mval)"""
        return _core.ChIterativeSolverVI_SetSharpnessLambda(self, mval)

    def SetRecordViolation(self, mval):
        r"""SetRecordViolation(ChIterativeSolverVI self, bool mval)"""
        return _core.ChIterativeSolverVI_SetRecordViolation(self, mval)

    def GetOmega(self):
        r"""GetOmega(ChIterativeSolverVI self) -> double"""
        return _core.ChIterativeSolverVI_GetOmega(self)

    def GetSharpnessLambda(self):
        r"""GetSharpnessLambda(ChIterativeSolverVI self) -> double"""
        return _core.ChIterativeSolverVI_GetSharpnessLambda(self)

    def GetIterations(self):
        r"""GetIterations(ChIterativeSolverVI self) -> int"""
        return _core.ChIterativeSolverVI_GetIterations(self)

    def GetViolationHistory(self):
        r"""GetViolationHistory(ChIterativeSolverVI self) -> std::vector< double,std::allocator< double > > const &"""
        return _core.ChIterativeSolverVI_GetViolationHistory(self)

    def GetDeltalambdaHistory(self):
        r"""GetDeltalambdaHistory(ChIterativeSolverVI self) -> std::vector< double,std::allocator< double > > const &"""
        return _core.ChIterativeSolverVI_GetDeltalambdaHistory(self)

# Register ChIterativeSolverVI in _core:
_core.ChIterativeSolverVI_swigregister(ChIterativeSolverVI)

class ChSolverBB(ChIterativeSolverVI):
    r"""Proxy of C++ chrono::ChSolverBB class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChSolverBB self) -> ChSolverBB"""
        _core.ChSolverBB_swiginit(self, _core.new_ChSolverBB())
    __swig_destroy__ = _core.delete_ChSolverBB

    def GetType(self):
        r"""GetType(ChSolverBB self) -> chrono::ChSolver::Type"""
        return _core.ChSolverBB_GetType(self)

    def Solve(self, sysd):
        r"""Solve(ChSolverBB self, ChSystemDescriptor & sysd) -> double"""
        return _core.ChSolverBB_Solve(self, sysd)

    def SetNarmijo(self, mf):
        r"""SetNarmijo(ChSolverBB self, int mf)"""
        return _core.ChSolverBB_SetNarmijo(self, mf)

    def GetNarmijo(self):
        r"""GetNarmijo(ChSolverBB self) -> double"""
        return _core.ChSolverBB_GetNarmijo(self)

    def SetMaxArmijoBacktrace(self, mm):
        r"""SetMaxArmijoBacktrace(ChSolverBB self, int mm)"""
        return _core.ChSolverBB_SetMaxArmijoBacktrace(self, mm)

    def GetMaxArmijoBacktrace(self):
        r"""GetMaxArmijoBacktrace(ChSolverBB self) -> int"""
        return _core.ChSolverBB_GetMaxArmijoBacktrace(self)

    def GetError(self):
        r"""GetError(ChSolverBB self) -> double"""
        return _core.ChSolverBB_GetError(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChSolverBB self, ChArchiveOut & marchive)"""
        return _core.ChSolverBB_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChSolverBB self, chrono::ChArchiveIn & marchive)"""
        return _core.ChSolverBB_ArchiveIN(self, marchive)

# Register ChSolverBB in _core:
_core.ChSolverBB_swigregister(ChSolverBB)

class ChSolverAPGD(ChIterativeSolverVI):
    r"""Proxy of C++ chrono::ChSolverAPGD class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChSolverAPGD self) -> ChSolverAPGD"""
        _core.ChSolverAPGD_swiginit(self, _core.new_ChSolverAPGD())
    __swig_destroy__ = _core.delete_ChSolverAPGD

    def GetType(self):
        r"""GetType(ChSolverAPGD self) -> chrono::ChSolver::Type"""
        return _core.ChSolverAPGD_GetType(self)

    def Solve(self, sysd):
        r"""Solve(ChSolverAPGD self, ChSystemDescriptor & sysd) -> double"""
        return _core.ChSolverAPGD_Solve(self, sysd)

    def GetError(self):
        r"""GetError(ChSolverAPGD self) -> double"""
        return _core.ChSolverAPGD_GetError(self)

    def Dump_Rhs(self, temp):
        r"""Dump_Rhs(ChSolverAPGD self, std::vector< double,std::allocator< double > > & temp)"""
        return _core.ChSolverAPGD_Dump_Rhs(self, temp)

    def Dump_Lambda(self, temp):
        r"""Dump_Lambda(ChSolverAPGD self, std::vector< double,std::allocator< double > > & temp)"""
        return _core.ChSolverAPGD_Dump_Lambda(self, temp)

# Register ChSolverAPGD in _core:
_core.ChSolverAPGD_swigregister(ChSolverAPGD)

class ChSolverPSOR(ChIterativeSolverVI):
    r"""Proxy of C++ chrono::ChSolverPSOR class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChSolverPSOR self) -> ChSolverPSOR"""
        _core.ChSolverPSOR_swiginit(self, _core.new_ChSolverPSOR())
    __swig_destroy__ = _core.delete_ChSolverPSOR

    def GetType(self):
        r"""GetType(ChSolverPSOR self) -> chrono::ChSolver::Type"""
        return _core.ChSolverPSOR_GetType(self)

    def Solve(self, sysd):
        r"""Solve(ChSolverPSOR self, ChSystemDescriptor & sysd) -> double"""
        return _core.ChSolverPSOR_Solve(self, sysd)

    def GetError(self):
        r"""GetError(ChSolverPSOR self) -> double"""
        return _core.ChSolverPSOR_GetError(self)

# Register ChSolverPSOR in _core:
_core.ChSolverPSOR_swigregister(ChSolverPSOR)

class ChSolverPJacobi(ChIterativeSolverVI):
    r"""Proxy of C++ chrono::ChSolverPJacobi class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChSolverPJacobi self) -> ChSolverPJacobi"""
        _core.ChSolverPJacobi_swiginit(self, _core.new_ChSolverPJacobi())
    __swig_destroy__ = _core.delete_ChSolverPJacobi

    def GetType(self):
        r"""GetType(ChSolverPJacobi self) -> chrono::ChSolver::Type"""
        return _core.ChSolverPJacobi_GetType(self)

    def Solve(self, sysd):
        r"""Solve(ChSolverPJacobi self, ChSystemDescriptor & sysd) -> double"""
        return _core.ChSolverPJacobi_Solve(self, sysd)

    def GetError(self):
        r"""GetError(ChSolverPJacobi self) -> double"""
        return _core.ChSolverPJacobi_GetError(self)

# Register ChSolverPJacobi in _core:
_core.ChSolverPJacobi_swigregister(ChSolverPJacobi)


def CastContactableToChBody(base):
    r"""CastContactableToChBody(ChContactable base) -> ChBody"""
    return _core.CastContactableToChBody(base)
class ChContactable(object):
    r"""Proxy of C++ chrono::ChContactable class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChContactable

    def IsContactActive(self):
        r"""IsContactActive(ChContactable self) -> bool"""
        return _core.ChContactable_IsContactActive(self)

    def ContactableGet_ndof_x(self):
        r"""ContactableGet_ndof_x(ChContactable self) -> int"""
        return _core.ChContactable_ContactableGet_ndof_x(self)

    def ContactableGet_ndof_w(self):
        r"""ContactableGet_ndof_w(ChContactable self) -> int"""
        return _core.ChContactable_ContactableGet_ndof_w(self)

    def ContactableGetStateBlock_x(self, x):
        r"""ContactableGetStateBlock_x(ChContactable self, ChState x)"""
        return _core.ChContactable_ContactableGetStateBlock_x(self, x)

    def ContactableGetStateBlock_w(self, w):
        r"""ContactableGetStateBlock_w(ChContactable self, ChStateDelta w)"""
        return _core.ChContactable_ContactableGetStateBlock_w(self, w)

    def ContactableIncrementState(self, x, dw, x_new):
        r"""ContactableIncrementState(ChContactable self, ChState x, ChStateDelta dw, ChState x_new)"""
        return _core.ChContactable_ContactableIncrementState(self, x, dw, x_new)

    def GetMaterialSurface(self):
        r"""GetMaterialSurface(ChContactable self) -> std::shared_ptr< chrono::ChMaterialSurface > &"""
        return _core.ChContactable_GetMaterialSurface(self)

    def GetContactPoint(self, loc_point, state_x):
        r"""GetContactPoint(ChContactable self, ChVectorD loc_point, ChState state_x) -> ChVectorD"""
        return _core.ChContactable_GetContactPoint(self, loc_point, state_x)

    def GetContactPointSpeed(self, *args):
        r"""
        GetContactPointSpeed(ChContactable self, ChVectorD loc_point, ChState state_x, ChStateDelta state_w) -> ChVectorD
        GetContactPointSpeed(ChContactable self, ChVectorD abs_point) -> ChVectorD
        """
        return _core.ChContactable_GetContactPointSpeed(self, *args)

    def GetCsysForCollisionModel(self):
        r"""GetCsysForCollisionModel(ChContactable self) -> ChCoordsysD"""
        return _core.ChContactable_GetCsysForCollisionModel(self)

    def ContactForceLoadResidual_F(self, F, abs_point, R):
        r"""ContactForceLoadResidual_F(ChContactable self, ChVectorD F, ChVectorD abs_point, ChVectorDynamicD R)"""
        return _core.ChContactable_ContactForceLoadResidual_F(self, F, abs_point, R)

    def ContactForceLoadQ(self, F, point, state_x, Q, offset):
        r"""ContactForceLoadQ(ChContactable self, ChVectorD F, ChVectorD point, ChState state_x, ChVectorDynamicD Q, int offset)"""
        return _core.ChContactable_ContactForceLoadQ(self, F, point, state_x, Q, offset)

    def GetContactableMass(self):
        r"""GetContactableMass(ChContactable self) -> double"""
        return _core.ChContactable_GetContactableMass(self)

    def GetPhysicsItem(self):
        r"""GetPhysicsItem(ChContactable self) -> ChPhysicsItem"""
        return _core.ChContactable_GetPhysicsItem(self)
    CONTACTABLE_UNKNOWN = _core.ChContactable_CONTACTABLE_UNKNOWN
    
    CONTACTABLE_6 = _core.ChContactable_CONTACTABLE_6
    
    CONTACTABLE_3 = _core.ChContactable_CONTACTABLE_3
    
    CONTACTABLE_333 = _core.ChContactable_CONTACTABLE_333
    
    CONTACTABLE_666 = _core.ChContactable_CONTACTABLE_666
    

    def GetContactableType(self):
        r"""GetContactableType(ChContactable self) -> chrono::ChContactable::eChContactableType"""
        return _core.ChContactable_GetContactableType(self)

# Register ChContactable in _core:
_core.ChContactable_swigregister(ChContactable)

class ChContactContainer(ChPhysicsItem):
    r"""Proxy of C++ chrono::ChContactContainer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChContactContainer

    def GetNcontacts(self):
        r"""GetNcontacts(ChContactContainer self) -> int"""
        return _core.ChContactContainer_GetNcontacts(self)

    def RemoveAllContacts(self):
        r"""RemoveAllContacts(ChContactContainer self)"""
        return _core.ChContactContainer_RemoveAllContacts(self)

    def BeginAddContact(self):
        r"""BeginAddContact(ChContactContainer self)"""
        return _core.ChContactContainer_BeginAddContact(self)

    def AddContact(self, mcontact):
        r"""AddContact(ChContactContainer self, ChCollisionInfo mcontact)"""
        return _core.ChContactContainer_AddContact(self, mcontact)

    def EndAddContact(self):
        r"""EndAddContact(ChContactContainer self)"""
        return _core.ChContactContainer_EndAddContact(self)

    def RegisterAddContactCallback(self, mcallback):
        r"""RegisterAddContactCallback(ChContactContainer self, AddContactCallback mcallback)"""
        return _core.ChContactContainer_RegisterAddContactCallback(self, mcallback)

    def GetAddContactCallback(self):
        r"""GetAddContactCallback(ChContactContainer self) -> AddContactCallback"""
        return _core.ChContactContainer_GetAddContactCallback(self)

    def ReportAllContacts(self, mcallback):
        r"""ReportAllContacts(ChContactContainer self, ReportContactCallback mcallback)"""
        return _core.ChContactContainer_ReportAllContacts(self, mcallback)

    def ComputeContactForces(self):
        r"""ComputeContactForces(ChContactContainer self)"""
        return _core.ChContactContainer_ComputeContactForces(self)

    def GetContactableForce(self, contactable):
        r"""GetContactableForce(ChContactContainer self, ChContactable contactable) -> ChVectorD"""
        return _core.ChContactContainer_GetContactableForce(self, contactable)

    def GetContactableTorque(self, contactable):
        r"""GetContactableTorque(ChContactContainer self, ChContactable contactable) -> ChVectorD"""
        return _core.ChContactContainer_GetContactableTorque(self, contactable)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChContactContainer self, ChArchiveOut & marchive)"""
        return _core.ChContactContainer_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChContactContainer self, chrono::ChArchiveIn & marchive)"""
        return _core.ChContactContainer_ArchiveIN(self, marchive)

# Register ChContactContainer in _core:
_core.ChContactContainer_swigregister(ChContactContainer)

class AddContactCallback(object):
    r"""Proxy of C++ chrono::ChContactContainer::AddContactCallback class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_AddContactCallback

    def OnAddContact(self, contactinfo, material):
        r"""OnAddContact(AddContactCallback self, ChCollisionInfo contactinfo, ChMaterialComposite material)"""
        return _core.AddContactCallback_OnAddContact(self, contactinfo, material)

# Register AddContactCallback in _core:
_core.AddContactCallback_swigregister(AddContactCallback)

class ReportContactCallback(object):
    r"""Proxy of C++ chrono::ChContactContainer::ReportContactCallback class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ReportContactCallback

    def OnReportContact(self, pA, pB, plane_coord, distance, eff_radius, react_forces, react_torques, contactobjA, contactobjB):
        r"""OnReportContact(ReportContactCallback self, ChVectorD pA, ChVectorD pB, ChMatrix33D plane_coord, double const & distance, double const & eff_radius, ChVectorD react_forces, ChVectorD react_torques, ChContactable contactobjA, ChContactable contactobjB) -> bool"""
        return _core.ReportContactCallback_OnReportContact(self, pA, pB, plane_coord, distance, eff_radius, react_forces, react_torques, contactobjA, contactobjB)

    def __init__(self):
        r"""__init__(ReportContactCallback self) -> ReportContactCallback"""
        if self.__class__ == ReportContactCallback:
            _self = None
        else:
            _self = self
        _core.ReportContactCallback_swiginit(self, _core.new_ReportContactCallback(_self, ))
    def __disown__(self):
        self.this.disown()
        _core.disown_ReportContactCallback(self)
        return weakref.proxy(self)

# Register ReportContactCallback in _core:
_core.ReportContactCallback_swigregister(ReportContactCallback)

class ChCustomCollisionCallbackP(object):
    r"""Proxy of C++ ChCustomCollisionCallbackP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChCustomCollisionCallbackP

    def OnCustomCollision(self, msys):
        r"""OnCustomCollision(ChCustomCollisionCallbackP self, ChSystem msys)"""
        return _core.ChCustomCollisionCallbackP_OnCustomCollision(self, msys)

    def __init__(self):
        r"""__init__(ChCustomCollisionCallbackP self) -> ChCustomCollisionCallbackP"""
        if self.__class__ == ChCustomCollisionCallbackP:
            _self = None
        else:
            _self = self
        _core.ChCustomCollisionCallbackP_swiginit(self, _core.new_ChCustomCollisionCallbackP(_self, ))
    def __disown__(self):
        self.this.disown()
        _core.disown_ChCustomCollisionCallbackP(self)
        return weakref.proxy(self)

# Register ChCustomCollisionCallbackP in _core:
_core.ChCustomCollisionCallbackP_swigregister(ChCustomCollisionCallbackP)

class ChSystem(ChAssembly, ChIntegrableIIorder):
    r"""Proxy of C++ chrono::ChSystem class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChSystem

    def SetStep(self, m_step):
        r"""SetStep(ChSystem self, double m_step)"""
        return _core.ChSystem_SetStep(self, m_step)

    def GetStep(self):
        r"""GetStep(ChSystem self) -> double"""
        return _core.ChSystem_GetStep(self)

    def SetEndTime(self, m_end_time):
        r"""SetEndTime(ChSystem self, double m_end_time)"""
        return _core.ChSystem_SetEndTime(self, m_end_time)

    def GetEndTime(self):
        r"""GetEndTime(ChSystem self) -> double"""
        return _core.ChSystem_GetEndTime(self)

    def SetStepMin(self, m_step_min):
        r"""SetStepMin(ChSystem self, double m_step_min)"""
        return _core.ChSystem_SetStepMin(self, m_step_min)

    def GetStepMin(self):
        r"""GetStepMin(ChSystem self) -> double"""
        return _core.ChSystem_GetStepMin(self)

    def SetStepMax(self, m_step_max):
        r"""SetStepMax(ChSystem self, double m_step_max)"""
        return _core.ChSystem_SetStepMax(self, m_step_max)

    def GetStepMax(self):
        r"""GetStepMax(ChSystem self) -> double"""
        return _core.ChSystem_GetStepMax(self)

    def SetTimestepperType(self, type):
        r"""SetTimestepperType(ChSystem self, chrono::ChTimestepper::Type type)"""
        return _core.ChSystem_SetTimestepperType(self, type)

    def GetTimestepperType(self):
        r"""GetTimestepperType(ChSystem self) -> chrono::ChTimestepper::Type"""
        return _core.ChSystem_GetTimestepperType(self)

    def SetTimestepper(self, mstepper):
        r"""SetTimestepper(ChSystem self, std::shared_ptr< chrono::ChTimestepper > mstepper)"""
        return _core.ChSystem_SetTimestepper(self, mstepper)

    def GetTimestepper(self):
        r"""GetTimestepper(ChSystem self) -> std::shared_ptr< chrono::ChTimestepper >"""
        return _core.ChSystem_GetTimestepper(self)

    def SetMaxiter(self, m_maxiter):
        r"""SetMaxiter(ChSystem self, int m_maxiter)"""
        return _core.ChSystem_SetMaxiter(self, m_maxiter)

    def GetMaxiter(self):
        r"""GetMaxiter(ChSystem self) -> int"""
        return _core.ChSystem_GetMaxiter(self)

    def SetMaterialCompositionStrategy(self, strategy):
        r"""SetMaterialCompositionStrategy(ChSystem self, std::unique_ptr< chrono::ChMaterialCompositionStrategy< float > > && strategy)"""
        return _core.ChSystem_SetMaterialCompositionStrategy(self, strategy)

    def GetMaterialCompositionStrategy(self):
        r"""GetMaterialCompositionStrategy(ChSystem self) -> chrono::ChMaterialCompositionStrategy< float > const &"""
        return _core.ChSystem_GetMaterialCompositionStrategy(self)

    def SetMinBounceSpeed(self, mval):
        r"""SetMinBounceSpeed(ChSystem self, double mval)"""
        return _core.ChSystem_SetMinBounceSpeed(self, mval)

    def GetMinBounceSpeed(self):
        r"""GetMinBounceSpeed(ChSystem self) -> double"""
        return _core.ChSystem_GetMinBounceSpeed(self)

    def SetMaxPenetrationRecoverySpeed(self, mval):
        r"""SetMaxPenetrationRecoverySpeed(ChSystem self, double mval)"""
        return _core.ChSystem_SetMaxPenetrationRecoverySpeed(self, mval)

    def GetMaxPenetrationRecoverySpeed(self):
        r"""GetMaxPenetrationRecoverySpeed(ChSystem self) -> double"""
        return _core.ChSystem_GetMaxPenetrationRecoverySpeed(self)

    def SetSolver(self, newsolver):
        r"""SetSolver(ChSystem self, std::shared_ptr< chrono::ChSolver > newsolver)"""
        return _core.ChSystem_SetSolver(self, newsolver)

    def GetSolver(self):
        r"""GetSolver(ChSystem self) -> std::shared_ptr< chrono::ChSolver >"""
        return _core.ChSystem_GetSolver(self)

    def SetSolverType(self, type):
        r"""SetSolverType(ChSystem self, chrono::ChSolver::Type type)"""
        return _core.ChSystem_SetSolverType(self, type)

    def GetSolverType(self):
        r"""GetSolverType(ChSystem self) -> chrono::ChSolver::Type"""
        return _core.ChSystem_GetSolverType(self)

    def SetSolverMaxIterations(self, max_iters):
        r"""SetSolverMaxIterations(ChSystem self, int max_iters)"""
        return _core.ChSystem_SetSolverMaxIterations(self, max_iters)

    def GetSolverMaxIterations(self):
        r"""GetSolverMaxIterations(ChSystem self) -> int"""
        return _core.ChSystem_GetSolverMaxIterations(self)

    def SetSolverTolerance(self, tolerance):
        r"""SetSolverTolerance(ChSystem self, double tolerance)"""
        return _core.ChSystem_SetSolverTolerance(self, tolerance)

    def GetSolverTolerance(self):
        r"""GetSolverTolerance(ChSystem self) -> double"""
        return _core.ChSystem_GetSolverTolerance(self)

    def SetSolverForceTolerance(self, tolerance):
        r"""SetSolverForceTolerance(ChSystem self, double tolerance)"""
        return _core.ChSystem_SetSolverForceTolerance(self, tolerance)

    def GetSolverForceTolerance(self):
        r"""GetSolverForceTolerance(ChSystem self) -> double"""
        return _core.ChSystem_GetSolverForceTolerance(self)

    def SetSystemDescriptor(self, newdescriptor):
        r"""SetSystemDescriptor(ChSystem self, std::shared_ptr< ChSystemDescriptor > newdescriptor)"""
        return _core.ChSystem_SetSystemDescriptor(self, newdescriptor)

    def GetSystemDescriptor(self):
        r"""GetSystemDescriptor(ChSystem self) -> std::shared_ptr< ChSystemDescriptor >"""
        return _core.ChSystem_GetSystemDescriptor(self)

    def Set_G_acc(self, m_acc):
        r"""Set_G_acc(ChSystem self, ChVectorD m_acc)"""
        return _core.ChSystem_Set_G_acc(self, m_acc)

    def Get_G_acc(self):
        r"""Get_G_acc(ChSystem self) -> ChVectorD"""
        return _core.ChSystem_Get_G_acc(self)

    def Clear(self):
        r"""Clear(ChSystem self)"""
        return _core.ChSystem_Clear(self)

    def GetContactMethod(self):
        r"""GetContactMethod(ChSystem self) -> chrono::ChMaterialSurface::ContactMethod"""
        return _core.ChSystem_GetContactMethod(self)

    def NewBody(self):
        r"""NewBody(ChSystem self) -> ChBody"""
        return _core.ChSystem_NewBody(self)

    def NewBodyAuxRef(self):
        r"""NewBodyAuxRef(ChSystem self) -> ChBodyAuxRef"""
        return _core.ChSystem_NewBodyAuxRef(self)

    def SetContactContainer(self, container):
        r"""SetContactContainer(ChSystem self, std::shared_ptr< chrono::ChContactContainer > container)"""
        return _core.ChSystem_SetContactContainer(self, container)

    def GetContactContainer(self):
        r"""GetContactContainer(ChSystem self) -> std::shared_ptr< chrono::ChContactContainer >"""
        return _core.ChSystem_GetContactContainer(self)

    def Reference_LM_byID(self):
        r"""Reference_LM_byID(ChSystem self)"""
        return _core.ChSystem_Reference_LM_byID(self)

    def GetNcontacts(self):
        r"""GetNcontacts(ChSystem self) -> int"""
        return _core.ChSystem_GetNcontacts(self)

    def GetTimerStep(self):
        r"""GetTimerStep(ChSystem self) -> double"""
        return _core.ChSystem_GetTimerStep(self)

    def GetTimerAdvance(self):
        r"""GetTimerAdvance(ChSystem self) -> double"""
        return _core.ChSystem_GetTimerAdvance(self)

    def GetTimerSolver(self):
        r"""GetTimerSolver(ChSystem self) -> double"""
        return _core.ChSystem_GetTimerSolver(self)

    def GetTimerSetup(self):
        r"""GetTimerSetup(ChSystem self) -> double"""
        return _core.ChSystem_GetTimerSetup(self)

    def GetTimerJacobian(self):
        r"""GetTimerJacobian(ChSystem self) -> double"""
        return _core.ChSystem_GetTimerJacobian(self)

    def GetTimerCollision(self):
        r"""GetTimerCollision(ChSystem self) -> double"""
        return _core.ChSystem_GetTimerCollision(self)

    def GetTimerUpdate(self):
        r"""GetTimerUpdate(ChSystem self) -> double"""
        return _core.ChSystem_GetTimerUpdate(self)

    def GetTimerCollisionBroad(self):
        r"""GetTimerCollisionBroad(ChSystem self) -> double"""
        return _core.ChSystem_GetTimerCollisionBroad(self)

    def GetTimerCollisionNarrow(self):
        r"""GetTimerCollisionNarrow(ChSystem self) -> double"""
        return _core.ChSystem_GetTimerCollisionNarrow(self)

    def ResetTimers(self):
        r"""ResetTimers(ChSystem self)"""
        return _core.ChSystem_ResetTimers(self)

    def Setup(self):
        r"""Setup(ChSystem self)"""
        return _core.ChSystem_Setup(self)

    def Update(self, update_assets=True):
        r"""Update(ChSystem self, bool update_assets=True)"""
        return _core.ChSystem_Update(self, update_assets)

    def ForceUpdate(self):
        r"""ForceUpdate(ChSystem self)"""
        return _core.ChSystem_ForceUpdate(self)

    def IntStateGather(self, off_x, x, off_v, v, T):
        r"""IntStateGather(ChSystem self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double & T)"""
        return _core.ChSystem_IntStateGather(self, off_x, x, off_v, v, T)

    def IntStateScatter(self, off_x, x, off_v, v, T):
        r"""IntStateScatter(ChSystem self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double const T)"""
        return _core.ChSystem_IntStateScatter(self, off_x, x, off_v, v, T)

    def IntStateGatherAcceleration(self, off_a, a):
        r"""IntStateGatherAcceleration(ChSystem self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChSystem_IntStateGatherAcceleration(self, off_a, a)

    def IntStateScatterAcceleration(self, off_a, a):
        r"""IntStateScatterAcceleration(ChSystem self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChSystem_IntStateScatterAcceleration(self, off_a, a)

    def IntStateGatherReactions(self, off_L, L):
        r"""IntStateGatherReactions(ChSystem self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChSystem_IntStateGatherReactions(self, off_L, L)

    def IntStateScatterReactions(self, off_L, L):
        r"""IntStateScatterReactions(ChSystem self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChSystem_IntStateScatterReactions(self, off_L, L)

    def IntStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""IntStateIncrement(ChSystem self, unsigned int const off_x, ChState x_new, ChState x, unsigned int const off_v, ChStateDelta Dv)"""
        return _core.ChSystem_IntStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def IntLoadResidual_F(self, off, R, c):
        r"""IntLoadResidual_F(ChSystem self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _core.ChSystem_IntLoadResidual_F(self, off, R, c)

    def IntLoadResidual_Mv(self, off, R, w, c):
        r"""IntLoadResidual_Mv(ChSystem self, unsigned int const off, ChVectorDynamicD R, ChVectorDynamicD w, double const c)"""
        return _core.ChSystem_IntLoadResidual_Mv(self, off, R, w, c)

    def IntLoadResidual_CqL(self, off_L, R, L, c):
        r"""IntLoadResidual_CqL(ChSystem self, unsigned int const off_L, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _core.ChSystem_IntLoadResidual_CqL(self, off_L, R, L, c)

    def IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp):
        r"""IntLoadConstraint_C(ChSystem self, unsigned int const off, ChVectorDynamicD Qc, double const c, bool do_clamp, double recovery_clamp)"""
        return _core.ChSystem_IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp)

    def IntLoadConstraint_Ct(self, off, Qc, c):
        r"""IntLoadConstraint_Ct(ChSystem self, unsigned int const off, ChVectorDynamicD Qc, double const c)"""
        return _core.ChSystem_IntLoadConstraint_Ct(self, off, Qc, c)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChSystem self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _core.ChSystem_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChSystem self, unsigned int const off_v, ChStateDelta v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChSystem_IntFromDescriptor(self, off_v, v, off_L, L)

    def InjectVariables(self, mdescriptor):
        r"""InjectVariables(ChSystem self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChSystem_InjectVariables(self, mdescriptor)

    def InjectConstraints(self, mdescriptor):
        r"""InjectConstraints(ChSystem self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChSystem_InjectConstraints(self, mdescriptor)

    def ConstraintsLoadJacobians(self):
        r"""ConstraintsLoadJacobians(ChSystem self)"""
        return _core.ChSystem_ConstraintsLoadJacobians(self)

    def InjectKRMmatrices(self, mdescriptor):
        r"""InjectKRMmatrices(ChSystem self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChSystem_InjectKRMmatrices(self, mdescriptor)

    def KRMmatricesLoad(self, Kfactor, Rfactor, Mfactor):
        r"""KRMmatricesLoad(ChSystem self, double Kfactor, double Rfactor, double Mfactor)"""
        return _core.ChSystem_KRMmatricesLoad(self, Kfactor, Rfactor, Mfactor)

    def VariablesFbReset(self):
        r"""VariablesFbReset(ChSystem self)"""
        return _core.ChSystem_VariablesFbReset(self)

    def VariablesFbLoadForces(self, factor=1):
        r"""VariablesFbLoadForces(ChSystem self, double factor=1)"""
        return _core.ChSystem_VariablesFbLoadForces(self, factor)

    def VariablesQbLoadSpeed(self):
        r"""VariablesQbLoadSpeed(ChSystem self)"""
        return _core.ChSystem_VariablesQbLoadSpeed(self)

    def VariablesFbIncrementMq(self):
        r"""VariablesFbIncrementMq(ChSystem self)"""
        return _core.ChSystem_VariablesFbIncrementMq(self)

    def VariablesQbSetSpeed(self, step=0):
        r"""VariablesQbSetSpeed(ChSystem self, double step=0)"""
        return _core.ChSystem_VariablesQbSetSpeed(self, step)

    def VariablesQbIncrementPosition(self, step):
        r"""VariablesQbIncrementPosition(ChSystem self, double step)"""
        return _core.ChSystem_VariablesQbIncrementPosition(self, step)

    def ConstraintsBiReset(self):
        r"""ConstraintsBiReset(ChSystem self)"""
        return _core.ChSystem_ConstraintsBiReset(self)

    def ConstraintsBiLoad_C(self, factor=1, recovery_clamp=0.1, do_clamp=False):
        r"""ConstraintsBiLoad_C(ChSystem self, double factor=1, double recovery_clamp=0.1, bool do_clamp=False)"""
        return _core.ChSystem_ConstraintsBiLoad_C(self, factor, recovery_clamp, do_clamp)

    def ConstraintsBiLoad_Ct(self, factor=1):
        r"""ConstraintsBiLoad_Ct(ChSystem self, double factor=1)"""
        return _core.ChSystem_ConstraintsBiLoad_Ct(self, factor)

    def ConstraintsBiLoad_Qc(self, factor=1):
        r"""ConstraintsBiLoad_Qc(ChSystem self, double factor=1)"""
        return _core.ChSystem_ConstraintsBiLoad_Qc(self, factor)

    def ConstraintsFbLoadForces(self, factor=1):
        r"""ConstraintsFbLoadForces(ChSystem self, double factor=1)"""
        return _core.ChSystem_ConstraintsFbLoadForces(self, factor)

    def ConstraintsFetch_react(self, factor=1):
        r"""ConstraintsFetch_react(ChSystem self, double factor=1)"""
        return _core.ChSystem_ConstraintsFetch_react(self, factor)

    def GetNcoords_x(self):
        r"""GetNcoords_x(ChSystem self) -> int"""
        return _core.ChSystem_GetNcoords_x(self)

    def GetNcoords_v(self):
        r"""GetNcoords_v(ChSystem self) -> int"""
        return _core.ChSystem_GetNcoords_v(self)

    def GetNconstr(self):
        r"""GetNconstr(ChSystem self) -> int"""
        return _core.ChSystem_GetNconstr(self)

    def StateGather(self, x, v, T):
        r"""StateGather(ChSystem self, ChState x, ChStateDelta v, double & T)"""
        return _core.ChSystem_StateGather(self, x, v, T)

    def StateScatter(self, x, v, T):
        r"""StateScatter(ChSystem self, ChState x, ChStateDelta v, double const T)"""
        return _core.ChSystem_StateScatter(self, x, v, T)

    def StateGatherAcceleration(self, a):
        r"""StateGatherAcceleration(ChSystem self, ChStateDelta a)"""
        return _core.ChSystem_StateGatherAcceleration(self, a)

    def StateScatterAcceleration(self, a):
        r"""StateScatterAcceleration(ChSystem self, ChStateDelta a)"""
        return _core.ChSystem_StateScatterAcceleration(self, a)

    def StateGatherReactions(self, L):
        r"""StateGatherReactions(ChSystem self, ChVectorDynamicD L)"""
        return _core.ChSystem_StateGatherReactions(self, L)

    def StateScatterReactions(self, L):
        r"""StateScatterReactions(ChSystem self, ChVectorDynamicD L)"""
        return _core.ChSystem_StateScatterReactions(self, L)

    def StateIncrementX(self, x_new, x, Dx):
        r"""StateIncrementX(ChSystem self, ChState x_new, ChState x, ChStateDelta Dx)"""
        return _core.ChSystem_StateIncrementX(self, x_new, x, Dx)

    def StateSolveCorrection(self, Dv, L, R, Qc, c_a, c_v, c_x, x, v, T, force_state_scatter=True, force_setup=True):
        r"""StateSolveCorrection(ChSystem self, ChStateDelta Dv, ChVectorDynamicD L, ChVectorDynamicD R, ChVectorDynamicD Qc, double const c_a, double const c_v, double const c_x, ChState x, ChStateDelta v, double const T, bool force_state_scatter=True, bool force_setup=True) -> bool"""
        return _core.ChSystem_StateSolveCorrection(self, Dv, L, R, Qc, c_a, c_v, c_x, x, v, T, force_state_scatter, force_setup)

    def LoadResidual_F(self, R, c):
        r"""LoadResidual_F(ChSystem self, ChVectorDynamicD R, double const c)"""
        return _core.ChSystem_LoadResidual_F(self, R, c)

    def LoadResidual_Mv(self, R, w, c):
        r"""LoadResidual_Mv(ChSystem self, ChVectorDynamicD R, ChVectorDynamicD w, double const c)"""
        return _core.ChSystem_LoadResidual_Mv(self, R, w, c)

    def LoadResidual_CqL(self, R, L, c):
        r"""LoadResidual_CqL(ChSystem self, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _core.ChSystem_LoadResidual_CqL(self, R, L, c)

    def LoadConstraint_C(self, Qc, c, do_clamp=False, mclam=1e30):
        r"""LoadConstraint_C(ChSystem self, ChVectorDynamicD Qc, double const c, bool const do_clamp=False, double const mclam=1e30)"""
        return _core.ChSystem_LoadConstraint_C(self, Qc, c, do_clamp, mclam)

    def LoadConstraint_Ct(self, Qc, c):
        r"""LoadConstraint_Ct(ChSystem self, ChVectorDynamicD Qc, double const c)"""
        return _core.ChSystem_LoadConstraint_Ct(self, Qc, c)

    def CustomEndOfStep(self):
        r"""CustomEndOfStep(ChSystem self)"""
        return _core.ChSystem_CustomEndOfStep(self)

    def SynchronizeLastCollPositions(self):
        r"""SynchronizeLastCollPositions(ChSystem self)"""
        return _core.ChSystem_SynchronizeLastCollPositions(self)

    def ComputeCollisions(self):
        r"""ComputeCollisions(ChSystem self) -> double"""
        return _core.ChSystem_ComputeCollisions(self)

    def SetCollisionSystem(self, newcollsystem):
        r"""SetCollisionSystem(ChSystem self, std::shared_ptr< chrono::collision::ChCollisionSystem > newcollsystem)"""
        return _core.ChSystem_SetCollisionSystem(self, newcollsystem)

    def GetCollisionSystem(self):
        r"""GetCollisionSystem(ChSystem self) -> std::shared_ptr< chrono::collision::ChCollisionSystem >"""
        return _core.ChSystem_GetCollisionSystem(self)

    def SetUseSleeping(self, ms):
        r"""SetUseSleeping(ChSystem self, bool ms)"""
        return _core.ChSystem_SetUseSleeping(self, ms)

    def GetUseSleeping(self):
        r"""GetUseSleeping(ChSystem self) -> bool"""
        return _core.ChSystem_GetUseSleeping(self)

    def DoStepDynamics(self, m_step):
        r"""DoStepDynamics(ChSystem self, double m_step) -> int"""
        return _core.ChSystem_DoStepDynamics(self, m_step)

    def DoFrameDynamics(self, m_endtime):
        r"""DoFrameDynamics(ChSystem self, double m_endtime) -> bool"""
        return _core.ChSystem_DoFrameDynamics(self, m_endtime)

    def DoEntireDynamics(self):
        r"""DoEntireDynamics(ChSystem self) -> bool"""
        return _core.ChSystem_DoEntireDynamics(self)

    def DoEntireUniformDynamics(self, frame_step):
        r"""DoEntireUniformDynamics(ChSystem self, double frame_step) -> bool"""
        return _core.ChSystem_DoEntireUniformDynamics(self, frame_step)

    def GetStepcount(self):
        r"""GetStepcount(ChSystem self) -> size_t"""
        return _core.ChSystem_GetStepcount(self)

    def ResetStepcount(self):
        r"""ResetStepcount(ChSystem self)"""
        return _core.ChSystem_ResetStepcount(self)

    def GetSolverCallsCount(self):
        r"""GetSolverCallsCount(ChSystem self) -> int"""
        return _core.ChSystem_GetSolverCallsCount(self)

    def GetSolverSetupCount(self):
        r"""GetSolverSetupCount(ChSystem self) -> int"""
        return _core.ChSystem_GetSolverSetupCount(self)

    def SetDumpSolverMatrices(self, md):
        r"""SetDumpSolverMatrices(ChSystem self, bool md)"""
        return _core.ChSystem_SetDumpSolverMatrices(self, md)

    def GetDumpSolverMatrices(self):
        r"""GetDumpSolverMatrices(ChSystem self) -> bool"""
        return _core.ChSystem_GetDumpSolverMatrices(self)

    def DumpSystemMatrices(self, save_M, save_K, save_R, save_Cq, path):
        r"""DumpSystemMatrices(ChSystem self, bool save_M, bool save_K, bool save_R, bool save_Cq, char const * path)"""
        return _core.ChSystem_DumpSystemMatrices(self, save_M, save_K, save_R, save_Cq, path)

    def GetMassMatrix(self, M):
        r"""GetMassMatrix(ChSystem self, chrono::ChSparseMatrix * M)"""
        return _core.ChSystem_GetMassMatrix(self, M)

    def GetStiffnessMatrix(self, K):
        r"""GetStiffnessMatrix(ChSystem self, chrono::ChSparseMatrix * K)"""
        return _core.ChSystem_GetStiffnessMatrix(self, K)

    def GetDampingMatrix(self, R):
        r"""GetDampingMatrix(ChSystem self, chrono::ChSparseMatrix * R)"""
        return _core.ChSystem_GetDampingMatrix(self, R)

    def GetConstraintJacobianMatrix(self, Cq):
        r"""GetConstraintJacobianMatrix(ChSystem self, chrono::ChSparseMatrix * Cq)"""
        return _core.ChSystem_GetConstraintJacobianMatrix(self, Cq)

    def DoStepKinematics(self, m_step):
        r"""DoStepKinematics(ChSystem self, double m_step) -> bool"""
        return _core.ChSystem_DoStepKinematics(self, m_step)

    def DoFrameKinematics(self, m_endtime):
        r"""DoFrameKinematics(ChSystem self, double m_endtime) -> bool"""
        return _core.ChSystem_DoFrameKinematics(self, m_endtime)

    def DoEntireKinematics(self):
        r"""DoEntireKinematics(ChSystem self) -> bool"""
        return _core.ChSystem_DoEntireKinematics(self)

    def DoAssembly(self, action):
        r"""DoAssembly(ChSystem self, int action) -> bool"""
        return _core.ChSystem_DoAssembly(self, action)

    def DoFullAssembly(self):
        r"""DoFullAssembly(ChSystem self) -> bool"""
        return _core.ChSystem_DoFullAssembly(self)

    def DoStaticLinear(self):
        r"""DoStaticLinear(ChSystem self) -> bool"""
        return _core.ChSystem_DoStaticLinear(self)

    def DoStaticNonlinear(self, *args):
        r"""
        DoStaticNonlinear(ChSystem self, int nsteps=10, bool verbose=False) -> bool
        DoStaticNonlinear(ChSystem self, std::shared_ptr< ChStaticNonLinearAnalysis > analysis) -> bool
        """
        return _core.ChSystem_DoStaticNonlinear(self, *args)

    def DoStaticRelaxing(self, nsteps=10):
        r"""DoStaticRelaxing(ChSystem self, int nsteps=10) -> bool"""
        return _core.ChSystem_DoStaticRelaxing(self, nsteps)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChSystem self, ChArchiveOut & marchive)"""
        return _core.ChSystem_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChSystem self, chrono::ChArchiveIn & marchive)"""
        return _core.ChSystem_ArchiveIN(self, marchive)

    def FileProcessChR(self, m_file):
        r"""FileProcessChR(ChSystem self, ChStreamInBinary m_file) -> int"""
        return _core.ChSystem_FileProcessChR(self, m_file)

    def FileWriteChR(self, m_file):
        r"""FileWriteChR(ChSystem self, ChStreamOutBinary m_file) -> int"""
        return _core.ChSystem_FileWriteChR(self, m_file)

    def RegisterCustomCollisionCallback(self, *args):
        r"""
        RegisterCustomCollisionCallback(ChSystem self, CustomCollisionCallback mcallb)
        RegisterCustomCollisionCallback(ChSystem self, ChCustomCollisionCallbackP mcallb)
        """
        return _core.ChSystem_RegisterCustomCollisionCallback(self, *args)

# Register ChSystem in _core:
_core.ChSystem_swigregister(ChSystem)

class CustomCollisionCallback(object):
    r"""Proxy of C++ chrono::ChSystem::CustomCollisionCallback class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_CustomCollisionCallback

    def OnCustomCollision(self, msys):
        r"""OnCustomCollision(CustomCollisionCallback self, ChSystem msys)"""
        return _core.CustomCollisionCallback_OnCustomCollision(self, msys)

    def __init__(self):
        r"""__init__(CustomCollisionCallback self) -> CustomCollisionCallback"""
        _core.CustomCollisionCallback_swiginit(self, _core.new_CustomCollisionCallback())

# Register CustomCollisionCallback in _core:
_core.CustomCollisionCallback_swigregister(CustomCollisionCallback)

class ChSystemNSC(ChSystem):
    r"""Proxy of C++ chrono::ChSystemNSC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChSystemNSC self, unsigned int max_objects=16000, double scene_size=500, bool init_sys=True) -> ChSystemNSC
        __init__(ChSystemNSC self, ChSystemNSC other) -> ChSystemNSC
        """
        _core.ChSystemNSC_swiginit(self, _core.new_ChSystemNSC(*args))
    __swig_destroy__ = _core.delete_ChSystemNSC

    def Clone(self):
        r"""Clone(ChSystemNSC self) -> ChSystemNSC"""
        return _core.ChSystemNSC_Clone(self)

    def GetContactMethod(self):
        r"""GetContactMethod(ChSystemNSC self) -> chrono::ChMaterialSurface::ContactMethod"""
        return _core.ChSystemNSC_GetContactMethod(self)

    def NewBody(self):
        r"""NewBody(ChSystemNSC self) -> ChBody"""
        return _core.ChSystemNSC_NewBody(self)

    def NewBodyAuxRef(self):
        r"""NewBodyAuxRef(ChSystemNSC self) -> ChBodyAuxRef"""
        return _core.ChSystemNSC_NewBodyAuxRef(self)

    def SetContactContainer(self, container):
        r"""SetContactContainer(ChSystemNSC self, std::shared_ptr< chrono::ChContactContainer > container)"""
        return _core.ChSystemNSC_SetContactContainer(self, container)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChSystemNSC self, ChArchiveOut & marchive)"""
        return _core.ChSystemNSC_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChSystemNSC self, chrono::ChArchiveIn & marchive)"""
        return _core.ChSystemNSC_ArchiveIN(self, marchive)

# Register ChSystemNSC in _core:
_core.ChSystemNSC_swigregister(ChSystemNSC)

class ChSystemSMC(ChSystem):
    r"""Proxy of C++ chrono::ChSystemSMC class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Hooke = _core.ChSystemSMC_Hooke
    
    Hertz = _core.ChSystemSMC_Hertz
    
    PlainCoulomb = _core.ChSystemSMC_PlainCoulomb
    
    Flores = _core.ChSystemSMC_Flores
    
    Constant = _core.ChSystemSMC_Constant
    
    DMT = _core.ChSystemSMC_DMT
    
    Perko = _core.ChSystemSMC_Perko
    
    _None = _core.ChSystemSMC__None
    
    OneStep = _core.ChSystemSMC_OneStep
    
    MultiStep = _core.ChSystemSMC_MultiStep
    

    def __init__(self, *args):
        r"""
        __init__(ChSystemSMC self, bool use_material_properties=True, unsigned int max_objects=16000, double scene_size=500) -> ChSystemSMC
        __init__(ChSystemSMC self, ChSystemSMC other) -> ChSystemSMC
        """
        _core.ChSystemSMC_swiginit(self, _core.new_ChSystemSMC(*args))
    __swig_destroy__ = _core.delete_ChSystemSMC

    def Clone(self):
        r"""Clone(ChSystemSMC self) -> ChSystemSMC"""
        return _core.ChSystemSMC_Clone(self)

    def GetContactMethod(self):
        r"""GetContactMethod(ChSystemSMC self) -> chrono::ChMaterialSurface::ContactMethod"""
        return _core.ChSystemSMC_GetContactMethod(self)

    def NewBody(self):
        r"""NewBody(ChSystemSMC self) -> ChBody"""
        return _core.ChSystemSMC_NewBody(self)

    def NewBodyAuxRef(self):
        r"""NewBodyAuxRef(ChSystemSMC self) -> ChBodyAuxRef"""
        return _core.ChSystemSMC_NewBodyAuxRef(self)

    def SetContactContainer(self, container):
        r"""SetContactContainer(ChSystemSMC self, std::shared_ptr< chrono::ChContactContainer > container)"""
        return _core.ChSystemSMC_SetContactContainer(self, container)

    def UseMaterialProperties(self, val):
        r"""UseMaterialProperties(ChSystemSMC self, bool val)"""
        return _core.ChSystemSMC_UseMaterialProperties(self, val)

    def UsingMaterialProperties(self):
        r"""UsingMaterialProperties(ChSystemSMC self) -> bool"""
        return _core.ChSystemSMC_UsingMaterialProperties(self)

    def SetContactForceModel(self, model):
        r"""SetContactForceModel(ChSystemSMC self, chrono::ChSystemSMC::ContactForceModel model)"""
        return _core.ChSystemSMC_SetContactForceModel(self, model)

    def GetContactForceModel(self):
        r"""GetContactForceModel(ChSystemSMC self) -> chrono::ChSystemSMC::ContactForceModel"""
        return _core.ChSystemSMC_GetContactForceModel(self)

    def SetAdhesionForceModel(self, model):
        r"""SetAdhesionForceModel(ChSystemSMC self, chrono::ChSystemSMC::AdhesionForceModel model)"""
        return _core.ChSystemSMC_SetAdhesionForceModel(self, model)

    def GetAdhesionForceModel(self):
        r"""GetAdhesionForceModel(ChSystemSMC self) -> chrono::ChSystemSMC::AdhesionForceModel"""
        return _core.ChSystemSMC_GetAdhesionForceModel(self)

    def SetTangentialDisplacementModel(self, model):
        r"""SetTangentialDisplacementModel(ChSystemSMC self, chrono::ChSystemSMC::TangentialDisplacementModel model)"""
        return _core.ChSystemSMC_SetTangentialDisplacementModel(self, model)

    def GetTangentialDisplacementModel(self):
        r"""GetTangentialDisplacementModel(ChSystemSMC self) -> chrono::ChSystemSMC::TangentialDisplacementModel"""
        return _core.ChSystemSMC_GetTangentialDisplacementModel(self)

    def SetStiffContact(self, val):
        r"""SetStiffContact(ChSystemSMC self, bool val)"""
        return _core.ChSystemSMC_SetStiffContact(self, val)

    def GetStiffContact(self):
        r"""GetStiffContact(ChSystemSMC self) -> bool"""
        return _core.ChSystemSMC_GetStiffContact(self)

    def SetSlipVelocityThreshold(self, vel):
        r"""SetSlipVelocityThreshold(ChSystemSMC self, double vel)"""
        return _core.ChSystemSMC_SetSlipVelocityThreshold(self, vel)

    def GetSlipVelocityThreshold(self):
        r"""GetSlipVelocityThreshold(ChSystemSMC self) -> double"""
        return _core.ChSystemSMC_GetSlipVelocityThreshold(self)

    def SetCharacteristicImpactVelocity(self, vel):
        r"""SetCharacteristicImpactVelocity(ChSystemSMC self, double vel)"""
        return _core.ChSystemSMC_SetCharacteristicImpactVelocity(self, vel)

    def GetCharacteristicImpactVelocity(self):
        r"""GetCharacteristicImpactVelocity(ChSystemSMC self) -> double"""
        return _core.ChSystemSMC_GetCharacteristicImpactVelocity(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChSystemSMC self, ChArchiveOut & marchive)"""
        return _core.ChSystemSMC_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChSystemSMC self, chrono::ChArchiveIn & marchive)"""
        return _core.ChSystemSMC_ArchiveIN(self, marchive)

# Register ChSystemSMC in _core:
_core.ChSystemSMC_swigregister(ChSystemSMC)

class ChReportProximityCallbackP(object):
    r"""Proxy of C++ ChReportProximityCallbackP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChReportProximityCallbackP

    def OnReportProximity(self, modA, modB):
        r"""OnReportProximity(ChReportProximityCallbackP self, ChCollisionModel modA, ChCollisionModel modB) -> bool"""
        return _core.ChReportProximityCallbackP_OnReportProximity(self, modA, modB)

    def __init__(self):
        r"""__init__(ChReportProximityCallbackP self) -> ChReportProximityCallbackP"""
        if self.__class__ == ChReportProximityCallbackP:
            _self = None
        else:
            _self = self
        _core.ChReportProximityCallbackP_swiginit(self, _core.new_ChReportProximityCallbackP(_self, ))
    def __disown__(self):
        self.this.disown()
        _core.disown_ChReportProximityCallbackP(self)
        return weakref.proxy(self)

# Register ChReportProximityCallbackP in _core:
_core.ChReportProximityCallbackP_swigregister(ChReportProximityCallbackP)

class ChAddProximityCallbackP(object):
    r"""Proxy of C++ ChAddProximityCallbackP class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChAddProximityCallbackP

    def OnAddProximity(self, modA, modB):
        r"""OnAddProximity(ChAddProximityCallbackP self, ChCollisionModel modA, ChCollisionModel modB)"""
        return _core.ChAddProximityCallbackP_OnAddProximity(self, modA, modB)

    def __init__(self):
        r"""__init__(ChAddProximityCallbackP self) -> ChAddProximityCallbackP"""
        if self.__class__ == ChAddProximityCallbackP:
            _self = None
        else:
            _self = self
        _core.ChAddProximityCallbackP_swiginit(self, _core.new_ChAddProximityCallbackP(_self, ))
    def __disown__(self):
        self.this.disown()
        _core.disown_ChAddProximityCallbackP(self)
        return weakref.proxy(self)

# Register ChAddProximityCallbackP in _core:
_core.ChAddProximityCallbackP_swigregister(ChAddProximityCallbackP)

class ChProximityContainer(ChPhysicsItem):
    r"""Proxy of C++ chrono::ChProximityContainer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChProximityContainer

    def GetNproximities(self):
        r"""GetNproximities(ChProximityContainer self) -> int"""
        return _core.ChProximityContainer_GetNproximities(self)

    def RemoveAllProximities(self):
        r"""RemoveAllProximities(ChProximityContainer self)"""
        return _core.ChProximityContainer_RemoveAllProximities(self)

    def BeginAddProximities(self):
        r"""BeginAddProximities(ChProximityContainer self)"""
        return _core.ChProximityContainer_BeginAddProximities(self)

    def AddProximity(self, modA, modB):
        r"""AddProximity(ChProximityContainer self, ChCollisionModel modA, ChCollisionModel modB)"""
        return _core.ChProximityContainer_AddProximity(self, modA, modB)

    def EndAddProximities(self):
        r"""EndAddProximities(ChProximityContainer self)"""
        return _core.ChProximityContainer_EndAddProximities(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChProximityContainer self, ChArchiveOut & marchive)"""
        return _core.ChProximityContainer_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChProximityContainer self, chrono::ChArchiveIn & marchive)"""
        return _core.ChProximityContainer_ArchiveIN(self, marchive)

    def RegisterAddProximityCallback(self, *args):
        r"""
        RegisterAddProximityCallback(ChProximityContainer self, AddProximityCallback mcallback)
        RegisterAddProximityCallback(ChProximityContainer self, ChAddProximityCallbackP callback)
        """
        return _core.ChProximityContainer_RegisterAddProximityCallback(self, *args)

    def ReportAllProximities(self, *args):
        r"""
        ReportAllProximities(ChProximityContainer self, ReportProximityCallback mcallback)
        ReportAllProximities(ChProximityContainer self, ChReportProximityCallbackP callback)
        """
        return _core.ChProximityContainer_ReportAllProximities(self, *args)

# Register ChProximityContainer in _core:
_core.ChProximityContainer_swigregister(ChProximityContainer)

class AddProximityCallback(object):
    r"""Proxy of C++ chrono::ChProximityContainer::AddProximityCallback class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_AddProximityCallback

    def OnAddProximity(self, modA, modB):
        r"""OnAddProximity(AddProximityCallback self, ChCollisionModel modA, ChCollisionModel modB)"""
        return _core.AddProximityCallback_OnAddProximity(self, modA, modB)

# Register AddProximityCallback in _core:
_core.AddProximityCallback_swigregister(AddProximityCallback)

class ReportProximityCallback(object):
    r"""Proxy of C++ chrono::ChProximityContainer::ReportProximityCallback class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ReportProximityCallback

    def OnReportProximity(self, modA, modB):
        r"""OnReportProximity(ReportProximityCallback self, ChCollisionModel modA, ChCollisionModel modB) -> bool"""
        return _core.ReportProximityCallback_OnReportProximity(self, modA, modB)

# Register ReportProximityCallback in _core:
_core.ReportProximityCallback_swigregister(ReportProximityCallback)

class ChLoader(object):
    r"""Proxy of C++ chrono::ChLoader class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Q = property(_core.ChLoader_Q_get, _core.ChLoader_Q_set, doc=r"""Q : chrono::ChVectorDynamic<()>""")
    __swig_destroy__ = _core.delete_ChLoader

    def ComputeQ(self, state_x, state_w):
        r"""ComputeQ(ChLoader self, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _core.ChLoader_ComputeQ(self, state_x, state_w)

    def GetLoadable(self):
        r"""GetLoadable(ChLoader self) -> std::shared_ptr< chrono::ChLoadable >"""
        return _core.ChLoader_GetLoadable(self)

    def IsStiff(self):
        r"""IsStiff(ChLoader self) -> bool"""
        return _core.ChLoader_IsStiff(self)

# Register ChLoader in _core:
_core.ChLoader_swigregister(ChLoader)

class ChLoaderU(ChLoader):
    r"""Proxy of C++ chrono::ChLoaderU class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    loadable = property(_core.ChLoaderU_loadable_get, _core.ChLoaderU_loadable_set, doc=r"""loadable : std::shared_ptr<(chrono::ChLoadableU)>""")
    __swig_destroy__ = _core.delete_ChLoaderU

    def ComputeF(self, U, F, state_x, state_w):
        r"""ComputeF(ChLoaderU self, double const U, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _core.ChLoaderU_ComputeF(self, U, F, state_x, state_w)

    def SetLoadable(self, mloadable):
        r"""SetLoadable(ChLoaderU self, std::shared_ptr< chrono::ChLoadableU > mloadable)"""
        return _core.ChLoaderU_SetLoadable(self, mloadable)

    def GetLoadable(self):
        r"""GetLoadable(ChLoaderU self) -> std::shared_ptr< chrono::ChLoadable >"""
        return _core.ChLoaderU_GetLoadable(self)

    def GetLoadableU(self):
        r"""GetLoadableU(ChLoaderU self) -> std::shared_ptr< chrono::ChLoadableU >"""
        return _core.ChLoaderU_GetLoadableU(self)

# Register ChLoaderU in _core:
_core.ChLoaderU_swigregister(ChLoaderU)

class ChLoaderUdistributed(ChLoaderU):
    r"""Proxy of C++ chrono::ChLoaderUdistributed class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChLoaderUdistributed

    def GetIntegrationPointsU(self):
        r"""GetIntegrationPointsU(ChLoaderUdistributed self) -> int"""
        return _core.ChLoaderUdistributed_GetIntegrationPointsU(self)

    def ComputeQ(self, state_x, state_w):
        r"""ComputeQ(ChLoaderUdistributed self, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _core.ChLoaderUdistributed_ComputeQ(self, state_x, state_w)

# Register ChLoaderUdistributed in _core:
_core.ChLoaderUdistributed_swigregister(ChLoaderUdistributed)

class ChLoaderUatomic(ChLoaderU):
    r"""Proxy of C++ chrono::ChLoaderUatomic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Pu = property(_core.ChLoaderUatomic_Pu_get, _core.ChLoaderUatomic_Pu_set, doc=r"""Pu : double""")

    def ComputeQ(self, state_x, state_w):
        r"""ComputeQ(ChLoaderUatomic self, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _core.ChLoaderUatomic_ComputeQ(self, state_x, state_w)

    def SetApplication(self, mu):
        r"""SetApplication(ChLoaderUatomic self, double mu)"""
        return _core.ChLoaderUatomic_SetApplication(self, mu)
    __swig_destroy__ = _core.delete_ChLoaderUatomic

# Register ChLoaderUatomic in _core:
_core.ChLoaderUatomic_swigregister(ChLoaderUatomic)

class ChLoaderUV(ChLoader):
    r"""Proxy of C++ chrono::ChLoaderUV class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    loadable = property(_core.ChLoaderUV_loadable_get, _core.ChLoaderUV_loadable_set, doc=r"""loadable : std::shared_ptr<(chrono::ChLoadableUV)>""")
    __swig_destroy__ = _core.delete_ChLoaderUV

    def ComputeF(self, U, V, F, state_x, state_w):
        r"""ComputeF(ChLoaderUV self, double const U, double const V, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _core.ChLoaderUV_ComputeF(self, U, V, F, state_x, state_w)

    def SetLoadable(self, mloadable):
        r"""SetLoadable(ChLoaderUV self, std::shared_ptr< chrono::ChLoadableUV > mloadable)"""
        return _core.ChLoaderUV_SetLoadable(self, mloadable)

    def GetLoadable(self):
        r"""GetLoadable(ChLoaderUV self) -> std::shared_ptr< chrono::ChLoadable >"""
        return _core.ChLoaderUV_GetLoadable(self)

    def GetLoadableUV(self):
        r"""GetLoadableUV(ChLoaderUV self) -> std::shared_ptr< chrono::ChLoadableUV >"""
        return _core.ChLoaderUV_GetLoadableUV(self)

# Register ChLoaderUV in _core:
_core.ChLoaderUV_swigregister(ChLoaderUV)

class ChLoaderUVdistributed(ChLoaderUV):
    r"""Proxy of C++ chrono::ChLoaderUVdistributed class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChLoaderUVdistributed

    def GetIntegrationPointsU(self):
        r"""GetIntegrationPointsU(ChLoaderUVdistributed self) -> int"""
        return _core.ChLoaderUVdistributed_GetIntegrationPointsU(self)

    def GetIntegrationPointsV(self):
        r"""GetIntegrationPointsV(ChLoaderUVdistributed self) -> int"""
        return _core.ChLoaderUVdistributed_GetIntegrationPointsV(self)

    def ComputeQ(self, state_x, state_w):
        r"""ComputeQ(ChLoaderUVdistributed self, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _core.ChLoaderUVdistributed_ComputeQ(self, state_x, state_w)

# Register ChLoaderUVdistributed in _core:
_core.ChLoaderUVdistributed_swigregister(ChLoaderUVdistributed)

class ChLoaderUVatomic(ChLoaderUV):
    r"""Proxy of C++ chrono::ChLoaderUVatomic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Pu = property(_core.ChLoaderUVatomic_Pu_get, _core.ChLoaderUVatomic_Pu_set, doc=r"""Pu : double""")
    Pv = property(_core.ChLoaderUVatomic_Pv_get, _core.ChLoaderUVatomic_Pv_set, doc=r"""Pv : double""")
    __swig_destroy__ = _core.delete_ChLoaderUVatomic

    def ComputeQ(self, state_x, state_w):
        r"""ComputeQ(ChLoaderUVatomic self, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _core.ChLoaderUVatomic_ComputeQ(self, state_x, state_w)

    def SetApplication(self, mu, mv):
        r"""SetApplication(ChLoaderUVatomic self, double mu, double mv)"""
        return _core.ChLoaderUVatomic_SetApplication(self, mu, mv)

# Register ChLoaderUVatomic in _core:
_core.ChLoaderUVatomic_swigregister(ChLoaderUVatomic)

class ChLoaderForceOnSurface(ChLoaderUVatomic):
    r"""Proxy of C++ chrono::ChLoaderForceOnSurface class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mloadable):
        r"""__init__(ChLoaderForceOnSurface self, std::shared_ptr< chrono::ChLoadableUV > mloadable) -> ChLoaderForceOnSurface"""
        _core.ChLoaderForceOnSurface_swiginit(self, _core.new_ChLoaderForceOnSurface(mloadable))

    def ComputeF(self, U, V, F, state_x, state_w):
        r"""ComputeF(ChLoaderForceOnSurface self, double const U, double const V, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _core.ChLoaderForceOnSurface_ComputeF(self, U, V, F, state_x, state_w)

    def SetForce(self, mforce):
        r"""SetForce(ChLoaderForceOnSurface self, ChVectorD mforce)"""
        return _core.ChLoaderForceOnSurface_SetForce(self, mforce)

    def GetForce(self):
        r"""GetForce(ChLoaderForceOnSurface self) -> ChVectorD"""
        return _core.ChLoaderForceOnSurface_GetForce(self)

    def IsStiff(self):
        r"""IsStiff(ChLoaderForceOnSurface self) -> bool"""
        return _core.ChLoaderForceOnSurface_IsStiff(self)
    __swig_destroy__ = _core.delete_ChLoaderForceOnSurface

# Register ChLoaderForceOnSurface in _core:
_core.ChLoaderForceOnSurface_swigregister(ChLoaderForceOnSurface)

class ChLoaderPressure(ChLoaderUVdistributed):
    r"""Proxy of C++ chrono::ChLoaderPressure class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mloadable):
        r"""__init__(ChLoaderPressure self, std::shared_ptr< chrono::ChLoadableUV > mloadable) -> ChLoaderPressure"""
        _core.ChLoaderPressure_swiginit(self, _core.new_ChLoaderPressure(mloadable))

    def ComputeF(self, U, V, F, state_x, state_w):
        r"""ComputeF(ChLoaderPressure self, double const U, double const V, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _core.ChLoaderPressure_ComputeF(self, U, V, F, state_x, state_w)

    def SetPressure(self, mpressure):
        r"""SetPressure(ChLoaderPressure self, double mpressure)"""
        return _core.ChLoaderPressure_SetPressure(self, mpressure)

    def GetPressure(self):
        r"""GetPressure(ChLoaderPressure self) -> double"""
        return _core.ChLoaderPressure_GetPressure(self)

    def SetIntegrationPoints(self, val):
        r"""SetIntegrationPoints(ChLoaderPressure self, int val)"""
        return _core.ChLoaderPressure_SetIntegrationPoints(self, val)

    def GetIntegrationPointsU(self):
        r"""GetIntegrationPointsU(ChLoaderPressure self) -> int"""
        return _core.ChLoaderPressure_GetIntegrationPointsU(self)

    def GetIntegrationPointsV(self):
        r"""GetIntegrationPointsV(ChLoaderPressure self) -> int"""
        return _core.ChLoaderPressure_GetIntegrationPointsV(self)

    def SetStiff(self, val):
        r"""SetStiff(ChLoaderPressure self, bool val)"""
        return _core.ChLoaderPressure_SetStiff(self, val)

    def IsStiff(self):
        r"""IsStiff(ChLoaderPressure self) -> bool"""
        return _core.ChLoaderPressure_IsStiff(self)
    __swig_destroy__ = _core.delete_ChLoaderPressure

# Register ChLoaderPressure in _core:
_core.ChLoaderPressure_swigregister(ChLoaderPressure)

class ChLoaderUVW(ChLoader):
    r"""Proxy of C++ chrono::ChLoaderUVW class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    loadable = property(_core.ChLoaderUVW_loadable_get, _core.ChLoaderUVW_loadable_set, doc=r"""loadable : std::shared_ptr<(chrono::ChLoadableUVW)>""")
    __swig_destroy__ = _core.delete_ChLoaderUVW

    def ComputeF(self, U, V, W, F, state_x, state_w):
        r"""ComputeF(ChLoaderUVW self, double const U, double const V, double const W, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _core.ChLoaderUVW_ComputeF(self, U, V, W, F, state_x, state_w)

    def SetLoadable(self, mloadable):
        r"""SetLoadable(ChLoaderUVW self, std::shared_ptr< chrono::ChLoadableUVW > mloadable)"""
        return _core.ChLoaderUVW_SetLoadable(self, mloadable)

    def GetLoadable(self):
        r"""GetLoadable(ChLoaderUVW self) -> std::shared_ptr< chrono::ChLoadable >"""
        return _core.ChLoaderUVW_GetLoadable(self)

    def GetLoadableUVW(self):
        r"""GetLoadableUVW(ChLoaderUVW self) -> std::shared_ptr< chrono::ChLoadableUVW >"""
        return _core.ChLoaderUVW_GetLoadableUVW(self)

# Register ChLoaderUVW in _core:
_core.ChLoaderUVW_swigregister(ChLoaderUVW)

class ChLoaderUVWdistributed(ChLoaderUVW):
    r"""Proxy of C++ chrono::ChLoaderUVWdistributed class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChLoaderUVWdistributed

    def GetIntegrationPointsU(self):
        r"""GetIntegrationPointsU(ChLoaderUVWdistributed self) -> int"""
        return _core.ChLoaderUVWdistributed_GetIntegrationPointsU(self)

    def GetIntegrationPointsV(self):
        r"""GetIntegrationPointsV(ChLoaderUVWdistributed self) -> int"""
        return _core.ChLoaderUVWdistributed_GetIntegrationPointsV(self)

    def GetIntegrationPointsW(self):
        r"""GetIntegrationPointsW(ChLoaderUVWdistributed self) -> int"""
        return _core.ChLoaderUVWdistributed_GetIntegrationPointsW(self)

    def ComputeQ(self, state_x, state_w):
        r"""ComputeQ(ChLoaderUVWdistributed self, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _core.ChLoaderUVWdistributed_ComputeQ(self, state_x, state_w)

# Register ChLoaderUVWdistributed in _core:
_core.ChLoaderUVWdistributed_swigregister(ChLoaderUVWdistributed)

class ChLoaderUVWatomic(ChLoaderUVW):
    r"""Proxy of C++ chrono::ChLoaderUVWatomic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Pu = property(_core.ChLoaderUVWatomic_Pu_get, _core.ChLoaderUVWatomic_Pu_set, doc=r"""Pu : double""")
    Pv = property(_core.ChLoaderUVWatomic_Pv_get, _core.ChLoaderUVWatomic_Pv_set, doc=r"""Pv : double""")
    Pw = property(_core.ChLoaderUVWatomic_Pw_get, _core.ChLoaderUVWatomic_Pw_set, doc=r"""Pw : double""")
    __swig_destroy__ = _core.delete_ChLoaderUVWatomic

    def ComputeQ(self, state_x, state_w):
        r"""ComputeQ(ChLoaderUVWatomic self, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _core.ChLoaderUVWatomic_ComputeQ(self, state_x, state_w)

    def SetApplication(self, mu, mv, mw):
        r"""SetApplication(ChLoaderUVWatomic self, double mu, double mv, double mw)"""
        return _core.ChLoaderUVWatomic_SetApplication(self, mu, mv, mw)

# Register ChLoaderUVWatomic in _core:
_core.ChLoaderUVWatomic_swigregister(ChLoaderUVWatomic)

class ChLoaderGravity(ChLoaderUVWdistributed):
    r"""Proxy of C++ chrono::ChLoaderGravity class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mloadable):
        r"""__init__(ChLoaderGravity self, std::shared_ptr< chrono::ChLoadableUVW > mloadable) -> ChLoaderGravity"""
        _core.ChLoaderGravity_swiginit(self, _core.new_ChLoaderGravity(mloadable))

    def ComputeF(self, U, V, W, F, state_x, state_w):
        r"""ComputeF(ChLoaderGravity self, double const U, double const V, double const W, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _core.ChLoaderGravity_ComputeF(self, U, V, W, F, state_x, state_w)

    def SetNumIntPoints(self, val):
        r"""SetNumIntPoints(ChLoaderGravity self, int val)"""
        return _core.ChLoaderGravity_SetNumIntPoints(self, val)

    def GetNumIntPoints(self):
        r"""GetNumIntPoints(ChLoaderGravity self) -> int"""
        return _core.ChLoaderGravity_GetNumIntPoints(self)

    def Set_G_acc(self, m_acc):
        r"""Set_G_acc(ChLoaderGravity self, ChVectorD m_acc)"""
        return _core.ChLoaderGravity_Set_G_acc(self, m_acc)

    def Get_G_acc(self):
        r"""Get_G_acc(ChLoaderGravity self) -> ChVectorD"""
        return _core.ChLoaderGravity_Get_G_acc(self)

    def GetIntegrationPointsU(self):
        r"""GetIntegrationPointsU(ChLoaderGravity self) -> int"""
        return _core.ChLoaderGravity_GetIntegrationPointsU(self)

    def GetIntegrationPointsV(self):
        r"""GetIntegrationPointsV(ChLoaderGravity self) -> int"""
        return _core.ChLoaderGravity_GetIntegrationPointsV(self)

    def GetIntegrationPointsW(self):
        r"""GetIntegrationPointsW(ChLoaderGravity self) -> int"""
        return _core.ChLoaderGravity_GetIntegrationPointsW(self)
    __swig_destroy__ = _core.delete_ChLoaderGravity

# Register ChLoaderGravity in _core:
_core.ChLoaderGravity_swigregister(ChLoaderGravity)

class ChLoadJacobians(object):
    r"""Proxy of C++ chrono::ChLoadJacobians class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    KRM = property(_core.ChLoadJacobians_KRM_get, _core.ChLoadJacobians_KRM_set, doc=r"""KRM : ChKblockGeneric""")
    K = property(_core.ChLoadJacobians_K_get, _core.ChLoadJacobians_K_set, doc=r"""K : chrono::ChMatrixDynamic<(double)>""")
    R = property(_core.ChLoadJacobians_R_get, _core.ChLoadJacobians_R_set, doc=r"""R : chrono::ChMatrixDynamic<(double)>""")
    M = property(_core.ChLoadJacobians_M_get, _core.ChLoadJacobians_M_set, doc=r"""M : chrono::ChMatrixDynamic<(double)>""")

    def SetVariables(self, mvariables):
        r"""SetVariables(ChLoadJacobians self, std::vector< ChVariables *,std::allocator< ChVariables * > > mvariables)"""
        return _core.ChLoadJacobians_SetVariables(self, mvariables)

    def __init__(self):
        r"""__init__(ChLoadJacobians self) -> ChLoadJacobians"""
        _core.ChLoadJacobians_swiginit(self, _core.new_ChLoadJacobians())
    __swig_destroy__ = _core.delete_ChLoadJacobians

# Register ChLoadJacobians in _core:
_core.ChLoadJacobians_swigregister(ChLoadJacobians)

class ChLoadBase(ChObj):
    r"""Proxy of C++ chrono::ChLoadBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChLoadBase

    def LoadGet_ndof_x(self):
        r"""LoadGet_ndof_x(ChLoadBase self) -> int"""
        return _core.ChLoadBase_LoadGet_ndof_x(self)

    def LoadGet_ndof_w(self):
        r"""LoadGet_ndof_w(ChLoadBase self) -> int"""
        return _core.ChLoadBase_LoadGet_ndof_w(self)

    def LoadGetStateBlock_x(self, mD):
        r"""LoadGetStateBlock_x(ChLoadBase self, ChState mD)"""
        return _core.ChLoadBase_LoadGetStateBlock_x(self, mD)

    def LoadGetStateBlock_w(self, mD):
        r"""LoadGetStateBlock_w(ChLoadBase self, ChStateDelta mD)"""
        return _core.ChLoadBase_LoadGetStateBlock_w(self, mD)

    def LoadStateIncrement(self, x, dw, x_new):
        r"""LoadStateIncrement(ChLoadBase self, ChState x, ChStateDelta dw, ChState x_new)"""
        return _core.ChLoadBase_LoadStateIncrement(self, x, dw, x_new)

    def LoadGet_field_ncoords(self):
        r"""LoadGet_field_ncoords(ChLoadBase self) -> int"""
        return _core.ChLoadBase_LoadGet_field_ncoords(self)

    def ComputeQ(self, state_x, state_w):
        r"""ComputeQ(ChLoadBase self, ChState state_x, ChStateDelta state_w)"""
        return _core.ChLoadBase_ComputeQ(self, state_x, state_w)

    def GetJacobians(self):
        r"""GetJacobians(ChLoadBase self) -> ChLoadJacobians"""
        return _core.ChLoadBase_GetJacobians(self)

    def CreateJacobianMatrices(self):
        r"""CreateJacobianMatrices(ChLoadBase self)"""
        return _core.ChLoadBase_CreateJacobianMatrices(self)

    def Update(self, time):
        r"""Update(ChLoadBase self, double time)"""
        return _core.ChLoadBase_Update(self, time)

    def IsStiff(self):
        r"""IsStiff(ChLoadBase self) -> bool"""
        return _core.ChLoadBase_IsStiff(self)

    def LoadIntLoadResidual_F(self, R, c):
        r"""LoadIntLoadResidual_F(ChLoadBase self, ChVectorDynamicD R, double const c)"""
        return _core.ChLoadBase_LoadIntLoadResidual_F(self, R, c)

    def InjectKRMmatrices(self, mdescriptor):
        r"""InjectKRMmatrices(ChLoadBase self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChLoadBase_InjectKRMmatrices(self, mdescriptor)

    def KRMmatricesLoad(self, Kfactor, Rfactor, Mfactor):
        r"""KRMmatricesLoad(ChLoadBase self, double Kfactor, double Rfactor, double Mfactor)"""
        return _core.ChLoadBase_KRMmatricesLoad(self, Kfactor, Rfactor, Mfactor)

# Register ChLoadBase in _core:
_core.ChLoadBase_swigregister(ChLoadBase)

class ChLoadCustom(ChLoadBase):
    r"""Proxy of C++ chrono::ChLoadCustom class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    loadable = property(_core.ChLoadCustom_loadable_get, _core.ChLoadCustom_loadable_set, doc=r"""loadable : std::shared_ptr<(chrono::ChLoadable)>""")
    load_Q = property(_core.ChLoadCustom_load_Q_get, _core.ChLoadCustom_load_Q_set, doc=r"""load_Q : chrono::ChVectorDynamic<()>""")
    __swig_destroy__ = _core.delete_ChLoadCustom

    def LoadGet_ndof_x(self):
        r"""LoadGet_ndof_x(ChLoadCustom self) -> int"""
        return _core.ChLoadCustom_LoadGet_ndof_x(self)

    def LoadGet_ndof_w(self):
        r"""LoadGet_ndof_w(ChLoadCustom self) -> int"""
        return _core.ChLoadCustom_LoadGet_ndof_w(self)

    def LoadGetStateBlock_x(self, mD):
        r"""LoadGetStateBlock_x(ChLoadCustom self, ChState mD)"""
        return _core.ChLoadCustom_LoadGetStateBlock_x(self, mD)

    def LoadGetStateBlock_w(self, mD):
        r"""LoadGetStateBlock_w(ChLoadCustom self, ChStateDelta mD)"""
        return _core.ChLoadCustom_LoadGetStateBlock_w(self, mD)

    def LoadStateIncrement(self, x, dw, x_new):
        r"""LoadStateIncrement(ChLoadCustom self, ChState x, ChStateDelta dw, ChState x_new)"""
        return _core.ChLoadCustom_LoadStateIncrement(self, x, dw, x_new)

    def LoadGet_field_ncoords(self):
        r"""LoadGet_field_ncoords(ChLoadCustom self) -> int"""
        return _core.ChLoadCustom_LoadGet_field_ncoords(self)

    def LoadIntLoadResidual_F(self, R, c):
        r"""LoadIntLoadResidual_F(ChLoadCustom self, ChVectorDynamicD R, double const c)"""
        return _core.ChLoadCustom_LoadIntLoadResidual_F(self, R, c)

    def CreateJacobianMatrices(self):
        r"""CreateJacobianMatrices(ChLoadCustom self)"""
        return _core.ChLoadCustom_CreateJacobianMatrices(self)

    def GetQ(self):
        r"""GetQ(ChLoadCustom self) -> ChVectorDynamicD"""
        return _core.ChLoadCustom_GetQ(self)

# Register ChLoadCustom in _core:
_core.ChLoadCustom_swigregister(ChLoadCustom)

class ChLoadCustomMultiple(ChLoadBase):
    r"""Proxy of C++ chrono::ChLoadCustomMultiple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    loadables = property(_core.ChLoadCustomMultiple_loadables_get, _core.ChLoadCustomMultiple_loadables_set, doc=r"""loadables : std::vector<(std::shared_ptr<(chrono::ChLoadable)>,std::allocator<(std::shared_ptr<(chrono::ChLoadable)>)>)>""")
    load_Q = property(_core.ChLoadCustomMultiple_load_Q_get, _core.ChLoadCustomMultiple_load_Q_set, doc=r"""load_Q : chrono::ChVectorDynamic<()>""")
    __swig_destroy__ = _core.delete_ChLoadCustomMultiple

    def LoadGet_ndof_x(self):
        r"""LoadGet_ndof_x(ChLoadCustomMultiple self) -> int"""
        return _core.ChLoadCustomMultiple_LoadGet_ndof_x(self)

    def LoadGet_ndof_w(self):
        r"""LoadGet_ndof_w(ChLoadCustomMultiple self) -> int"""
        return _core.ChLoadCustomMultiple_LoadGet_ndof_w(self)

    def LoadGetStateBlock_x(self, mD):
        r"""LoadGetStateBlock_x(ChLoadCustomMultiple self, ChState mD)"""
        return _core.ChLoadCustomMultiple_LoadGetStateBlock_x(self, mD)

    def LoadGetStateBlock_w(self, mD):
        r"""LoadGetStateBlock_w(ChLoadCustomMultiple self, ChStateDelta mD)"""
        return _core.ChLoadCustomMultiple_LoadGetStateBlock_w(self, mD)

    def LoadStateIncrement(self, x, dw, x_new):
        r"""LoadStateIncrement(ChLoadCustomMultiple self, ChState x, ChStateDelta dw, ChState x_new)"""
        return _core.ChLoadCustomMultiple_LoadStateIncrement(self, x, dw, x_new)

    def LoadGet_field_ncoords(self):
        r"""LoadGet_field_ncoords(ChLoadCustomMultiple self) -> int"""
        return _core.ChLoadCustomMultiple_LoadGet_field_ncoords(self)

    def LoadIntLoadResidual_F(self, R, c):
        r"""LoadIntLoadResidual_F(ChLoadCustomMultiple self, ChVectorDynamicD R, double const c)"""
        return _core.ChLoadCustomMultiple_LoadIntLoadResidual_F(self, R, c)

    def CreateJacobianMatrices(self):
        r"""CreateJacobianMatrices(ChLoadCustomMultiple self)"""
        return _core.ChLoadCustomMultiple_CreateJacobianMatrices(self)

    def GetQ(self):
        r"""GetQ(ChLoadCustomMultiple self) -> ChVectorDynamicD"""
        return _core.ChLoadCustomMultiple_GetQ(self)

# Register ChLoadCustomMultiple in _core:
_core.ChLoadCustomMultiple_swigregister(ChLoadCustomMultiple)

class LoadLoaderXYZnode(ChLoadBase):
    r"""Proxy of C++ chrono::ChLoad< chrono::ChLoaderXYZnode > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    loader = property(_core.LoadLoaderXYZnode_loader_get, _core.LoadLoaderXYZnode_loader_set, doc=r"""loader : chrono::ChLoaderXYZnode""")

    def __init__(self, mloadable):
        r"""__init__(LoadLoaderXYZnode self, std::shared_ptr< chrono::ChLoaderUVW::type_loadable > mloadable) -> LoadLoaderXYZnode"""
        _core.LoadLoaderXYZnode_swiginit(self, _core.new_LoadLoaderXYZnode(mloadable))
    __swig_destroy__ = _core.delete_LoadLoaderXYZnode

    def Clone(self):
        r"""Clone(LoadLoaderXYZnode self) -> LoadLoaderXYZnode"""
        return _core.LoadLoaderXYZnode_Clone(self)

    def LoadGet_ndof_x(self):
        r"""LoadGet_ndof_x(LoadLoaderXYZnode self) -> int"""
        return _core.LoadLoaderXYZnode_LoadGet_ndof_x(self)

    def LoadGet_ndof_w(self):
        r"""LoadGet_ndof_w(LoadLoaderXYZnode self) -> int"""
        return _core.LoadLoaderXYZnode_LoadGet_ndof_w(self)

    def LoadGetStateBlock_x(self, mD):
        r"""LoadGetStateBlock_x(LoadLoaderXYZnode self, ChState mD)"""
        return _core.LoadLoaderXYZnode_LoadGetStateBlock_x(self, mD)

    def LoadGetStateBlock_w(self, mD):
        r"""LoadGetStateBlock_w(LoadLoaderXYZnode self, ChStateDelta mD)"""
        return _core.LoadLoaderXYZnode_LoadGetStateBlock_w(self, mD)

    def LoadStateIncrement(self, x, dw, x_new):
        r"""LoadStateIncrement(LoadLoaderXYZnode self, ChState x, ChStateDelta dw, ChState x_new)"""
        return _core.LoadLoaderXYZnode_LoadStateIncrement(self, x, dw, x_new)

    def LoadGet_field_ncoords(self):
        r"""LoadGet_field_ncoords(LoadLoaderXYZnode self) -> int"""
        return _core.LoadLoaderXYZnode_LoadGet_field_ncoords(self)

    def ComputeQ(self, state_x, state_w):
        r"""ComputeQ(LoadLoaderXYZnode self, ChState state_x, ChStateDelta state_w)"""
        return _core.LoadLoaderXYZnode_ComputeQ(self, state_x, state_w)

    def LoadIntLoadResidual_F(self, R, c):
        r"""LoadIntLoadResidual_F(LoadLoaderXYZnode self, ChVectorDynamicD R, double const c)"""
        return _core.LoadLoaderXYZnode_LoadIntLoadResidual_F(self, R, c)

    def IsStiff(self):
        r"""IsStiff(LoadLoaderXYZnode self) -> bool"""
        return _core.LoadLoaderXYZnode_IsStiff(self)

    def CreateJacobianMatrices(self):
        r"""CreateJacobianMatrices(LoadLoaderXYZnode self)"""
        return _core.LoadLoaderXYZnode_CreateJacobianMatrices(self)

# Register LoadLoaderXYZnode in _core:
_core.LoadLoaderXYZnode_swigregister(LoadLoaderXYZnode)

class LoadLoaderGravity(ChLoadBase):
    r"""Proxy of C++ chrono::ChLoad< chrono::ChLoaderGravity > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    loader = property(_core.LoadLoaderGravity_loader_get, _core.LoadLoaderGravity_loader_set, doc=r"""loader : chrono::ChLoaderGravity""")

    def __init__(self, mloadable):
        r"""__init__(LoadLoaderGravity self, std::shared_ptr< chrono::ChLoaderUVW::type_loadable > mloadable) -> LoadLoaderGravity"""
        _core.LoadLoaderGravity_swiginit(self, _core.new_LoadLoaderGravity(mloadable))
    __swig_destroy__ = _core.delete_LoadLoaderGravity

    def Clone(self):
        r"""Clone(LoadLoaderGravity self) -> LoadLoaderGravity"""
        return _core.LoadLoaderGravity_Clone(self)

    def LoadGet_ndof_x(self):
        r"""LoadGet_ndof_x(LoadLoaderGravity self) -> int"""
        return _core.LoadLoaderGravity_LoadGet_ndof_x(self)

    def LoadGet_ndof_w(self):
        r"""LoadGet_ndof_w(LoadLoaderGravity self) -> int"""
        return _core.LoadLoaderGravity_LoadGet_ndof_w(self)

    def LoadGetStateBlock_x(self, mD):
        r"""LoadGetStateBlock_x(LoadLoaderGravity self, ChState mD)"""
        return _core.LoadLoaderGravity_LoadGetStateBlock_x(self, mD)

    def LoadGetStateBlock_w(self, mD):
        r"""LoadGetStateBlock_w(LoadLoaderGravity self, ChStateDelta mD)"""
        return _core.LoadLoaderGravity_LoadGetStateBlock_w(self, mD)

    def LoadStateIncrement(self, x, dw, x_new):
        r"""LoadStateIncrement(LoadLoaderGravity self, ChState x, ChStateDelta dw, ChState x_new)"""
        return _core.LoadLoaderGravity_LoadStateIncrement(self, x, dw, x_new)

    def LoadGet_field_ncoords(self):
        r"""LoadGet_field_ncoords(LoadLoaderGravity self) -> int"""
        return _core.LoadLoaderGravity_LoadGet_field_ncoords(self)

    def ComputeQ(self, state_x, state_w):
        r"""ComputeQ(LoadLoaderGravity self, ChState state_x, ChStateDelta state_w)"""
        return _core.LoadLoaderGravity_ComputeQ(self, state_x, state_w)

    def LoadIntLoadResidual_F(self, R, c):
        r"""LoadIntLoadResidual_F(LoadLoaderGravity self, ChVectorDynamicD R, double const c)"""
        return _core.LoadLoaderGravity_LoadIntLoadResidual_F(self, R, c)

    def IsStiff(self):
        r"""IsStiff(LoadLoaderGravity self) -> bool"""
        return _core.LoadLoaderGravity_IsStiff(self)

    def CreateJacobianMatrices(self):
        r"""CreateJacobianMatrices(LoadLoaderGravity self)"""
        return _core.LoadLoaderGravity_CreateJacobianMatrices(self)

# Register LoadLoaderGravity in _core:
_core.LoadLoaderGravity_swigregister(LoadLoaderGravity)

class LoadLoaderForceOnSurface(ChLoadBase):
    r"""Proxy of C++ chrono::ChLoad< chrono::ChLoaderForceOnSurface > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    loader = property(_core.LoadLoaderForceOnSurface_loader_get, _core.LoadLoaderForceOnSurface_loader_set, doc=r"""loader : chrono::ChLoaderForceOnSurface""")

    def __init__(self, mloadable):
        r"""__init__(LoadLoaderForceOnSurface self, std::shared_ptr< chrono::ChLoaderUV::type_loadable > mloadable) -> LoadLoaderForceOnSurface"""
        _core.LoadLoaderForceOnSurface_swiginit(self, _core.new_LoadLoaderForceOnSurface(mloadable))
    __swig_destroy__ = _core.delete_LoadLoaderForceOnSurface

    def Clone(self):
        r"""Clone(LoadLoaderForceOnSurface self) -> LoadLoaderForceOnSurface"""
        return _core.LoadLoaderForceOnSurface_Clone(self)

    def LoadGet_ndof_x(self):
        r"""LoadGet_ndof_x(LoadLoaderForceOnSurface self) -> int"""
        return _core.LoadLoaderForceOnSurface_LoadGet_ndof_x(self)

    def LoadGet_ndof_w(self):
        r"""LoadGet_ndof_w(LoadLoaderForceOnSurface self) -> int"""
        return _core.LoadLoaderForceOnSurface_LoadGet_ndof_w(self)

    def LoadGetStateBlock_x(self, mD):
        r"""LoadGetStateBlock_x(LoadLoaderForceOnSurface self, ChState mD)"""
        return _core.LoadLoaderForceOnSurface_LoadGetStateBlock_x(self, mD)

    def LoadGetStateBlock_w(self, mD):
        r"""LoadGetStateBlock_w(LoadLoaderForceOnSurface self, ChStateDelta mD)"""
        return _core.LoadLoaderForceOnSurface_LoadGetStateBlock_w(self, mD)

    def LoadStateIncrement(self, x, dw, x_new):
        r"""LoadStateIncrement(LoadLoaderForceOnSurface self, ChState x, ChStateDelta dw, ChState x_new)"""
        return _core.LoadLoaderForceOnSurface_LoadStateIncrement(self, x, dw, x_new)

    def LoadGet_field_ncoords(self):
        r"""LoadGet_field_ncoords(LoadLoaderForceOnSurface self) -> int"""
        return _core.LoadLoaderForceOnSurface_LoadGet_field_ncoords(self)

    def ComputeQ(self, state_x, state_w):
        r"""ComputeQ(LoadLoaderForceOnSurface self, ChState state_x, ChStateDelta state_w)"""
        return _core.LoadLoaderForceOnSurface_ComputeQ(self, state_x, state_w)

    def LoadIntLoadResidual_F(self, R, c):
        r"""LoadIntLoadResidual_F(LoadLoaderForceOnSurface self, ChVectorDynamicD R, double const c)"""
        return _core.LoadLoaderForceOnSurface_LoadIntLoadResidual_F(self, R, c)

    def IsStiff(self):
        r"""IsStiff(LoadLoaderForceOnSurface self) -> bool"""
        return _core.LoadLoaderForceOnSurface_IsStiff(self)

    def CreateJacobianMatrices(self):
        r"""CreateJacobianMatrices(LoadLoaderForceOnSurface self)"""
        return _core.LoadLoaderForceOnSurface_CreateJacobianMatrices(self)

# Register LoadLoaderForceOnSurface in _core:
_core.LoadLoaderForceOnSurface_swigregister(LoadLoaderForceOnSurface)

class LoadLoaderPressure(ChLoadBase):
    r"""Proxy of C++ chrono::ChLoad< chrono::ChLoaderPressure > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    loader = property(_core.LoadLoaderPressure_loader_get, _core.LoadLoaderPressure_loader_set, doc=r"""loader : chrono::ChLoaderPressure""")

    def __init__(self, mloadable):
        r"""__init__(LoadLoaderPressure self, std::shared_ptr< chrono::ChLoaderUV::type_loadable > mloadable) -> LoadLoaderPressure"""
        _core.LoadLoaderPressure_swiginit(self, _core.new_LoadLoaderPressure(mloadable))
    __swig_destroy__ = _core.delete_LoadLoaderPressure

    def Clone(self):
        r"""Clone(LoadLoaderPressure self) -> LoadLoaderPressure"""
        return _core.LoadLoaderPressure_Clone(self)

    def LoadGet_ndof_x(self):
        r"""LoadGet_ndof_x(LoadLoaderPressure self) -> int"""
        return _core.LoadLoaderPressure_LoadGet_ndof_x(self)

    def LoadGet_ndof_w(self):
        r"""LoadGet_ndof_w(LoadLoaderPressure self) -> int"""
        return _core.LoadLoaderPressure_LoadGet_ndof_w(self)

    def LoadGetStateBlock_x(self, mD):
        r"""LoadGetStateBlock_x(LoadLoaderPressure self, ChState mD)"""
        return _core.LoadLoaderPressure_LoadGetStateBlock_x(self, mD)

    def LoadGetStateBlock_w(self, mD):
        r"""LoadGetStateBlock_w(LoadLoaderPressure self, ChStateDelta mD)"""
        return _core.LoadLoaderPressure_LoadGetStateBlock_w(self, mD)

    def LoadStateIncrement(self, x, dw, x_new):
        r"""LoadStateIncrement(LoadLoaderPressure self, ChState x, ChStateDelta dw, ChState x_new)"""
        return _core.LoadLoaderPressure_LoadStateIncrement(self, x, dw, x_new)

    def LoadGet_field_ncoords(self):
        r"""LoadGet_field_ncoords(LoadLoaderPressure self) -> int"""
        return _core.LoadLoaderPressure_LoadGet_field_ncoords(self)

    def ComputeQ(self, state_x, state_w):
        r"""ComputeQ(LoadLoaderPressure self, ChState state_x, ChStateDelta state_w)"""
        return _core.LoadLoaderPressure_ComputeQ(self, state_x, state_w)

    def LoadIntLoadResidual_F(self, R, c):
        r"""LoadIntLoadResidual_F(LoadLoaderPressure self, ChVectorDynamicD R, double const c)"""
        return _core.LoadLoaderPressure_LoadIntLoadResidual_F(self, R, c)

    def IsStiff(self):
        r"""IsStiff(LoadLoaderPressure self) -> bool"""
        return _core.LoadLoaderPressure_IsStiff(self)

    def CreateJacobianMatrices(self):
        r"""CreateJacobianMatrices(LoadLoaderPressure self)"""
        return _core.LoadLoaderPressure_CreateJacobianMatrices(self)

# Register LoadLoaderPressure in _core:
_core.LoadLoaderPressure_swigregister(LoadLoaderPressure)

class ChLoadBodyForce(ChLoadCustom):
    r"""Proxy of C++ chrono::ChLoadBodyForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, body, force, local_force, point, local_point=True):
        r"""__init__(ChLoadBodyForce self, std::shared_ptr< chrono::ChBody > body, ChVectorD force, bool local_force, ChVectorD point, bool local_point=True) -> ChLoadBodyForce"""
        _core.ChLoadBodyForce_swiginit(self, _core.new_ChLoadBodyForce(body, force, local_force, point, local_point))

    def Clone(self):
        r"""Clone(ChLoadBodyForce self) -> ChLoadBodyForce"""
        return _core.ChLoadBodyForce_Clone(self)

    def SetForce(self, force, is_local):
        r"""SetForce(ChLoadBodyForce self, ChVectorD force, bool is_local)"""
        return _core.ChLoadBodyForce_SetForce(self, force, is_local)

    def GetForce(self):
        r"""GetForce(ChLoadBodyForce self) -> ChVectorD"""
        return _core.ChLoadBodyForce_GetForce(self)

    def SetApplicationPoint(self, point, is_local):
        r"""SetApplicationPoint(ChLoadBodyForce self, ChVectorD point, bool const is_local)"""
        return _core.ChLoadBodyForce_SetApplicationPoint(self, point, is_local)

    def GetApplicationPoint(self):
        r"""GetApplicationPoint(ChLoadBodyForce self) -> ChVectorD"""
        return _core.ChLoadBodyForce_GetApplicationPoint(self)

    def SetModulationFunction(self, modulation):
        r"""SetModulationFunction(ChLoadBodyForce self, std::shared_ptr< chrono::ChFunction > modulation)"""
        return _core.ChLoadBodyForce_SetModulationFunction(self, modulation)

    def ComputeQ(self, state_x, state_w):
        r"""ComputeQ(ChLoadBodyForce self, ChState state_x, ChStateDelta state_w)"""
        return _core.ChLoadBodyForce_ComputeQ(self, state_x, state_w)
    __swig_destroy__ = _core.delete_ChLoadBodyForce

# Register ChLoadBodyForce in _core:
_core.ChLoadBodyForce_swigregister(ChLoadBodyForce)

class ChLoadBodyTorque(ChLoadCustom):
    r"""Proxy of C++ chrono::ChLoadBodyTorque class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, body, torque, local_torque):
        r"""__init__(ChLoadBodyTorque self, std::shared_ptr< chrono::ChBody > body, ChVectorD torque, bool local_torque) -> ChLoadBodyTorque"""
        _core.ChLoadBodyTorque_swiginit(self, _core.new_ChLoadBodyTorque(body, torque, local_torque))

    def Clone(self):
        r"""Clone(ChLoadBodyTorque self) -> ChLoadBodyTorque"""
        return _core.ChLoadBodyTorque_Clone(self)

    def SetTorque(self, torque, is_local):
        r"""SetTorque(ChLoadBodyTorque self, ChVectorD torque, bool is_local)"""
        return _core.ChLoadBodyTorque_SetTorque(self, torque, is_local)

    def GetTorque(self):
        r"""GetTorque(ChLoadBodyTorque self) -> ChVectorD"""
        return _core.ChLoadBodyTorque_GetTorque(self)

    def SetModulationFunction(self, modulation):
        r"""SetModulationFunction(ChLoadBodyTorque self, std::shared_ptr< chrono::ChFunction > modulation)"""
        return _core.ChLoadBodyTorque_SetModulationFunction(self, modulation)

    def ComputeQ(self, state_x, state_w):
        r"""ComputeQ(ChLoadBodyTorque self, ChState state_x, ChStateDelta state_w)"""
        return _core.ChLoadBodyTorque_ComputeQ(self, state_x, state_w)
    __swig_destroy__ = _core.delete_ChLoadBodyTorque

# Register ChLoadBodyTorque in _core:
_core.ChLoadBodyTorque_swigregister(ChLoadBodyTorque)

class ChLoadBodyBody(ChLoadCustomMultiple):
    r"""Proxy of C++ chrono::ChLoadBodyBody class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def ComputeBodyBodyForceTorque(self, rel_AB, loc_force, loc_torque):
        r"""ComputeBodyBodyForceTorque(ChLoadBodyBody self, ChFrameMovingD rel_AB, ChVectorD loc_force, ChVectorD loc_torque)"""
        return _core.ChLoadBodyBody_ComputeBodyBodyForceTorque(self, rel_AB, loc_force, loc_torque)

    def GetForce(self):
        r"""GetForce(ChLoadBodyBody self) -> ChVectorD"""
        return _core.ChLoadBodyBody_GetForce(self)

    def GetTorque(self):
        r"""GetTorque(ChLoadBodyBody self) -> ChVectorD"""
        return _core.ChLoadBodyBody_GetTorque(self)

    def SetApplicationFrameA(self, mpA):
        r"""SetApplicationFrameA(ChLoadBodyBody self, ChFrameD mpA)"""
        return _core.ChLoadBodyBody_SetApplicationFrameA(self, mpA)

    def GetApplicationFrameA(self):
        r"""GetApplicationFrameA(ChLoadBodyBody self) -> ChFrameD"""
        return _core.ChLoadBodyBody_GetApplicationFrameA(self)

    def SetApplicationFrameB(self, mpB):
        r"""SetApplicationFrameB(ChLoadBodyBody self, ChFrameD mpB)"""
        return _core.ChLoadBodyBody_SetApplicationFrameB(self, mpB)

    def GetApplicationFrameB(self):
        r"""GetApplicationFrameB(ChLoadBodyBody self) -> ChFrameD"""
        return _core.ChLoadBodyBody_GetApplicationFrameB(self)

    def GetAbsoluteFrameA(self):
        r"""GetAbsoluteFrameA(ChLoadBodyBody self) -> ChFrameMovingD"""
        return _core.ChLoadBodyBody_GetAbsoluteFrameA(self)

    def GetAbsoluteFrameB(self):
        r"""GetAbsoluteFrameB(ChLoadBodyBody self) -> ChFrameMovingD"""
        return _core.ChLoadBodyBody_GetAbsoluteFrameB(self)

    def GetBodyA(self):
        r"""GetBodyA(ChLoadBodyBody self) -> std::shared_ptr< chrono::ChBody >"""
        return _core.ChLoadBodyBody_GetBodyA(self)

    def GetBodyB(self):
        r"""GetBodyB(ChLoadBodyBody self) -> std::shared_ptr< chrono::ChBody >"""
        return _core.ChLoadBodyBody_GetBodyB(self)
    __swig_destroy__ = _core.delete_ChLoadBodyBody

# Register ChLoadBodyBody in _core:
_core.ChLoadBodyBody_swigregister(ChLoadBodyBody)

class ChLoadBodyBodyTorque(ChLoadBodyBody):
    r"""Proxy of C++ chrono::ChLoadBodyBodyTorque class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, bodyA, bodyB, torque, local_torque):
        r"""__init__(ChLoadBodyBodyTorque self, std::shared_ptr< chrono::ChBody > bodyA, std::shared_ptr< chrono::ChBody > bodyB, ChVectorD torque, bool local_torque) -> ChLoadBodyBodyTorque"""
        _core.ChLoadBodyBodyTorque_swiginit(self, _core.new_ChLoadBodyBodyTorque(bodyA, bodyB, torque, local_torque))

    def Clone(self):
        r"""Clone(ChLoadBodyBodyTorque self) -> ChLoadBodyBodyTorque"""
        return _core.ChLoadBodyBodyTorque_Clone(self)

    def SetModulationFunction(self, modulation):
        r"""SetModulationFunction(ChLoadBodyBodyTorque self, std::shared_ptr< chrono::ChFunction > modulation)"""
        return _core.ChLoadBodyBodyTorque_SetModulationFunction(self, modulation)
    __swig_destroy__ = _core.delete_ChLoadBodyBodyTorque

# Register ChLoadBodyBodyTorque in _core:
_core.ChLoadBodyBodyTorque_swigregister(ChLoadBodyBodyTorque)

class ChLoadBodyBodyBushingSpherical(ChLoadBodyBody):
    r"""Proxy of C++ chrono::ChLoadBodyBodyBushingSpherical class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mbodyA, mbodyB, abs_application, mstiffness, mdamping):
        r"""__init__(ChLoadBodyBodyBushingSpherical self, std::shared_ptr< chrono::ChBody > mbodyA, std::shared_ptr< chrono::ChBody > mbodyB, ChFrameD abs_application, ChVectorD mstiffness, ChVectorD mdamping) -> ChLoadBodyBodyBushingSpherical"""
        _core.ChLoadBodyBodyBushingSpherical_swiginit(self, _core.new_ChLoadBodyBodyBushingSpherical(mbodyA, mbodyB, abs_application, mstiffness, mdamping))

    def Clone(self):
        r"""Clone(ChLoadBodyBodyBushingSpherical self) -> ChLoadBodyBodyBushingSpherical"""
        return _core.ChLoadBodyBodyBushingSpherical_Clone(self)

    def SetStiffness(self, mstiffness):
        r"""SetStiffness(ChLoadBodyBodyBushingSpherical self, ChVectorD mstiffness)"""
        return _core.ChLoadBodyBodyBushingSpherical_SetStiffness(self, mstiffness)

    def GetStiffness(self):
        r"""GetStiffness(ChLoadBodyBodyBushingSpherical self) -> ChVectorD"""
        return _core.ChLoadBodyBodyBushingSpherical_GetStiffness(self)

    def SetDamping(self, mdamping):
        r"""SetDamping(ChLoadBodyBodyBushingSpherical self, ChVectorD mdamping)"""
        return _core.ChLoadBodyBodyBushingSpherical_SetDamping(self, mdamping)

    def GetDamping(self):
        r"""GetDamping(ChLoadBodyBodyBushingSpherical self) -> ChVectorD"""
        return _core.ChLoadBodyBodyBushingSpherical_GetDamping(self)
    __swig_destroy__ = _core.delete_ChLoadBodyBodyBushingSpherical

# Register ChLoadBodyBodyBushingSpherical in _core:
_core.ChLoadBodyBodyBushingSpherical_swigregister(ChLoadBodyBodyBushingSpherical)

class ChLoadBodyBodyBushingPlastic(ChLoadBodyBodyBushingSpherical):
    r"""Proxy of C++ chrono::ChLoadBodyBodyBushingPlastic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mbodyA, mbodyB, abs_application, mstiffness, mdamping, myield):
        r"""__init__(ChLoadBodyBodyBushingPlastic self, std::shared_ptr< chrono::ChBody > mbodyA, std::shared_ptr< chrono::ChBody > mbodyB, ChFrameD abs_application, ChVectorD mstiffness, ChVectorD mdamping, ChVectorD myield) -> ChLoadBodyBodyBushingPlastic"""
        _core.ChLoadBodyBodyBushingPlastic_swiginit(self, _core.new_ChLoadBodyBodyBushingPlastic(mbodyA, mbodyB, abs_application, mstiffness, mdamping, myield))

    def SetYeld(self, myeld):
        r"""SetYeld(ChLoadBodyBodyBushingPlastic self, ChVectorD myeld)"""
        return _core.ChLoadBodyBodyBushingPlastic_SetYeld(self, myeld)

    def GetYeld(self):
        r"""GetYeld(ChLoadBodyBodyBushingPlastic self) -> ChVectorD"""
        return _core.ChLoadBodyBodyBushingPlastic_GetYeld(self)

    def GetPlasticDeformation(self):
        r"""GetPlasticDeformation(ChLoadBodyBodyBushingPlastic self) -> ChVectorD"""
        return _core.ChLoadBodyBodyBushingPlastic_GetPlasticDeformation(self)
    __swig_destroy__ = _core.delete_ChLoadBodyBodyBushingPlastic

# Register ChLoadBodyBodyBushingPlastic in _core:
_core.ChLoadBodyBodyBushingPlastic_swigregister(ChLoadBodyBodyBushingPlastic)

class ChLoadBodyBodyBushingMate(ChLoadBodyBodyBushingSpherical):
    r"""Proxy of C++ chrono::ChLoadBodyBodyBushingMate class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mbodyA, mbodyB, abs_application, mstiffness, mdamping, mrotstiffness, mrotdamping):
        r"""__init__(ChLoadBodyBodyBushingMate self, std::shared_ptr< chrono::ChBody > mbodyA, std::shared_ptr< chrono::ChBody > mbodyB, ChFrameD abs_application, ChVectorD mstiffness, ChVectorD mdamping, ChVectorD mrotstiffness, ChVectorD mrotdamping) -> ChLoadBodyBodyBushingMate"""
        _core.ChLoadBodyBodyBushingMate_swiginit(self, _core.new_ChLoadBodyBodyBushingMate(mbodyA, mbodyB, abs_application, mstiffness, mdamping, mrotstiffness, mrotdamping))

    def SetRotationalStiffness(self, mstiffness):
        r"""SetRotationalStiffness(ChLoadBodyBodyBushingMate self, ChVectorD mstiffness)"""
        return _core.ChLoadBodyBodyBushingMate_SetRotationalStiffness(self, mstiffness)

    def GetRotationalStiffness(self):
        r"""GetRotationalStiffness(ChLoadBodyBodyBushingMate self) -> ChVectorD"""
        return _core.ChLoadBodyBodyBushingMate_GetRotationalStiffness(self)

    def SetRotationalDamping(self, mdamping):
        r"""SetRotationalDamping(ChLoadBodyBodyBushingMate self, ChVectorD mdamping)"""
        return _core.ChLoadBodyBodyBushingMate_SetRotationalDamping(self, mdamping)

    def GetRotationalDamping(self):
        r"""GetRotationalDamping(ChLoadBodyBodyBushingMate self) -> ChVectorD"""
        return _core.ChLoadBodyBodyBushingMate_GetRotationalDamping(self)
    __swig_destroy__ = _core.delete_ChLoadBodyBodyBushingMate

# Register ChLoadBodyBodyBushingMate in _core:
_core.ChLoadBodyBodyBushingMate_swigregister(ChLoadBodyBodyBushingMate)

class ChLoadBodyBodyBushingGeneric(ChLoadBodyBody):
    r"""Proxy of C++ chrono::ChLoadBodyBodyBushingGeneric class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mbodyA, mbodyB, abs_application, mstiffness, mdamping):
        r"""__init__(ChLoadBodyBodyBushingGeneric self, std::shared_ptr< chrono::ChBody > mbodyA, std::shared_ptr< chrono::ChBody > mbodyB, ChFrameD abs_application, chrono::ChMatrixConstRef mstiffness, chrono::ChMatrixConstRef mdamping) -> ChLoadBodyBodyBushingGeneric"""
        _core.ChLoadBodyBodyBushingGeneric_swiginit(self, _core.new_ChLoadBodyBodyBushingGeneric(mbodyA, mbodyB, abs_application, mstiffness, mdamping))

    def Clone(self):
        r"""Clone(ChLoadBodyBodyBushingGeneric self) -> ChLoadBodyBodyBushingGeneric"""
        return _core.ChLoadBodyBodyBushingGeneric_Clone(self)

    def SetStiffnessMatrix(self, mstiffness):
        r"""SetStiffnessMatrix(ChLoadBodyBodyBushingGeneric self, chrono::ChMatrixConstRef mstiffness)"""
        return _core.ChLoadBodyBodyBushingGeneric_SetStiffnessMatrix(self, mstiffness)

    def GetStiffnessMatrix(self):
        r"""GetStiffnessMatrix(ChLoadBodyBodyBushingGeneric self) -> chrono::ChMatrixNM< double,6,6 > const &"""
        return _core.ChLoadBodyBodyBushingGeneric_GetStiffnessMatrix(self)

    def SetDampingMatrix(self, mdamping):
        r"""SetDampingMatrix(ChLoadBodyBodyBushingGeneric self, chrono::ChMatrixConstRef mdamping)"""
        return _core.ChLoadBodyBodyBushingGeneric_SetDampingMatrix(self, mdamping)

    def GetDampingMatrix(self):
        r"""GetDampingMatrix(ChLoadBodyBodyBushingGeneric self) -> chrono::ChMatrixNM< double,6,6 > const &"""
        return _core.ChLoadBodyBodyBushingGeneric_GetDampingMatrix(self)

    def SetNeutralForce(self, mf):
        r"""SetNeutralForce(ChLoadBodyBodyBushingGeneric self, ChVectorD mf)"""
        return _core.ChLoadBodyBodyBushingGeneric_SetNeutralForce(self, mf)

    def GetNeutralForce(self):
        r"""GetNeutralForce(ChLoadBodyBodyBushingGeneric self) -> ChVectorD"""
        return _core.ChLoadBodyBodyBushingGeneric_GetNeutralForce(self)

    def SetNeutralTorque(self, mt):
        r"""SetNeutralTorque(ChLoadBodyBodyBushingGeneric self, ChVectorD mt)"""
        return _core.ChLoadBodyBodyBushingGeneric_SetNeutralTorque(self, mt)

    def GetNeutralTorque(self):
        r"""GetNeutralTorque(ChLoadBodyBodyBushingGeneric self) -> ChVectorD"""
        return _core.ChLoadBodyBodyBushingGeneric_GetNeutralTorque(self)

    def NeutralDisplacement(self):
        r"""NeutralDisplacement(ChLoadBodyBodyBushingGeneric self) -> ChFrameD"""
        return _core.ChLoadBodyBodyBushingGeneric_NeutralDisplacement(self)
    __swig_destroy__ = _core.delete_ChLoadBodyBodyBushingGeneric

# Register ChLoadBodyBodyBushingGeneric in _core:
_core.ChLoadBodyBodyBushingGeneric_swigregister(ChLoadBodyBodyBushingGeneric)

class ChLoaderXYZnode(ChLoaderUVWatomic):
    r"""Proxy of C++ chrono::ChLoaderXYZnode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mloadable):
        r"""__init__(ChLoaderXYZnode self, std::shared_ptr< chrono::ChLoadableUVW > mloadable) -> ChLoaderXYZnode"""
        _core.ChLoaderXYZnode_swiginit(self, _core.new_ChLoaderXYZnode(mloadable))

    def ComputeF(self, U, V, W, F, state_x, state_w):
        r"""ComputeF(ChLoaderXYZnode self, double const U, double const V, double const W, ChVectorDynamicD F, ChVectorDynamicD state_x, ChVectorDynamicD state_w)"""
        return _core.ChLoaderXYZnode_ComputeF(self, U, V, W, F, state_x, state_w)

    def SetForce(self, mf):
        r"""SetForce(ChLoaderXYZnode self, ChVectorD mf)"""
        return _core.ChLoaderXYZnode_SetForce(self, mf)

    def GetForce(self):
        r"""GetForce(ChLoaderXYZnode self) -> ChVectorD"""
        return _core.ChLoaderXYZnode_GetForce(self)
    __swig_destroy__ = _core.delete_ChLoaderXYZnode

# Register ChLoaderXYZnode in _core:
_core.ChLoaderXYZnode_swigregister(ChLoaderXYZnode)

class ChLoadXYZnode(LoadLoaderXYZnode):
    r"""Proxy of C++ chrono::ChLoadXYZnode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mloadable):
        r"""__init__(ChLoadXYZnode self, std::shared_ptr< chrono::ChNodeXYZ > mloadable) -> ChLoadXYZnode"""
        _core.ChLoadXYZnode_swiginit(self, _core.new_ChLoadXYZnode(mloadable))
    __swig_destroy__ = _core.delete_ChLoadXYZnode

# Register ChLoadXYZnode in _core:
_core.ChLoadXYZnode_swigregister(ChLoadXYZnode)

class ChLoadXYZnodeForce(ChLoadCustom):
    r"""Proxy of C++ chrono::ChLoadXYZnodeForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def ComputeForce(self, abs_pos, abs_vel, abs_force):
        r"""ComputeForce(ChLoadXYZnodeForce self, ChVectorD abs_pos, ChVectorD abs_vel, ChVectorD abs_force)"""
        return _core.ChLoadXYZnodeForce_ComputeForce(self, abs_pos, abs_vel, abs_force)

    def ComputeQ(self, state_x, state_w):
        r"""ComputeQ(ChLoadXYZnodeForce self, ChState state_x, ChStateDelta state_w)"""
        return _core.ChLoadXYZnodeForce_ComputeQ(self, state_x, state_w)

    def GetForce(self):
        r"""GetForce(ChLoadXYZnodeForce self) -> ChVectorD"""
        return _core.ChLoadXYZnodeForce_GetForce(self)
    __swig_destroy__ = _core.delete_ChLoadXYZnodeForce

# Register ChLoadXYZnodeForce in _core:
_core.ChLoadXYZnodeForce_swigregister(ChLoadXYZnodeForce)

class ChLoadXYZnodeForceAbsolute(ChLoadXYZnodeForce):
    r"""Proxy of C++ chrono::ChLoadXYZnodeForceAbsolute class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, node, force):
        r"""__init__(ChLoadXYZnodeForceAbsolute self, std::shared_ptr< chrono::ChNodeXYZ > node, ChVectorD force) -> ChLoadXYZnodeForceAbsolute"""
        _core.ChLoadXYZnodeForceAbsolute_swiginit(self, _core.new_ChLoadXYZnodeForceAbsolute(node, force))

    def Clone(self):
        r"""Clone(ChLoadXYZnodeForceAbsolute self) -> ChLoadXYZnodeForceAbsolute"""
        return _core.ChLoadXYZnodeForceAbsolute_Clone(self)

    def ComputeForce(self, abs_pos, abs_vel, abs_force):
        r"""ComputeForce(ChLoadXYZnodeForceAbsolute self, ChVectorD abs_pos, ChVectorD abs_vel, ChVectorD abs_force)"""
        return _core.ChLoadXYZnodeForceAbsolute_ComputeForce(self, abs_pos, abs_vel, abs_force)

    def SetForceBase(self, force):
        r"""SetForceBase(ChLoadXYZnodeForceAbsolute self, ChVectorD force)"""
        return _core.ChLoadXYZnodeForceAbsolute_SetForceBase(self, force)

    def GetForce(self):
        r"""GetForce(ChLoadXYZnodeForceAbsolute self) -> ChVectorD"""
        return _core.ChLoadXYZnodeForceAbsolute_GetForce(self)

    def SetModulationFunction(self, modulation):
        r"""SetModulationFunction(ChLoadXYZnodeForceAbsolute self, std::shared_ptr< chrono::ChFunction > modulation)"""
        return _core.ChLoadXYZnodeForceAbsolute_SetModulationFunction(self, modulation)
    __swig_destroy__ = _core.delete_ChLoadXYZnodeForceAbsolute

# Register ChLoadXYZnodeForceAbsolute in _core:
_core.ChLoadXYZnodeForceAbsolute_swigregister(ChLoadXYZnodeForceAbsolute)

class ChLoadXYZnodeXYZnode(ChLoadCustomMultiple):
    r"""Proxy of C++ chrono::ChLoadXYZnodeXYZnode class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def ComputeForce(self, rel_pos, rel_vel, abs_force):
        r"""ComputeForce(ChLoadXYZnodeXYZnode self, ChVectorD rel_pos, ChVectorD rel_vel, ChVectorD abs_force)"""
        return _core.ChLoadXYZnodeXYZnode_ComputeForce(self, rel_pos, rel_vel, abs_force)

    def ComputeQ(self, state_x, state_w):
        r"""ComputeQ(ChLoadXYZnodeXYZnode self, ChState state_x, ChStateDelta state_w)"""
        return _core.ChLoadXYZnodeXYZnode_ComputeQ(self, state_x, state_w)

    def GetForce(self):
        r"""GetForce(ChLoadXYZnodeXYZnode self) -> ChVectorD"""
        return _core.ChLoadXYZnodeXYZnode_GetForce(self)
    __swig_destroy__ = _core.delete_ChLoadXYZnodeXYZnode

# Register ChLoadXYZnodeXYZnode in _core:
_core.ChLoadXYZnodeXYZnode_swigregister(ChLoadXYZnodeXYZnode)

class ChLoadXYZnodeXYZnodeSpring(ChLoadXYZnodeXYZnode):
    r"""Proxy of C++ chrono::ChLoadXYZnodeXYZnodeSpring class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mnodeA, mnodeB, mK, mR, mD0=0):
        r"""__init__(ChLoadXYZnodeXYZnodeSpring self, std::shared_ptr< chrono::ChNodeXYZ > mnodeA, std::shared_ptr< chrono::ChNodeXYZ > mnodeB, double mK, double mR, double mD0=0) -> ChLoadXYZnodeXYZnodeSpring"""
        _core.ChLoadXYZnodeXYZnodeSpring_swiginit(self, _core.new_ChLoadXYZnodeXYZnodeSpring(mnodeA, mnodeB, mK, mR, mD0))

    def Clone(self):
        r"""Clone(ChLoadXYZnodeXYZnodeSpring self) -> ChLoadXYZnodeXYZnodeSpring"""
        return _core.ChLoadXYZnodeXYZnodeSpring_Clone(self)

    def ComputeForce(self, rel_pos, rel_vel, abs_force):
        r"""ComputeForce(ChLoadXYZnodeXYZnodeSpring self, ChVectorD rel_pos, ChVectorD rel_vel, ChVectorD abs_force)"""
        return _core.ChLoadXYZnodeXYZnodeSpring_ComputeForce(self, rel_pos, rel_vel, abs_force)

    def SetStiffness(self, mstiffness):
        r"""SetStiffness(ChLoadXYZnodeXYZnodeSpring self, double const mstiffness)"""
        return _core.ChLoadXYZnodeXYZnodeSpring_SetStiffness(self, mstiffness)

    def GetStiffness(self):
        r"""GetStiffness(ChLoadXYZnodeXYZnodeSpring self) -> double"""
        return _core.ChLoadXYZnodeXYZnodeSpring_GetStiffness(self)

    def SetDamping(self, mdamping):
        r"""SetDamping(ChLoadXYZnodeXYZnodeSpring self, double const mdamping)"""
        return _core.ChLoadXYZnodeXYZnodeSpring_SetDamping(self, mdamping)

    def GetDamping(self):
        r"""GetDamping(ChLoadXYZnodeXYZnodeSpring self) -> double"""
        return _core.ChLoadXYZnodeXYZnodeSpring_GetDamping(self)

    def SetRestLength(self, mrest):
        r"""SetRestLength(ChLoadXYZnodeXYZnodeSpring self, double const mrest)"""
        return _core.ChLoadXYZnodeXYZnodeSpring_SetRestLength(self, mrest)

    def GetRestLength(self):
        r"""GetRestLength(ChLoadXYZnodeXYZnodeSpring self) -> double"""
        return _core.ChLoadXYZnodeXYZnodeSpring_GetRestLength(self)

    def SetStiff(self, ms):
        r"""SetStiff(ChLoadXYZnodeXYZnodeSpring self, bool ms)"""
        return _core.ChLoadXYZnodeXYZnodeSpring_SetStiff(self, ms)
    __swig_destroy__ = _core.delete_ChLoadXYZnodeXYZnodeSpring

# Register ChLoadXYZnodeXYZnodeSpring in _core:
_core.ChLoadXYZnodeXYZnodeSpring_swigregister(ChLoadXYZnodeXYZnodeSpring)

class ChLoadXYZnodeXYZnodeBushing(ChLoadXYZnodeXYZnode):
    r"""Proxy of C++ chrono::ChLoadXYZnodeXYZnodeBushing class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mnodeA, mnodeB):
        r"""__init__(ChLoadXYZnodeXYZnodeBushing self, std::shared_ptr< chrono::ChNodeXYZ > mnodeA, std::shared_ptr< chrono::ChNodeXYZ > mnodeB) -> ChLoadXYZnodeXYZnodeBushing"""
        _core.ChLoadXYZnodeXYZnodeBushing_swiginit(self, _core.new_ChLoadXYZnodeXYZnodeBushing(mnodeA, mnodeB))

    def Clone(self):
        r"""Clone(ChLoadXYZnodeXYZnodeBushing self) -> ChLoadXYZnodeXYZnodeBushing"""
        return _core.ChLoadXYZnodeXYZnodeBushing_Clone(self)

    def ComputeForce(self, rel_pos, rel_vel, abs_force):
        r"""ComputeForce(ChLoadXYZnodeXYZnodeBushing self, ChVectorD rel_pos, ChVectorD rel_vel, ChVectorD abs_force)"""
        return _core.ChLoadXYZnodeXYZnodeBushing_ComputeForce(self, rel_pos, rel_vel, abs_force)

    def SetFunctionForceX(self, fx):
        r"""SetFunctionForceX(ChLoadXYZnodeXYZnodeBushing self, std::shared_ptr< chrono::ChFunction > fx)"""
        return _core.ChLoadXYZnodeXYZnodeBushing_SetFunctionForceX(self, fx)

    def SetFunctionForceY(self, fy):
        r"""SetFunctionForceY(ChLoadXYZnodeXYZnodeBushing self, std::shared_ptr< chrono::ChFunction > fy)"""
        return _core.ChLoadXYZnodeXYZnodeBushing_SetFunctionForceY(self, fy)

    def SetFunctionForceZ(self, fz):
        r"""SetFunctionForceZ(ChLoadXYZnodeXYZnodeBushing self, std::shared_ptr< chrono::ChFunction > fz)"""
        return _core.ChLoadXYZnodeXYZnodeBushing_SetFunctionForceZ(self, fz)

    def SetDamping(self, mdamping):
        r"""SetDamping(ChLoadXYZnodeXYZnodeBushing self, ChVectorD mdamping)"""
        return _core.ChLoadXYZnodeXYZnodeBushing_SetDamping(self, mdamping)

    def GetDamping(self):
        r"""GetDamping(ChLoadXYZnodeXYZnodeBushing self) -> ChVectorD"""
        return _core.ChLoadXYZnodeXYZnodeBushing_GetDamping(self)

    def SetStiff(self, ms):
        r"""SetStiff(ChLoadXYZnodeXYZnodeBushing self, bool ms)"""
        return _core.ChLoadXYZnodeXYZnodeBushing_SetStiff(self, ms)
    __swig_destroy__ = _core.delete_ChLoadXYZnodeXYZnodeBushing

# Register ChLoadXYZnodeXYZnodeBushing in _core:
_core.ChLoadXYZnodeXYZnodeBushing_swigregister(ChLoadXYZnodeXYZnodeBushing)

class ChLoadXYZnodeBody(ChLoadCustomMultiple):
    r"""Proxy of C++ chrono::ChLoadXYZnodeBody class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def ComputeForce(self, rel_AB, loc_force):
        r"""ComputeForce(ChLoadXYZnodeBody self, ChFrameMovingD rel_AB, ChVectorD loc_force)"""
        return _core.ChLoadXYZnodeBody_ComputeForce(self, rel_AB, loc_force)

    def GetForce(self):
        r"""GetForce(ChLoadXYZnodeBody self) -> ChVectorD"""
        return _core.ChLoadXYZnodeBody_GetForce(self)

    def SetApplicationFrameB(self, mpB):
        r"""SetApplicationFrameB(ChLoadXYZnodeBody self, ChFrameD mpB)"""
        return _core.ChLoadXYZnodeBody_SetApplicationFrameB(self, mpB)

    def GetApplicationFrameB(self):
        r"""GetApplicationFrameB(ChLoadXYZnodeBody self) -> ChFrameD"""
        return _core.ChLoadXYZnodeBody_GetApplicationFrameB(self)

    def GetAbsoluteFrameB(self):
        r"""GetAbsoluteFrameB(ChLoadXYZnodeBody self) -> ChFrameMovingD"""
        return _core.ChLoadXYZnodeBody_GetAbsoluteFrameB(self)

    def GetNodeA(self):
        r"""GetNodeA(ChLoadXYZnodeBody self) -> std::shared_ptr< chrono::ChNodeXYZ >"""
        return _core.ChLoadXYZnodeBody_GetNodeA(self)

    def GetBodyB(self):
        r"""GetBodyB(ChLoadXYZnodeBody self) -> std::shared_ptr< chrono::ChBody >"""
        return _core.ChLoadXYZnodeBody_GetBodyB(self)
    __swig_destroy__ = _core.delete_ChLoadXYZnodeBody

# Register ChLoadXYZnodeBody in _core:
_core.ChLoadXYZnodeBody_swigregister(ChLoadXYZnodeBody)

class ChLoadXYZnodeBodySpring(ChLoadXYZnodeBody):
    r"""Proxy of C++ chrono::ChLoadXYZnodeBodySpring class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mnodeA, mbodyB, mK, mR, mD0=0):
        r"""__init__(ChLoadXYZnodeBodySpring self, std::shared_ptr< chrono::ChNodeXYZ > mnodeA, std::shared_ptr< chrono::ChBody > mbodyB, double mK, double mR, double mD0=0) -> ChLoadXYZnodeBodySpring"""
        _core.ChLoadXYZnodeBodySpring_swiginit(self, _core.new_ChLoadXYZnodeBodySpring(mnodeA, mbodyB, mK, mR, mD0))

    def Clone(self):
        r"""Clone(ChLoadXYZnodeBodySpring self) -> ChLoadXYZnodeBodySpring"""
        return _core.ChLoadXYZnodeBodySpring_Clone(self)

    def ComputeForce(self, rel_AB, loc_force):
        r"""ComputeForce(ChLoadXYZnodeBodySpring self, ChFrameMovingD rel_AB, ChVectorD loc_force)"""
        return _core.ChLoadXYZnodeBodySpring_ComputeForce(self, rel_AB, loc_force)

    def SetStiffness(self, mstiffness):
        r"""SetStiffness(ChLoadXYZnodeBodySpring self, double const mstiffness)"""
        return _core.ChLoadXYZnodeBodySpring_SetStiffness(self, mstiffness)

    def GetStiffness(self):
        r"""GetStiffness(ChLoadXYZnodeBodySpring self) -> double"""
        return _core.ChLoadXYZnodeBodySpring_GetStiffness(self)

    def SetDamping(self, mdamping):
        r"""SetDamping(ChLoadXYZnodeBodySpring self, double const mdamping)"""
        return _core.ChLoadXYZnodeBodySpring_SetDamping(self, mdamping)

    def GetDamping(self):
        r"""GetDamping(ChLoadXYZnodeBodySpring self) -> double"""
        return _core.ChLoadXYZnodeBodySpring_GetDamping(self)

    def SetRestLength(self, mrest):
        r"""SetRestLength(ChLoadXYZnodeBodySpring self, double const mrest)"""
        return _core.ChLoadXYZnodeBodySpring_SetRestLength(self, mrest)

    def GetRestLength(self):
        r"""GetRestLength(ChLoadXYZnodeBodySpring self) -> double"""
        return _core.ChLoadXYZnodeBodySpring_GetRestLength(self)

    def SetStiff(self, ms):
        r"""SetStiff(ChLoadXYZnodeBodySpring self, bool ms)"""
        return _core.ChLoadXYZnodeBodySpring_SetStiff(self, ms)
    __swig_destroy__ = _core.delete_ChLoadXYZnodeBodySpring

# Register ChLoadXYZnodeBodySpring in _core:
_core.ChLoadXYZnodeBodySpring_swigregister(ChLoadXYZnodeBodySpring)

class ChLoadXYZnodeBodyBushing(ChLoadXYZnodeBody):
    r"""Proxy of C++ chrono::ChLoadXYZnodeBodyBushing class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mnodeA, mbodyB):
        r"""__init__(ChLoadXYZnodeBodyBushing self, std::shared_ptr< chrono::ChNodeXYZ > mnodeA, std::shared_ptr< chrono::ChBody > mbodyB) -> ChLoadXYZnodeBodyBushing"""
        _core.ChLoadXYZnodeBodyBushing_swiginit(self, _core.new_ChLoadXYZnodeBodyBushing(mnodeA, mbodyB))

    def Clone(self):
        r"""Clone(ChLoadXYZnodeBodyBushing self) -> ChLoadXYZnodeBodyBushing"""
        return _core.ChLoadXYZnodeBodyBushing_Clone(self)

    def ComputeForce(self, rel_AB, loc_force):
        r"""ComputeForce(ChLoadXYZnodeBodyBushing self, ChFrameMovingD rel_AB, ChVectorD loc_force)"""
        return _core.ChLoadXYZnodeBodyBushing_ComputeForce(self, rel_AB, loc_force)

    def SetFunctionForceX(self, fx):
        r"""SetFunctionForceX(ChLoadXYZnodeBodyBushing self, std::shared_ptr< chrono::ChFunction > fx)"""
        return _core.ChLoadXYZnodeBodyBushing_SetFunctionForceX(self, fx)

    def SetFunctionForceY(self, fy):
        r"""SetFunctionForceY(ChLoadXYZnodeBodyBushing self, std::shared_ptr< chrono::ChFunction > fy)"""
        return _core.ChLoadXYZnodeBodyBushing_SetFunctionForceY(self, fy)

    def SetFunctionForceZ(self, fz):
        r"""SetFunctionForceZ(ChLoadXYZnodeBodyBushing self, std::shared_ptr< chrono::ChFunction > fz)"""
        return _core.ChLoadXYZnodeBodyBushing_SetFunctionForceZ(self, fz)

    def SetDamping(self, mdamping):
        r"""SetDamping(ChLoadXYZnodeBodyBushing self, ChVectorD mdamping)"""
        return _core.ChLoadXYZnodeBodyBushing_SetDamping(self, mdamping)

    def GetDamping(self):
        r"""GetDamping(ChLoadXYZnodeBodyBushing self) -> ChVectorD"""
        return _core.ChLoadXYZnodeBodyBushing_GetDamping(self)

    def SetStiff(self, ms):
        r"""SetStiff(ChLoadXYZnodeBodyBushing self, bool ms)"""
        return _core.ChLoadXYZnodeBodyBushing_SetStiff(self, ms)
    __swig_destroy__ = _core.delete_ChLoadXYZnodeBodyBushing

# Register ChLoadXYZnodeBodyBushing in _core:
_core.ChLoadXYZnodeBodyBushing_swigregister(ChLoadXYZnodeBodyBushing)

class ChLoadContainer(ChPhysicsItem):
    r"""Proxy of C++ chrono::ChLoadContainer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLoadContainer self) -> ChLoadContainer
        __init__(ChLoadContainer self, ChLoadContainer other) -> ChLoadContainer
        """
        _core.ChLoadContainer_swiginit(self, _core.new_ChLoadContainer(*args))
    __swig_destroy__ = _core.delete_ChLoadContainer

    def Clone(self):
        r"""Clone(ChLoadContainer self) -> ChLoadContainer"""
        return _core.ChLoadContainer_Clone(self)

    def Add(self, newload):
        r"""Add(ChLoadContainer self, std::shared_ptr< chrono::ChLoadBase > newload)"""
        return _core.ChLoadContainer_Add(self, newload)

    def GetLoadList(self):
        r"""GetLoadList(ChLoadContainer self) -> std::vector< std::shared_ptr< chrono::ChLoadBase >,std::allocator< std::shared_ptr< chrono::ChLoadBase > > > &"""
        return _core.ChLoadContainer_GetLoadList(self)

    def Setup(self):
        r"""Setup(ChLoadContainer self)"""
        return _core.ChLoadContainer_Setup(self)

    def Update(self, mytime, update_assets=True):
        r"""Update(ChLoadContainer self, double mytime, bool update_assets=True)"""
        return _core.ChLoadContainer_Update(self, mytime, update_assets)

    def IntLoadResidual_F(self, off, R, c):
        r"""IntLoadResidual_F(ChLoadContainer self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _core.ChLoadContainer_IntLoadResidual_F(self, off, R, c)

    def InjectKRMmatrices(self, mdescriptor):
        r"""InjectKRMmatrices(ChLoadContainer self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChLoadContainer_InjectKRMmatrices(self, mdescriptor)

    def KRMmatricesLoad(self, Kfactor, Rfactor, Mfactor):
        r"""KRMmatricesLoad(ChLoadContainer self, double Kfactor, double Rfactor, double Mfactor)"""
        return _core.ChLoadContainer_KRMmatricesLoad(self, Kfactor, Rfactor, Mfactor)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLoadContainer self, ChArchiveOut & marchive)"""
        return _core.ChLoadContainer_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLoadContainer self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLoadContainer_ArchiveIN(self, marchive)

# Register ChLoadContainer in _core:
_core.ChLoadContainer_swigregister(ChLoadContainer)

class ChShaft(ChPhysicsItem, ChLoadable):
    r"""Proxy of C++ chrono::ChShaft class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChShaft self) -> ChShaft
        __init__(ChShaft self, ChShaft other) -> ChShaft
        """
        _core.ChShaft_swiginit(self, _core.new_ChShaft(*args))
    __swig_destroy__ = _core.delete_ChShaft

    def Clone(self):
        r"""Clone(ChShaft self) -> ChShaft"""
        return _core.ChShaft_Clone(self)

    def SetShaftFixed(self, mev):
        r"""SetShaftFixed(ChShaft self, bool mev)"""
        return _core.ChShaft_SetShaftFixed(self, mev)

    def GetShaftFixed(self):
        r"""GetShaftFixed(ChShaft self) -> bool"""
        return _core.ChShaft_GetShaftFixed(self)

    def SetLimitSpeed(self, mlimit):
        r"""SetLimitSpeed(ChShaft self, bool mlimit)"""
        return _core.ChShaft_SetLimitSpeed(self, mlimit)

    def GetLimitSpeed(self):
        r"""GetLimitSpeed(ChShaft self) -> bool"""
        return _core.ChShaft_GetLimitSpeed(self)

    def SetUseSleeping(self, ms):
        r"""SetUseSleeping(ChShaft self, bool ms)"""
        return _core.ChShaft_SetUseSleeping(self, ms)

    def GetUseSleeping(self):
        r"""GetUseSleeping(ChShaft self) -> bool"""
        return _core.ChShaft_GetUseSleeping(self)

    def SetSleeping(self, ms):
        r"""SetSleeping(ChShaft self, bool ms)"""
        return _core.ChShaft_SetSleeping(self, ms)

    def GetSleeping(self):
        r"""GetSleeping(ChShaft self) -> bool"""
        return _core.ChShaft_GetSleeping(self)

    def TrySleeping(self):
        r"""TrySleeping(ChShaft self) -> bool"""
        return _core.ChShaft_TrySleeping(self)

    def IsActive(self):
        r"""IsActive(ChShaft self) -> bool"""
        return _core.ChShaft_IsActive(self)

    def SetId(self, identifier):
        r"""SetId(ChShaft self, unsigned int identifier)"""
        return _core.ChShaft_SetId(self, identifier)

    def GetId(self):
        r"""GetId(ChShaft self) -> unsigned int"""
        return _core.ChShaft_GetId(self)

    def GetDOF(self):
        r"""GetDOF(ChShaft self) -> int"""
        return _core.ChShaft_GetDOF(self)

    def Variables(self):
        r"""Variables(ChShaft self) -> ChVariablesShaft &"""
        return _core.ChShaft_Variables(self)

    def IntStateGather(self, off_x, x, off_v, v, T):
        r"""IntStateGather(ChShaft self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double & T)"""
        return _core.ChShaft_IntStateGather(self, off_x, x, off_v, v, T)

    def IntStateScatter(self, off_x, x, off_v, v, T):
        r"""IntStateScatter(ChShaft self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double const T)"""
        return _core.ChShaft_IntStateScatter(self, off_x, x, off_v, v, T)

    def IntStateGatherAcceleration(self, off_a, a):
        r"""IntStateGatherAcceleration(ChShaft self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChShaft_IntStateGatherAcceleration(self, off_a, a)

    def IntStateScatterAcceleration(self, off_a, a):
        r"""IntStateScatterAcceleration(ChShaft self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChShaft_IntStateScatterAcceleration(self, off_a, a)

    def IntLoadResidual_F(self, off, R, c):
        r"""IntLoadResidual_F(ChShaft self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _core.ChShaft_IntLoadResidual_F(self, off, R, c)

    def IntLoadResidual_Mv(self, off, R, w, c):
        r"""IntLoadResidual_Mv(ChShaft self, unsigned int const off, ChVectorDynamicD R, ChVectorDynamicD w, double const c)"""
        return _core.ChShaft_IntLoadResidual_Mv(self, off, R, w, c)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChShaft self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _core.ChShaft_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChShaft self, unsigned int const off_v, ChStateDelta v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaft_IntFromDescriptor(self, off_v, v, off_L, L)

    def VariablesFbReset(self):
        r"""VariablesFbReset(ChShaft self)"""
        return _core.ChShaft_VariablesFbReset(self)

    def VariablesFbLoadForces(self, factor=1):
        r"""VariablesFbLoadForces(ChShaft self, double factor=1)"""
        return _core.ChShaft_VariablesFbLoadForces(self, factor)

    def VariablesQbLoadSpeed(self):
        r"""VariablesQbLoadSpeed(ChShaft self)"""
        return _core.ChShaft_VariablesQbLoadSpeed(self)

    def VariablesFbIncrementMq(self):
        r"""VariablesFbIncrementMq(ChShaft self)"""
        return _core.ChShaft_VariablesFbIncrementMq(self)

    def VariablesQbSetSpeed(self, step=0):
        r"""VariablesQbSetSpeed(ChShaft self, double step=0)"""
        return _core.ChShaft_VariablesQbSetSpeed(self, step)

    def VariablesQbIncrementPosition(self, step):
        r"""VariablesQbIncrementPosition(ChShaft self, double step)"""
        return _core.ChShaft_VariablesQbIncrementPosition(self, step)

    def InjectVariables(self, mdescriptor):
        r"""InjectVariables(ChShaft self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChShaft_InjectVariables(self, mdescriptor)

    def LoadableGet_ndof_x(self):
        r"""LoadableGet_ndof_x(ChShaft self) -> int"""
        return _core.ChShaft_LoadableGet_ndof_x(self)

    def LoadableGet_ndof_w(self):
        r"""LoadableGet_ndof_w(ChShaft self) -> int"""
        return _core.ChShaft_LoadableGet_ndof_w(self)

    def LoadableGetStateBlock_x(self, block_offset, mD):
        r"""LoadableGetStateBlock_x(ChShaft self, int block_offset, ChState mD)"""
        return _core.ChShaft_LoadableGetStateBlock_x(self, block_offset, mD)

    def LoadableGetStateBlock_w(self, block_offset, mD):
        r"""LoadableGetStateBlock_w(ChShaft self, int block_offset, ChStateDelta mD)"""
        return _core.ChShaft_LoadableGetStateBlock_w(self, block_offset, mD)

    def LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""LoadableStateIncrement(ChShaft self, unsigned int const off_x, ChState x_new, ChState x, unsigned int const off_v, ChStateDelta Dv)"""
        return _core.ChShaft_LoadableStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def Get_field_ncoords(self):
        r"""Get_field_ncoords(ChShaft self) -> int"""
        return _core.ChShaft_Get_field_ncoords(self)

    def GetSubBlocks(self):
        r"""GetSubBlocks(ChShaft self) -> int"""
        return _core.ChShaft_GetSubBlocks(self)

    def GetSubBlockOffset(self, nblock):
        r"""GetSubBlockOffset(ChShaft self, int nblock) -> unsigned int"""
        return _core.ChShaft_GetSubBlockOffset(self, nblock)

    def GetSubBlockSize(self, nblock):
        r"""GetSubBlockSize(ChShaft self, int nblock) -> unsigned int"""
        return _core.ChShaft_GetSubBlockSize(self, nblock)

    def LoadableGetVariables(self, mvars):
        r"""LoadableGetVariables(ChShaft self, std::vector< ChVariables *,std::allocator< ChVariables * > > & mvars)"""
        return _core.ChShaft_LoadableGetVariables(self, mvars)

    def SetNoSpeedNoAcceleration(self):
        r"""SetNoSpeedNoAcceleration(ChShaft self)"""
        return _core.ChShaft_SetNoSpeedNoAcceleration(self)

    def SetAppliedTorque(self, mtorque):
        r"""SetAppliedTorque(ChShaft self, double mtorque)"""
        return _core.ChShaft_SetAppliedTorque(self, mtorque)

    def GetAppliedTorque(self):
        r"""GetAppliedTorque(ChShaft self) -> double"""
        return _core.ChShaft_GetAppliedTorque(self)

    def SetPos(self, mp):
        r"""SetPos(ChShaft self, double mp)"""
        return _core.ChShaft_SetPos(self, mp)

    def GetPos(self):
        r"""GetPos(ChShaft self) -> double"""
        return _core.ChShaft_GetPos(self)

    def SetPos_dt(self, mp):
        r"""SetPos_dt(ChShaft self, double mp)"""
        return _core.ChShaft_SetPos_dt(self, mp)

    def GetPos_dt(self):
        r"""GetPos_dt(ChShaft self) -> double"""
        return _core.ChShaft_GetPos_dt(self)

    def SetPos_dtdt(self, mp):
        r"""SetPos_dtdt(ChShaft self, double mp)"""
        return _core.ChShaft_SetPos_dtdt(self, mp)

    def GetPos_dtdt(self):
        r"""GetPos_dtdt(ChShaft self) -> double"""
        return _core.ChShaft_GetPos_dtdt(self)

    def SetInertia(self, newJ):
        r"""SetInertia(ChShaft self, double newJ)"""
        return _core.ChShaft_SetInertia(self, newJ)

    def GetInertia(self):
        r"""GetInertia(ChShaft self) -> double"""
        return _core.ChShaft_GetInertia(self)

    def SetMaxSpeed(self, m_max_speed):
        r"""SetMaxSpeed(ChShaft self, float m_max_speed)"""
        return _core.ChShaft_SetMaxSpeed(self, m_max_speed)

    def GetMaxSpeed(self):
        r"""GetMaxSpeed(ChShaft self) -> float"""
        return _core.ChShaft_GetMaxSpeed(self)

    def ClampSpeed(self):
        r"""ClampSpeed(ChShaft self)"""
        return _core.ChShaft_ClampSpeed(self)

    def SetSleepTime(self, m_t):
        r"""SetSleepTime(ChShaft self, float m_t)"""
        return _core.ChShaft_SetSleepTime(self, m_t)

    def GetSleepTime(self):
        r"""GetSleepTime(ChShaft self) -> float"""
        return _core.ChShaft_GetSleepTime(self)

    def SetSleepMinSpeed(self, m_t):
        r"""SetSleepMinSpeed(ChShaft self, float m_t)"""
        return _core.ChShaft_SetSleepMinSpeed(self, m_t)

    def GetSleepMinSpeed(self):
        r"""GetSleepMinSpeed(ChShaft self) -> float"""
        return _core.ChShaft_GetSleepMinSpeed(self)

    def SetSleepMinWvel(self, m_t):
        r"""SetSleepMinWvel(ChShaft self, float m_t)"""
        return _core.ChShaft_SetSleepMinWvel(self, m_t)

    def GetSleepMinWvel(self):
        r"""GetSleepMinWvel(ChShaft self) -> float"""
        return _core.ChShaft_GetSleepMinWvel(self)

    def Update(self, mytime, update_assets=True):
        r"""Update(ChShaft self, double mytime, bool update_assets=True)"""
        return _core.ChShaft_Update(self, mytime, update_assets)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChShaft self, ChArchiveOut & marchive)"""
        return _core.ChShaft_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChShaft self, chrono::ChArchiveIn & marchive)"""
        return _core.ChShaft_ArchiveIN(self, marchive)

# Register ChShaft in _core:
_core.ChShaft_swigregister(ChShaft)

class ChShaftsBody(ChPhysicsItem):
    r"""Proxy of C++ chrono::ChShaftsBody class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChShaftsBody self) -> ChShaftsBody
        __init__(ChShaftsBody self, ChShaftsBody other) -> ChShaftsBody
        """
        _core.ChShaftsBody_swiginit(self, _core.new_ChShaftsBody(*args))
    __swig_destroy__ = _core.delete_ChShaftsBody

    def Clone(self):
        r"""Clone(ChShaftsBody self) -> ChShaftsBody"""
        return _core.ChShaftsBody_Clone(self)

    def GetNumCoords(self):
        r"""GetNumCoords(ChShaftsBody self) -> int"""
        return _core.ChShaftsBody_GetNumCoords(self)

    def GetDOC_c(self):
        r"""GetDOC_c(ChShaftsBody self) -> int"""
        return _core.ChShaftsBody_GetDOC_c(self)

    def IntStateGatherReactions(self, off_L, L):
        r"""IntStateGatherReactions(ChShaftsBody self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsBody_IntStateGatherReactions(self, off_L, L)

    def IntStateScatterReactions(self, off_L, L):
        r"""IntStateScatterReactions(ChShaftsBody self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsBody_IntStateScatterReactions(self, off_L, L)

    def IntLoadResidual_CqL(self, off_L, R, L, c):
        r"""IntLoadResidual_CqL(ChShaftsBody self, unsigned int const off_L, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _core.ChShaftsBody_IntLoadResidual_CqL(self, off_L, R, L, c)

    def IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp):
        r"""IntLoadConstraint_C(ChShaftsBody self, unsigned int const off, ChVectorDynamicD Qc, double const c, bool do_clamp, double recovery_clamp)"""
        return _core.ChShaftsBody_IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp)

    def IntLoadConstraint_Ct(self, off, Qc, c):
        r"""IntLoadConstraint_Ct(ChShaftsBody self, unsigned int const off, ChVectorDynamicD Qc, double const c)"""
        return _core.ChShaftsBody_IntLoadConstraint_Ct(self, off, Qc, c)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChShaftsBody self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _core.ChShaftsBody_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChShaftsBody self, unsigned int const off_v, ChStateDelta v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsBody_IntFromDescriptor(self, off_v, v, off_L, L)

    def InjectConstraints(self, mdescriptor):
        r"""InjectConstraints(ChShaftsBody self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChShaftsBody_InjectConstraints(self, mdescriptor)

    def ConstraintsBiReset(self):
        r"""ConstraintsBiReset(ChShaftsBody self)"""
        return _core.ChShaftsBody_ConstraintsBiReset(self)

    def ConstraintsBiLoad_C(self, factor=1, recovery_clamp=0.1, do_clamp=False):
        r"""ConstraintsBiLoad_C(ChShaftsBody self, double factor=1, double recovery_clamp=0.1, bool do_clamp=False)"""
        return _core.ChShaftsBody_ConstraintsBiLoad_C(self, factor, recovery_clamp, do_clamp)

    def ConstraintsBiLoad_Ct(self, factor=1):
        r"""ConstraintsBiLoad_Ct(ChShaftsBody self, double factor=1)"""
        return _core.ChShaftsBody_ConstraintsBiLoad_Ct(self, factor)

    def ConstraintsLoadJacobians(self):
        r"""ConstraintsLoadJacobians(ChShaftsBody self)"""
        return _core.ChShaftsBody_ConstraintsLoadJacobians(self)

    def ConstraintsFetch_react(self, factor=1):
        r"""ConstraintsFetch_react(ChShaftsBody self, double factor=1)"""
        return _core.ChShaftsBody_ConstraintsFetch_react(self, factor)

    def Initialize(self, mshaft, mbody, mdir):
        r"""Initialize(ChShaftsBody self, std::shared_ptr< chrono::ChShaft > mshaft, std::shared_ptr< chrono::ChBodyFrame > mbody, ChVectorD mdir) -> bool"""
        return _core.ChShaftsBody_Initialize(self, mshaft, mbody, mdir)

    def GetShaft(self):
        r"""GetShaft(ChShaftsBody self) -> ChShaft"""
        return _core.ChShaftsBody_GetShaft(self)

    def GetBody(self):
        r"""GetBody(ChShaftsBody self) -> ChBodyFrame"""
        return _core.ChShaftsBody_GetBody(self)

    def SetShaftDirection(self, md):
        r"""SetShaftDirection(ChShaftsBody self, ChVectorD md)"""
        return _core.ChShaftsBody_SetShaftDirection(self, md)

    def GetShaftDirection(self):
        r"""GetShaftDirection(ChShaftsBody self) -> ChVectorD"""
        return _core.ChShaftsBody_GetShaftDirection(self)

    def GetTorqueReactionOnShaft(self):
        r"""GetTorqueReactionOnShaft(ChShaftsBody self) -> double"""
        return _core.ChShaftsBody_GetTorqueReactionOnShaft(self)

    def GetTorqueReactionOnBody(self):
        r"""GetTorqueReactionOnBody(ChShaftsBody self) -> ChVectorD"""
        return _core.ChShaftsBody_GetTorqueReactionOnBody(self)

    def Update(self, mytime, update_assets=True):
        r"""Update(ChShaftsBody self, double mytime, bool update_assets=True)"""
        return _core.ChShaftsBody_Update(self, mytime, update_assets)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChShaftsBody self, ChArchiveOut & marchive)"""
        return _core.ChShaftsBody_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChShaftsBody self, chrono::ChArchiveIn & marchive)"""
        return _core.ChShaftsBody_ArchiveIN(self, marchive)

# Register ChShaftsBody in _core:
_core.ChShaftsBody_swigregister(ChShaftsBody)

class ChShaftsBodyTranslation(ChPhysicsItem):
    r"""Proxy of C++ chrono::ChShaftsBodyTranslation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChShaftsBodyTranslation self) -> ChShaftsBodyTranslation
        __init__(ChShaftsBodyTranslation self, ChShaftsBodyTranslation other) -> ChShaftsBodyTranslation
        """
        _core.ChShaftsBodyTranslation_swiginit(self, _core.new_ChShaftsBodyTranslation(*args))
    __swig_destroy__ = _core.delete_ChShaftsBodyTranslation

    def Clone(self):
        r"""Clone(ChShaftsBodyTranslation self) -> ChShaftsBodyTranslation"""
        return _core.ChShaftsBodyTranslation_Clone(self)

    def GetNumCoords(self):
        r"""GetNumCoords(ChShaftsBodyTranslation self) -> int"""
        return _core.ChShaftsBodyTranslation_GetNumCoords(self)

    def GetDOC_c(self):
        r"""GetDOC_c(ChShaftsBodyTranslation self) -> int"""
        return _core.ChShaftsBodyTranslation_GetDOC_c(self)

    def IntStateGatherReactions(self, off_L, L):
        r"""IntStateGatherReactions(ChShaftsBodyTranslation self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsBodyTranslation_IntStateGatherReactions(self, off_L, L)

    def IntStateScatterReactions(self, off_L, L):
        r"""IntStateScatterReactions(ChShaftsBodyTranslation self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsBodyTranslation_IntStateScatterReactions(self, off_L, L)

    def IntLoadResidual_CqL(self, off_L, R, L, c):
        r"""IntLoadResidual_CqL(ChShaftsBodyTranslation self, unsigned int const off_L, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _core.ChShaftsBodyTranslation_IntLoadResidual_CqL(self, off_L, R, L, c)

    def IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp):
        r"""IntLoadConstraint_C(ChShaftsBodyTranslation self, unsigned int const off, ChVectorDynamicD Qc, double const c, bool do_clamp, double recovery_clamp)"""
        return _core.ChShaftsBodyTranslation_IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp)

    def IntLoadConstraint_Ct(self, off, Qc, c):
        r"""IntLoadConstraint_Ct(ChShaftsBodyTranslation self, unsigned int const off, ChVectorDynamicD Qc, double const c)"""
        return _core.ChShaftsBodyTranslation_IntLoadConstraint_Ct(self, off, Qc, c)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChShaftsBodyTranslation self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _core.ChShaftsBodyTranslation_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChShaftsBodyTranslation self, unsigned int const off_v, ChStateDelta v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsBodyTranslation_IntFromDescriptor(self, off_v, v, off_L, L)

    def InjectConstraints(self, mdescriptor):
        r"""InjectConstraints(ChShaftsBodyTranslation self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChShaftsBodyTranslation_InjectConstraints(self, mdescriptor)

    def ConstraintsBiReset(self):
        r"""ConstraintsBiReset(ChShaftsBodyTranslation self)"""
        return _core.ChShaftsBodyTranslation_ConstraintsBiReset(self)

    def ConstraintsBiLoad_C(self, factor=1, recovery_clamp=0.1, do_clamp=False):
        r"""ConstraintsBiLoad_C(ChShaftsBodyTranslation self, double factor=1, double recovery_clamp=0.1, bool do_clamp=False)"""
        return _core.ChShaftsBodyTranslation_ConstraintsBiLoad_C(self, factor, recovery_clamp, do_clamp)

    def ConstraintsBiLoad_Ct(self, factor=1):
        r"""ConstraintsBiLoad_Ct(ChShaftsBodyTranslation self, double factor=1)"""
        return _core.ChShaftsBodyTranslation_ConstraintsBiLoad_Ct(self, factor)

    def ConstraintsLoadJacobians(self):
        r"""ConstraintsLoadJacobians(ChShaftsBodyTranslation self)"""
        return _core.ChShaftsBodyTranslation_ConstraintsLoadJacobians(self)

    def ConstraintsFetch_react(self, factor=1):
        r"""ConstraintsFetch_react(ChShaftsBodyTranslation self, double factor=1)"""
        return _core.ChShaftsBodyTranslation_ConstraintsFetch_react(self, factor)

    def Initialize(self, mshaft, mbody, mdir, mpos):
        r"""Initialize(ChShaftsBodyTranslation self, std::shared_ptr< chrono::ChShaft > mshaft, std::shared_ptr< chrono::ChBodyFrame > mbody, ChVectorD mdir, ChVectorD mpos) -> bool"""
        return _core.ChShaftsBodyTranslation_Initialize(self, mshaft, mbody, mdir, mpos)

    def GetShaft(self):
        r"""GetShaft(ChShaftsBodyTranslation self) -> ChShaft"""
        return _core.ChShaftsBodyTranslation_GetShaft(self)

    def GetBody(self):
        r"""GetBody(ChShaftsBodyTranslation self) -> ChBodyFrame"""
        return _core.ChShaftsBodyTranslation_GetBody(self)

    def SetShaftDirection(self, md):
        r"""SetShaftDirection(ChShaftsBodyTranslation self, ChVectorD md)"""
        return _core.ChShaftsBodyTranslation_SetShaftDirection(self, md)

    def GetShaftDirection(self):
        r"""GetShaftDirection(ChShaftsBodyTranslation self) -> ChVectorD"""
        return _core.ChShaftsBodyTranslation_GetShaftDirection(self)

    def SetShaftPos(self, md):
        r"""SetShaftPos(ChShaftsBodyTranslation self, ChVectorD md)"""
        return _core.ChShaftsBodyTranslation_SetShaftPos(self, md)

    def GetShaftPos(self):
        r"""GetShaftPos(ChShaftsBodyTranslation self) -> ChVectorD"""
        return _core.ChShaftsBodyTranslation_GetShaftPos(self)

    def GetForceReactionOnShaft(self):
        r"""GetForceReactionOnShaft(ChShaftsBodyTranslation self) -> double"""
        return _core.ChShaftsBodyTranslation_GetForceReactionOnShaft(self)

    def GetForceReactionOnBody(self):
        r"""GetForceReactionOnBody(ChShaftsBodyTranslation self) -> ChVectorD"""
        return _core.ChShaftsBodyTranslation_GetForceReactionOnBody(self)

    def Update(self, mytime, update_assets=True):
        r"""Update(ChShaftsBodyTranslation self, double mytime, bool update_assets=True)"""
        return _core.ChShaftsBodyTranslation_Update(self, mytime, update_assets)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChShaftsBodyTranslation self, ChArchiveOut & marchive)"""
        return _core.ChShaftsBodyTranslation_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChShaftsBodyTranslation self, chrono::ChArchiveIn & marchive)"""
        return _core.ChShaftsBodyTranslation_ArchiveIN(self, marchive)

# Register ChShaftsBodyTranslation in _core:
_core.ChShaftsBodyTranslation_swigregister(ChShaftsBodyTranslation)

class ChShaftsCouple(ChPhysicsItem):
    r"""Proxy of C++ chrono::ChShaftsCouple class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChShaftsCouple self) -> ChShaftsCouple
        __init__(ChShaftsCouple self, ChShaftsCouple other) -> ChShaftsCouple
        """
        _core.ChShaftsCouple_swiginit(self, _core.new_ChShaftsCouple(*args))
    __swig_destroy__ = _core.delete_ChShaftsCouple

    def Clone(self):
        r"""Clone(ChShaftsCouple self) -> ChShaftsCouple"""
        return _core.ChShaftsCouple_Clone(self)

    def GetNumCoords(self):
        r"""GetNumCoords(ChShaftsCouple self) -> int"""
        return _core.ChShaftsCouple_GetNumCoords(self)

    def Initialize(self, mshaft1, mshaft2):
        r"""Initialize(ChShaftsCouple self, std::shared_ptr< chrono::ChShaft > mshaft1, std::shared_ptr< chrono::ChShaft > mshaft2) -> bool"""
        return _core.ChShaftsCouple_Initialize(self, mshaft1, mshaft2)

    def GetShaft1(self):
        r"""GetShaft1(ChShaftsCouple self) -> ChShaft"""
        return _core.ChShaftsCouple_GetShaft1(self)

    def GetShaft2(self):
        r"""GetShaft2(ChShaftsCouple self) -> ChShaft"""
        return _core.ChShaftsCouple_GetShaft2(self)

    def GetTorqueReactionOn1(self):
        r"""GetTorqueReactionOn1(ChShaftsCouple self) -> double"""
        return _core.ChShaftsCouple_GetTorqueReactionOn1(self)

    def GetTorqueReactionOn2(self):
        r"""GetTorqueReactionOn2(ChShaftsCouple self) -> double"""
        return _core.ChShaftsCouple_GetTorqueReactionOn2(self)

    def GetRelativeRotation(self):
        r"""GetRelativeRotation(ChShaftsCouple self) -> double"""
        return _core.ChShaftsCouple_GetRelativeRotation(self)

    def GetRelativeRotation_dt(self):
        r"""GetRelativeRotation_dt(ChShaftsCouple self) -> double"""
        return _core.ChShaftsCouple_GetRelativeRotation_dt(self)

    def GetRelativeRotation_dtdt(self):
        r"""GetRelativeRotation_dtdt(ChShaftsCouple self) -> double"""
        return _core.ChShaftsCouple_GetRelativeRotation_dtdt(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChShaftsCouple self, ChArchiveOut & marchive)"""
        return _core.ChShaftsCouple_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChShaftsCouple self, chrono::ChArchiveIn & marchive)"""
        return _core.ChShaftsCouple_ArchiveIN(self, marchive)

# Register ChShaftsCouple in _core:
_core.ChShaftsCouple_swigregister(ChShaftsCouple)

class ChShaftsTorqueBase(ChShaftsCouple):
    r"""Proxy of C++ chrono::ChShaftsTorqueBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChShaftsTorqueBase

    def GetDOC_c(self):
        r"""GetDOC_c(ChShaftsTorqueBase self) -> int"""
        return _core.ChShaftsTorqueBase_GetDOC_c(self)

    def IntLoadResidual_F(self, off, R, c):
        r"""IntLoadResidual_F(ChShaftsTorqueBase self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _core.ChShaftsTorqueBase_IntLoadResidual_F(self, off, R, c)

    def VariablesFbLoadForces(self, factor=1):
        r"""VariablesFbLoadForces(ChShaftsTorqueBase self, double factor=1)"""
        return _core.ChShaftsTorqueBase_VariablesFbLoadForces(self, factor)

    def GetTorqueReactionOn1(self):
        r"""GetTorqueReactionOn1(ChShaftsTorqueBase self) -> double"""
        return _core.ChShaftsTorqueBase_GetTorqueReactionOn1(self)

    def GetTorqueReactionOn2(self):
        r"""GetTorqueReactionOn2(ChShaftsTorqueBase self) -> double"""
        return _core.ChShaftsTorqueBase_GetTorqueReactionOn2(self)

    def ComputeTorque(self):
        r"""ComputeTorque(ChShaftsTorqueBase self) -> double"""
        return _core.ChShaftsTorqueBase_ComputeTorque(self)

    def Update(self, mytime, update_assets=True):
        r"""Update(ChShaftsTorqueBase self, double mytime, bool update_assets=True)"""
        return _core.ChShaftsTorqueBase_Update(self, mytime, update_assets)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChShaftsTorqueBase self, ChArchiveOut & marchive)"""
        return _core.ChShaftsTorqueBase_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChShaftsTorqueBase self, chrono::ChArchiveIn & marchive)"""
        return _core.ChShaftsTorqueBase_ArchiveIN(self, marchive)

# Register ChShaftsTorqueBase in _core:
_core.ChShaftsTorqueBase_swigregister(ChShaftsTorqueBase)

class ChShaftsPlanetary(ChPhysicsItem):
    r"""Proxy of C++ chrono::ChShaftsPlanetary class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChShaftsPlanetary self) -> ChShaftsPlanetary
        __init__(ChShaftsPlanetary self, ChShaftsPlanetary other) -> ChShaftsPlanetary
        """
        _core.ChShaftsPlanetary_swiginit(self, _core.new_ChShaftsPlanetary(*args))
    __swig_destroy__ = _core.delete_ChShaftsPlanetary

    def Clone(self):
        r"""Clone(ChShaftsPlanetary self) -> ChShaftsPlanetary"""
        return _core.ChShaftsPlanetary_Clone(self)

    def GetNumCoords(self):
        r"""GetNumCoords(ChShaftsPlanetary self) -> int"""
        return _core.ChShaftsPlanetary_GetNumCoords(self)

    def GetDOC_c(self):
        r"""GetDOC_c(ChShaftsPlanetary self) -> int"""
        return _core.ChShaftsPlanetary_GetDOC_c(self)

    def IntStateGatherReactions(self, off_L, L):
        r"""IntStateGatherReactions(ChShaftsPlanetary self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsPlanetary_IntStateGatherReactions(self, off_L, L)

    def IntStateScatterReactions(self, off_L, L):
        r"""IntStateScatterReactions(ChShaftsPlanetary self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsPlanetary_IntStateScatterReactions(self, off_L, L)

    def IntLoadResidual_CqL(self, off_L, R, L, c):
        r"""IntLoadResidual_CqL(ChShaftsPlanetary self, unsigned int const off_L, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _core.ChShaftsPlanetary_IntLoadResidual_CqL(self, off_L, R, L, c)

    def IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp):
        r"""IntLoadConstraint_C(ChShaftsPlanetary self, unsigned int const off, ChVectorDynamicD Qc, double const c, bool do_clamp, double recovery_clamp)"""
        return _core.ChShaftsPlanetary_IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChShaftsPlanetary self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _core.ChShaftsPlanetary_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChShaftsPlanetary self, unsigned int const off_v, ChStateDelta v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsPlanetary_IntFromDescriptor(self, off_v, v, off_L, L)

    def InjectConstraints(self, mdescriptor):
        r"""InjectConstraints(ChShaftsPlanetary self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChShaftsPlanetary_InjectConstraints(self, mdescriptor)

    def ConstraintsBiReset(self):
        r"""ConstraintsBiReset(ChShaftsPlanetary self)"""
        return _core.ChShaftsPlanetary_ConstraintsBiReset(self)

    def ConstraintsBiLoad_C(self, factor=1, recovery_clamp=0.1, do_clamp=False):
        r"""ConstraintsBiLoad_C(ChShaftsPlanetary self, double factor=1, double recovery_clamp=0.1, bool do_clamp=False)"""
        return _core.ChShaftsPlanetary_ConstraintsBiLoad_C(self, factor, recovery_clamp, do_clamp)

    def ConstraintsBiLoad_Ct(self, factor=1):
        r"""ConstraintsBiLoad_Ct(ChShaftsPlanetary self, double factor=1)"""
        return _core.ChShaftsPlanetary_ConstraintsBiLoad_Ct(self, factor)

    def ConstraintsLoadJacobians(self):
        r"""ConstraintsLoadJacobians(ChShaftsPlanetary self)"""
        return _core.ChShaftsPlanetary_ConstraintsLoadJacobians(self)

    def ConstraintsFetch_react(self, factor=1):
        r"""ConstraintsFetch_react(ChShaftsPlanetary self, double factor=1)"""
        return _core.ChShaftsPlanetary_ConstraintsFetch_react(self, factor)

    def Initialize(self, mshaft1, mshaft2, mshaft3):
        r"""Initialize(ChShaftsPlanetary self, std::shared_ptr< chrono::ChShaft > mshaft1, std::shared_ptr< chrono::ChShaft > mshaft2, std::shared_ptr< chrono::ChShaft > mshaft3) -> bool"""
        return _core.ChShaftsPlanetary_Initialize(self, mshaft1, mshaft2, mshaft3)

    def GetShaft1(self):
        r"""GetShaft1(ChShaftsPlanetary self) -> ChShaft"""
        return _core.ChShaftsPlanetary_GetShaft1(self)

    def GetShaft2(self):
        r"""GetShaft2(ChShaftsPlanetary self) -> ChShaft"""
        return _core.ChShaftsPlanetary_GetShaft2(self)

    def GetShaft3(self):
        r"""GetShaft3(ChShaftsPlanetary self) -> ChShaft"""
        return _core.ChShaftsPlanetary_GetShaft3(self)

    def GetSpeedShaft1(self):
        r"""GetSpeedShaft1(ChShaftsPlanetary self) -> double"""
        return _core.ChShaftsPlanetary_GetSpeedShaft1(self)

    def GetSpeedShaft2(self):
        r"""GetSpeedShaft2(ChShaftsPlanetary self) -> double"""
        return _core.ChShaftsPlanetary_GetSpeedShaft2(self)

    def GetSpeedShaft3(self):
        r"""GetSpeedShaft3(ChShaftsPlanetary self) -> double"""
        return _core.ChShaftsPlanetary_GetSpeedShaft3(self)

    def SetTransmissionRatios(self, mr1, mr2, mr3):
        r"""SetTransmissionRatios(ChShaftsPlanetary self, double mr1, double mr2, double mr3)"""
        return _core.ChShaftsPlanetary_SetTransmissionRatios(self, mr1, mr2, mr3)

    def SetTransmissionRatioOrdinary(self, t0):
        r"""SetTransmissionRatioOrdinary(ChShaftsPlanetary self, double t0)"""
        return _core.ChShaftsPlanetary_SetTransmissionRatioOrdinary(self, t0)

    def GetTransmissionRatioOrdinary(self):
        r"""GetTransmissionRatioOrdinary(ChShaftsPlanetary self) -> double"""
        return _core.ChShaftsPlanetary_GetTransmissionRatioOrdinary(self)

    def GetTransmissionR1(self):
        r"""GetTransmissionR1(ChShaftsPlanetary self) -> double"""
        return _core.ChShaftsPlanetary_GetTransmissionR1(self)

    def GetTransmissionR2(self):
        r"""GetTransmissionR2(ChShaftsPlanetary self) -> double"""
        return _core.ChShaftsPlanetary_GetTransmissionR2(self)

    def GetTransmissionR3(self):
        r"""GetTransmissionR3(ChShaftsPlanetary self) -> double"""
        return _core.ChShaftsPlanetary_GetTransmissionR3(self)

    def SetAvoidPhaseDrift(self, mb):
        r"""SetAvoidPhaseDrift(ChShaftsPlanetary self, bool mb)"""
        return _core.ChShaftsPlanetary_SetAvoidPhaseDrift(self, mb)

    def GetAvoidPhaseDrift(self):
        r"""GetAvoidPhaseDrift(ChShaftsPlanetary self) -> bool"""
        return _core.ChShaftsPlanetary_GetAvoidPhaseDrift(self)

    def GetTorqueReactionOn1(self):
        r"""GetTorqueReactionOn1(ChShaftsPlanetary self) -> double"""
        return _core.ChShaftsPlanetary_GetTorqueReactionOn1(self)

    def GetTorqueReactionOn2(self):
        r"""GetTorqueReactionOn2(ChShaftsPlanetary self) -> double"""
        return _core.ChShaftsPlanetary_GetTorqueReactionOn2(self)

    def GetTorqueReactionOn3(self):
        r"""GetTorqueReactionOn3(ChShaftsPlanetary self) -> double"""
        return _core.ChShaftsPlanetary_GetTorqueReactionOn3(self)

    def Update(self, mytime, update_assets=True):
        r"""Update(ChShaftsPlanetary self, double mytime, bool update_assets=True)"""
        return _core.ChShaftsPlanetary_Update(self, mytime, update_assets)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChShaftsPlanetary self, ChArchiveOut & marchive)"""
        return _core.ChShaftsPlanetary_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChShaftsPlanetary self, chrono::ChArchiveIn & marchive)"""
        return _core.ChShaftsPlanetary_ArchiveIN(self, marchive)

# Register ChShaftsPlanetary in _core:
_core.ChShaftsPlanetary_swigregister(ChShaftsPlanetary)

class ChShaftsGear(ChShaftsCouple):
    r"""Proxy of C++ chrono::ChShaftsGear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChShaftsGear self) -> ChShaftsGear
        __init__(ChShaftsGear self, ChShaftsGear other) -> ChShaftsGear
        """
        _core.ChShaftsGear_swiginit(self, _core.new_ChShaftsGear(*args))
    __swig_destroy__ = _core.delete_ChShaftsGear

    def Clone(self):
        r"""Clone(ChShaftsGear self) -> ChShaftsGear"""
        return _core.ChShaftsGear_Clone(self)

    def GetDOC_c(self):
        r"""GetDOC_c(ChShaftsGear self) -> int"""
        return _core.ChShaftsGear_GetDOC_c(self)

    def IntStateGatherReactions(self, off_L, L):
        r"""IntStateGatherReactions(ChShaftsGear self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsGear_IntStateGatherReactions(self, off_L, L)

    def IntStateScatterReactions(self, off_L, L):
        r"""IntStateScatterReactions(ChShaftsGear self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsGear_IntStateScatterReactions(self, off_L, L)

    def IntLoadResidual_CqL(self, off_L, R, L, c):
        r"""IntLoadResidual_CqL(ChShaftsGear self, unsigned int const off_L, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _core.ChShaftsGear_IntLoadResidual_CqL(self, off_L, R, L, c)

    def IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp):
        r"""IntLoadConstraint_C(ChShaftsGear self, unsigned int const off, ChVectorDynamicD Qc, double const c, bool do_clamp, double recovery_clamp)"""
        return _core.ChShaftsGear_IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChShaftsGear self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _core.ChShaftsGear_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChShaftsGear self, unsigned int const off_v, ChStateDelta v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsGear_IntFromDescriptor(self, off_v, v, off_L, L)

    def InjectConstraints(self, mdescriptor):
        r"""InjectConstraints(ChShaftsGear self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChShaftsGear_InjectConstraints(self, mdescriptor)

    def ConstraintsBiReset(self):
        r"""ConstraintsBiReset(ChShaftsGear self)"""
        return _core.ChShaftsGear_ConstraintsBiReset(self)

    def ConstraintsBiLoad_C(self, factor=1, recovery_clamp=0.1, do_clamp=False):
        r"""ConstraintsBiLoad_C(ChShaftsGear self, double factor=1, double recovery_clamp=0.1, bool do_clamp=False)"""
        return _core.ChShaftsGear_ConstraintsBiLoad_C(self, factor, recovery_clamp, do_clamp)

    def ConstraintsLoadJacobians(self):
        r"""ConstraintsLoadJacobians(ChShaftsGear self)"""
        return _core.ChShaftsGear_ConstraintsLoadJacobians(self)

    def ConstraintsFetch_react(self, factor=1):
        r"""ConstraintsFetch_react(ChShaftsGear self, double factor=1)"""
        return _core.ChShaftsGear_ConstraintsFetch_react(self, factor)

    def Initialize(self, mshaft1, mshaft2):
        r"""Initialize(ChShaftsGear self, std::shared_ptr< chrono::ChShaft > mshaft1, std::shared_ptr< chrono::ChShaft > mshaft2) -> bool"""
        return _core.ChShaftsGear_Initialize(self, mshaft1, mshaft2)

    def SetTransmissionRatio(self, mt):
        r"""SetTransmissionRatio(ChShaftsGear self, double mt)"""
        return _core.ChShaftsGear_SetTransmissionRatio(self, mt)

    def GetTransmissionRatio(self):
        r"""GetTransmissionRatio(ChShaftsGear self) -> double"""
        return _core.ChShaftsGear_GetTransmissionRatio(self)

    def SetAvoidPhaseDrift(self, mb):
        r"""SetAvoidPhaseDrift(ChShaftsGear self, bool mb)"""
        return _core.ChShaftsGear_SetAvoidPhaseDrift(self, mb)

    def GetAvoidPhaseDrift(self):
        r"""GetAvoidPhaseDrift(ChShaftsGear self) -> bool"""
        return _core.ChShaftsGear_GetAvoidPhaseDrift(self)

    def GetTorqueReactionOn1(self):
        r"""GetTorqueReactionOn1(ChShaftsGear self) -> double"""
        return _core.ChShaftsGear_GetTorqueReactionOn1(self)

    def GetTorqueReactionOn2(self):
        r"""GetTorqueReactionOn2(ChShaftsGear self) -> double"""
        return _core.ChShaftsGear_GetTorqueReactionOn2(self)

    def GetConstraintViolation(self):
        r"""GetConstraintViolation(ChShaftsGear self) -> double"""
        return _core.ChShaftsGear_GetConstraintViolation(self)

    def Update(self, mytime, update_assets=True):
        r"""Update(ChShaftsGear self, double mytime, bool update_assets=True)"""
        return _core.ChShaftsGear_Update(self, mytime, update_assets)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChShaftsGear self, ChArchiveOut & marchive)"""
        return _core.ChShaftsGear_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChShaftsGear self, chrono::ChArchiveIn & marchive)"""
        return _core.ChShaftsGear_ArchiveIN(self, marchive)

# Register ChShaftsGear in _core:
_core.ChShaftsGear_swigregister(ChShaftsGear)

class ChShaftsMotorBase(ChShaftsCouple):
    r"""Proxy of C++ chrono::ChShaftsMotorBase class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_ChShaftsMotorBase

    def GetMotorRot(self):
        r"""GetMotorRot(ChShaftsMotorBase self) -> double"""
        return _core.ChShaftsMotorBase_GetMotorRot(self)

    def GetMotorRot_dt(self):
        r"""GetMotorRot_dt(ChShaftsMotorBase self) -> double"""
        return _core.ChShaftsMotorBase_GetMotorRot_dt(self)

    def GetMotorRot_dtdt(self):
        r"""GetMotorRot_dtdt(ChShaftsMotorBase self) -> double"""
        return _core.ChShaftsMotorBase_GetMotorRot_dtdt(self)

    def GetMotorRotTurns(self):
        r"""GetMotorRotTurns(ChShaftsMotorBase self) -> int"""
        return _core.ChShaftsMotorBase_GetMotorRotTurns(self)

    def GetMotorRotPeriodic(self):
        r"""GetMotorRotPeriodic(ChShaftsMotorBase self) -> double"""
        return _core.ChShaftsMotorBase_GetMotorRotPeriodic(self)

    def GetMotorTorque(self):
        r"""GetMotorTorque(ChShaftsMotorBase self) -> double"""
        return _core.ChShaftsMotorBase_GetMotorTorque(self)

    def GetTorqueReactionOn1(self):
        r"""GetTorqueReactionOn1(ChShaftsMotorBase self) -> double"""
        return _core.ChShaftsMotorBase_GetTorqueReactionOn1(self)

    def GetTorqueReactionOn2(self):
        r"""GetTorqueReactionOn2(ChShaftsMotorBase self) -> double"""
        return _core.ChShaftsMotorBase_GetTorqueReactionOn2(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChShaftsMotorBase self, ChArchiveOut & marchive)"""
        return _core.ChShaftsMotorBase_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChShaftsMotorBase self, chrono::ChArchiveIn & marchive)"""
        return _core.ChShaftsMotorBase_ArchiveIN(self, marchive)

# Register ChShaftsMotorBase in _core:
_core.ChShaftsMotorBase_swigregister(ChShaftsMotorBase)

class ChShaftsMotor(ChShaftsMotorBase):
    r"""Proxy of C++ chrono::ChShaftsMotor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChShaftsMotor self) -> ChShaftsMotor
        __init__(ChShaftsMotor self, ChShaftsMotor other) -> ChShaftsMotor
        """
        _core.ChShaftsMotor_swiginit(self, _core.new_ChShaftsMotor(*args))
    __swig_destroy__ = _core.delete_ChShaftsMotor

    def Clone(self):
        r"""Clone(ChShaftsMotor self) -> ChShaftsMotor"""
        return _core.ChShaftsMotor_Clone(self)

    def GetDOC_c(self):
        r"""GetDOC_c(ChShaftsMotor self) -> int"""
        return _core.ChShaftsMotor_GetDOC_c(self)

    def IntStateGatherReactions(self, off_L, L):
        r"""IntStateGatherReactions(ChShaftsMotor self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsMotor_IntStateGatherReactions(self, off_L, L)

    def IntStateScatterReactions(self, off_L, L):
        r"""IntStateScatterReactions(ChShaftsMotor self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsMotor_IntStateScatterReactions(self, off_L, L)

    def IntLoadResidual_F(self, off, R, c):
        r"""IntLoadResidual_F(ChShaftsMotor self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _core.ChShaftsMotor_IntLoadResidual_F(self, off, R, c)

    def IntLoadResidual_CqL(self, off_L, R, L, c):
        r"""IntLoadResidual_CqL(ChShaftsMotor self, unsigned int const off_L, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _core.ChShaftsMotor_IntLoadResidual_CqL(self, off_L, R, L, c)

    def IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp):
        r"""IntLoadConstraint_C(ChShaftsMotor self, unsigned int const off, ChVectorDynamicD Qc, double const c, bool do_clamp, double recovery_clamp)"""
        return _core.ChShaftsMotor_IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp)

    def IntLoadConstraint_Ct(self, off, Qc, c):
        r"""IntLoadConstraint_Ct(ChShaftsMotor self, unsigned int const off, ChVectorDynamicD Qc, double const c)"""
        return _core.ChShaftsMotor_IntLoadConstraint_Ct(self, off, Qc, c)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChShaftsMotor self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _core.ChShaftsMotor_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChShaftsMotor self, unsigned int const off_v, ChStateDelta v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsMotor_IntFromDescriptor(self, off_v, v, off_L, L)

    def InjectConstraints(self, mdescriptor):
        r"""InjectConstraints(ChShaftsMotor self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChShaftsMotor_InjectConstraints(self, mdescriptor)

    def ConstraintsBiReset(self):
        r"""ConstraintsBiReset(ChShaftsMotor self)"""
        return _core.ChShaftsMotor_ConstraintsBiReset(self)

    def ConstraintsBiLoad_C(self, factor=1, recovery_clamp=0.1, do_clamp=False):
        r"""ConstraintsBiLoad_C(ChShaftsMotor self, double factor=1, double recovery_clamp=0.1, bool do_clamp=False)"""
        return _core.ChShaftsMotor_ConstraintsBiLoad_C(self, factor, recovery_clamp, do_clamp)

    def ConstraintsBiLoad_Ct(self, factor=1):
        r"""ConstraintsBiLoad_Ct(ChShaftsMotor self, double factor=1)"""
        return _core.ChShaftsMotor_ConstraintsBiLoad_Ct(self, factor)

    def ConstraintsFbLoadForces(self, factor=1):
        r"""ConstraintsFbLoadForces(ChShaftsMotor self, double factor=1)"""
        return _core.ChShaftsMotor_ConstraintsFbLoadForces(self, factor)

    def ConstraintsLoadJacobians(self):
        r"""ConstraintsLoadJacobians(ChShaftsMotor self)"""
        return _core.ChShaftsMotor_ConstraintsLoadJacobians(self)

    def ConstraintsFetch_react(self, factor=1):
        r"""ConstraintsFetch_react(ChShaftsMotor self, double factor=1)"""
        return _core.ChShaftsMotor_ConstraintsFetch_react(self, factor)

    def Initialize(self, mshaft1, mshaft2):
        r"""Initialize(ChShaftsMotor self, std::shared_ptr< chrono::ChShaft > mshaft1, std::shared_ptr< chrono::ChShaft > mshaft2) -> bool"""
        return _core.ChShaftsMotor_Initialize(self, mshaft1, mshaft2)
    MOT_MODE_ROTATION = _core.ChShaftsMotor_MOT_MODE_ROTATION
    
    MOT_MODE_SPEED = _core.ChShaftsMotor_MOT_MODE_SPEED
    
    MOT_MODE_TORQUE = _core.ChShaftsMotor_MOT_MODE_TORQUE
    
    motor_mode = property(_core.ChShaftsMotor_motor_mode_get, _core.ChShaftsMotor_motor_mode_set, doc=r"""motor_mode : enum chrono::ChShaftsMotor::eCh_shaftsmotor_mode""")

    def SetMotorMode(self, mmode):
        r"""SetMotorMode(ChShaftsMotor self, chrono::ChShaftsMotor::eCh_shaftsmotor_mode mmode)"""
        return _core.ChShaftsMotor_SetMotorMode(self, mmode)

    def SetMotorTorque(self, mt):
        r"""SetMotorTorque(ChShaftsMotor self, double mt)"""
        return _core.ChShaftsMotor_SetMotorTorque(self, mt)

    def GetMotorTorque(self):
        r"""GetMotorTorque(ChShaftsMotor self) -> double"""
        return _core.ChShaftsMotor_GetMotorTorque(self)

    def SetMotorRot(self, mt):
        r"""SetMotorRot(ChShaftsMotor self, double mt)"""
        return _core.ChShaftsMotor_SetMotorRot(self, mt)

    def SetMotorRot_dt(self, mt):
        r"""SetMotorRot_dt(ChShaftsMotor self, double mt)"""
        return _core.ChShaftsMotor_SetMotorRot_dt(self, mt)

    def Update(self, mytime, update_assets=True):
        r"""Update(ChShaftsMotor self, double mytime, bool update_assets=True)"""
        return _core.ChShaftsMotor_Update(self, mytime, update_assets)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChShaftsMotor self, ChArchiveOut & marchive)"""
        return _core.ChShaftsMotor_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChShaftsMotor self, chrono::ChArchiveIn & marchive)"""
        return _core.ChShaftsMotor_ArchiveIN(self, marchive)

# Register ChShaftsMotor in _core:
_core.ChShaftsMotor_swigregister(ChShaftsMotor)

class ChShaftsClutch(ChShaftsCouple):
    r"""Proxy of C++ chrono::ChShaftsClutch class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChShaftsClutch self) -> ChShaftsClutch
        __init__(ChShaftsClutch self, ChShaftsClutch other) -> ChShaftsClutch
        """
        _core.ChShaftsClutch_swiginit(self, _core.new_ChShaftsClutch(*args))
    __swig_destroy__ = _core.delete_ChShaftsClutch

    def Clone(self):
        r"""Clone(ChShaftsClutch self) -> ChShaftsClutch"""
        return _core.ChShaftsClutch_Clone(self)

    def GetDOC_c(self):
        r"""GetDOC_c(ChShaftsClutch self) -> int"""
        return _core.ChShaftsClutch_GetDOC_c(self)

    def IntStateGatherReactions(self, off_L, L):
        r"""IntStateGatherReactions(ChShaftsClutch self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsClutch_IntStateGatherReactions(self, off_L, L)

    def IntStateScatterReactions(self, off_L, L):
        r"""IntStateScatterReactions(ChShaftsClutch self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsClutch_IntStateScatterReactions(self, off_L, L)

    def IntLoadResidual_CqL(self, off_L, R, L, c):
        r"""IntLoadResidual_CqL(ChShaftsClutch self, unsigned int const off_L, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _core.ChShaftsClutch_IntLoadResidual_CqL(self, off_L, R, L, c)

    def IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp):
        r"""IntLoadConstraint_C(ChShaftsClutch self, unsigned int const off, ChVectorDynamicD Qc, double const c, bool do_clamp, double recovery_clamp)"""
        return _core.ChShaftsClutch_IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp)

    def IntLoadConstraint_Ct(self, off, Qc, c):
        r"""IntLoadConstraint_Ct(ChShaftsClutch self, unsigned int const off, ChVectorDynamicD Qc, double const c)"""
        return _core.ChShaftsClutch_IntLoadConstraint_Ct(self, off, Qc, c)

    def IntLoadResidual_F(self, off, R, c):
        r"""IntLoadResidual_F(ChShaftsClutch self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _core.ChShaftsClutch_IntLoadResidual_F(self, off, R, c)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChShaftsClutch self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _core.ChShaftsClutch_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChShaftsClutch self, unsigned int const off_v, ChStateDelta v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsClutch_IntFromDescriptor(self, off_v, v, off_L, L)

    def InjectConstraints(self, mdescriptor):
        r"""InjectConstraints(ChShaftsClutch self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChShaftsClutch_InjectConstraints(self, mdescriptor)

    def ConstraintsBiReset(self):
        r"""ConstraintsBiReset(ChShaftsClutch self)"""
        return _core.ChShaftsClutch_ConstraintsBiReset(self)

    def ConstraintsBiLoad_C(self, factor=1, recovery_clamp=0.1, do_clamp=False):
        r"""ConstraintsBiLoad_C(ChShaftsClutch self, double factor=1, double recovery_clamp=0.1, bool do_clamp=False)"""
        return _core.ChShaftsClutch_ConstraintsBiLoad_C(self, factor, recovery_clamp, do_clamp)

    def ConstraintsBiLoad_Ct(self, factor=1):
        r"""ConstraintsBiLoad_Ct(ChShaftsClutch self, double factor=1)"""
        return _core.ChShaftsClutch_ConstraintsBiLoad_Ct(self, factor)

    def ConstraintsFbLoadForces(self, factor=1):
        r"""ConstraintsFbLoadForces(ChShaftsClutch self, double factor=1)"""
        return _core.ChShaftsClutch_ConstraintsFbLoadForces(self, factor)

    def ConstraintsLoadJacobians(self):
        r"""ConstraintsLoadJacobians(ChShaftsClutch self)"""
        return _core.ChShaftsClutch_ConstraintsLoadJacobians(self)

    def ConstraintsFetch_react(self, factor=1):
        r"""ConstraintsFetch_react(ChShaftsClutch self, double factor=1)"""
        return _core.ChShaftsClutch_ConstraintsFetch_react(self, factor)

    def Initialize(self, mshaft1, mshaft2):
        r"""Initialize(ChShaftsClutch self, std::shared_ptr< chrono::ChShaft > mshaft1, std::shared_ptr< chrono::ChShaft > mshaft2) -> bool"""
        return _core.ChShaftsClutch_Initialize(self, mshaft1, mshaft2)

    def SetTorqueLimit(self, *args):
        r"""
        SetTorqueLimit(ChShaftsClutch self, double ml, double mu)
        SetTorqueLimit(ChShaftsClutch self, double ml)
        """
        return _core.ChShaftsClutch_SetTorqueLimit(self, *args)

    def GetTorqueLimitF(self):
        r"""GetTorqueLimitF(ChShaftsClutch self) -> double"""
        return _core.ChShaftsClutch_GetTorqueLimitF(self)

    def GetTorqueLimitB(self):
        r"""GetTorqueLimitB(ChShaftsClutch self) -> double"""
        return _core.ChShaftsClutch_GetTorqueLimitB(self)

    def GetTorqueLimit(self):
        r"""GetTorqueLimit(ChShaftsClutch self) -> double"""
        return _core.ChShaftsClutch_GetTorqueLimit(self)

    def SetModulation(self, mm):
        r"""SetModulation(ChShaftsClutch self, double mm)"""
        return _core.ChShaftsClutch_SetModulation(self, mm)

    def GetModulation(self):
        r"""GetModulation(ChShaftsClutch self) -> double"""
        return _core.ChShaftsClutch_GetModulation(self)

    def GetSlippage(self):
        r"""GetSlippage(ChShaftsClutch self) -> double"""
        return _core.ChShaftsClutch_GetSlippage(self)

    def GetSlippage_dt(self):
        r"""GetSlippage_dt(ChShaftsClutch self) -> double"""
        return _core.ChShaftsClutch_GetSlippage_dt(self)

    def GetSlippage_dtdt(self):
        r"""GetSlippage_dtdt(ChShaftsClutch self) -> double"""
        return _core.ChShaftsClutch_GetSlippage_dtdt(self)

    def GetTorqueReactionOn1(self):
        r"""GetTorqueReactionOn1(ChShaftsClutch self) -> double"""
        return _core.ChShaftsClutch_GetTorqueReactionOn1(self)

    def GetTorqueReactionOn2(self):
        r"""GetTorqueReactionOn2(ChShaftsClutch self) -> double"""
        return _core.ChShaftsClutch_GetTorqueReactionOn2(self)

    def Update(self, mytime, update_assets=True):
        r"""Update(ChShaftsClutch self, double mytime, bool update_assets=True)"""
        return _core.ChShaftsClutch_Update(self, mytime, update_assets)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChShaftsClutch self, ChArchiveOut & marchive)"""
        return _core.ChShaftsClutch_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChShaftsClutch self, chrono::ChArchiveIn & marchive)"""
        return _core.ChShaftsClutch_ArchiveIN(self, marchive)

# Register ChShaftsClutch in _core:
_core.ChShaftsClutch_swigregister(ChShaftsClutch)

class ChShaftsThermalEngine(ChShaftsTorqueBase):
    r"""Proxy of C++ chrono::ChShaftsThermalEngine class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChShaftsThermalEngine self) -> ChShaftsThermalEngine
        __init__(ChShaftsThermalEngine self, ChShaftsThermalEngine other) -> ChShaftsThermalEngine
        """
        _core.ChShaftsThermalEngine_swiginit(self, _core.new_ChShaftsThermalEngine(*args))
    __swig_destroy__ = _core.delete_ChShaftsThermalEngine

    def Clone(self):
        r"""Clone(ChShaftsThermalEngine self) -> ChShaftsThermalEngine"""
        return _core.ChShaftsThermalEngine_Clone(self)

    def SetTorqueCurve(self, mf):
        r"""SetTorqueCurve(ChShaftsThermalEngine self, std::shared_ptr< chrono::ChFunction > mf)"""
        return _core.ChShaftsThermalEngine_SetTorqueCurve(self, mf)

    def GetTorqueCurve(self):
        r"""GetTorqueCurve(ChShaftsThermalEngine self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChShaftsThermalEngine_GetTorqueCurve(self)

    def SetThrottle(self, mt):
        r"""SetThrottle(ChShaftsThermalEngine self, double mt)"""
        return _core.ChShaftsThermalEngine_SetThrottle(self, mt)

    def GetThrottle(self):
        r"""GetThrottle(ChShaftsThermalEngine self) -> double"""
        return _core.ChShaftsThermalEngine_GetThrottle(self)

    def IsRotatingBackward(self):
        r"""IsRotatingBackward(ChShaftsThermalEngine self) -> bool"""
        return _core.ChShaftsThermalEngine_IsRotatingBackward(self)

    def ComputeTorque(self):
        r"""ComputeTorque(ChShaftsThermalEngine self) -> double"""
        return _core.ChShaftsThermalEngine_ComputeTorque(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChShaftsThermalEngine self, ChArchiveOut & marchive)"""
        return _core.ChShaftsThermalEngine_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChShaftsThermalEngine self, chrono::ChArchiveIn & marchive)"""
        return _core.ChShaftsThermalEngine_ArchiveIN(self, marchive)

# Register ChShaftsThermalEngine in _core:
_core.ChShaftsThermalEngine_swigregister(ChShaftsThermalEngine)

class ChShaftsTorsionSpring(ChShaftsTorqueBase):
    r"""Proxy of C++ chrono::ChShaftsTorsionSpring class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChShaftsTorsionSpring self) -> ChShaftsTorsionSpring
        __init__(ChShaftsTorsionSpring self, ChShaftsTorsionSpring other) -> ChShaftsTorsionSpring
        """
        _core.ChShaftsTorsionSpring_swiginit(self, _core.new_ChShaftsTorsionSpring(*args))
    __swig_destroy__ = _core.delete_ChShaftsTorsionSpring

    def Clone(self):
        r"""Clone(ChShaftsTorsionSpring self) -> ChShaftsTorsionSpring"""
        return _core.ChShaftsTorsionSpring_Clone(self)

    def SetTorsionalStiffness(self, mt):
        r"""SetTorsionalStiffness(ChShaftsTorsionSpring self, double mt)"""
        return _core.ChShaftsTorsionSpring_SetTorsionalStiffness(self, mt)

    def GetTorsionalStiffness(self):
        r"""GetTorsionalStiffness(ChShaftsTorsionSpring self) -> double"""
        return _core.ChShaftsTorsionSpring_GetTorsionalStiffness(self)

    def SetTorsionalDamping(self, mt):
        r"""SetTorsionalDamping(ChShaftsTorsionSpring self, double mt)"""
        return _core.ChShaftsTorsionSpring_SetTorsionalDamping(self, mt)

    def GetTorsionalDamping(self):
        r"""GetTorsionalDamping(ChShaftsTorsionSpring self) -> double"""
        return _core.ChShaftsTorsionSpring_GetTorsionalDamping(self)

    def ComputeTorque(self):
        r"""ComputeTorque(ChShaftsTorsionSpring self) -> double"""
        return _core.ChShaftsTorsionSpring_ComputeTorque(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChShaftsTorsionSpring self, ChArchiveOut & marchive)"""
        return _core.ChShaftsTorsionSpring_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChShaftsTorsionSpring self, chrono::ChArchiveIn & marchive)"""
        return _core.ChShaftsTorsionSpring_ArchiveIN(self, marchive)

# Register ChShaftsTorsionSpring in _core:
_core.ChShaftsTorsionSpring_swigregister(ChShaftsTorsionSpring)

class ChShaftsLoad(ChLoadCustomMultiple):
    r"""Proxy of C++ chrono::ChShaftsLoad class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def ComputeShaftShaftTorque(self, rel_rot, rel_rot_dt, result_torque):
        r"""ComputeShaftShaftTorque(ChShaftsLoad self, double const rel_rot, double const rel_rot_dt, double & result_torque)"""
        return _core.ChShaftsLoad_ComputeShaftShaftTorque(self, rel_rot, rel_rot_dt, result_torque)

    def GetTorque(self):
        r"""GetTorque(ChShaftsLoad self) -> double"""
        return _core.ChShaftsLoad_GetTorque(self)

    def GetShaftA(self):
        r"""GetShaftA(ChShaftsLoad self) -> std::shared_ptr< chrono::ChShaft >"""
        return _core.ChShaftsLoad_GetShaftA(self)

    def GetShaftB(self):
        r"""GetShaftB(ChShaftsLoad self) -> std::shared_ptr< chrono::ChShaft >"""
        return _core.ChShaftsLoad_GetShaftB(self)
    __swig_destroy__ = _core.delete_ChShaftsLoad

# Register ChShaftsLoad in _core:
_core.ChShaftsLoad_swigregister(ChShaftsLoad)

class ChShaftsTorsionSpringDamper(ChShaftsLoad):
    r"""Proxy of C++ chrono::ChShaftsTorsionSpringDamper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mbodyA, mbodyB, mstiffness, mdamping):
        r"""__init__(ChShaftsTorsionSpringDamper self, std::shared_ptr< chrono::ChShaft > mbodyA, std::shared_ptr< chrono::ChShaft > mbodyB, double const mstiffness, double const mdamping) -> ChShaftsTorsionSpringDamper"""
        _core.ChShaftsTorsionSpringDamper_swiginit(self, _core.new_ChShaftsTorsionSpringDamper(mbodyA, mbodyB, mstiffness, mdamping))

    def Clone(self):
        r"""Clone(ChShaftsTorsionSpringDamper self) -> ChShaftsTorsionSpringDamper"""
        return _core.ChShaftsTorsionSpringDamper_Clone(self)

    def SetTorsionalStiffness(self, mstiffness):
        r"""SetTorsionalStiffness(ChShaftsTorsionSpringDamper self, double const mstiffness)"""
        return _core.ChShaftsTorsionSpringDamper_SetTorsionalStiffness(self, mstiffness)

    def GetTorsionalStiffness(self):
        r"""GetTorsionalStiffness(ChShaftsTorsionSpringDamper self) -> double"""
        return _core.ChShaftsTorsionSpringDamper_GetTorsionalStiffness(self)

    def SetTorsionalDamping(self, mdamping):
        r"""SetTorsionalDamping(ChShaftsTorsionSpringDamper self, double const mdamping)"""
        return _core.ChShaftsTorsionSpringDamper_SetTorsionalDamping(self, mdamping)

    def GetTorsionalDamping(self):
        r"""GetTorsionalDamping(ChShaftsTorsionSpringDamper self) -> double"""
        return _core.ChShaftsTorsionSpringDamper_GetTorsionalDamping(self)

    def SetRestPhase(self, mphase):
        r"""SetRestPhase(ChShaftsTorsionSpringDamper self, double const mphase)"""
        return _core.ChShaftsTorsionSpringDamper_SetRestPhase(self, mphase)

    def GetRestPhase(self):
        r"""GetRestPhase(ChShaftsTorsionSpringDamper self) -> double"""
        return _core.ChShaftsTorsionSpringDamper_GetRestPhase(self)
    __swig_destroy__ = _core.delete_ChShaftsTorsionSpringDamper

# Register ChShaftsTorsionSpringDamper in _core:
_core.ChShaftsTorsionSpringDamper_swigregister(ChShaftsTorsionSpringDamper)

class ChShaftsElasticGear(ChLoadCustomMultiple):
    r"""Proxy of C++ chrono::ChShaftsElasticGear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mbodyA, mbodyB, mstiffness, mdamping, mRa, mratio=-1):
        r"""__init__(ChShaftsElasticGear self, std::shared_ptr< chrono::ChShaft > mbodyA, std::shared_ptr< chrono::ChShaft > mbodyB, double const mstiffness, double const mdamping, double const mRa, double const mratio=-1) -> ChShaftsElasticGear"""
        _core.ChShaftsElasticGear_swiginit(self, _core.new_ChShaftsElasticGear(mbodyA, mbodyB, mstiffness, mdamping, mRa, mratio))

    def Clone(self):
        r"""Clone(ChShaftsElasticGear self) -> ChShaftsElasticGear"""
        return _core.ChShaftsElasticGear_Clone(self)

    def SetTeethStiffness(self, mstiffness):
        r"""SetTeethStiffness(ChShaftsElasticGear self, double const mstiffness)"""
        return _core.ChShaftsElasticGear_SetTeethStiffness(self, mstiffness)

    def GetTeethStiffness(self):
        r"""GetTeethStiffness(ChShaftsElasticGear self) -> double"""
        return _core.ChShaftsElasticGear_GetTeethStiffness(self)

    def SetTeethDamping(self, mdamping):
        r"""SetTeethDamping(ChShaftsElasticGear self, double const mdamping)"""
        return _core.ChShaftsElasticGear_SetTeethDamping(self, mdamping)

    def GetTeethDamping(self):
        r"""GetTeethDamping(ChShaftsElasticGear self) -> double"""
        return _core.ChShaftsElasticGear_GetTeethDamping(self)

    def SetRestPhase(self, mphase):
        r"""SetRestPhase(ChShaftsElasticGear self, double const mphase)"""
        return _core.ChShaftsElasticGear_SetRestPhase(self, mphase)

    def GetRestPhase(self):
        r"""GetRestPhase(ChShaftsElasticGear self) -> double"""
        return _core.ChShaftsElasticGear_GetRestPhase(self)

    def SetTransmissionRatioAndRadiusA(self, mt, mRa):
        r"""SetTransmissionRatioAndRadiusA(ChShaftsElasticGear self, double mt, double mRa)"""
        return _core.ChShaftsElasticGear_SetTransmissionRatioAndRadiusA(self, mt, mRa)

    def SetTransmissionRatioFromRadii(self, mRa, mRb, minternal=False):
        r"""SetTransmissionRatioFromRadii(ChShaftsElasticGear self, double mRa, double mRb, bool minternal=False)"""
        return _core.ChShaftsElasticGear_SetTransmissionRatioFromRadii(self, mRa, mRb, minternal)

    def GetTransmissionRatio(self):
        r"""GetTransmissionRatio(ChShaftsElasticGear self) -> double"""
        return _core.ChShaftsElasticGear_GetTransmissionRatio(self)

    def GetGearRadiusA(self):
        r"""GetGearRadiusA(ChShaftsElasticGear self) -> double"""
        return _core.ChShaftsElasticGear_GetGearRadiusA(self)

    def GetGearRadiusB(self):
        r"""GetGearRadiusB(ChShaftsElasticGear self) -> double"""
        return _core.ChShaftsElasticGear_GetGearRadiusB(self)

    def GetContactForce(self):
        r"""GetContactForce(ChShaftsElasticGear self) -> double"""
        return _core.ChShaftsElasticGear_GetContactForce(self)
    __swig_destroy__ = _core.delete_ChShaftsElasticGear

# Register ChShaftsElasticGear in _core:
_core.ChShaftsElasticGear_swigregister(ChShaftsElasticGear)

class ChShaftsMotorAngle(ChShaftsMotorBase):
    r"""Proxy of C++ chrono::ChShaftsMotorAngle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChShaftsMotorAngle self) -> ChShaftsMotorAngle
        __init__(ChShaftsMotorAngle self, ChShaftsMotorAngle other) -> ChShaftsMotorAngle
        """
        _core.ChShaftsMotorAngle_swiginit(self, _core.new_ChShaftsMotorAngle(*args))
    __swig_destroy__ = _core.delete_ChShaftsMotorAngle

    def Clone(self):
        r"""Clone(ChShaftsMotorAngle self) -> ChShaftsMotorAngle"""
        return _core.ChShaftsMotorAngle_Clone(self)

    def SetAngleFunction(self, mf):
        r"""SetAngleFunction(ChShaftsMotorAngle self, std::shared_ptr< chrono::ChFunction > const mf)"""
        return _core.ChShaftsMotorAngle_SetAngleFunction(self, mf)

    def GetAngleFunction(self):
        r"""GetAngleFunction(ChShaftsMotorAngle self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChShaftsMotorAngle_GetAngleFunction(self)

    def SetAngleOffset(self, mo):
        r"""SetAngleOffset(ChShaftsMotorAngle self, double mo)"""
        return _core.ChShaftsMotorAngle_SetAngleOffset(self, mo)

    def GetAngleOffset(self):
        r"""GetAngleOffset(ChShaftsMotorAngle self) -> double"""
        return _core.ChShaftsMotorAngle_GetAngleOffset(self)

    def Initialize(self, mshaft1, mshaft2):
        r"""Initialize(ChShaftsMotorAngle self, std::shared_ptr< chrono::ChShaft > mshaft1, std::shared_ptr< chrono::ChShaft > mshaft2) -> bool"""
        return _core.ChShaftsMotorAngle_Initialize(self, mshaft1, mshaft2)

    def GetMotorTorque(self):
        r"""GetMotorTorque(ChShaftsMotorAngle self) -> double"""
        return _core.ChShaftsMotorAngle_GetMotorTorque(self)

    def GetConstraintViolation(self):
        r"""GetConstraintViolation(ChShaftsMotorAngle self) -> double"""
        return _core.ChShaftsMotorAngle_GetConstraintViolation(self)

    def Update(self, mytime, update_assets=True):
        r"""Update(ChShaftsMotorAngle self, double mytime, bool update_assets=True)"""
        return _core.ChShaftsMotorAngle_Update(self, mytime, update_assets)

    def GetDOC_c(self):
        r"""GetDOC_c(ChShaftsMotorAngle self) -> int"""
        return _core.ChShaftsMotorAngle_GetDOC_c(self)

    def IntStateGatherReactions(self, off_L, L):
        r"""IntStateGatherReactions(ChShaftsMotorAngle self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsMotorAngle_IntStateGatherReactions(self, off_L, L)

    def IntStateScatterReactions(self, off_L, L):
        r"""IntStateScatterReactions(ChShaftsMotorAngle self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsMotorAngle_IntStateScatterReactions(self, off_L, L)

    def IntLoadResidual_CqL(self, off_L, R, L, c):
        r"""IntLoadResidual_CqL(ChShaftsMotorAngle self, unsigned int const off_L, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _core.ChShaftsMotorAngle_IntLoadResidual_CqL(self, off_L, R, L, c)

    def IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp):
        r"""IntLoadConstraint_C(ChShaftsMotorAngle self, unsigned int const off, ChVectorDynamicD Qc, double const c, bool do_clamp, double recovery_clamp)"""
        return _core.ChShaftsMotorAngle_IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp)

    def IntLoadConstraint_Ct(self, off, Qc, c):
        r"""IntLoadConstraint_Ct(ChShaftsMotorAngle self, unsigned int const off, ChVectorDynamicD Qc, double const c)"""
        return _core.ChShaftsMotorAngle_IntLoadConstraint_Ct(self, off, Qc, c)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChShaftsMotorAngle self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _core.ChShaftsMotorAngle_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChShaftsMotorAngle self, unsigned int const off_v, ChStateDelta v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsMotorAngle_IntFromDescriptor(self, off_v, v, off_L, L)

    def InjectConstraints(self, mdescriptor):
        r"""InjectConstraints(ChShaftsMotorAngle self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChShaftsMotorAngle_InjectConstraints(self, mdescriptor)

    def ConstraintsBiReset(self):
        r"""ConstraintsBiReset(ChShaftsMotorAngle self)"""
        return _core.ChShaftsMotorAngle_ConstraintsBiReset(self)

    def ConstraintsBiLoad_C(self, factor=1, recovery_clamp=0.1, do_clamp=False):
        r"""ConstraintsBiLoad_C(ChShaftsMotorAngle self, double factor=1, double recovery_clamp=0.1, bool do_clamp=False)"""
        return _core.ChShaftsMotorAngle_ConstraintsBiLoad_C(self, factor, recovery_clamp, do_clamp)

    def ConstraintsBiLoad_Ct(self, factor=1):
        r"""ConstraintsBiLoad_Ct(ChShaftsMotorAngle self, double factor=1)"""
        return _core.ChShaftsMotorAngle_ConstraintsBiLoad_Ct(self, factor)

    def ConstraintsLoadJacobians(self):
        r"""ConstraintsLoadJacobians(ChShaftsMotorAngle self)"""
        return _core.ChShaftsMotorAngle_ConstraintsLoadJacobians(self)

    def ConstraintsFetch_react(self, factor=1):
        r"""ConstraintsFetch_react(ChShaftsMotorAngle self, double factor=1)"""
        return _core.ChShaftsMotorAngle_ConstraintsFetch_react(self, factor)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChShaftsMotorAngle self, ChArchiveOut & marchive)"""
        return _core.ChShaftsMotorAngle_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChShaftsMotorAngle self, chrono::ChArchiveIn & marchive)"""
        return _core.ChShaftsMotorAngle_ArchiveIN(self, marchive)

# Register ChShaftsMotorAngle in _core:
_core.ChShaftsMotorAngle_swigregister(ChShaftsMotorAngle)

class ChShaftsMotorSpeed(ChShaftsMotorBase):
    r"""Proxy of C++ chrono::ChShaftsMotorSpeed class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChShaftsMotorSpeed self) -> ChShaftsMotorSpeed
        __init__(ChShaftsMotorSpeed self, ChShaftsMotorSpeed other) -> ChShaftsMotorSpeed
        """
        _core.ChShaftsMotorSpeed_swiginit(self, _core.new_ChShaftsMotorSpeed(*args))
    __swig_destroy__ = _core.delete_ChShaftsMotorSpeed

    def Clone(self):
        r"""Clone(ChShaftsMotorSpeed self) -> ChShaftsMotorSpeed"""
        return _core.ChShaftsMotorSpeed_Clone(self)

    def SetSpeedFunction(self, mf):
        r"""SetSpeedFunction(ChShaftsMotorSpeed self, std::shared_ptr< chrono::ChFunction > const mf)"""
        return _core.ChShaftsMotorSpeed_SetSpeedFunction(self, mf)

    def GetSpeedFunction(self):
        r"""GetSpeedFunction(ChShaftsMotorSpeed self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChShaftsMotorSpeed_GetSpeedFunction(self)

    def SetAngleOffset(self, mo):
        r"""SetAngleOffset(ChShaftsMotorSpeed self, double mo)"""
        return _core.ChShaftsMotorSpeed_SetAngleOffset(self, mo)

    def GetAngleOffset(self):
        r"""GetAngleOffset(ChShaftsMotorSpeed self) -> double"""
        return _core.ChShaftsMotorSpeed_GetAngleOffset(self)

    def SetAvoidAngleDrift(self, mb):
        r"""SetAvoidAngleDrift(ChShaftsMotorSpeed self, bool mb)"""
        return _core.ChShaftsMotorSpeed_SetAvoidAngleDrift(self, mb)

    def GetAvoidAngleDrift(self):
        r"""GetAvoidAngleDrift(ChShaftsMotorSpeed self) -> bool"""
        return _core.ChShaftsMotorSpeed_GetAvoidAngleDrift(self)

    def Initialize(self, mshaft1, mshaft2):
        r"""Initialize(ChShaftsMotorSpeed self, std::shared_ptr< chrono::ChShaft > mshaft1, std::shared_ptr< chrono::ChShaft > mshaft2) -> bool"""
        return _core.ChShaftsMotorSpeed_Initialize(self, mshaft1, mshaft2)

    def GetMotorTorque(self):
        r"""GetMotorTorque(ChShaftsMotorSpeed self) -> double"""
        return _core.ChShaftsMotorSpeed_GetMotorTorque(self)

    def Update(self, mytime, update_assets=True):
        r"""Update(ChShaftsMotorSpeed self, double mytime, bool update_assets=True)"""
        return _core.ChShaftsMotorSpeed_Update(self, mytime, update_assets)

    def GetDOF(self):
        r"""GetDOF(ChShaftsMotorSpeed self) -> int"""
        return _core.ChShaftsMotorSpeed_GetDOF(self)

    def GetDOC_c(self):
        r"""GetDOC_c(ChShaftsMotorSpeed self) -> int"""
        return _core.ChShaftsMotorSpeed_GetDOC_c(self)

    def IntStateGather(self, off_x, x, off_v, v, T):
        r"""IntStateGather(ChShaftsMotorSpeed self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double & T)"""
        return _core.ChShaftsMotorSpeed_IntStateGather(self, off_x, x, off_v, v, T)

    def IntStateScatter(self, off_x, x, off_v, v, T):
        r"""IntStateScatter(ChShaftsMotorSpeed self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double const T)"""
        return _core.ChShaftsMotorSpeed_IntStateScatter(self, off_x, x, off_v, v, T)

    def IntStateGatherReactions(self, off_L, L):
        r"""IntStateGatherReactions(ChShaftsMotorSpeed self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsMotorSpeed_IntStateGatherReactions(self, off_L, L)

    def IntStateScatterReactions(self, off_L, L):
        r"""IntStateScatterReactions(ChShaftsMotorSpeed self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsMotorSpeed_IntStateScatterReactions(self, off_L, L)

    def IntStateGatherAcceleration(self, off_a, a):
        r"""IntStateGatherAcceleration(ChShaftsMotorSpeed self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChShaftsMotorSpeed_IntStateGatherAcceleration(self, off_a, a)

    def IntStateScatterAcceleration(self, off_a, a):
        r"""IntStateScatterAcceleration(ChShaftsMotorSpeed self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChShaftsMotorSpeed_IntStateScatterAcceleration(self, off_a, a)

    def IntLoadResidual_F(self, off, R, c):
        r"""IntLoadResidual_F(ChShaftsMotorSpeed self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _core.ChShaftsMotorSpeed_IntLoadResidual_F(self, off, R, c)

    def IntLoadResidual_Mv(self, off, R, w, c):
        r"""IntLoadResidual_Mv(ChShaftsMotorSpeed self, unsigned int const off, ChVectorDynamicD R, ChVectorDynamicD w, double const c)"""
        return _core.ChShaftsMotorSpeed_IntLoadResidual_Mv(self, off, R, w, c)

    def IntLoadResidual_CqL(self, off_L, R, L, c):
        r"""IntLoadResidual_CqL(ChShaftsMotorSpeed self, unsigned int const off_L, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _core.ChShaftsMotorSpeed_IntLoadResidual_CqL(self, off_L, R, L, c)

    def IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp):
        r"""IntLoadConstraint_C(ChShaftsMotorSpeed self, unsigned int const off, ChVectorDynamicD Qc, double const c, bool do_clamp, double recovery_clamp)"""
        return _core.ChShaftsMotorSpeed_IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp)

    def IntLoadConstraint_Ct(self, off, Qc, c):
        r"""IntLoadConstraint_Ct(ChShaftsMotorSpeed self, unsigned int const off, ChVectorDynamicD Qc, double const c)"""
        return _core.ChShaftsMotorSpeed_IntLoadConstraint_Ct(self, off, Qc, c)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChShaftsMotorSpeed self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _core.ChShaftsMotorSpeed_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChShaftsMotorSpeed self, unsigned int const off_v, ChStateDelta v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChShaftsMotorSpeed_IntFromDescriptor(self, off_v, v, off_L, L)

    def InjectConstraints(self, mdescriptor):
        r"""InjectConstraints(ChShaftsMotorSpeed self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChShaftsMotorSpeed_InjectConstraints(self, mdescriptor)

    def InjectVariables(self, mdescriptor):
        r"""InjectVariables(ChShaftsMotorSpeed self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChShaftsMotorSpeed_InjectVariables(self, mdescriptor)

    def ConstraintsBiReset(self):
        r"""ConstraintsBiReset(ChShaftsMotorSpeed self)"""
        return _core.ChShaftsMotorSpeed_ConstraintsBiReset(self)

    def ConstraintsBiLoad_C(self, factor=1, recovery_clamp=0.1, do_clamp=False):
        r"""ConstraintsBiLoad_C(ChShaftsMotorSpeed self, double factor=1, double recovery_clamp=0.1, bool do_clamp=False)"""
        return _core.ChShaftsMotorSpeed_ConstraintsBiLoad_C(self, factor, recovery_clamp, do_clamp)

    def ConstraintsBiLoad_Ct(self, factor=1):
        r"""ConstraintsBiLoad_Ct(ChShaftsMotorSpeed self, double factor=1)"""
        return _core.ChShaftsMotorSpeed_ConstraintsBiLoad_Ct(self, factor)

    def ConstraintsLoadJacobians(self):
        r"""ConstraintsLoadJacobians(ChShaftsMotorSpeed self)"""
        return _core.ChShaftsMotorSpeed_ConstraintsLoadJacobians(self)

    def ConstraintsFetch_react(self, factor=1):
        r"""ConstraintsFetch_react(ChShaftsMotorSpeed self, double factor=1)"""
        return _core.ChShaftsMotorSpeed_ConstraintsFetch_react(self, factor)

    def VariablesFbReset(self):
        r"""VariablesFbReset(ChShaftsMotorSpeed self)"""
        return _core.ChShaftsMotorSpeed_VariablesFbReset(self)

    def VariablesFbLoadForces(self, factor=1):
        r"""VariablesFbLoadForces(ChShaftsMotorSpeed self, double factor=1)"""
        return _core.ChShaftsMotorSpeed_VariablesFbLoadForces(self, factor)

    def VariablesQbLoadSpeed(self):
        r"""VariablesQbLoadSpeed(ChShaftsMotorSpeed self)"""
        return _core.ChShaftsMotorSpeed_VariablesQbLoadSpeed(self)

    def VariablesFbIncrementMq(self):
        r"""VariablesFbIncrementMq(ChShaftsMotorSpeed self)"""
        return _core.ChShaftsMotorSpeed_VariablesFbIncrementMq(self)

    def VariablesQbSetSpeed(self, step=0):
        r"""VariablesQbSetSpeed(ChShaftsMotorSpeed self, double step=0)"""
        return _core.ChShaftsMotorSpeed_VariablesQbSetSpeed(self, step)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChShaftsMotorSpeed self, ChArchiveOut & marchive)"""
        return _core.ChShaftsMotorSpeed_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChShaftsMotorSpeed self, chrono::ChArchiveIn & marchive)"""
        return _core.ChShaftsMotorSpeed_ArchiveIN(self, marchive)

# Register ChShaftsMotorSpeed in _core:
_core.ChShaftsMotorSpeed_swigregister(ChShaftsMotorSpeed)

class ChShaftsMotorTorque(ChShaftsMotorBase):
    r"""Proxy of C++ chrono::ChShaftsMotorTorque class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChShaftsMotorTorque self) -> ChShaftsMotorTorque
        __init__(ChShaftsMotorTorque self, ChShaftsMotorTorque other) -> ChShaftsMotorTorque
        """
        _core.ChShaftsMotorTorque_swiginit(self, _core.new_ChShaftsMotorTorque(*args))
    __swig_destroy__ = _core.delete_ChShaftsMotorTorque

    def Clone(self):
        r"""Clone(ChShaftsMotorTorque self) -> ChShaftsMotorTorque"""
        return _core.ChShaftsMotorTorque_Clone(self)

    def SetTorqueFunction(self, mf):
        r"""SetTorqueFunction(ChShaftsMotorTorque self, std::shared_ptr< chrono::ChFunction > const mf)"""
        return _core.ChShaftsMotorTorque_SetTorqueFunction(self, mf)

    def GetTorqueFunction(self):
        r"""GetTorqueFunction(ChShaftsMotorTorque self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChShaftsMotorTorque_GetTorqueFunction(self)

    def GetMotorTorque(self):
        r"""GetMotorTorque(ChShaftsMotorTorque self) -> double"""
        return _core.ChShaftsMotorTorque_GetMotorTorque(self)

    def Update(self, mytime, update_assets=True):
        r"""Update(ChShaftsMotorTorque self, double mytime, bool update_assets=True)"""
        return _core.ChShaftsMotorTorque_Update(self, mytime, update_assets)

    def IntLoadResidual_F(self, off, R, c):
        r"""IntLoadResidual_F(ChShaftsMotorTorque self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _core.ChShaftsMotorTorque_IntLoadResidual_F(self, off, R, c)

    def VariablesFbLoadForces(self, factor):
        r"""VariablesFbLoadForces(ChShaftsMotorTorque self, double factor)"""
        return _core.ChShaftsMotorTorque_VariablesFbLoadForces(self, factor)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChShaftsMotorTorque self, ChArchiveOut & marchive)"""
        return _core.ChShaftsMotorTorque_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChShaftsMotorTorque self, chrono::ChArchiveIn & marchive)"""
        return _core.ChShaftsMotorTorque_ArchiveIN(self, marchive)

# Register ChShaftsMotorTorque in _core:
_core.ChShaftsMotorTorque_swigregister(ChShaftsMotorTorque)

class ChLinkMotor(ChLinkMateGeneric):
    r"""Proxy of C++ chrono::ChLinkMotor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkMotor self) -> ChLinkMotor
        __init__(ChLinkMotor self, ChLinkMotor other) -> ChLinkMotor
        """
        _core.ChLinkMotor_swiginit(self, _core.new_ChLinkMotor(*args))
    __swig_destroy__ = _core.delete_ChLinkMotor

    def SetMotorFunction(self, function):
        r"""SetMotorFunction(ChLinkMotor self, std::shared_ptr< chrono::ChFunction > const function)"""
        return _core.ChLinkMotor_SetMotorFunction(self, function)

    def GetMotorFunction(self):
        r"""GetMotorFunction(ChLinkMotor self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkMotor_GetMotorFunction(self)

    def Clone(self):
        r"""Clone(ChLinkMotor self) -> ChLinkMotor"""
        return _core.ChLinkMotor_Clone(self)

    def Update(self, mytime, update_assets):
        r"""Update(ChLinkMotor self, double mytime, bool update_assets)"""
        return _core.ChLinkMotor_Update(self, mytime, update_assets)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkMotor self, ChArchiveOut & marchive)"""
        return _core.ChLinkMotor_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkMotor self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkMotor_ArchiveIN(self, marchive)

# Register ChLinkMotor in _core:
_core.ChLinkMotor_swigregister(ChLinkMotor)

class ChLinkMotorLinear(ChLinkMotor):
    r"""Proxy of C++ chrono::ChLinkMotorLinear class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GuideConstraint_FREE = _core.ChLinkMotorLinear_GuideConstraint_FREE
    
    GuideConstraint_PRISMATIC = _core.ChLinkMotorLinear_GuideConstraint_PRISMATIC
    
    GuideConstraint_SPHERICAL = _core.ChLinkMotorLinear_GuideConstraint_SPHERICAL
    
    __swig_destroy__ = _core.delete_ChLinkMotorLinear

    def SetGuideConstraint(self, *args):
        r"""
        SetGuideConstraint(ChLinkMotorLinear self, chrono::ChLinkMotorLinear::GuideConstraint const mconstraint)
        SetGuideConstraint(ChLinkMotorLinear self, bool mc_y, bool mc_z, bool mc_rx, bool mc_ry, bool mc_rz)
        """
        return _core.ChLinkMotorLinear_SetGuideConstraint(self, *args)

    def GetMotorPos(self):
        r"""GetMotorPos(ChLinkMotorLinear self) -> double"""
        return _core.ChLinkMotorLinear_GetMotorPos(self)

    def GetMotorPos_dt(self):
        r"""GetMotorPos_dt(ChLinkMotorLinear self) -> double"""
        return _core.ChLinkMotorLinear_GetMotorPos_dt(self)

    def GetMotorPos_dtdt(self):
        r"""GetMotorPos_dtdt(ChLinkMotorLinear self) -> double"""
        return _core.ChLinkMotorLinear_GetMotorPos_dtdt(self)

    def GetMotorForce(self):
        r"""GetMotorForce(ChLinkMotorLinear self) -> double"""
        return _core.ChLinkMotorLinear_GetMotorForce(self)

    def Update(self, mytime, update_assets):
        r"""Update(ChLinkMotorLinear self, double mytime, bool update_assets)"""
        return _core.ChLinkMotorLinear_Update(self, mytime, update_assets)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkMotorLinear self, ChArchiveOut & marchive)"""
        return _core.ChLinkMotorLinear_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkMotorLinear self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkMotorLinear_ArchiveIN(self, marchive)

# Register ChLinkMotorLinear in _core:
_core.ChLinkMotorLinear_swigregister(ChLinkMotorLinear)

class ChLinkMotorLinearDriveline(ChLinkMotorLinear):
    r"""Proxy of C++ chrono::ChLinkMotorLinearDriveline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkMotorLinearDriveline self) -> ChLinkMotorLinearDriveline
        __init__(ChLinkMotorLinearDriveline self, ChLinkMotorLinearDriveline other) -> ChLinkMotorLinearDriveline
        """
        _core.ChLinkMotorLinearDriveline_swiginit(self, _core.new_ChLinkMotorLinearDriveline(*args))
    __swig_destroy__ = _core.delete_ChLinkMotorLinearDriveline

    def Clone(self):
        r"""Clone(ChLinkMotorLinearDriveline self) -> ChLinkMotorLinearDriveline"""
        return _core.ChLinkMotorLinearDriveline_Clone(self)

    def SetSystem(self, m_system):
        r"""SetSystem(ChLinkMotorLinearDriveline self, ChSystem m_system)"""
        return _core.ChLinkMotorLinearDriveline_SetSystem(self, m_system)

    def GetInnerShaft1lin(self):
        r"""GetInnerShaft1lin(ChLinkMotorLinearDriveline self) -> std::shared_ptr< chrono::ChShaft >"""
        return _core.ChLinkMotorLinearDriveline_GetInnerShaft1lin(self)

    def GetInnerShaft2lin(self):
        r"""GetInnerShaft2lin(ChLinkMotorLinearDriveline self) -> std::shared_ptr< chrono::ChShaft >"""
        return _core.ChLinkMotorLinearDriveline_GetInnerShaft2lin(self)

    def GetInnerShaft2rot(self):
        r"""GetInnerShaft2rot(ChLinkMotorLinearDriveline self) -> std::shared_ptr< chrono::ChShaft >"""
        return _core.ChLinkMotorLinearDriveline_GetInnerShaft2rot(self)

    def SetInnerShaft2RotDirection(self, md):
        r"""SetInnerShaft2RotDirection(ChLinkMotorLinearDriveline self, ChVectorD md)"""
        return _core.ChLinkMotorLinearDriveline_SetInnerShaft2RotDirection(self, md)

    def GetInnerShaft2RotDirection(self):
        r"""GetInnerShaft2RotDirection(ChLinkMotorLinearDriveline self) -> ChVectorD"""
        return _core.ChLinkMotorLinearDriveline_GetInnerShaft2RotDirection(self)

    def GetInnerForce1(self):
        r"""GetInnerForce1(ChLinkMotorLinearDriveline self) -> double"""
        return _core.ChLinkMotorLinearDriveline_GetInnerForce1(self)

    def GetInnerForce2(self):
        r"""GetInnerForce2(ChLinkMotorLinearDriveline self) -> double"""
        return _core.ChLinkMotorLinearDriveline_GetInnerForce2(self)

    def GetInnerTorque2(self):
        r"""GetInnerTorque2(ChLinkMotorLinearDriveline self) -> double"""
        return _core.ChLinkMotorLinearDriveline_GetInnerTorque2(self)

    def GetMotorForce(self):
        r"""GetMotorForce(ChLinkMotorLinearDriveline self) -> double"""
        return _core.ChLinkMotorLinearDriveline_GetMotorForce(self)

    def Initialize(self, *args):
        r"""
        Initialize(ChLinkMotorLinearDriveline self, std::shared_ptr< chrono::ChBodyFrame > mbody1, std::shared_ptr< chrono::ChBodyFrame > mbody2, ChFrameD mabsframe)
        Initialize(ChLinkMotorLinearDriveline self, std::shared_ptr< chrono::ChBodyFrame > mbody1, std::shared_ptr< chrono::ChBodyFrame > mbody2, bool pos_are_relative, ChFrameD mframe1, ChFrameD mframe2)
        Initialize(ChLinkMotorLinearDriveline self, std::shared_ptr< chrono::ChBodyFrame > mbody1, std::shared_ptr< chrono::ChBodyFrame > mbody2, bool pos_are_relative, ChVectorD mpt1, ChVectorD mpt2, ChVectorD mnorm1, ChVectorD mnorm2)
        """
        return _core.ChLinkMotorLinearDriveline_Initialize(self, *args)

    def Setup(self):
        r"""Setup(ChLinkMotorLinearDriveline self)"""
        return _core.ChLinkMotorLinearDriveline_Setup(self)

    def Update(self, mytime, update_assets=True):
        r"""Update(ChLinkMotorLinearDriveline self, double mytime, bool update_assets=True)"""
        return _core.ChLinkMotorLinearDriveline_Update(self, mytime, update_assets)

    def GetDOF(self):
        r"""GetDOF(ChLinkMotorLinearDriveline self) -> int"""
        return _core.ChLinkMotorLinearDriveline_GetDOF(self)

    def GetDOC(self):
        r"""GetDOC(ChLinkMotorLinearDriveline self) -> int"""
        return _core.ChLinkMotorLinearDriveline_GetDOC(self)

    def GetDOC_c(self):
        r"""GetDOC_c(ChLinkMotorLinearDriveline self) -> int"""
        return _core.ChLinkMotorLinearDriveline_GetDOC_c(self)

    def IntStateGather(self, off_x, x, off_v, v, T):
        r"""IntStateGather(ChLinkMotorLinearDriveline self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double & T)"""
        return _core.ChLinkMotorLinearDriveline_IntStateGather(self, off_x, x, off_v, v, T)

    def IntStateScatter(self, off_x, x, off_v, v, T):
        r"""IntStateScatter(ChLinkMotorLinearDriveline self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double const T)"""
        return _core.ChLinkMotorLinearDriveline_IntStateScatter(self, off_x, x, off_v, v, T)

    def IntStateGatherAcceleration(self, off_a, a):
        r"""IntStateGatherAcceleration(ChLinkMotorLinearDriveline self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChLinkMotorLinearDriveline_IntStateGatherAcceleration(self, off_a, a)

    def IntStateScatterAcceleration(self, off_a, a):
        r"""IntStateScatterAcceleration(ChLinkMotorLinearDriveline self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChLinkMotorLinearDriveline_IntStateScatterAcceleration(self, off_a, a)

    def IntStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""IntStateIncrement(ChLinkMotorLinearDriveline self, unsigned int const off_x, ChState x_new, ChState x, unsigned int const off_v, ChStateDelta Dv)"""
        return _core.ChLinkMotorLinearDriveline_IntStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def IntStateGatherReactions(self, off_L, L):
        r"""IntStateGatherReactions(ChLinkMotorLinearDriveline self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChLinkMotorLinearDriveline_IntStateGatherReactions(self, off_L, L)

    def IntStateScatterReactions(self, off_L, L):
        r"""IntStateScatterReactions(ChLinkMotorLinearDriveline self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChLinkMotorLinearDriveline_IntStateScatterReactions(self, off_L, L)

    def IntLoadResidual_F(self, off, R, c):
        r"""IntLoadResidual_F(ChLinkMotorLinearDriveline self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _core.ChLinkMotorLinearDriveline_IntLoadResidual_F(self, off, R, c)

    def IntLoadResidual_Mv(self, off, R, w, c):
        r"""IntLoadResidual_Mv(ChLinkMotorLinearDriveline self, unsigned int const off, ChVectorDynamicD R, ChVectorDynamicD w, double const c)"""
        return _core.ChLinkMotorLinearDriveline_IntLoadResidual_Mv(self, off, R, w, c)

    def IntLoadResidual_CqL(self, off_L, R, L, c):
        r"""IntLoadResidual_CqL(ChLinkMotorLinearDriveline self, unsigned int const off_L, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _core.ChLinkMotorLinearDriveline_IntLoadResidual_CqL(self, off_L, R, L, c)

    def IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp):
        r"""IntLoadConstraint_C(ChLinkMotorLinearDriveline self, unsigned int const off, ChVectorDynamicD Qc, double const c, bool do_clamp, double recovery_clamp)"""
        return _core.ChLinkMotorLinearDriveline_IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp)

    def IntLoadConstraint_Ct(self, off, Qc, c):
        r"""IntLoadConstraint_Ct(ChLinkMotorLinearDriveline self, unsigned int const off, ChVectorDynamicD Qc, double const c)"""
        return _core.ChLinkMotorLinearDriveline_IntLoadConstraint_Ct(self, off, Qc, c)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChLinkMotorLinearDriveline self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _core.ChLinkMotorLinearDriveline_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChLinkMotorLinearDriveline self, unsigned int const off_v, ChStateDelta v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChLinkMotorLinearDriveline_IntFromDescriptor(self, off_v, v, off_L, L)

    def InjectConstraints(self, mdescriptor):
        r"""InjectConstraints(ChLinkMotorLinearDriveline self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChLinkMotorLinearDriveline_InjectConstraints(self, mdescriptor)

    def ConstraintsBiReset(self):
        r"""ConstraintsBiReset(ChLinkMotorLinearDriveline self)"""
        return _core.ChLinkMotorLinearDriveline_ConstraintsBiReset(self)

    def ConstraintsBiLoad_C(self, factor=1, recovery_clamp=0.1, do_clamp=False):
        r"""ConstraintsBiLoad_C(ChLinkMotorLinearDriveline self, double factor=1, double recovery_clamp=0.1, bool do_clamp=False)"""
        return _core.ChLinkMotorLinearDriveline_ConstraintsBiLoad_C(self, factor, recovery_clamp, do_clamp)

    def ConstraintsBiLoad_Ct(self, factor=1):
        r"""ConstraintsBiLoad_Ct(ChLinkMotorLinearDriveline self, double factor=1)"""
        return _core.ChLinkMotorLinearDriveline_ConstraintsBiLoad_Ct(self, factor)

    def ConstraintsLoadJacobians(self):
        r"""ConstraintsLoadJacobians(ChLinkMotorLinearDriveline self)"""
        return _core.ChLinkMotorLinearDriveline_ConstraintsLoadJacobians(self)

    def ConstraintsFetch_react(self, factor=1):
        r"""ConstraintsFetch_react(ChLinkMotorLinearDriveline self, double factor=1)"""
        return _core.ChLinkMotorLinearDriveline_ConstraintsFetch_react(self, factor)

    def InjectVariables(self, mdescriptor):
        r"""InjectVariables(ChLinkMotorLinearDriveline self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChLinkMotorLinearDriveline_InjectVariables(self, mdescriptor)

    def VariablesFbReset(self):
        r"""VariablesFbReset(ChLinkMotorLinearDriveline self)"""
        return _core.ChLinkMotorLinearDriveline_VariablesFbReset(self)

    def VariablesFbLoadForces(self, factor=1):
        r"""VariablesFbLoadForces(ChLinkMotorLinearDriveline self, double factor=1)"""
        return _core.ChLinkMotorLinearDriveline_VariablesFbLoadForces(self, factor)

    def VariablesQbLoadSpeed(self):
        r"""VariablesQbLoadSpeed(ChLinkMotorLinearDriveline self)"""
        return _core.ChLinkMotorLinearDriveline_VariablesQbLoadSpeed(self)

    def VariablesFbIncrementMq(self):
        r"""VariablesFbIncrementMq(ChLinkMotorLinearDriveline self)"""
        return _core.ChLinkMotorLinearDriveline_VariablesFbIncrementMq(self)

    def VariablesQbSetSpeed(self, step=0):
        r"""VariablesQbSetSpeed(ChLinkMotorLinearDriveline self, double step=0)"""
        return _core.ChLinkMotorLinearDriveline_VariablesQbSetSpeed(self, step)

    def VariablesQbIncrementPosition(self, step):
        r"""VariablesQbIncrementPosition(ChLinkMotorLinearDriveline self, double step)"""
        return _core.ChLinkMotorLinearDriveline_VariablesQbIncrementPosition(self, step)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkMotorLinearDriveline self, ChArchiveOut & marchive)"""
        return _core.ChLinkMotorLinearDriveline_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkMotorLinearDriveline self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkMotorLinearDriveline_ArchiveIN(self, marchive)

# Register ChLinkMotorLinearDriveline in _core:
_core.ChLinkMotorLinearDriveline_swigregister(ChLinkMotorLinearDriveline)

class ChLinkMotorLinearForce(ChLinkMotorLinear):
    r"""Proxy of C++ chrono::ChLinkMotorLinearForce class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkMotorLinearForce self) -> ChLinkMotorLinearForce
        __init__(ChLinkMotorLinearForce self, ChLinkMotorLinearForce other) -> ChLinkMotorLinearForce
        """
        _core.ChLinkMotorLinearForce_swiginit(self, _core.new_ChLinkMotorLinearForce(*args))
    __swig_destroy__ = _core.delete_ChLinkMotorLinearForce

    def Clone(self):
        r"""Clone(ChLinkMotorLinearForce self) -> ChLinkMotorLinearForce"""
        return _core.ChLinkMotorLinearForce_Clone(self)

    def SetForceFunction(self, function):
        r"""SetForceFunction(ChLinkMotorLinearForce self, std::shared_ptr< chrono::ChFunction > const function)"""
        return _core.ChLinkMotorLinearForce_SetForceFunction(self, function)

    def GetForceFunction(self):
        r"""GetForceFunction(ChLinkMotorLinearForce self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkMotorLinearForce_GetForceFunction(self)

    def GetMotorForce(self):
        r"""GetMotorForce(ChLinkMotorLinearForce self) -> double"""
        return _core.ChLinkMotorLinearForce_GetMotorForce(self)

    def Update(self, mytime, update_assets):
        r"""Update(ChLinkMotorLinearForce self, double mytime, bool update_assets)"""
        return _core.ChLinkMotorLinearForce_Update(self, mytime, update_assets)

    def IntLoadResidual_F(self, off, R, c):
        r"""IntLoadResidual_F(ChLinkMotorLinearForce self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _core.ChLinkMotorLinearForce_IntLoadResidual_F(self, off, R, c)

    def ConstraintsFbLoadForces(self, factor=1):
        r"""ConstraintsFbLoadForces(ChLinkMotorLinearForce self, double factor=1)"""
        return _core.ChLinkMotorLinearForce_ConstraintsFbLoadForces(self, factor)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkMotorLinearForce self, ChArchiveOut & marchive)"""
        return _core.ChLinkMotorLinearForce_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkMotorLinearForce self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkMotorLinearForce_ArchiveIN(self, marchive)

# Register ChLinkMotorLinearForce in _core:
_core.ChLinkMotorLinearForce_swigregister(ChLinkMotorLinearForce)

class ChLinkMotorLinearPosition(ChLinkMotorLinear):
    r"""Proxy of C++ chrono::ChLinkMotorLinearPosition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkMotorLinearPosition self) -> ChLinkMotorLinearPosition
        __init__(ChLinkMotorLinearPosition self, ChLinkMotorLinearPosition other) -> ChLinkMotorLinearPosition
        """
        _core.ChLinkMotorLinearPosition_swiginit(self, _core.new_ChLinkMotorLinearPosition(*args))
    __swig_destroy__ = _core.delete_ChLinkMotorLinearPosition

    def Clone(self):
        r"""Clone(ChLinkMotorLinearPosition self) -> ChLinkMotorLinearPosition"""
        return _core.ChLinkMotorLinearPosition_Clone(self)

    def SetMotionFunction(self, function):
        r"""SetMotionFunction(ChLinkMotorLinearPosition self, std::shared_ptr< chrono::ChFunction > const function)"""
        return _core.ChLinkMotorLinearPosition_SetMotionFunction(self, function)

    def GetMotionFunction(self):
        r"""GetMotionFunction(ChLinkMotorLinearPosition self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkMotorLinearPosition_GetMotionFunction(self)

    def SetMotionOffset(self, mo):
        r"""SetMotionOffset(ChLinkMotorLinearPosition self, double mo)"""
        return _core.ChLinkMotorLinearPosition_SetMotionOffset(self, mo)

    def GetMotionOffset(self):
        r"""GetMotionOffset(ChLinkMotorLinearPosition self) -> double"""
        return _core.ChLinkMotorLinearPosition_GetMotionOffset(self)

    def GetMotorForce(self):
        r"""GetMotorForce(ChLinkMotorLinearPosition self) -> double"""
        return _core.ChLinkMotorLinearPosition_GetMotorForce(self)

    def Update(self, mytime, update_assets):
        r"""Update(ChLinkMotorLinearPosition self, double mytime, bool update_assets)"""
        return _core.ChLinkMotorLinearPosition_Update(self, mytime, update_assets)

    def IntLoadConstraint_Ct(self, off, Qc, c):
        r"""IntLoadConstraint_Ct(ChLinkMotorLinearPosition self, unsigned int const off, ChVectorDynamicD Qc, double const c)"""
        return _core.ChLinkMotorLinearPosition_IntLoadConstraint_Ct(self, off, Qc, c)

    def ConstraintsBiLoad_Ct(self, factor=1):
        r"""ConstraintsBiLoad_Ct(ChLinkMotorLinearPosition self, double factor=1)"""
        return _core.ChLinkMotorLinearPosition_ConstraintsBiLoad_Ct(self, factor)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkMotorLinearPosition self, ChArchiveOut & marchive)"""
        return _core.ChLinkMotorLinearPosition_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkMotorLinearPosition self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkMotorLinearPosition_ArchiveIN(self, marchive)

# Register ChLinkMotorLinearPosition in _core:
_core.ChLinkMotorLinearPosition_swigregister(ChLinkMotorLinearPosition)

class ChLinkMotorLinearSpeed(ChLinkMotorLinear):
    r"""Proxy of C++ chrono::ChLinkMotorLinearSpeed class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkMotorLinearSpeed self) -> ChLinkMotorLinearSpeed
        __init__(ChLinkMotorLinearSpeed self, ChLinkMotorLinearSpeed other) -> ChLinkMotorLinearSpeed
        """
        _core.ChLinkMotorLinearSpeed_swiginit(self, _core.new_ChLinkMotorLinearSpeed(*args))
    __swig_destroy__ = _core.delete_ChLinkMotorLinearSpeed

    def Clone(self):
        r"""Clone(ChLinkMotorLinearSpeed self) -> ChLinkMotorLinearSpeed"""
        return _core.ChLinkMotorLinearSpeed_Clone(self)

    def SetSpeedFunction(self, function):
        r"""SetSpeedFunction(ChLinkMotorLinearSpeed self, std::shared_ptr< chrono::ChFunction > const function)"""
        return _core.ChLinkMotorLinearSpeed_SetSpeedFunction(self, function)

    def GetSpeedFunction(self):
        r"""GetSpeedFunction(ChLinkMotorLinearSpeed self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkMotorLinearSpeed_GetSpeedFunction(self)

    def SetMotionOffset(self, mo):
        r"""SetMotionOffset(ChLinkMotorLinearSpeed self, double mo)"""
        return _core.ChLinkMotorLinearSpeed_SetMotionOffset(self, mo)

    def GetMotionOffset(self):
        r"""GetMotionOffset(ChLinkMotorLinearSpeed self) -> double"""
        return _core.ChLinkMotorLinearSpeed_GetMotionOffset(self)

    def SetAvoidPositionDrift(self, mb):
        r"""SetAvoidPositionDrift(ChLinkMotorLinearSpeed self, bool mb)"""
        return _core.ChLinkMotorLinearSpeed_SetAvoidPositionDrift(self, mb)

    def GetAvoidPositionDrift(self):
        r"""GetAvoidPositionDrift(ChLinkMotorLinearSpeed self) -> bool"""
        return _core.ChLinkMotorLinearSpeed_GetAvoidPositionDrift(self)

    def GetMotorForce(self):
        r"""GetMotorForce(ChLinkMotorLinearSpeed self) -> double"""
        return _core.ChLinkMotorLinearSpeed_GetMotorForce(self)

    def Update(self, mytime, update_assets=True):
        r"""Update(ChLinkMotorLinearSpeed self, double mytime, bool update_assets=True)"""
        return _core.ChLinkMotorLinearSpeed_Update(self, mytime, update_assets)

    def GetDOF(self):
        r"""GetDOF(ChLinkMotorLinearSpeed self) -> int"""
        return _core.ChLinkMotorLinearSpeed_GetDOF(self)

    def Variables(self):
        r"""Variables(ChLinkMotorLinearSpeed self) -> ChVariablesGeneric &"""
        return _core.ChLinkMotorLinearSpeed_Variables(self)

    def IntStateGather(self, off_x, x, off_v, v, T):
        r"""IntStateGather(ChLinkMotorLinearSpeed self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double & T)"""
        return _core.ChLinkMotorLinearSpeed_IntStateGather(self, off_x, x, off_v, v, T)

    def IntStateScatter(self, off_x, x, off_v, v, T):
        r"""IntStateScatter(ChLinkMotorLinearSpeed self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double const T)"""
        return _core.ChLinkMotorLinearSpeed_IntStateScatter(self, off_x, x, off_v, v, T)

    def IntStateGatherAcceleration(self, off_a, a):
        r"""IntStateGatherAcceleration(ChLinkMotorLinearSpeed self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChLinkMotorLinearSpeed_IntStateGatherAcceleration(self, off_a, a)

    def IntStateScatterAcceleration(self, off_a, a):
        r"""IntStateScatterAcceleration(ChLinkMotorLinearSpeed self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChLinkMotorLinearSpeed_IntStateScatterAcceleration(self, off_a, a)

    def IntLoadResidual_F(self, off, R, c):
        r"""IntLoadResidual_F(ChLinkMotorLinearSpeed self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _core.ChLinkMotorLinearSpeed_IntLoadResidual_F(self, off, R, c)

    def IntLoadResidual_Mv(self, off, R, w, c):
        r"""IntLoadResidual_Mv(ChLinkMotorLinearSpeed self, unsigned int const off, ChVectorDynamicD R, ChVectorDynamicD w, double const c)"""
        return _core.ChLinkMotorLinearSpeed_IntLoadResidual_Mv(self, off, R, w, c)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChLinkMotorLinearSpeed self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _core.ChLinkMotorLinearSpeed_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChLinkMotorLinearSpeed self, unsigned int const off_v, ChStateDelta v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChLinkMotorLinearSpeed_IntFromDescriptor(self, off_v, v, off_L, L)

    def IntLoadConstraint_Ct(self, off, Qc, c):
        r"""IntLoadConstraint_Ct(ChLinkMotorLinearSpeed self, unsigned int const off, ChVectorDynamicD Qc, double const c)"""
        return _core.ChLinkMotorLinearSpeed_IntLoadConstraint_Ct(self, off, Qc, c)

    def VariablesFbReset(self):
        r"""VariablesFbReset(ChLinkMotorLinearSpeed self)"""
        return _core.ChLinkMotorLinearSpeed_VariablesFbReset(self)

    def VariablesFbLoadForces(self, factor=1):
        r"""VariablesFbLoadForces(ChLinkMotorLinearSpeed self, double factor=1)"""
        return _core.ChLinkMotorLinearSpeed_VariablesFbLoadForces(self, factor)

    def VariablesQbLoadSpeed(self):
        r"""VariablesQbLoadSpeed(ChLinkMotorLinearSpeed self)"""
        return _core.ChLinkMotorLinearSpeed_VariablesQbLoadSpeed(self)

    def VariablesFbIncrementMq(self):
        r"""VariablesFbIncrementMq(ChLinkMotorLinearSpeed self)"""
        return _core.ChLinkMotorLinearSpeed_VariablesFbIncrementMq(self)

    def VariablesQbSetSpeed(self, step=0):
        r"""VariablesQbSetSpeed(ChLinkMotorLinearSpeed self, double step=0)"""
        return _core.ChLinkMotorLinearSpeed_VariablesQbSetSpeed(self, step)

    def InjectVariables(self, mdescriptor):
        r"""InjectVariables(ChLinkMotorLinearSpeed self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChLinkMotorLinearSpeed_InjectVariables(self, mdescriptor)

    def ConstraintsBiLoad_Ct(self, factor=1):
        r"""ConstraintsBiLoad_Ct(ChLinkMotorLinearSpeed self, double factor=1)"""
        return _core.ChLinkMotorLinearSpeed_ConstraintsBiLoad_Ct(self, factor)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkMotorLinearSpeed self, ChArchiveOut & marchive)"""
        return _core.ChLinkMotorLinearSpeed_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkMotorLinearSpeed self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkMotorLinearSpeed_ArchiveIN(self, marchive)

# Register ChLinkMotorLinearSpeed in _core:
_core.ChLinkMotorLinearSpeed_swigregister(ChLinkMotorLinearSpeed)

class ChLinkMotorRotation(ChLinkMotor):
    r"""Proxy of C++ chrono::ChLinkMotorRotation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SpindleConstraint_FREE = _core.ChLinkMotorRotation_SpindleConstraint_FREE
    
    SpindleConstraint_REVOLUTE = _core.ChLinkMotorRotation_SpindleConstraint_REVOLUTE
    
    SpindleConstraint_CYLINDRICAL = _core.ChLinkMotorRotation_SpindleConstraint_CYLINDRICAL
    
    SpindleConstraint_OLDHAM = _core.ChLinkMotorRotation_SpindleConstraint_OLDHAM
    
    __swig_destroy__ = _core.delete_ChLinkMotorRotation

    def SetSpindleConstraint(self, *args):
        r"""
        SetSpindleConstraint(ChLinkMotorRotation self, chrono::ChLinkMotorRotation::SpindleConstraint const mconstraint)
        SetSpindleConstraint(ChLinkMotorRotation self, bool mc_x, bool mc_y, bool mc_z, bool mc_rx, bool mc_ry)
        """
        return _core.ChLinkMotorRotation_SetSpindleConstraint(self, *args)

    def GetMotorRot(self):
        r"""GetMotorRot(ChLinkMotorRotation self) -> double"""
        return _core.ChLinkMotorRotation_GetMotorRot(self)

    def GetMotorRotTurns(self):
        r"""GetMotorRotTurns(ChLinkMotorRotation self) -> int"""
        return _core.ChLinkMotorRotation_GetMotorRotTurns(self)

    def GetMotorRotPeriodic(self):
        r"""GetMotorRotPeriodic(ChLinkMotorRotation self) -> double"""
        return _core.ChLinkMotorRotation_GetMotorRotPeriodic(self)

    def GetMotorRot_dt(self):
        r"""GetMotorRot_dt(ChLinkMotorRotation self) -> double"""
        return _core.ChLinkMotorRotation_GetMotorRot_dt(self)

    def GetMotorRot_dtdt(self):
        r"""GetMotorRot_dtdt(ChLinkMotorRotation self) -> double"""
        return _core.ChLinkMotorRotation_GetMotorRot_dtdt(self)

    def GetMotorTorque(self):
        r"""GetMotorTorque(ChLinkMotorRotation self) -> double"""
        return _core.ChLinkMotorRotation_GetMotorTorque(self)

    def Update(self, mytime, update_assets):
        r"""Update(ChLinkMotorRotation self, double mytime, bool update_assets)"""
        return _core.ChLinkMotorRotation_Update(self, mytime, update_assets)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkMotorRotation self, ChArchiveOut & marchive)"""
        return _core.ChLinkMotorRotation_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkMotorRotation self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkMotorRotation_ArchiveIN(self, marchive)

# Register ChLinkMotorRotation in _core:
_core.ChLinkMotorRotation_swigregister(ChLinkMotorRotation)

class ChLinkMotorRotationAngle(ChLinkMotorRotation):
    r"""Proxy of C++ chrono::ChLinkMotorRotationAngle class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkMotorRotationAngle self) -> ChLinkMotorRotationAngle
        __init__(ChLinkMotorRotationAngle self, ChLinkMotorRotationAngle other) -> ChLinkMotorRotationAngle
        """
        _core.ChLinkMotorRotationAngle_swiginit(self, _core.new_ChLinkMotorRotationAngle(*args))
    __swig_destroy__ = _core.delete_ChLinkMotorRotationAngle

    def Clone(self):
        r"""Clone(ChLinkMotorRotationAngle self) -> ChLinkMotorRotationAngle"""
        return _core.ChLinkMotorRotationAngle_Clone(self)

    def SetAngleFunction(self, function):
        r"""SetAngleFunction(ChLinkMotorRotationAngle self, std::shared_ptr< chrono::ChFunction > const function)"""
        return _core.ChLinkMotorRotationAngle_SetAngleFunction(self, function)

    def GetAngleFunction(self):
        r"""GetAngleFunction(ChLinkMotorRotationAngle self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkMotorRotationAngle_GetAngleFunction(self)

    def SetAngleOffset(self, mo):
        r"""SetAngleOffset(ChLinkMotorRotationAngle self, double mo)"""
        return _core.ChLinkMotorRotationAngle_SetAngleOffset(self, mo)

    def GetAngleOffset(self):
        r"""GetAngleOffset(ChLinkMotorRotationAngle self) -> double"""
        return _core.ChLinkMotorRotationAngle_GetAngleOffset(self)

    def GetMotorTorque(self):
        r"""GetMotorTorque(ChLinkMotorRotationAngle self) -> double"""
        return _core.ChLinkMotorRotationAngle_GetMotorTorque(self)

    def Update(self, mytime, update_assets):
        r"""Update(ChLinkMotorRotationAngle self, double mytime, bool update_assets)"""
        return _core.ChLinkMotorRotationAngle_Update(self, mytime, update_assets)

    def IntLoadConstraint_Ct(self, off, Qc, c):
        r"""IntLoadConstraint_Ct(ChLinkMotorRotationAngle self, unsigned int const off, ChVectorDynamicD Qc, double const c)"""
        return _core.ChLinkMotorRotationAngle_IntLoadConstraint_Ct(self, off, Qc, c)

    def ConstraintsBiLoad_Ct(self, factor=1):
        r"""ConstraintsBiLoad_Ct(ChLinkMotorRotationAngle self, double factor=1)"""
        return _core.ChLinkMotorRotationAngle_ConstraintsBiLoad_Ct(self, factor)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkMotorRotationAngle self, ChArchiveOut & marchive)"""
        return _core.ChLinkMotorRotationAngle_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkMotorRotationAngle self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkMotorRotationAngle_ArchiveIN(self, marchive)

# Register ChLinkMotorRotationAngle in _core:
_core.ChLinkMotorRotationAngle_swigregister(ChLinkMotorRotationAngle)

class ChLinkMotorRotationDriveline(ChLinkMotorRotation):
    r"""Proxy of C++ chrono::ChLinkMotorRotationDriveline class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkMotorRotationDriveline self) -> ChLinkMotorRotationDriveline
        __init__(ChLinkMotorRotationDriveline self, ChLinkMotorRotationDriveline other) -> ChLinkMotorRotationDriveline
        """
        _core.ChLinkMotorRotationDriveline_swiginit(self, _core.new_ChLinkMotorRotationDriveline(*args))
    __swig_destroy__ = _core.delete_ChLinkMotorRotationDriveline

    def Clone(self):
        r"""Clone(ChLinkMotorRotationDriveline self) -> ChLinkMotorRotationDriveline"""
        return _core.ChLinkMotorRotationDriveline_Clone(self)

    def SetSystem(self, m_system):
        r"""SetSystem(ChLinkMotorRotationDriveline self, ChSystem m_system)"""
        return _core.ChLinkMotorRotationDriveline_SetSystem(self, m_system)

    def GetInnerShaft1(self):
        r"""GetInnerShaft1(ChLinkMotorRotationDriveline self) -> std::shared_ptr< chrono::ChShaft >"""
        return _core.ChLinkMotorRotationDriveline_GetInnerShaft1(self)

    def GetInnerShaft2(self):
        r"""GetInnerShaft2(ChLinkMotorRotationDriveline self) -> std::shared_ptr< chrono::ChShaft >"""
        return _core.ChLinkMotorRotationDriveline_GetInnerShaft2(self)

    def GetInnerTorque1(self):
        r"""GetInnerTorque1(ChLinkMotorRotationDriveline self) -> double"""
        return _core.ChLinkMotorRotationDriveline_GetInnerTorque1(self)

    def GetInnerTorque2(self):
        r"""GetInnerTorque2(ChLinkMotorRotationDriveline self) -> double"""
        return _core.ChLinkMotorRotationDriveline_GetInnerTorque2(self)

    def GetMotorTorque(self):
        r"""GetMotorTorque(ChLinkMotorRotationDriveline self) -> double"""
        return _core.ChLinkMotorRotationDriveline_GetMotorTorque(self)

    def Initialize(self, *args):
        r"""
        Initialize(ChLinkMotorRotationDriveline self, std::shared_ptr< chrono::ChBodyFrame > mbody1, std::shared_ptr< chrono::ChBodyFrame > mbody2, ChFrameD mabsframe)
        Initialize(ChLinkMotorRotationDriveline self, std::shared_ptr< chrono::ChBodyFrame > mbody1, std::shared_ptr< chrono::ChBodyFrame > mbody2, bool pos_are_relative, ChFrameD mframe1, ChFrameD mframe2)
        Initialize(ChLinkMotorRotationDriveline self, std::shared_ptr< chrono::ChBodyFrame > mbody1, std::shared_ptr< chrono::ChBodyFrame > mbody2, bool pos_are_relative, ChVectorD mpt1, ChVectorD mpt2, ChVectorD mnorm1, ChVectorD mnorm2)
        """
        return _core.ChLinkMotorRotationDriveline_Initialize(self, *args)

    def Setup(self):
        r"""Setup(ChLinkMotorRotationDriveline self)"""
        return _core.ChLinkMotorRotationDriveline_Setup(self)

    def Update(self, mytime, update_assets=True):
        r"""Update(ChLinkMotorRotationDriveline self, double mytime, bool update_assets=True)"""
        return _core.ChLinkMotorRotationDriveline_Update(self, mytime, update_assets)

    def GetDOF(self):
        r"""GetDOF(ChLinkMotorRotationDriveline self) -> int"""
        return _core.ChLinkMotorRotationDriveline_GetDOF(self)

    def GetDOC(self):
        r"""GetDOC(ChLinkMotorRotationDriveline self) -> int"""
        return _core.ChLinkMotorRotationDriveline_GetDOC(self)

    def GetDOC_c(self):
        r"""GetDOC_c(ChLinkMotorRotationDriveline self) -> int"""
        return _core.ChLinkMotorRotationDriveline_GetDOC_c(self)

    def IntStateGather(self, off_x, x, off_v, v, T):
        r"""IntStateGather(ChLinkMotorRotationDriveline self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double & T)"""
        return _core.ChLinkMotorRotationDriveline_IntStateGather(self, off_x, x, off_v, v, T)

    def IntStateScatter(self, off_x, x, off_v, v, T):
        r"""IntStateScatter(ChLinkMotorRotationDriveline self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double const T)"""
        return _core.ChLinkMotorRotationDriveline_IntStateScatter(self, off_x, x, off_v, v, T)

    def IntStateGatherAcceleration(self, off_a, a):
        r"""IntStateGatherAcceleration(ChLinkMotorRotationDriveline self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChLinkMotorRotationDriveline_IntStateGatherAcceleration(self, off_a, a)

    def IntStateScatterAcceleration(self, off_a, a):
        r"""IntStateScatterAcceleration(ChLinkMotorRotationDriveline self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChLinkMotorRotationDriveline_IntStateScatterAcceleration(self, off_a, a)

    def IntStateIncrement(self, off_x, x_new, x, off_v, Dv):
        r"""IntStateIncrement(ChLinkMotorRotationDriveline self, unsigned int const off_x, ChState x_new, ChState x, unsigned int const off_v, ChStateDelta Dv)"""
        return _core.ChLinkMotorRotationDriveline_IntStateIncrement(self, off_x, x_new, x, off_v, Dv)

    def IntStateGatherReactions(self, off_L, L):
        r"""IntStateGatherReactions(ChLinkMotorRotationDriveline self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChLinkMotorRotationDriveline_IntStateGatherReactions(self, off_L, L)

    def IntStateScatterReactions(self, off_L, L):
        r"""IntStateScatterReactions(ChLinkMotorRotationDriveline self, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChLinkMotorRotationDriveline_IntStateScatterReactions(self, off_L, L)

    def IntLoadResidual_F(self, off, R, c):
        r"""IntLoadResidual_F(ChLinkMotorRotationDriveline self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _core.ChLinkMotorRotationDriveline_IntLoadResidual_F(self, off, R, c)

    def IntLoadResidual_Mv(self, off, R, w, c):
        r"""IntLoadResidual_Mv(ChLinkMotorRotationDriveline self, unsigned int const off, ChVectorDynamicD R, ChVectorDynamicD w, double const c)"""
        return _core.ChLinkMotorRotationDriveline_IntLoadResidual_Mv(self, off, R, w, c)

    def IntLoadResidual_CqL(self, off_L, R, L, c):
        r"""IntLoadResidual_CqL(ChLinkMotorRotationDriveline self, unsigned int const off_L, ChVectorDynamicD R, ChVectorDynamicD L, double const c)"""
        return _core.ChLinkMotorRotationDriveline_IntLoadResidual_CqL(self, off_L, R, L, c)

    def IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp):
        r"""IntLoadConstraint_C(ChLinkMotorRotationDriveline self, unsigned int const off, ChVectorDynamicD Qc, double const c, bool do_clamp, double recovery_clamp)"""
        return _core.ChLinkMotorRotationDriveline_IntLoadConstraint_C(self, off, Qc, c, do_clamp, recovery_clamp)

    def IntLoadConstraint_Ct(self, off, Qc, c):
        r"""IntLoadConstraint_Ct(ChLinkMotorRotationDriveline self, unsigned int const off, ChVectorDynamicD Qc, double const c)"""
        return _core.ChLinkMotorRotationDriveline_IntLoadConstraint_Ct(self, off, Qc, c)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChLinkMotorRotationDriveline self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _core.ChLinkMotorRotationDriveline_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChLinkMotorRotationDriveline self, unsigned int const off_v, ChStateDelta v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChLinkMotorRotationDriveline_IntFromDescriptor(self, off_v, v, off_L, L)

    def InjectConstraints(self, mdescriptor):
        r"""InjectConstraints(ChLinkMotorRotationDriveline self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChLinkMotorRotationDriveline_InjectConstraints(self, mdescriptor)

    def ConstraintsBiReset(self):
        r"""ConstraintsBiReset(ChLinkMotorRotationDriveline self)"""
        return _core.ChLinkMotorRotationDriveline_ConstraintsBiReset(self)

    def ConstraintsBiLoad_C(self, factor=1, recovery_clamp=0.1, do_clamp=False):
        r"""ConstraintsBiLoad_C(ChLinkMotorRotationDriveline self, double factor=1, double recovery_clamp=0.1, bool do_clamp=False)"""
        return _core.ChLinkMotorRotationDriveline_ConstraintsBiLoad_C(self, factor, recovery_clamp, do_clamp)

    def ConstraintsBiLoad_Ct(self, factor=1):
        r"""ConstraintsBiLoad_Ct(ChLinkMotorRotationDriveline self, double factor=1)"""
        return _core.ChLinkMotorRotationDriveline_ConstraintsBiLoad_Ct(self, factor)

    def ConstraintsLoadJacobians(self):
        r"""ConstraintsLoadJacobians(ChLinkMotorRotationDriveline self)"""
        return _core.ChLinkMotorRotationDriveline_ConstraintsLoadJacobians(self)

    def ConstraintsFetch_react(self, factor=1):
        r"""ConstraintsFetch_react(ChLinkMotorRotationDriveline self, double factor=1)"""
        return _core.ChLinkMotorRotationDriveline_ConstraintsFetch_react(self, factor)

    def InjectVariables(self, mdescriptor):
        r"""InjectVariables(ChLinkMotorRotationDriveline self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChLinkMotorRotationDriveline_InjectVariables(self, mdescriptor)

    def VariablesFbReset(self):
        r"""VariablesFbReset(ChLinkMotorRotationDriveline self)"""
        return _core.ChLinkMotorRotationDriveline_VariablesFbReset(self)

    def VariablesFbLoadForces(self, factor=1):
        r"""VariablesFbLoadForces(ChLinkMotorRotationDriveline self, double factor=1)"""
        return _core.ChLinkMotorRotationDriveline_VariablesFbLoadForces(self, factor)

    def VariablesQbLoadSpeed(self):
        r"""VariablesQbLoadSpeed(ChLinkMotorRotationDriveline self)"""
        return _core.ChLinkMotorRotationDriveline_VariablesQbLoadSpeed(self)

    def VariablesFbIncrementMq(self):
        r"""VariablesFbIncrementMq(ChLinkMotorRotationDriveline self)"""
        return _core.ChLinkMotorRotationDriveline_VariablesFbIncrementMq(self)

    def VariablesQbSetSpeed(self, step=0):
        r"""VariablesQbSetSpeed(ChLinkMotorRotationDriveline self, double step=0)"""
        return _core.ChLinkMotorRotationDriveline_VariablesQbSetSpeed(self, step)

    def VariablesQbIncrementPosition(self, step):
        r"""VariablesQbIncrementPosition(ChLinkMotorRotationDriveline self, double step)"""
        return _core.ChLinkMotorRotationDriveline_VariablesQbIncrementPosition(self, step)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkMotorRotationDriveline self, ChArchiveOut & marchive)"""
        return _core.ChLinkMotorRotationDriveline_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkMotorRotationDriveline self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkMotorRotationDriveline_ArchiveIN(self, marchive)

# Register ChLinkMotorRotationDriveline in _core:
_core.ChLinkMotorRotationDriveline_swigregister(ChLinkMotorRotationDriveline)

class ChLinkMotorRotationSpeed(ChLinkMotorRotation):
    r"""Proxy of C++ chrono::ChLinkMotorRotationSpeed class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkMotorRotationSpeed self) -> ChLinkMotorRotationSpeed
        __init__(ChLinkMotorRotationSpeed self, ChLinkMotorRotationSpeed other) -> ChLinkMotorRotationSpeed
        """
        _core.ChLinkMotorRotationSpeed_swiginit(self, _core.new_ChLinkMotorRotationSpeed(*args))
    __swig_destroy__ = _core.delete_ChLinkMotorRotationSpeed

    def Clone(self):
        r"""Clone(ChLinkMotorRotationSpeed self) -> ChLinkMotorRotationSpeed"""
        return _core.ChLinkMotorRotationSpeed_Clone(self)

    def SetSpeedFunction(self, function):
        r"""SetSpeedFunction(ChLinkMotorRotationSpeed self, std::shared_ptr< chrono::ChFunction > const function)"""
        return _core.ChLinkMotorRotationSpeed_SetSpeedFunction(self, function)

    def GetSpeedFunction(self):
        r"""GetSpeedFunction(ChLinkMotorRotationSpeed self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkMotorRotationSpeed_GetSpeedFunction(self)

    def SetAngleOffset(self, mo):
        r"""SetAngleOffset(ChLinkMotorRotationSpeed self, double mo)"""
        return _core.ChLinkMotorRotationSpeed_SetAngleOffset(self, mo)

    def GetAngleOffset(self):
        r"""GetAngleOffset(ChLinkMotorRotationSpeed self) -> double"""
        return _core.ChLinkMotorRotationSpeed_GetAngleOffset(self)

    def SetAvoidAngleDrift(self, mb):
        r"""SetAvoidAngleDrift(ChLinkMotorRotationSpeed self, bool mb)"""
        return _core.ChLinkMotorRotationSpeed_SetAvoidAngleDrift(self, mb)

    def GetAvoidAngleDrift(self):
        r"""GetAvoidAngleDrift(ChLinkMotorRotationSpeed self) -> bool"""
        return _core.ChLinkMotorRotationSpeed_GetAvoidAngleDrift(self)

    def GetMotorTorque(self):
        r"""GetMotorTorque(ChLinkMotorRotationSpeed self) -> double"""
        return _core.ChLinkMotorRotationSpeed_GetMotorTorque(self)

    def Update(self, mytime, update_assets=True):
        r"""Update(ChLinkMotorRotationSpeed self, double mytime, bool update_assets=True)"""
        return _core.ChLinkMotorRotationSpeed_Update(self, mytime, update_assets)

    def GetDOF(self):
        r"""GetDOF(ChLinkMotorRotationSpeed self) -> int"""
        return _core.ChLinkMotorRotationSpeed_GetDOF(self)

    def Variables(self):
        r"""Variables(ChLinkMotorRotationSpeed self) -> ChVariablesGeneric &"""
        return _core.ChLinkMotorRotationSpeed_Variables(self)

    def IntStateGather(self, off_x, x, off_v, v, T):
        r"""IntStateGather(ChLinkMotorRotationSpeed self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double & T)"""
        return _core.ChLinkMotorRotationSpeed_IntStateGather(self, off_x, x, off_v, v, T)

    def IntStateScatter(self, off_x, x, off_v, v, T):
        r"""IntStateScatter(ChLinkMotorRotationSpeed self, unsigned int const off_x, ChState x, unsigned int const off_v, ChStateDelta v, double const T)"""
        return _core.ChLinkMotorRotationSpeed_IntStateScatter(self, off_x, x, off_v, v, T)

    def IntStateGatherAcceleration(self, off_a, a):
        r"""IntStateGatherAcceleration(ChLinkMotorRotationSpeed self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChLinkMotorRotationSpeed_IntStateGatherAcceleration(self, off_a, a)

    def IntStateScatterAcceleration(self, off_a, a):
        r"""IntStateScatterAcceleration(ChLinkMotorRotationSpeed self, unsigned int const off_a, ChStateDelta a)"""
        return _core.ChLinkMotorRotationSpeed_IntStateScatterAcceleration(self, off_a, a)

    def IntLoadResidual_F(self, off, R, c):
        r"""IntLoadResidual_F(ChLinkMotorRotationSpeed self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _core.ChLinkMotorRotationSpeed_IntLoadResidual_F(self, off, R, c)

    def IntLoadResidual_Mv(self, off, R, w, c):
        r"""IntLoadResidual_Mv(ChLinkMotorRotationSpeed self, unsigned int const off, ChVectorDynamicD R, ChVectorDynamicD w, double const c)"""
        return _core.ChLinkMotorRotationSpeed_IntLoadResidual_Mv(self, off, R, w, c)

    def IntToDescriptor(self, off_v, v, R, off_L, L, Qc):
        r"""IntToDescriptor(ChLinkMotorRotationSpeed self, unsigned int const off_v, ChStateDelta v, ChVectorDynamicD R, unsigned int const off_L, ChVectorDynamicD L, ChVectorDynamicD Qc)"""
        return _core.ChLinkMotorRotationSpeed_IntToDescriptor(self, off_v, v, R, off_L, L, Qc)

    def IntFromDescriptor(self, off_v, v, off_L, L):
        r"""IntFromDescriptor(ChLinkMotorRotationSpeed self, unsigned int const off_v, ChStateDelta v, unsigned int const off_L, ChVectorDynamicD L)"""
        return _core.ChLinkMotorRotationSpeed_IntFromDescriptor(self, off_v, v, off_L, L)

    def IntLoadConstraint_Ct(self, off, Qc, c):
        r"""IntLoadConstraint_Ct(ChLinkMotorRotationSpeed self, unsigned int const off, ChVectorDynamicD Qc, double const c)"""
        return _core.ChLinkMotorRotationSpeed_IntLoadConstraint_Ct(self, off, Qc, c)

    def VariablesFbReset(self):
        r"""VariablesFbReset(ChLinkMotorRotationSpeed self)"""
        return _core.ChLinkMotorRotationSpeed_VariablesFbReset(self)

    def VariablesFbLoadForces(self, factor=1):
        r"""VariablesFbLoadForces(ChLinkMotorRotationSpeed self, double factor=1)"""
        return _core.ChLinkMotorRotationSpeed_VariablesFbLoadForces(self, factor)

    def VariablesQbLoadSpeed(self):
        r"""VariablesQbLoadSpeed(ChLinkMotorRotationSpeed self)"""
        return _core.ChLinkMotorRotationSpeed_VariablesQbLoadSpeed(self)

    def VariablesFbIncrementMq(self):
        r"""VariablesFbIncrementMq(ChLinkMotorRotationSpeed self)"""
        return _core.ChLinkMotorRotationSpeed_VariablesFbIncrementMq(self)

    def VariablesQbSetSpeed(self, step=0):
        r"""VariablesQbSetSpeed(ChLinkMotorRotationSpeed self, double step=0)"""
        return _core.ChLinkMotorRotationSpeed_VariablesQbSetSpeed(self, step)

    def InjectVariables(self, mdescriptor):
        r"""InjectVariables(ChLinkMotorRotationSpeed self, ChSystemDescriptor & mdescriptor)"""
        return _core.ChLinkMotorRotationSpeed_InjectVariables(self, mdescriptor)

    def ConstraintsBiLoad_Ct(self, factor=1):
        r"""ConstraintsBiLoad_Ct(ChLinkMotorRotationSpeed self, double factor=1)"""
        return _core.ChLinkMotorRotationSpeed_ConstraintsBiLoad_Ct(self, factor)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkMotorRotationSpeed self, ChArchiveOut & marchive)"""
        return _core.ChLinkMotorRotationSpeed_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkMotorRotationSpeed self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkMotorRotationSpeed_ArchiveIN(self, marchive)

# Register ChLinkMotorRotationSpeed in _core:
_core.ChLinkMotorRotationSpeed_swigregister(ChLinkMotorRotationSpeed)

class ChLinkMotorRotationTorque(ChLinkMotorRotation):
    r"""Proxy of C++ chrono::ChLinkMotorRotationTorque class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChLinkMotorRotationTorque self) -> ChLinkMotorRotationTorque
        __init__(ChLinkMotorRotationTorque self, ChLinkMotorRotationTorque other) -> ChLinkMotorRotationTorque
        """
        _core.ChLinkMotorRotationTorque_swiginit(self, _core.new_ChLinkMotorRotationTorque(*args))
    __swig_destroy__ = _core.delete_ChLinkMotorRotationTorque

    def Clone(self):
        r"""Clone(ChLinkMotorRotationTorque self) -> ChLinkMotorRotationTorque"""
        return _core.ChLinkMotorRotationTorque_Clone(self)

    def SetTorqueFunction(self, function):
        r"""SetTorqueFunction(ChLinkMotorRotationTorque self, std::shared_ptr< chrono::ChFunction > const function)"""
        return _core.ChLinkMotorRotationTorque_SetTorqueFunction(self, function)

    def GetTorqueFunction(self):
        r"""GetTorqueFunction(ChLinkMotorRotationTorque self) -> std::shared_ptr< chrono::ChFunction >"""
        return _core.ChLinkMotorRotationTorque_GetTorqueFunction(self)

    def GetMotorTorque(self):
        r"""GetMotorTorque(ChLinkMotorRotationTorque self) -> double"""
        return _core.ChLinkMotorRotationTorque_GetMotorTorque(self)

    def Update(self, mytime, update_assets):
        r"""Update(ChLinkMotorRotationTorque self, double mytime, bool update_assets)"""
        return _core.ChLinkMotorRotationTorque_Update(self, mytime, update_assets)

    def IntLoadResidual_F(self, off, R, c):
        r"""IntLoadResidual_F(ChLinkMotorRotationTorque self, unsigned int const off, ChVectorDynamicD R, double const c)"""
        return _core.ChLinkMotorRotationTorque_IntLoadResidual_F(self, off, R, c)

    def ConstraintsFbLoadForces(self, factor=1):
        r"""ConstraintsFbLoadForces(ChLinkMotorRotationTorque self, double factor=1)"""
        return _core.ChLinkMotorRotationTorque_ConstraintsFbLoadForces(self, factor)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChLinkMotorRotationTorque self, ChArchiveOut & marchive)"""
        return _core.ChLinkMotorRotationTorque_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChLinkMotorRotationTorque self, chrono::ChArchiveIn & marchive)"""
        return _core.ChLinkMotorRotationTorque_ArchiveIN(self, marchive)

# Register ChLinkMotorRotationTorque in _core:
_core.ChLinkMotorRotationTorque_swigregister(ChLinkMotorRotationTorque)

class CSV_writer(object):
    r"""Proxy of C++ chrono::utils::CSV_writer class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(CSV_writer self, std::string const & delim=",") -> CSV_writer
        __init__(CSV_writer self, CSV_writer source) -> CSV_writer
        """
        _core.CSV_writer_swiginit(self, _core.new_CSV_writer(*args))
    __swig_destroy__ = _core.delete_CSV_writer

    def write_to_file(self, *args):
        r"""write_to_file(CSV_writer self, std::string const & filename, std::string const & header="")"""
        return _core.CSV_writer_write_to_file(self, *args)

    def delim(self):
        r"""delim(CSV_writer self) -> std::string const &"""
        return _core.CSV_writer_delim(self)

    def stream(self):
        r"""stream(CSV_writer self) -> std::ostringstream &"""
        return _core.CSV_writer_stream(self)

    def __lshift__(self, *args):
        r"""
        __lshift__(CSV_writer self, std::ostream &(*)(std::ostream &) t) -> CSV_writer
        __lshift__(CSV_writer self, std::ios &(*)(std::ios &) t) -> CSV_writer
        __lshift__(CSV_writer self, std::ios_base &(*)(std::ios_base &) t) -> CSV_writer
        """
        return _core.CSV_writer___lshift__(self, *args)

# Register CSV_writer in _core:
_core.CSV_writer_swigregister(CSV_writer)


def __lshift__(out, c):
    r"""__lshift__(CSV_writer out, ChColor c) -> CSV_writer"""
    return _core.__lshift__(out, c)

def WriteBodies(*args):
    r"""WriteBodies(ChSystem system, std::string const & filename, bool active_only=False, bool dump_vel=False, std::string const & delim=",")"""
    return _core.WriteBodies(*args)

def WriteCheckpoint(system, filename):
    r"""WriteCheckpoint(ChSystem system, std::string const & filename) -> bool"""
    return _core.WriteCheckpoint(system, filename)

def ReadCheckpoint(system, filename):
    r"""ReadCheckpoint(ChSystem system, std::string const & filename)"""
    return _core.ReadCheckpoint(system, filename)

def WriteShapesPovray(*args):
    r"""WriteShapesPovray(ChSystem system, std::string const & filename, bool body_info=True, std::string const & delim=",")"""
    return _core.WriteShapesPovray(*args)

def WriteMeshPovray(*args):
    r"""
    WriteMeshPovray(ChTriangleMeshConnected trimesh, std::string const & mesh_name, std::string const & out_dir, ChColor color=chrono::ChColor(0.4f, 0.4f, 0.4f), ChVectorD pos=chrono::ChVector< double >(0, 0, 0), ChQuaternionD rot=chrono::ChQuaternion< double >(1, 0, 0, 0), bool smoothed=False)
    WriteMeshPovray(std::string const & obj_filename, std::string const & mesh_name, std::string const & out_dir, ChColor color=chrono::ChColor(0.4f, 0.4f, 0.4f), ChVectorD pos=chrono::ChVector< double >(0, 0, 0), ChQuaternionD rot=chrono::ChQuaternion< double >(1, 0, 0, 0))
    """
    return _core.WriteMeshPovray(*args)

def WriteCurvePovray(*args):
    r"""WriteCurvePovray(ChBezierCurve curve, std::string const & curve_name, std::string const & out_dir, double radius=0.03, ChColor col=chrono::ChColor(0.8f, 0.8f, 0.2f))"""
    return _core.WriteCurvePovray(*args)

def CastToChVisualization(in_obj):
    r"""CastToChVisualization(std::shared_ptr< chrono::ChAsset > in_obj) -> std::shared_ptr< chrono::ChVisualization >"""
    return _core.CastToChVisualization(in_obj)

def CastToChObjShapeFile(in_obj):
    r"""CastToChObjShapeFile(std::shared_ptr< chrono::ChAsset > in_obj) -> std::shared_ptr< chrono::ChObjShapeFile >"""
    return _core.CastToChObjShapeFile(in_obj)

def CastToChBoxShape(in_obj):
    r"""CastToChBoxShape(std::shared_ptr< chrono::ChAsset > in_obj) -> std::shared_ptr< chrono::ChBoxShape >"""
    return _core.CastToChBoxShape(in_obj)

def CastToChSphereShape(in_obj):
    r"""CastToChSphereShape(std::shared_ptr< chrono::ChAsset > in_obj) -> std::shared_ptr< chrono::ChSphereShape >"""
    return _core.CastToChSphereShape(in_obj)

def CastToChCylinderShape(in_obj):
    r"""CastToChCylinderShape(std::shared_ptr< chrono::ChAsset > in_obj) -> std::shared_ptr< chrono::ChCylinderShape >"""
    return _core.CastToChCylinderShape(in_obj)

def CastToChTexture(in_obj):
    r"""CastToChTexture(std::shared_ptr< chrono::ChAsset > in_obj) -> std::shared_ptr< chrono::ChTexture >"""
    return _core.CastToChTexture(in_obj)

def CastToChAssetLevel(in_obj):
    r"""CastToChAssetLevel(std::shared_ptr< chrono::ChAsset > in_obj) -> std::shared_ptr< chrono::ChAssetLevel >"""
    return _core.CastToChAssetLevel(in_obj)

def CastToChCamera(in_obj):
    r"""CastToChCamera(std::shared_ptr< chrono::ChAsset > in_obj) -> std::shared_ptr< chrono::ChCamera >"""
    return _core.CastToChCamera(in_obj)

def CastToChLineShape(in_obj):
    r"""CastToChLineShape(std::shared_ptr< chrono::ChAsset > in_obj) -> std::shared_ptr< chrono::ChLineShape >"""
    return _core.CastToChLineShape(in_obj)

def CastToChSurfaceShape(in_obj):
    r"""CastToChSurfaceShape(std::shared_ptr< chrono::ChAsset > in_obj) -> std::shared_ptr< chrono::ChSurfaceShape >"""
    return _core.CastToChSurfaceShape(in_obj)

def CastToChPathShape(in_obj):
    r"""CastToChPathShape(std::shared_ptr< chrono::ChAsset > in_obj) -> std::shared_ptr< chrono::ChPathShape >"""
    return _core.CastToChPathShape(in_obj)

def CastToChPointPointDrawing(in_obj):
    r"""CastToChPointPointDrawing(std::shared_ptr< chrono::ChAsset > in_obj) -> std::shared_ptr< chrono::ChPointPointDrawing >"""
    return _core.CastToChPointPointDrawing(in_obj)

def CastToChPointPointSegment(in_obj):
    r"""CastToChPointPointSegment(std::shared_ptr< chrono::ChAsset > in_obj) -> std::shared_ptr< chrono::ChPointPointSegment >"""
    return _core.CastToChPointPointSegment(in_obj)

def CastToChPointPointSpring(in_obj):
    r"""CastToChPointPointSpring(std::shared_ptr< chrono::ChAsset > in_obj) -> std::shared_ptr< chrono::ChPointPointSpring >"""
    return _core.CastToChPointPointSpring(in_obj)

def CastToChTriangleMeshShape(in_obj):
    r"""CastToChTriangleMeshShape(std::shared_ptr< chrono::ChAsset > in_obj) -> std::shared_ptr< chrono::ChTriangleMeshShape >"""
    return _core.CastToChTriangleMeshShape(in_obj)

def CastToChEllipsoidShape(in_obj):
    r"""CastToChEllipsoidShape(std::shared_ptr< chrono::ChAsset > in_obj) -> std::shared_ptr< chrono::ChEllipsoidShape >"""
    return _core.CastToChEllipsoidShape(in_obj)

def CastToChBodyFrame(*args):
    r"""
    CastToChBodyFrame(std::shared_ptr< chrono::ChBody > in_obj) -> std::shared_ptr< chrono::ChBodyFrame >
    CastToChBodyFrame(std::shared_ptr< chrono::ChBodyAuxRef > in_obj) -> std::shared_ptr< chrono::ChBodyFrame >
    """
    return _core.CastToChBodyFrame(*args)

def CastToChBody(*args):
    r"""
    CastToChBody(std::shared_ptr< chrono::ChBodyFrame > in_obj) -> std::shared_ptr< chrono::ChBody >
    CastToChBody(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChBody >
    """
    return _core.CastToChBody(*args)

def CastToChConveyor(*args):
    r"""
    CastToChConveyor(std::shared_ptr< chrono::ChBodyFrame > in_obj) -> std::shared_ptr< chrono::ChConveyor >
    CastToChConveyor(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChConveyor >
    """
    return _core.CastToChConveyor(*args)

def CastToChBodyAuxRef(*args):
    r"""
    CastToChBodyAuxRef(std::shared_ptr< chrono::ChBodyFrame > in_obj) -> std::shared_ptr< chrono::ChBodyAuxRef >
    CastToChBodyAuxRef(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChBodyAuxRef >
    """
    return _core.CastToChBodyAuxRef(*args)

def CastToChIndexedParticles(in_obj):
    r"""CastToChIndexedParticles(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChIndexedParticles >"""
    return _core.CastToChIndexedParticles(in_obj)

def CastToChParticlesClones(in_obj):
    r"""CastToChParticlesClones(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChParticlesClones >"""
    return _core.CastToChParticlesClones(in_obj)

def CastToChLink(in_obj):
    r"""CastToChLink(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLink >"""
    return _core.CastToChLink(in_obj)

def CastToChLinkRotSpringCB(in_obj):
    r"""CastToChLinkRotSpringCB(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkRotSpringCB >"""
    return _core.CastToChLinkRotSpringCB(in_obj)

def CastToChLinkMotor(in_obj):
    r"""CastToChLinkMotor(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkMotor >"""
    return _core.CastToChLinkMotor(in_obj)

def CastToChLinkMotorLinear(in_obj):
    r"""CastToChLinkMotorLinear(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkMotorLinear >"""
    return _core.CastToChLinkMotorLinear(in_obj)

def CastToChLinkMotorLinearDriveline(in_obj):
    r"""CastToChLinkMotorLinearDriveline(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkMotorLinearDriveline >"""
    return _core.CastToChLinkMotorLinearDriveline(in_obj)

def CastToChLinkMotorLinearForce(in_obj):
    r"""CastToChLinkMotorLinearForce(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkMotorLinearForce >"""
    return _core.CastToChLinkMotorLinearForce(in_obj)

def CastToChLinkMotorLinearPosition(in_obj):
    r"""CastToChLinkMotorLinearPosition(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkMotorLinearPosition >"""
    return _core.CastToChLinkMotorLinearPosition(in_obj)

def CastToChLinkMotorLinearSpeed(in_obj):
    r"""CastToChLinkMotorLinearSpeed(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkMotorLinearSpeed >"""
    return _core.CastToChLinkMotorLinearSpeed(in_obj)

def CastToChLinkMotorRotation(in_obj):
    r"""CastToChLinkMotorRotation(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkMotorRotation >"""
    return _core.CastToChLinkMotorRotation(in_obj)

def CastToChLinkMotorRotationAngle(in_obj):
    r"""CastToChLinkMotorRotationAngle(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkMotorRotationAngle >"""
    return _core.CastToChLinkMotorRotationAngle(in_obj)

def CastToChLinkMotorRotationDriveline(in_obj):
    r"""CastToChLinkMotorRotationDriveline(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkMotorRotationDriveline >"""
    return _core.CastToChLinkMotorRotationDriveline(in_obj)

def CastToChLinkMotorRotationSpeed(in_obj):
    r"""CastToChLinkMotorRotationSpeed(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkMotorRotationSpeed >"""
    return _core.CastToChLinkMotorRotationSpeed(in_obj)

def CastToChLinkMotorRotationTorque(in_obj):
    r"""CastToChLinkMotorRotationTorque(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkMotorRotationTorque >"""
    return _core.CastToChLinkMotorRotationTorque(in_obj)

def CastToChLoadContainer(in_obj):
    r"""CastToChLoadContainer(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLoadContainer >"""
    return _core.CastToChLoadContainer(in_obj)

def CastToChLinkMarkers(*args):
    r"""
    CastToChLinkMarkers(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkMarkers >
    CastToChLinkMarkers(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkMarkers >
    """
    return _core.CastToChLinkMarkers(*args)

def CastToChLinkLock(*args):
    r"""
    CastToChLinkLock(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkLock >
    CastToChLinkLock(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkLock >
    """
    return _core.CastToChLinkLock(*args)

def CastToChLinkLockLock(*args):
    r"""
    CastToChLinkLockLock(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkLockLock >
    CastToChLinkLockLock(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkLockLock >
    """
    return _core.CastToChLinkLockLock(*args)

def CastToChLinkLockRevolute(*args):
    r"""
    CastToChLinkLockRevolute(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkLockRevolute >
    CastToChLinkLockRevolute(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkLockRevolute >
    """
    return _core.CastToChLinkLockRevolute(*args)

def CastToChLinkLockSpherical(*args):
    r"""
    CastToChLinkLockSpherical(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkLockSpherical >
    CastToChLinkLockSpherical(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkLockSpherical >
    """
    return _core.CastToChLinkLockSpherical(*args)

def CastToChLinkLockCylindrical(*args):
    r"""
    CastToChLinkLockCylindrical(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkLockCylindrical >
    CastToChLinkLockCylindrical(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkLockCylindrical >
    """
    return _core.CastToChLinkLockCylindrical(*args)

def CastToChLinkLockPrismatic(*args):
    r"""
    CastToChLinkLockPrismatic(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkLockPrismatic >
    CastToChLinkLockPrismatic(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkLockPrismatic >
    """
    return _core.CastToChLinkLockPrismatic(*args)

def CastToChLinkLockPointPlane(*args):
    r"""
    CastToChLinkLockPointPlane(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkLockPointPlane >
    CastToChLinkLockPointPlane(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkLockPointPlane >
    """
    return _core.CastToChLinkLockPointPlane(*args)

def CastToChLinkLockPointLine(*args):
    r"""
    CastToChLinkLockPointLine(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkLockPointLine >
    CastToChLinkLockPointLine(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkLockPointLine >
    """
    return _core.CastToChLinkLockPointLine(*args)

def CastToChLinkLockOldham(*args):
    r"""
    CastToChLinkLockOldham(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkLockOldham >
    CastToChLinkLockOldham(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkLockOldham >
    """
    return _core.CastToChLinkLockOldham(*args)

def CastToChLinkLockFree(*args):
    r"""
    CastToChLinkLockFree(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkLockFree >
    CastToChLinkLockFree(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkLockFree >
    """
    return _core.CastToChLinkLockFree(*args)

def CastToChLinkLockAlign(*args):
    r"""
    CastToChLinkLockAlign(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkLockAlign >
    CastToChLinkLockAlign(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkLockAlign >
    """
    return _core.CastToChLinkLockAlign(*args)

def CastToChLinkLockParallel(*args):
    r"""
    CastToChLinkLockParallel(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkLockParallel >
    CastToChLinkLockParallel(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkLockParallel >
    """
    return _core.CastToChLinkLockParallel(*args)

def CastToChLinkLockPerpend(*args):
    r"""
    CastToChLinkLockPerpend(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkLockPerpend >
    CastToChLinkLockPerpend(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkLockPerpend >
    """
    return _core.CastToChLinkLockPerpend(*args)

def CastToChLinkMate(*args):
    r"""
    CastToChLinkMate(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkMate >
    CastToChLinkMate(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkMate >
    """
    return _core.CastToChLinkMate(*args)

def CastToChLinkMateGeneric(*args):
    r"""
    CastToChLinkMateGeneric(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkMateGeneric >
    CastToChLinkMateGeneric(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkMateGeneric >
    """
    return _core.CastToChLinkMateGeneric(*args)

def CastToChLinkMatePlane(*args):
    r"""
    CastToChLinkMatePlane(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkMatePlane >
    CastToChLinkMatePlane(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkMatePlane >
    """
    return _core.CastToChLinkMatePlane(*args)

def CastToChLinkMateCoaxial(*args):
    r"""
    CastToChLinkMateCoaxial(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkMateCoaxial >
    CastToChLinkMateCoaxial(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkMateCoaxial >
    """
    return _core.CastToChLinkMateCoaxial(*args)

def CastToChLinkMateSpherical(*args):
    r"""
    CastToChLinkMateSpherical(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkMateSpherical >
    CastToChLinkMateSpherical(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkMateSpherical >
    """
    return _core.CastToChLinkMateSpherical(*args)

def CastToChLinkMateXdistance(*args):
    r"""
    CastToChLinkMateXdistance(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkMateXdistance >
    CastToChLinkMateXdistance(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkMateXdistance >
    """
    return _core.CastToChLinkMateXdistance(*args)

def CastToChLinkMateParallel(*args):
    r"""
    CastToChLinkMateParallel(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkMateParallel >
    CastToChLinkMateParallel(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkMateParallel >
    """
    return _core.CastToChLinkMateParallel(*args)

def CastToChLinkMateOrthogonal(*args):
    r"""
    CastToChLinkMateOrthogonal(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkMateOrthogonal >
    CastToChLinkMateOrthogonal(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkMateOrthogonal >
    """
    return _core.CastToChLinkMateOrthogonal(*args)

def CastToChLinkMateFix(*args):
    r"""
    CastToChLinkMateFix(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkMateFix >
    CastToChLinkMateFix(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkMateFix >
    """
    return _core.CastToChLinkMateFix(*args)

def CastToChLinkGear(*args):
    r"""
    CastToChLinkGear(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkGear >
    CastToChLinkGear(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkGear >
    """
    return _core.CastToChLinkGear(*args)

def CastToChLinkDistance(*args):
    r"""
    CastToChLinkDistance(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkDistance >
    CastToChLinkDistance(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkDistance >
    """
    return _core.CastToChLinkDistance(*args)

def CastToChLinkLinActuator(*args):
    r"""
    CastToChLinkLinActuator(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkLinActuator >
    CastToChLinkLinActuator(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkLinActuator >
    """
    return _core.CastToChLinkLinActuator(*args)

def CastToChLinkPulley(*args):
    r"""
    CastToChLinkPulley(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkPulley >
    CastToChLinkPulley(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkPulley >
    """
    return _core.CastToChLinkPulley(*args)

def CastToChLinkScrew(*args):
    r"""
    CastToChLinkScrew(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkScrew >
    CastToChLinkScrew(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkScrew >
    """
    return _core.CastToChLinkScrew(*args)

def CastToChLinkSpring(*args):
    r"""
    CastToChLinkSpring(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkSpring >
    CastToChLinkSpring(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkSpring >
    """
    return _core.CastToChLinkSpring(*args)

def CastToChLinkTSDA(*args):
    r"""
    CastToChLinkTSDA(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChLinkTSDA >
    CastToChLinkTSDA(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkTSDA >
    """
    return _core.CastToChLinkTSDA(*args)

def CastToChLinkPointSpline(in_obj):
    r"""CastToChLinkPointSpline(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkPointSpline >"""
    return _core.CastToChLinkPointSpline(in_obj)

def CastToChLinkTrajectory(in_obj):
    r"""CastToChLinkTrajectory(std::shared_ptr< chrono::ChLink > in_obj) -> std::shared_ptr< chrono::ChLinkTrajectory >"""
    return _core.CastToChLinkTrajectory(in_obj)

def CastToChFunction_Const(in_obj):
    r"""CastToChFunction_Const(std::shared_ptr< chrono::ChFunction > in_obj) -> std::shared_ptr< chrono::ChFunction_Const >"""
    return _core.CastToChFunction_Const(in_obj)

def CastToChFunction_ConstAcc(in_obj):
    r"""CastToChFunction_ConstAcc(std::shared_ptr< chrono::ChFunction > in_obj) -> std::shared_ptr< chrono::ChFunction_ConstAcc >"""
    return _core.CastToChFunction_ConstAcc(in_obj)

def CastToChFunction_Derive(in_obj):
    r"""CastToChFunction_Derive(std::shared_ptr< chrono::ChFunction > in_obj) -> std::shared_ptr< chrono::ChFunction_Derive >"""
    return _core.CastToChFunction_Derive(in_obj)

def CastToChFunction_Fillet3(in_obj):
    r"""CastToChFunction_Fillet3(std::shared_ptr< chrono::ChFunction > in_obj) -> std::shared_ptr< chrono::ChFunction_Fillet3 >"""
    return _core.CastToChFunction_Fillet3(in_obj)

def CastToChFunction_Integrate(in_obj):
    r"""CastToChFunction_Integrate(std::shared_ptr< chrono::ChFunction > in_obj) -> std::shared_ptr< chrono::ChFunction_Integrate >"""
    return _core.CastToChFunction_Integrate(in_obj)

def CastToChFunction_Mirror(in_obj):
    r"""CastToChFunction_Mirror(std::shared_ptr< chrono::ChFunction > in_obj) -> std::shared_ptr< chrono::ChFunction_Mirror >"""
    return _core.CastToChFunction_Mirror(in_obj)

def CastToChFunction_Mocap(in_obj):
    r"""CastToChFunction_Mocap(std::shared_ptr< chrono::ChFunction > in_obj) -> std::shared_ptr< chrono::ChFunction_Mocap >"""
    return _core.CastToChFunction_Mocap(in_obj)

def CastToChFunction_Noise(in_obj):
    r"""CastToChFunction_Noise(std::shared_ptr< chrono::ChFunction > in_obj) -> std::shared_ptr< chrono::ChFunction_Noise >"""
    return _core.CastToChFunction_Noise(in_obj)

def CastToChFunction_Operation(in_obj):
    r"""CastToChFunction_Operation(std::shared_ptr< chrono::ChFunction > in_obj) -> std::shared_ptr< chrono::ChFunction_Operation >"""
    return _core.CastToChFunction_Operation(in_obj)

def CastToChFunction_Oscilloscope(in_obj):
    r"""CastToChFunction_Oscilloscope(std::shared_ptr< chrono::ChFunction > in_obj) -> std::shared_ptr< chrono::ChFunction_Oscilloscope >"""
    return _core.CastToChFunction_Oscilloscope(in_obj)

def CastToChFunction_Poly(in_obj):
    r"""CastToChFunction_Poly(std::shared_ptr< chrono::ChFunction > in_obj) -> std::shared_ptr< chrono::ChFunction_Poly >"""
    return _core.CastToChFunction_Poly(in_obj)

def CastToChFunction_Poly345(in_obj):
    r"""CastToChFunction_Poly345(std::shared_ptr< chrono::ChFunction > in_obj) -> std::shared_ptr< chrono::ChFunction_Poly345 >"""
    return _core.CastToChFunction_Poly345(in_obj)

def CastToChFunction_Ramp(in_obj):
    r"""CastToChFunction_Ramp(std::shared_ptr< chrono::ChFunction > in_obj) -> std::shared_ptr< chrono::ChFunction_Ramp >"""
    return _core.CastToChFunction_Ramp(in_obj)

def CastToChFunction_Recorder(in_obj):
    r"""CastToChFunction_Recorder(std::shared_ptr< chrono::ChFunction > in_obj) -> std::shared_ptr< chrono::ChFunction_Recorder >"""
    return _core.CastToChFunction_Recorder(in_obj)

def CastToChFunction_Repeat(in_obj):
    r"""CastToChFunction_Repeat(std::shared_ptr< chrono::ChFunction > in_obj) -> std::shared_ptr< chrono::ChFunction_Repeat >"""
    return _core.CastToChFunction_Repeat(in_obj)

def CastToChFunction_Sequence(in_obj):
    r"""CastToChFunction_Sequence(std::shared_ptr< chrono::ChFunction > in_obj) -> std::shared_ptr< chrono::ChFunction_Sequence >"""
    return _core.CastToChFunction_Sequence(in_obj)

def CastToChFunction_Sigma(in_obj):
    r"""CastToChFunction_Sigma(std::shared_ptr< chrono::ChFunction > in_obj) -> std::shared_ptr< chrono::ChFunction_Sigma >"""
    return _core.CastToChFunction_Sigma(in_obj)

def CastToChFunction_Sine(in_obj):
    r"""CastToChFunction_Sine(std::shared_ptr< chrono::ChFunction > in_obj) -> std::shared_ptr< chrono::ChFunction_Sine >"""
    return _core.CastToChFunction_Sine(in_obj)

def CastToChShaft(in_obj):
    r"""CastToChShaft(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChShaft >"""
    return _core.CastToChShaft(in_obj)

def CastToChShaftsBody(in_obj):
    r"""CastToChShaftsBody(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChShaftsBody >"""
    return _core.CastToChShaftsBody(in_obj)

def CastToChShaftsCouple(in_obj):
    r"""CastToChShaftsCouple(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChShaftsCouple >"""
    return _core.CastToChShaftsCouple(in_obj)

def CastToChShaftsClutch(in_obj):
    r"""CastToChShaftsClutch(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChShaftsClutch >"""
    return _core.CastToChShaftsClutch(in_obj)

def CastToChShaftsMotor(in_obj):
    r"""CastToChShaftsMotor(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChShaftsMotor >"""
    return _core.CastToChShaftsMotor(in_obj)

def CastToChShaftsTorsionSpring(in_obj):
    r"""CastToChShaftsTorsionSpring(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChShaftsTorsionSpring >"""
    return _core.CastToChShaftsTorsionSpring(in_obj)

def CastToChShaftsPlanetary(in_obj):
    r"""CastToChShaftsPlanetary(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChShaftsPlanetary >"""
    return _core.CastToChShaftsPlanetary(in_obj)

def CastToChShaftsTorqueBase(in_obj):
    r"""CastToChShaftsTorqueBase(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChShaftsTorqueBase >"""
    return _core.CastToChShaftsTorqueBase(in_obj)

def CastToChShaftsThermalEngine(in_obj):
    r"""CastToChShaftsThermalEngine(std::shared_ptr< chrono::ChPhysicsItem > in_obj) -> std::shared_ptr< chrono::ChShaftsThermalEngine >"""
    return _core.CastToChShaftsThermalEngine(in_obj)

def CastToChLoadCustom(in_obj):
    r"""CastToChLoadCustom(std::shared_ptr< chrono::ChLoadBase > in_obj) -> std::shared_ptr< chrono::ChLoadCustom >"""
    return _core.CastToChLoadCustom(in_obj)

def CastToChLoadCustomMultiple(in_obj):
    r"""CastToChLoadCustomMultiple(std::shared_ptr< chrono::ChLoadBase > in_obj) -> std::shared_ptr< chrono::ChLoadCustomMultiple >"""
    return _core.CastToChLoadCustomMultiple(in_obj)

def CastToChLoadBodyForce(in_obj):
    r"""CastToChLoadBodyForce(std::shared_ptr< chrono::ChLoadBase > in_obj) -> std::shared_ptr< chrono::ChLoadBodyForce >"""
    return _core.CastToChLoadBodyForce(in_obj)

def CastToChLoadBodyTorque(in_obj):
    r"""CastToChLoadBodyTorque(std::shared_ptr< chrono::ChLoadBase > in_obj) -> std::shared_ptr< chrono::ChLoadBodyTorque >"""
    return _core.CastToChLoadBodyTorque(in_obj)

def CastToChLoadBodyBody(in_obj):
    r"""CastToChLoadBodyBody(std::shared_ptr< chrono::ChLoadBase > in_obj) -> std::shared_ptr< chrono::ChLoadBodyBody >"""
    return _core.CastToChLoadBodyBody(in_obj)

def CastToChLoadBodyBodyTorque(in_obj):
    r"""CastToChLoadBodyBodyTorque(std::shared_ptr< chrono::ChLoadBase > in_obj) -> std::shared_ptr< chrono::ChLoadBodyBodyTorque >"""
    return _core.CastToChLoadBodyBodyTorque(in_obj)

def CastToChLoadBodyBodyBushingSpherical(in_obj):
    r"""CastToChLoadBodyBodyBushingSpherical(std::shared_ptr< chrono::ChLoadBase > in_obj) -> std::shared_ptr< chrono::ChLoadBodyBodyBushingSpherical >"""
    return _core.CastToChLoadBodyBodyBushingSpherical(in_obj)

def CastToChLoadBodyBodyBushingPlastic(in_obj):
    r"""CastToChLoadBodyBodyBushingPlastic(std::shared_ptr< chrono::ChLoadBase > in_obj) -> std::shared_ptr< chrono::ChLoadBodyBodyBushingPlastic >"""
    return _core.CastToChLoadBodyBodyBushingPlastic(in_obj)

def CastToChLoadBodyBodyBushingMate(in_obj):
    r"""CastToChLoadBodyBodyBushingMate(std::shared_ptr< chrono::ChLoadBase > in_obj) -> std::shared_ptr< chrono::ChLoadBodyBodyBushingMate >"""
    return _core.CastToChLoadBodyBodyBushingMate(in_obj)

def CastToChLoadBodyBodyBushingGeneric(in_obj):
    r"""CastToChLoadBodyBodyBushingGeneric(std::shared_ptr< chrono::ChLoadBase > in_obj) -> std::shared_ptr< chrono::ChLoadBodyBodyBushingGeneric >"""
    return _core.CastToChLoadBodyBodyBushingGeneric(in_obj)

def CastToChTriangleMeshConnected(in_obj):
    r"""CastToChTriangleMeshConnected(std::shared_ptr< chrono::geometry::ChGeometry > in_obj) -> std::shared_ptr< chrono::geometry::ChTriangleMeshConnected >"""
    return _core.CastToChTriangleMeshConnected(in_obj)

def CastToChTriangleMeshSoup(in_obj):
    r"""CastToChTriangleMeshSoup(std::shared_ptr< chrono::geometry::ChGeometry > in_obj) -> std::shared_ptr< chrono::geometry::ChTriangleMeshSoup >"""
    return _core.CastToChTriangleMeshSoup(in_obj)
class ChLogPython(ChLog):
    r"""Proxy of C++ chrono::ChLogPython class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChLogPython self) -> ChLogPython"""
        _core.ChLogPython_swiginit(self, _core.new_ChLogPython())
    __swig_destroy__ = _core.delete_ChLogPython

    def Output(self, data, n):
        r"""Output(ChLogPython self, char const * data, size_t n)"""
        return _core.ChLogPython_Output(self, data, n)

# Register ChLogPython in _core:
_core.ChLogPython_swigregister(ChLogPython)



def ImportSolidWorksSystem(mpath):
    import builtins
    import imp
    import os

    mdirname, mmodulename= os.path.split(mpath)

    builtins.exported_system_relpath = mdirname + "/"

    fp, pathname, description = imp.find_module(mmodulename,[builtins.exported_system_relpath])
    try:
        imported_mod = imp.load_module('imported_mod', fp, pathname, description)
    finally:
        if fp:
            fp.close()

    return imported_mod.exported_items




