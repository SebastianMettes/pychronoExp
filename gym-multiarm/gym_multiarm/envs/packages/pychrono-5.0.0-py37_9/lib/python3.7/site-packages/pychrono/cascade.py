# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cascade
else:
    import _cascade

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

SHARED_PTR_DISOWN = _cascade.SHARED_PTR_DISOWN

class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cascade.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _cascade.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _cascade.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _cascade.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _cascade.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _cascade.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _cascade.SwigPyIterator_copy(self)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _cascade.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _cascade.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _cascade.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _cascade.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _cascade.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _cascade.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _cascade.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _cascade.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _cascade.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _cascade.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _cascade:
_cascade.SwigPyIterator_swigregister(SwigPyIterator)

import pychrono.core
class ChCascadeShapeAsset(pychrono.core.ChAsset):
    r"""Proxy of C++ chrono::cascade::ChCascadeShapeAsset class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(ChCascadeShapeAsset self) -> ChCascadeShapeAsset
        __init__(ChCascadeShapeAsset self, TopoDS_Shape const & ms) -> ChCascadeShapeAsset
        """
        _cascade.ChCascadeShapeAsset_swiginit(self, _cascade.new_ChCascadeShapeAsset(*args))
    __swig_destroy__ = _cascade.delete_ChCascadeShapeAsset

    def Shape(self):
        r"""Shape(ChCascadeShapeAsset self) -> TopoDS_Shape &"""
        return _cascade.ChCascadeShapeAsset_Shape(self)

    def ArchiveOUT(self, marchive):
        r"""ArchiveOUT(ChCascadeShapeAsset self, ChArchiveOut & marchive)"""
        return _cascade.ChCascadeShapeAsset_ArchiveOUT(self, marchive)

    def ArchiveIN(self, marchive):
        r"""ArchiveIN(ChCascadeShapeAsset self, chrono::ChArchiveIn & marchive)"""
        return _cascade.ChCascadeShapeAsset_ArchiveIN(self, marchive)

# Register ChCascadeShapeAsset in _cascade:
_cascade.ChCascadeShapeAsset_swigregister(ChCascadeShapeAsset)

class ChBodyEasyCascade(pychrono.core.ChBodyAuxRef):
    r"""Proxy of C++ chrono::cascade::ChBodyEasyCascade class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mshape, mdensity, collide=False, visual_asset=True):
        r"""__init__(ChBodyEasyCascade self, TopoDS_Shape & mshape, double mdensity, bool collide=False, bool visual_asset=True) -> ChBodyEasyCascade"""
        _cascade.ChBodyEasyCascade_swiginit(self, _cascade.new_ChBodyEasyCascade(mshape, mdensity, collide, visual_asset))
    topods_shape = property(_cascade.ChBodyEasyCascade_topods_shape_get, _cascade.ChBodyEasyCascade_topods_shape_set, doc=r"""topods_shape : TopoDS_Shape""")
    __swig_destroy__ = _cascade.delete_ChBodyEasyCascade

# Register ChBodyEasyCascade in _cascade:
_cascade.ChBodyEasyCascade_swigregister(ChBodyEasyCascade)

class ChCascadeDoc(object):
    r"""Proxy of C++ chrono::cascade::ChCascadeDoc class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        r"""__init__(ChCascadeDoc self) -> ChCascadeDoc"""
        _cascade.ChCascadeDoc_swiginit(self, _cascade.new_ChCascadeDoc())
    __swig_destroy__ = _cascade.delete_ChCascadeDoc

    def Load_STEP(self, filename):
        r"""Load_STEP(ChCascadeDoc self, char const * filename) -> bool"""
        return _cascade.ChCascadeDoc_Load_STEP(self, filename)

    def Dump(self, mstream):
        r"""Dump(ChCascadeDoc self, ChStreamOutAscii & mstream)"""
        return _cascade.ChCascadeDoc_Dump(self, mstream)

    def GetRootShape(self, mshape, num=1):
        r"""GetRootShape(ChCascadeDoc self, TopoDS_Shape & mshape, int const num=1) -> bool"""
        return _cascade.ChCascadeDoc_GetRootShape(self, mshape, num)

    def GetNamedShape(self, mshape, name, set_location_to_root=True, get_multiple=False):
        r"""GetNamedShape(ChCascadeDoc self, TopoDS_Shape & mshape, char * name, bool set_location_to_root=True, bool get_multiple=False) -> bool"""
        return _cascade.ChCascadeDoc_GetNamedShape(self, mshape, name, set_location_to_root, get_multiple)

    @staticmethod
    def GetVolumeProperties(mshape, density, center_position, inertiaXX, inertiaXY, volume, mass):
        r"""GetVolumeProperties(TopoDS_Shape const & mshape, double const density, ChVectorD center_position, ChVectorD inertiaXX, ChVectorD inertiaXY, double & volume, double & mass) -> bool"""
        return _cascade.ChCascadeDoc_GetVolumeProperties(mshape, density, center_position, inertiaXX, inertiaXY, volume, mass)

    def ScanCascadeShapes(self, mcallback):
        r"""ScanCascadeShapes(ChCascadeDoc self, chrono::cascade::ChCascadeDoc::callback_CascadeDoc & mcallback)"""
        return _cascade.ChCascadeDoc_ScanCascadeShapes(self, mcallback)

    @staticmethod
    def FromCascadeToChrono(from_coord, to_coord):
        r"""FromCascadeToChrono(TopLoc_Location const & from_coord, ChFrameD to_coord)"""
        return _cascade.ChCascadeDoc_FromCascadeToChrono(from_coord, to_coord)

    @staticmethod
    def FromChronoToCascade(from_coord, to_coord):
        r"""FromChronoToCascade(ChFrameD from_coord, TopLoc_Location & to_coord)"""
        return _cascade.ChCascadeDoc_FromChronoToCascade(from_coord, to_coord)

    @staticmethod
    def CreateBodyFromShape(mshape, density, collide=False, visual_asset=True):
        r"""CreateBodyFromShape(TopoDS_Shape const & mshape, double const density, bool const collide=False, bool const visual_asset=True) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
        return _cascade.ChCascadeDoc_CreateBodyFromShape(mshape, density, collide, visual_asset)

# Register ChCascadeDoc in _cascade:
_cascade.ChCascadeDoc_swigregister(ChCascadeDoc)

def ChCascadeDoc_GetVolumeProperties(mshape, density, center_position, inertiaXX, inertiaXY, volume, mass):
    r"""ChCascadeDoc_GetVolumeProperties(TopoDS_Shape const & mshape, double const density, ChVectorD center_position, ChVectorD inertiaXX, ChVectorD inertiaXY, double & volume, double & mass) -> bool"""
    return _cascade.ChCascadeDoc_GetVolumeProperties(mshape, density, center_position, inertiaXX, inertiaXY, volume, mass)

def ChCascadeDoc_FromCascadeToChrono(from_coord, to_coord):
    r"""ChCascadeDoc_FromCascadeToChrono(TopLoc_Location const & from_coord, ChFrameD to_coord)"""
    return _cascade.ChCascadeDoc_FromCascadeToChrono(from_coord, to_coord)

def ChCascadeDoc_FromChronoToCascade(from_coord, to_coord):
    r"""ChCascadeDoc_FromChronoToCascade(ChFrameD from_coord, TopLoc_Location & to_coord)"""
    return _cascade.ChCascadeDoc_FromChronoToCascade(from_coord, to_coord)

def ChCascadeDoc_CreateBodyFromShape(mshape, density, collide=False, visual_asset=True):
    r"""ChCascadeDoc_CreateBodyFromShape(TopoDS_Shape const & mshape, double const density, bool const collide=False, bool const visual_asset=True) -> std::shared_ptr< chrono::ChBodyAuxRef >"""
    return _cascade.ChCascadeDoc_CreateBodyFromShape(mshape, density, collide, visual_asset)



